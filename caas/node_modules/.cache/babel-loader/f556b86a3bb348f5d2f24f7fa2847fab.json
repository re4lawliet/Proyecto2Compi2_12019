{"ast":null,"code":"var vm = require('vm');\n\nvar fs = require('fs');\n\nvar path = require('path');\n\nvar tsc = path.join(path.dirname(require.resolve(\"typescript\")), \"tsc.js\");\nvar tscScript = vm.createScript(fs.readFileSync(tsc, \"utf8\"), tsc);\nvar libPath = path.join(path.dirname(require.resolve(\"typescript\")), \"lib.d.ts\");\nvar options = {\n  nodeLib: false,\n  targetES5: true,\n  moduleKind: 'commonjs',\n  emitOnError: false,\n  exitOnError: true,\n  tmpDir: path.join(process.cwd(), 'tmp')\n};\n\nmodule.exports = function (opts) {\n  options = merge(options, opts);\n};\n\nrequire.extensions['.ts'] = function (module) {\n  var jsname = compileTS(module);\n  runJS(jsname, module);\n};\n\nfunction isModified(tsname, jsname) {\n  var tsMTime = fs.statSync(tsname).mtime;\n  var jsMTime = 0;\n\n  try {\n    jsMTime = fs.statSync(jsname).mtime;\n  } catch (e) {//catch if file does not exists\n  }\n\n  return tsMTime > jsMTime;\n}\n/**\n * Compiles TypeScript file, returns js file path\n * @return {string} js file path\n */\n\n\nfunction compileTS(module) {\n  var exitCode = 0;\n  var tmpDir = path.join(options.tmpDir, \"tsreq\");\n  var relativeFolder = path.dirname(path.relative(process.cwd(), module.filename));\n  var jsname = path.join(tmpDir, relativeFolder, path.basename(module.filename, \".ts\") + \".js\");\n\n  if (!isModified(module.filename, jsname)) {\n    return jsname;\n  }\n\n  var argv = [\"node\", \"tsc.js\", !!options.emitOnError ? \"\" : \"--noEmitOnError\", \"--nolib\", \"--rootDir\", process.cwd(), \"--target\", options.targetES5 ? \"ES5\" : \"ES3\", !!options.moduleKind ? \"--module\" : \"\", !!options.moduleKind ? options.moduleKind : \"\", \"--outDir\", tmpDir, libPath, options.nodeLib ? path.resolve(__dirname, \"typings/node.d.ts\") : null, module.filename];\n  var proc = merge(merge({}, process), {\n    argv: compact(argv),\n    exit: function exit(code) {\n      if (code !== 0 && options.exitOnError) {\n        console.error('Fatal Error. Unable to compile TypeScript file. Exiting.');\n        process.exit(code);\n      }\n\n      exitCode = code;\n    }\n  });\n  var sandbox = {\n    process: proc,\n    require: require,\n    module: module,\n    Buffer: Buffer,\n    setTimeout: setTimeout,\n    clearTimeout: clearTimeout,\n    __filename: tsc\n  };\n  tscScript.runInNewContext(sandbox);\n\n  if (exitCode !== 0) {\n    throw new Error('Unable to compile TypeScript file.');\n  }\n\n  return jsname;\n}\n\nfunction runJS(jsname, module) {\n  var content = fs.readFileSync(jsname, 'utf8');\n  var sandbox = {};\n\n  for (var k in global) {\n    sandbox[k] = global[k];\n  }\n\n  sandbox.require = module.require.bind(module);\n  sandbox.exports = module.exports;\n  sandbox.__filename = jsname;\n  sandbox.__dirname = path.dirname(module.filename);\n  sandbox.module = module;\n  sandbox.global = sandbox;\n  sandbox.root = root;\n  return vm.runInNewContext(content, sandbox, {\n    filename: jsname\n  });\n}\n\nfunction merge(a, b) {\n  if (a && b) {\n    for (var key in b) {\n      a[key] = b[key];\n    }\n  }\n\n  return a;\n}\n\nfunction compact(arr) {\n  var narr = [];\n  arr.forEach(function (data) {\n    if (data) narr.push(data);\n  });\n  return narr;\n}","map":null,"metadata":{},"sourceType":"script"}