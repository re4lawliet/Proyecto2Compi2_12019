{"ast":null,"code":"\"use strict\";\n\nvar WeakMap = require(\"../weak-map\"),\n    Map = require(\"../_map\"),\n    ChangeDescriptor = require(\"./change-descriptor\"),\n    ObjectChangeDescriptor = ChangeDescriptor.ObjectChangeDescriptor,\n    ChangeListenersRecord = ChangeDescriptor.ChangeListenersRecord,\n    ListenerGhost = ChangeDescriptor.ListenerGhost;\n\nmodule.exports = MapChanges;\n\nfunction MapChanges() {\n  throw new Error(\"Can't construct. MapChanges is a mixin.\");\n}\n\nvar object_owns = Object.prototype.hasOwnProperty;\n/*\n    Object map change descriptors carry information necessary for adding,\n    removing, dispatching, and shorting events to listeners for map changes\n    for a particular key on a particular object.  These descriptors are used\n    here for shallow map changes.\n\n    {\n        willChangeListeners:Array(Fgunction)\n        changeListeners:Array(Function)\n    }\n*/\n\nvar mapChangeDescriptors = new WeakMap();\n\nfunction MapChangeDescriptor(name) {\n  this.name = name;\n  this.isActive = false;\n  this._willChangeListeners = null;\n  this._changeListeners = null;\n}\n\n;\nMapChangeDescriptor.prototype = new ObjectChangeDescriptor();\nMapChangeDescriptor.prototype.constructor = MapChangeDescriptor;\nMapChangeDescriptor.prototype.changeListenersRecordConstructor = MapChangeListenersRecord;\nMapChangeDescriptor.prototype.willChangeListenersRecordConstructor = MapWillChangeListenersRecord;\nvar MapChangeListenersSpecificHandlerMethodName = new Map();\n\nfunction MapChangeListenersRecord(name) {\n  var specificHandlerMethodName = MapChangeListenersSpecificHandlerMethodName.get(name);\n\n  if (!specificHandlerMethodName) {\n    specificHandlerMethodName = \"handle\";\n    specificHandlerMethodName += name.slice(0, 1).toUpperCase();\n    specificHandlerMethodName += name.slice(1);\n    specificHandlerMethodName += \"MapChange\";\n    MapChangeListenersSpecificHandlerMethodName.set(name, specificHandlerMethodName);\n  }\n\n  this.specificHandlerMethodName = specificHandlerMethodName;\n  return this;\n}\n\nMapChangeListenersRecord.prototype = new ChangeListenersRecord();\nMapChangeListenersRecord.prototype.constructor = MapChangeListenersRecord;\nMapChangeListenersRecord.prototype.genericHandlerMethodName = \"handleMapChange\";\nvar MapWillChangeListenersSpecificHandlerMethodName = new Map();\n\nfunction MapWillChangeListenersRecord(name) {\n  var specificHandlerMethodName = MapWillChangeListenersSpecificHandlerMethodName.get(name);\n\n  if (!specificHandlerMethodName) {\n    specificHandlerMethodName = \"handle\";\n    specificHandlerMethodName += name.slice(0, 1).toUpperCase();\n    specificHandlerMethodName += name.slice(1);\n    specificHandlerMethodName += \"MapWillChange\";\n    MapWillChangeListenersSpecificHandlerMethodName.set(name, specificHandlerMethodName);\n  }\n\n  this.specificHandlerMethodName = specificHandlerMethodName;\n  return this;\n}\n\nMapWillChangeListenersRecord.prototype = new ChangeListenersRecord();\nMapWillChangeListenersRecord.prototype.constructor = MapWillChangeListenersRecord;\nMapWillChangeListenersRecord.prototype.genericHandlerMethodName = \"handleMapWillChange\";\n\nMapChanges.prototype.getAllMapChangeDescriptors = function () {\n  if (!mapChangeDescriptors.has(this)) {\n    mapChangeDescriptors.set(this, new Map());\n  }\n\n  return mapChangeDescriptors.get(this);\n};\n\nMapChanges.prototype.getMapChangeDescriptor = function (token) {\n  var tokenChangeDescriptors = this.getAllMapChangeDescriptors();\n  token = token || \"\";\n\n  if (!tokenChangeDescriptors.has(token)) {\n    tokenChangeDescriptors.set(token, new MapChangeDescriptor(token));\n  }\n\n  return tokenChangeDescriptors.get(token);\n};\n\nvar ObjectsDispatchesMapChanges = new WeakMap(),\n    dispatchesMapChangesGetter = function dispatchesMapChangesGetter() {\n  return ObjectsDispatchesMapChanges.get(this);\n},\n    dispatchesMapChangesSetter = function dispatchesMapChangesSetter(value) {\n  return ObjectsDispatchesMapChanges.set(this, value);\n},\n    dispatchesChangesMethodName = \"dispatchesMapChanges\",\n    dispatchesChangesPropertyDescriptor = {\n  get: dispatchesMapChangesGetter,\n  set: dispatchesMapChangesSetter,\n  configurable: true,\n  enumerable: false\n};\n\nMapChanges.prototype.addMapChangeListener = function addMapChangeListener(listener, token, beforeChange) {\n  //console.log(\"this:\",this,\" addMapChangeListener(\",listener,\",\",token,\",\",beforeChange);\n  if (!this.isObservable && this.makeObservable) {\n    // for Array\n    this.makeObservable();\n  }\n\n  var descriptor = this.getMapChangeDescriptor(token);\n  var listeners;\n\n  if (beforeChange) {\n    listeners = descriptor.willChangeListeners;\n  } else {\n    listeners = descriptor.changeListeners;\n  } // console.log(\"addMapChangeListener()\",listener, token);\n  //console.log(\"this:\",this,\" addMapChangeListener()  listeners._current is \",listeners._current);\n\n\n  if (!listeners._current) {\n    listeners._current = listener;\n  } else if (!Array.isArray(listeners._current)) {\n    listeners._current = [listeners._current, listener];\n  } else {\n    listeners._current.push(listener);\n  }\n\n  if (Object.getOwnPropertyDescriptor(this.__proto__ || Object.getPrototypeOf(this), dispatchesChangesMethodName) === void 0) {\n    Object.defineProperty(this.__proto__ || Object.getPrototypeOf(this), dispatchesChangesMethodName, dispatchesChangesPropertyDescriptor);\n  }\n\n  this.dispatchesMapChanges = true;\n  var self = this;\n  return function cancelMapChangeListener() {\n    if (!self) {\n      // TODO throw new Error(\"Can't remove map change listener again\");\n      return;\n    }\n\n    self.removeMapChangeListener(listener, token, beforeChange);\n    self = null;\n  };\n};\n\nMapChanges.prototype.removeMapChangeListener = function (listener, token, beforeChange) {\n  var descriptor = this.getMapChangeDescriptor(token);\n  var listeners;\n\n  if (beforeChange) {\n    listeners = descriptor.willChangeListeners;\n  } else {\n    listeners = descriptor.changeListeners;\n  }\n\n  if (listeners._current) {\n    if (listeners._current === listener) {\n      listeners._current = null;\n    } else {\n      var index = listeners._current.lastIndexOf(listener);\n\n      if (index === -1) {\n        throw new Error(\"Can't remove map change listener: does not exist: token \" + JSON.stringify(token));\n      } else {\n        if (descriptor.isActive) {\n          listeners.ghostCount = listeners.ghostCount + 1;\n          listeners._current[index] = ListenerGhost;\n        } else {\n          listeners._current.spliceOne(index);\n        }\n      }\n    }\n  }\n};\n\nMapChanges.prototype.dispatchMapChange = function (key, value, beforeChange) {\n  var descriptors = this.getAllMapChangeDescriptors(),\n      Ghost = ListenerGhost;\n  descriptors.forEach(function (descriptor, token) {\n    if (descriptor.isActive) {\n      return;\n    }\n\n    var listeners = beforeChange ? descriptor.willChangeListeners : descriptor.changeListeners;\n\n    if (listeners && listeners._current) {\n      var tokenName = listeners.specificHandlerMethodName;\n\n      if (Array.isArray(listeners._current)) {\n        if (listeners._current.length) {\n          //removeGostListenersIfNeeded returns listeners.current or a new filtered one when conditions are met\n          var currentListeners = listeners.removeCurrentGostListenersIfNeeded(),\n              i,\n              countI,\n              listener;\n          descriptor.isActive = true;\n\n          try {\n            for (i = 0, countI = currentListeners.length; i < countI; i++) {\n              // dispatch to each listener\n              if ((listener = currentListeners[i]) !== Ghost) {\n                if (listener[tokenName]) {\n                  listener[tokenName](value, key, this);\n                } else if (listener.call) {\n                  listener.call(listener, value, key, this);\n                } else {\n                  throw new Error(\"Handler \" + listener + \" has no method \" + tokenName + \" and is not callable\");\n                }\n              }\n            }\n          } finally {\n            descriptor.isActive = false;\n          }\n        }\n      } else {\n        descriptor.isActive = true; // dispatch each listener\n\n        try {\n          listener = listeners._current;\n\n          if (listener[tokenName]) {\n            listener[tokenName](value, key, this);\n          } else if (listener.call) {\n            listener.call(listener, value, key, this);\n          } else {\n            throw new Error(\"Handler \" + listener + \" has no method \" + tokenName + \" and is not callable\");\n          }\n        } finally {\n          descriptor.isActive = false;\n        }\n      }\n    }\n  }, this);\n};\n\nMapChanges.prototype.addBeforeMapChangeListener = function (listener, token) {\n  return this.addMapChangeListener(listener, token, true);\n};\n\nMapChanges.prototype.removeBeforeMapChangeListener = function (listener, token) {\n  return this.removeMapChangeListener(listener, token, true);\n};\n\nMapChanges.prototype.dispatchBeforeMapChange = function (key, value) {\n  return this.dispatchMapChange(key, value, true);\n};","map":null,"metadata":{},"sourceType":"script"}