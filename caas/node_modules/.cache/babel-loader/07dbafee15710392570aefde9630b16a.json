{"ast":null,"code":"/* parser generated by jison 0.4.18 */\n\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar LexicoC3D = function () {\n  var o = function o(k, v, _o, l) {\n    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {\n      ;\n    }\n\n    return _o;\n  },\n      $V0 = [1, 4];\n\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"S\": 3,\n      \"LISTFUNCTIONS\": 4,\n      \"EOF\": 5,\n      \"FUNCTION\": 6,\n      \"void_\": 7,\n      \"ID\": 8,\n      \"leftPar\": 9,\n      \"rightPar\": 10,\n      \"leftKey\": 11,\n      \"rightKey\": 12,\n      \"Identificador\": 13,\n      \"SENTENCES\": 14,\n      \"SENTENCE\": 15,\n      \"ASIGNATION\": 16,\n      \"dotcomma\": 17,\n      \"GOTO\": 18,\n      \"CONDITION\": 19,\n      \"LABEL\": 20,\n      \"Points\": 21,\n      \"CALLMETOD\": 22,\n      \"PRINTMETOD\": 23,\n      \"call_\": 24,\n      \"STRUCT\": 25,\n      \"igual\": 26,\n      \"E\": 27,\n      \"POINTERS\": 28,\n      \"Heap_Pointer\": 29,\n      \"Stack_Pointer\": 30,\n      \"Temporal_\": 31,\n      \"goto_\": 32,\n      \"Label_\": 33,\n      \"IF_\": 34,\n      \"SINGCONDITIONAL\": 35,\n      \"Heap_\": 36,\n      \"leftCor\": 37,\n      \"TEMP\": 38,\n      \"rightCor\": 39,\n      \"Stack_\": 40,\n      \"F\": 41,\n      \"SING\": 42,\n      \"Numero\": 43,\n      \"mas\": 44,\n      \"menos\": 45,\n      \"por\": 46,\n      \"divs\": 47,\n      \"mod\": 48,\n      \"igualigual\": 49,\n      \"diferente\": 50,\n      \"mayorigual\": 51,\n      \"menorigual\": 52,\n      \"menor\": 53,\n      \"mayor\": 54,\n      \"printf_\": 55,\n      \"coma\": 56,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      5: \"EOF\",\n      7: \"void_\",\n      9: \"leftPar\",\n      10: \"rightPar\",\n      11: \"leftKey\",\n      12: \"rightKey\",\n      13: \"Identificador\",\n      17: \"dotcomma\",\n      21: \"Points\",\n      24: \"call_\",\n      26: \"igual\",\n      29: \"Heap_Pointer\",\n      30: \"Stack_Pointer\",\n      31: \"Temporal_\",\n      32: \"goto_\",\n      33: \"Label_\",\n      34: \"IF_\",\n      36: \"Heap_\",\n      37: \"leftCor\",\n      39: \"rightCor\",\n      40: \"Stack_\",\n      43: \"Numero\",\n      44: \"mas\",\n      45: \"menos\",\n      46: \"por\",\n      47: \"divs\",\n      48: \"mod\",\n      49: \"igualigual\",\n      50: \"diferente\",\n      51: \"mayorigual\",\n      52: \"menorigual\",\n      53: \"menor\",\n      54: \"mayor\",\n      55: \"printf_\",\n      56: \"coma\"\n    },\n    productions_: [0, [3, 2], [4, 2], [4, 1], [6, 6], [8, 1], [14, 2], [14, 1], [15, 2], [15, 1], [15, 1], [15, 2], [15, 2], [15, 2], [22, 4], [16, 3], [16, 3], [28, 1], [28, 1], [28, 1], [18, 3], [20, 1], [19, 7], [25, 4], [25, 4], [38, 1], [27, 3], [27, 1], [41, 1], [41, 1], [41, 1], [41, 1], [41, 1], [42, 1], [42, 1], [42, 1], [42, 1], [42, 1], [35, 1], [35, 1], [35, 1], [35, 1], [35, 1], [35, 1], [23, 7]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n    /* action[1] */\n    , $$\n    /* vstack */\n    , _$\n    /* lstack */\n    ) {\n      /* this == yyval */\n      var $0 = $$.length - 1;\n\n      switch (yystate) {\n        case 1:\n          var tmp = new Nodo(\"START\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 1]);\n          raizArbol = tmp;\n          return raizArbol;\n          break;\n\n        case 2:\n          var tmp = new Nodo(\"LISTFUNCTIONS\", \"noterminal\", yylineno, 0, countNodo);\n          tmp.addHijo($$[$0 - 1]);\n          tmp.addHijo($$[$0]);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 3:\n          var tmp = new Nodo(\"LISTFUNCTIONS\", \"noterminal\", yylineno, 0, countNodo);\n          tmp.addHijo($$[$0]);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 4:\n          var tmp = new Nodo(\"FUNCTION\", \"noterminal\", yylineno, 0, countNodo);\n          tmp.addHijo($$[$0 - 4]);\n          tmp.addHijo($$[$0]);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 5:\n          var tmp = new Nodo(\"ID\", $$[$0].replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 6:\n          var tmp = new Nodo(\"SENTENCES\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 1]);\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 7:\n          var tmp = new Nodo(\"SENTENCES\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 8:\n        case 12:\n        case 13:\n          var tmp = new Nodo(\"SENTENCE\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 1]);\n          this.$ = tmp;\n          break;\n\n        case 9:\n        case 10:\n          var tmp = new Nodo(\"SENTENCE\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 11:\n          var tmp = new Nodo(\"LABEL\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 1]);\n          this.$ = tmp;\n          break;\n\n        case 14:\n          var tmp = new Nodo(\"CALLMETOD\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 2]);\n          this.$ = tmp;\n          break;\n\n        case 15:\n          var tmp = new Nodo(\"ASIGNATION\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 2]);\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 16:\n          var tmp = new Nodo(\"ASIGNATION\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 2]);\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 17:\n          var tmp = new Nodo(\"POINTERS\", \"h\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 18:\n          var tmp = new Nodo(\"POINTERS\", \"p\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 19:\n          var tmp = new Nodo(\"POINTERS\", $$[$0].replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 20:\n          var tmp = new Nodo(\"GOTO\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 1]);\n          this.$ = tmp;\n          break;\n\n        case 21:\n          var tmp = new Nodo(\"LABEL\", $$[$0].replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 22:\n          var tmp = new Nodo(\"CONDITION\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 4]);\n          tmp.addHijo($$[$0 - 3]);\n          tmp.addHijo($$[$0 - 2]);\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 23:\n          var tmp = new Nodo(\"STRUCT\", \"Heap\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 1]);\n          this.$ = tmp;\n          break;\n\n        case 24:\n          var tmp = new Nodo(\"STRUCT\", \"Stack\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 1]);\n          this.$ = tmp;\n          break;\n\n        case 25:\n          var tmp = new Nodo(\"F\", $$[$0].replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 26:\n          var tmp = new Nodo(\"E\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.NodoC1(\"E\", \"noterminal\", yylineno, 0, countNodo, \"0\");\n          tmp.addHijo($$[$0 - 2]);\n          tmp.addHijo($$[$0 - 1]);\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 27:\n          var tmp = new Nodo(\"E\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.NodoC1(\"E\", \"noterminal\", yylineno, 0, countNodo, \"1\");\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 28:\n          var tmp = new Nodo(\"STRUCT\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 29:\n          var tmp = new Nodo(\"F\", $$[$0].replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          tmp.tipoDato = \"0\";\n          this.$ = tmp;\n          break;\n\n        case 30:\n          var tmp = new Nodo(\"F\", $$[$0].replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          tmp.tipoDato = \"1\";\n          this.$ = tmp;\n          break;\n\n        case 31:\n          var tmp = new Nodo(\"F\", \"h\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.tipoDato = \"2\";\n          this.$ = tmp;\n          break;\n\n        case 32:\n          var tmp = new Nodo(\"F\", \"p\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.tipoDato = \"3\";\n          this.$ = tmp;\n          break;\n\n        case 33:\n          var tmp = new Nodo(\"SING\", \"+\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 34:\n          var tmp = new Nodo(\"SING\", \"-\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 35:\n          var tmp = new Nodo(\"SING\", \"*\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 36:\n          var tmp = new Nodo(\"SING\", \"/\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 37:\n          var tmp = new Nodo(\"SING\", \"%\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 38:\n          var tmp = new Nodo(\"SINGCONDITIONAL\", \"==\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 39:\n          var tmp = new Nodo(\"SINGCONDITIONAL\", \"!=\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 40:\n          var tmp = new Nodo(\"SINGCONDITIONAL\", \">=\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 41:\n          var tmp = new Nodo(\"SINGCONDITIONAL\", \"<=\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 42:\n          var tmp = new Nodo(\"SINGCONDITIONAL\", \"<\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 43:\n          var tmp = new Nodo(\"SINGCONDITIONAL\", \">\", yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 44:\n          var tmp = new Nodo(\"PRINTMETOD\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 3]);\n          tmp.addHijo($$[$0 - 1]);\n          this.$ = tmp;\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: 2,\n      6: 3,\n      7: $V0\n    }, {\n      1: [3]\n    }, {\n      5: [1, 5]\n    }, {\n      4: 6,\n      5: [2, 3],\n      6: 3,\n      7: $V0\n    }, {\n      8: 7,\n      13: [1, 8]\n    }, {\n      1: [2, 1]\n    }, {\n      5: [2, 2]\n    }, {\n      9: [1, 9]\n    }, {\n      9: [2, 5]\n    }, {\n      10: [1, 10]\n    }, {\n      11: [1, 11]\n    }, {\n      12: [1, 12]\n    }, o([5, 7], [2, 4])],\n    defaultActions: {\n      5: [2, 1],\n      6: [2, 2],\n      8: [2, 5]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n          stack = [0],\n          tstack = [],\n          vstack = [null],\n          lstack = [],\n          table = this.table,\n          yytext = '',\n          yylineno = 0,\n          yyleng = 0,\n          recovering = 0,\n          TERROR = 2,\n          EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n\n      lexer.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer;\n      sharedState.yy.parser = this;\n\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n      }\n\n      var yyloc = lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer.options && lexer.options.ranges;\n\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      _token_stack: var lex = function lex() {\n        var token;\n        token = lexer.lex() || EOF;\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token;\n      };\n\n      var symbol,\n          preErrorSymbol,\n          state,\n          action,\n          a,\n          r,\n          yyval = {},\n          p,\n          len,\n          newState,\n          expected;\n\n      while (true) {\n        state = stack[stack.length - 1];\n\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex();\n          }\n\n          action = table[state] && table[state][symbol];\n        }\n\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = '';\n          expected = [];\n\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push('\\'' + this.terminals_[p] + '\\'');\n            }\n          }\n\n          if (lexer.showPosition) {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n          } else {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n          }\n\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          });\n        }\n\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng;\n              yytext = lexer.yytext;\n              yylineno = lexer.yylineno;\n              yyloc = lexer.yylloc;\n\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n\n            break;\n\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n            if (typeof r !== 'undefined') {\n              return r;\n            }\n\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3:\n            return true;\n        }\n      }\n\n      return true;\n    }\n  };\n  var countNodo = 0;\n  var raizArbol;\n  exports.__esModule = true;\n\n  require(\"collections/shim-array\");\n\n  require(\"collections/listen/array-changes\");\n\n  var Nodo =\n  /** @class */\n  function () {\n    function Nodo(etq, lex, linea, columna, ide) {\n      this.etiqueta = etq;\n      this.lexema = lex;\n      this.linea = linea;\n      this.columna = columna;\n      this.id = ide;\n      this.hijos = new Array();\n      this.Value = \"\";\n      this.tipoDato = \"\";\n    }\n\n    Nodo.prototype.addHijo = function (nuevo) {\n      this.hijos.push(nuevo);\n    };\n\n    Nodo.prototype.NodoC1 = function (etq, lex, linea, columna, ide, val) {\n      this.etiqueta = etq;\n      this.lexema = lex;\n      this.linea = linea;\n      this.columna = columna;\n      this.id = ide;\n      this.Value = val;\n      this.hijos = new Array();\n    };\n\n    return Nodo;\n  }();\n\n  exports.Nodo = Nodo;\n  /* generated by jison-lex 0.3.4 */\n\n  var lexer = function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function setInput(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function input() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function unput(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function more() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function reject() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n\n        return this;\n      },\n      // retain first n characters of the match\n      less: function less(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function pastInput() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function upcomingInput() {\n        var next = this.match;\n\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function showPosition() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function test_match(match, indexed_rule) {\n        var token, lines, backup;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n\n        return false;\n      },\n      // return next match in input\n      next: function next() {\n        if (this.done) {\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.yytext = '';\n          this.match = '';\n        }\n\n        var rules = this._currentRules();\n\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue; // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rules[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {},\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            return 51;\n            break;\n\n          case 1:\n            return 52;\n            break;\n\n          case 2:\n            return 50;\n            break;\n\n          case 3:\n            return 30;\n            break;\n\n          case 4:\n            return 29;\n            break;\n\n          case 5:\n            return 32;\n            break;\n\n          case 6:\n            return 40;\n            break;\n\n          case 7:\n            return 36;\n            break;\n\n          case 8:\n            return 7;\n            break;\n\n          case 9:\n            return 34;\n            break;\n\n          case 10:\n            return 55;\n            break;\n\n          case 11:\n            return 24;\n            break;\n\n          case 12:\n            return 11;\n            break;\n\n          case 13:\n            return 12;\n            break;\n\n          case 14:\n            return 9;\n            break;\n\n          case 15:\n            return 10;\n            break;\n\n          case 16:\n            return 21;\n            break;\n\n          case 17:\n            return 37;\n            break;\n\n          case 18:\n            return 39;\n            break;\n\n          case 19:\n            return 17;\n            break;\n\n          case 20:\n            return 26;\n            break;\n\n          case 21:\n            return 44;\n            break;\n\n          case 22:\n            return 45;\n            break;\n\n          case 23:\n            return 46;\n            break;\n\n          case 24:\n            return 47;\n            break;\n\n          case 25:\n            return 48;\n            break;\n\n          case 26:\n            return 48;\n            break;\n\n          case 27:\n            return 56;\n            break;\n\n          case 28:\n            return 54;\n            break;\n\n          case 29:\n            return 53;\n            break;\n\n          case 30:\n            return 49;\n            break;\n\n          case 31:\n            return 43;\n            break;\n\n          case 32:\n            return 13;\n            break;\n\n          case 33:\n            return 'Etiqueta';\n            break;\n\n          case 34:\n            return 'Temporal';\n            break;\n\n          case 35:\n            /* skip whitespace */\n            break;\n\n          case 36:\n            return 5;\n            break;\n\n          case 37:\n            return 'INVALID';\n            break;\n        }\n      },\n      rules: [/^(?:>=)/, /^(?:<=)/, /^(?:!=)/, /^(?:P\\b)/, /^(?:h\\b)/, /^(?:goto\\b)/, /^(?:Stack\\b)/, /^(?:Heap\\b)/, /^(?:void\\b)/, /^(?:if\\b)/, /^(?:printf\\b)/, /^(?:call\\b)/, /^(?:\\{)/, /^(?:\\})/, /^(?:\\()/, /^(?:\\))/, /^(?::)/, /^(?:\\[)/, /^(?:\\])/, /^(?:;)/, /^(?:=)/, /^(?:\\+)/, /^(?:-)/, /^(?:\\*)/, /^(?:\\/)/, /^(?:#)/, /^(?:%)/, /^(?:,)/, /^(?:>)/, /^(?:<)/, /^(?:==)/, /^(?:-?[0-9]+(\\.[0-9]+)?\\b)/, /^(?:[a-zA-Z]([0-9A-Za-z]|_)*)/, /^(?:[\"L\"]([0-9]+))/, /^(?:[\"t\"]([0-9]+))/, /^(?:\\s+)/, /^(?:$)/, /^(?:.)/],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = LexicoC3D;\n  exports.Parser = LexicoC3D.Parser;\n\n  exports.parse = function () {\n    return LexicoC3D.parse.apply(LexicoC3D, arguments);\n  };\n\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE');\n      process.exit(1);\n    }\n\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n\n    return exports.parser.parse(source);\n  };\n\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1));\n  }\n}","map":{"version":3,"sources":["/Users/carlosmonterroso/Desktop/Proyecto2Compi2_12019/caas/src/Analizadores/LexicoC3D.js"],"names":["LexicoC3D","o","k","v","l","length","$V0","parser","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","tmp","Nodo","countNodo","addHijo","raizArbol","$","replace","NodoC1","tipoDato","table","defaultActions","parseError","str","hash","recoverable","error","Error","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","getPrototypeOf","popStack","n","_token_stack","lex","token","symbol","preErrorSymbol","state","action","a","r","yyval","p","len","newState","expected","errStr","showPosition","join","text","match","line","loc","Array","first_line","last_line","first_column","last_column","range","apply","concat","exports","__esModule","require","etq","linea","columna","ide","etiqueta","lexema","id","hijos","Value","nuevo","val","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","Parser","main","commonjsMain","console","log","process","exit","source","readFileSync","normalize","module","argv"],"mappings":"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","sourcesContent":["/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar LexicoC3D = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"S\":3,\"LISTFUNCTIONS\":4,\"EOF\":5,\"FUNCTION\":6,\"void_\":7,\"ID\":8,\"leftPar\":9,\"rightPar\":10,\"leftKey\":11,\"rightKey\":12,\"Identificador\":13,\"SENTENCES\":14,\"SENTENCE\":15,\"ASIGNATION\":16,\"dotcomma\":17,\"GOTO\":18,\"CONDITION\":19,\"LABEL\":20,\"Points\":21,\"CALLMETOD\":22,\"PRINTMETOD\":23,\"call_\":24,\"STRUCT\":25,\"igual\":26,\"E\":27,\"POINTERS\":28,\"Heap_Pointer\":29,\"Stack_Pointer\":30,\"Temporal_\":31,\"goto_\":32,\"Label_\":33,\"IF_\":34,\"SINGCONDITIONAL\":35,\"Heap_\":36,\"leftCor\":37,\"TEMP\":38,\"rightCor\":39,\"Stack_\":40,\"F\":41,\"SING\":42,\"Numero\":43,\"mas\":44,\"menos\":45,\"por\":46,\"divs\":47,\"mod\":48,\"igualigual\":49,\"diferente\":50,\"mayorigual\":51,\"menorigual\":52,\"menor\":53,\"mayor\":54,\"printf_\":55,\"coma\":56,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"void_\",9:\"leftPar\",10:\"rightPar\",11:\"leftKey\",12:\"rightKey\",13:\"Identificador\",17:\"dotcomma\",21:\"Points\",24:\"call_\",26:\"igual\",29:\"Heap_Pointer\",30:\"Stack_Pointer\",31:\"Temporal_\",32:\"goto_\",33:\"Label_\",34:\"IF_\",36:\"Heap_\",37:\"leftCor\",39:\"rightCor\",40:\"Stack_\",43:\"Numero\",44:\"mas\",45:\"menos\",46:\"por\",47:\"divs\",48:\"mod\",49:\"igualigual\",50:\"diferente\",51:\"mayorigual\",52:\"menorigual\",53:\"menor\",54:\"mayor\",55:\"printf_\",56:\"coma\"},\nproductions_: [0,[3,2],[4,2],[4,1],[6,6],[8,1],[14,2],[14,1],[15,2],[15,1],[15,1],[15,2],[15,2],[15,2],[22,4],[16,3],[16,3],[28,1],[28,1],[28,1],[18,3],[20,1],[19,7],[25,4],[25,4],[38,1],[27,3],[27,1],[41,1],[41,1],[41,1],[41,1],[41,1],[42,1],[42,1],[42,1],[42,1],[42,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[23,7]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n \n            var tmp = new Nodo(\"START\",\"noterminal\",yylineno,0,countNodo);\n            countNodo++;\n\n            tmp.addHijo($$[$0-1]);\n            raizArbol=tmp;\n            return raizArbol;\n        \nbreak;\ncase 2:\n\n    var tmp = new Nodo(\"LISTFUNCTIONS\",\"noterminal\",yylineno,0,countNodo);\n    tmp.addHijo($$[$0-1]);\n    tmp.addHijo($$[$0]);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 3:\n\n    var tmp = new Nodo(\"LISTFUNCTIONS\",\"noterminal\",yylineno,0,countNodo);\n    tmp.addHijo($$[$0]);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 4:\n\n    var tmp = new Nodo(\"FUNCTION\",\"noterminal\",yylineno,0,countNodo);\n    tmp.addHijo($$[$0-4]);\n    tmp.addHijo($$[$0]);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 5:\n\n    var tmp = new Nodo(\"ID\",$$[$0].replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 6:\n\n    var tmp = new Nodo(\"SENTENCES\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-1]);\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 7:\n  \n    var tmp = new Nodo(\"SENTENCES\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 8: case 12: case 13:\n\n    var tmp = new Nodo(\"SENTENCE\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-1]);\n    this.$ = tmp;\n\nbreak;\ncase 9: case 10:\n\n    var tmp = new Nodo(\"SENTENCE\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 11:\n\n    var tmp = new Nodo(\"LABEL\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-1]);\n    this.$ = tmp;\n\nbreak;\ncase 14:\n\n\n    var tmp = new Nodo(\"CALLMETOD\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-2]);\n    this.$ = tmp;\n\nbreak;\ncase 15:\n\n    var tmp = new Nodo(\"ASIGNATION\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-2]);\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 16:\n\n\n    var tmp = new Nodo(\"ASIGNATION\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-2]);\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 17:\n\n    var tmp = new Nodo(\"POINTERS\",\"h\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 18:\n\n    var tmp = new Nodo(\"POINTERS\",\"p\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 19:\n\n    var tmp = new Nodo(\"POINTERS\",$$[$0].replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 20:\n\n    var tmp = new Nodo(\"GOTO\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-1]);\n    this.$ = tmp;\n\nbreak;\ncase 21:\n\n    var tmp = new Nodo(\"LABEL\",$$[$0].replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 22:\n\n    var tmp = new Nodo(\"CONDITION\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-4]);\n    tmp.addHijo($$[$0-3]);\n    tmp.addHijo($$[$0-2]);\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;    \n\nbreak;\ncase 23:\n\n    var tmp = new Nodo(\"STRUCT\",\"Heap\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-1]);\n    this.$ = tmp;   \n\n\nbreak;\ncase 24:\n\n    var tmp = new Nodo(\"STRUCT\",\"Stack\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-1]);\n    this.$ = tmp;\n\nbreak;\ncase 25:\n\n    var tmp = new Nodo(\"F\",$$[$0].replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 26:\n\n    var tmp = new Nodo(\"E\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.NodoC1(\"E\",\"noterminal\",yylineno,0,countNodo,\"0\");\n    tmp.addHijo($$[$0-2]);\n    tmp.addHijo($$[$0-1]);\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 27:\n\n    var tmp = new Nodo(\"E\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.NodoC1(\"E\",\"noterminal\",yylineno,0,countNodo,\"1\");\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 28:\n\n    var tmp = new Nodo(\"STRUCT\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0]);\n    this.$ = tmp;\n\nbreak;\ncase 29:\n\n    var tmp = new Nodo(\"F\",$$[$0].replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\n    countNodo++;\n    tmp.tipoDato=\"0\";\n    this.$ = tmp;\n\nbreak;\ncase 30:\n\n    var tmp = new Nodo(\"F\",$$[$0].replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\n    countNodo++;\n    tmp.tipoDato=\"1\";\n    this.$ = tmp;\n\nbreak;\ncase 31:\n\n    var tmp = new Nodo(\"F\",\"h\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.tipoDato=\"2\";\n    this.$ = tmp;\n\nbreak;\ncase 32:\n\n    var tmp = new Nodo(\"F\",\"p\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.tipoDato=\"3\";\n    this.$ = tmp;\n\nbreak;\ncase 33:\n\n    var tmp = new Nodo(\"SING\",\"+\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 34:\n\n    var tmp = new Nodo(\"SING\",\"-\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 35:\n\n    var tmp = new Nodo(\"SING\",\"*\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 36:\n\n    var tmp = new Nodo(\"SING\",\"/\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 37:\n\n    var tmp = new Nodo(\"SING\",\"%\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 38:\n\n    var tmp = new Nodo(\"SINGCONDITIONAL\",\"==\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 39:\n\n    var tmp = new Nodo(\"SINGCONDITIONAL\",\"!=\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 40:\n\n    var tmp = new Nodo(\"SINGCONDITIONAL\",\">=\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 41:\n\n    var tmp = new Nodo(\"SINGCONDITIONAL\",\"<=\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 42:\n\n    var tmp = new Nodo(\"SINGCONDITIONAL\",\"<\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 43:\n\n    var tmp = new Nodo(\"SINGCONDITIONAL\",\">\",yylineno,0,countNodo);\n    countNodo++;\n    this.$ = tmp;\n\nbreak;\ncase 44:\n\n    var tmp = new Nodo(\"PRINTMETOD\",\"noterminal\",yylineno,0,countNodo);\n    countNodo++;\n    tmp.addHijo($$[$0-3]);\n    tmp.addHijo($$[$0-1]);\n    this.$ = tmp;\n\nbreak;\n}\n},\ntable: [{3:1,4:2,6:3,7:$V0},{1:[3]},{5:[1,5]},{4:6,5:[2,3],6:3,7:$V0},{8:7,13:[1,8]},{1:[2,1]},{5:[2,2]},{9:[1,9]},{9:[2,5]},{10:[1,10]},{11:[1,11]},{12:[1,12]},o([5,7],[2,4])],\ndefaultActions: {5:[2,1],6:[2,2],8:[2,5]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\n    var countNodo=0;\n    var raizArbol;\n  \n\nexports.__esModule = true;\nrequire(\"collections/shim-array\");\nrequire(\"collections/listen/array-changes\");\nvar Nodo = /** @class */ (function () {\n    function Nodo(etq, lex, linea, columna, ide) {\n        this.etiqueta = etq;\n        this.lexema = lex;\n        this.linea = linea;\n        this.columna = columna;\n        this.id = ide;\n        this.hijos = new Array();\n        this.Value = \"\";\n        this.tipoDato = \"\";\n    }\n    Nodo.prototype.addHijo = function (nuevo) {\n        this.hijos.push(nuevo);\n    };\n    Nodo.prototype.NodoC1 = function (etq, lex, linea, columna, ide, val) {\n        this.etiqueta = etq;\n        this.lexema = lex;\n        this.linea = linea;\n        this.columna = columna;\n        this.id = ide;\n        this.Value = val;\n        this.hijos = new Array();\n    };\n    return Nodo;\n}());\nexports.Nodo = Nodo;\n\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:return 51\nbreak;\ncase 1:return 52\nbreak;\ncase 2:return 50\nbreak;\ncase 3:return 30\nbreak;\ncase 4:return 29\nbreak;\ncase 5:return 32\nbreak;\ncase 6:return 40\nbreak;\ncase 7:return 36\nbreak;\ncase 8:return 7\nbreak;\ncase 9:return 34\nbreak;\ncase 10:return 55\nbreak;\ncase 11:return 24\nbreak;\ncase 12:return 11\nbreak;\ncase 13:return 12\nbreak;\ncase 14:return 9\nbreak;\ncase 15:return 10\nbreak;\ncase 16:return 21\nbreak;\ncase 17:return 37\nbreak;\ncase 18:return 39\nbreak;\ncase 19:return 17\nbreak;\ncase 20:return 26\nbreak;\ncase 21:return 44\nbreak;\ncase 22:return 45\nbreak;\ncase 23:return 46\nbreak;\ncase 24:return 47\nbreak;\ncase 25:return 48\nbreak;\ncase 26:return 48\nbreak;\ncase 27:return 56\nbreak;\ncase 28:return 54\nbreak;\ncase 29:return 53\nbreak;\ncase 30:return 49\nbreak;\ncase 31:return 43\nbreak;\ncase 32:return 13\nbreak;\ncase 33:return 'Etiqueta'\nbreak;\ncase 34:return 'Temporal'\nbreak;\ncase 35:/* skip whitespace */\nbreak;\ncase 36:return 5\nbreak;\ncase 37:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:P\\b)/,/^(?:h\\b)/,/^(?:goto\\b)/,/^(?:Stack\\b)/,/^(?:Heap\\b)/,/^(?:void\\b)/,/^(?:if\\b)/,/^(?:printf\\b)/,/^(?:call\\b)/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\()/,/^(?:\\))/,/^(?::)/,/^(?:\\[)/,/^(?:\\])/,/^(?:;)/,/^(?:=)/,/^(?:\\+)/,/^(?:-)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:#)/,/^(?:%)/,/^(?:,)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:-?[0-9]+(\\.[0-9]+)?\\b)/,/^(?:[a-zA-Z]([0-9A-Za-z]|_)*)/,/^(?:[\"L\"]([0-9]+))/,/^(?:[\"t\"]([0-9]+))/,/^(?:\\s+)/,/^(?:$)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = LexicoC3D;\nexports.Parser = LexicoC3D.Parser;\nexports.parse = function () { return LexicoC3D.parse.apply(LexicoC3D, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}"]},"metadata":{},"sourceType":"module"}