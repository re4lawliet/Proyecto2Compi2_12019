{"ast":null,"code":"/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved. \r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0  \r\n \r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE, \r\nMERCHANTABLITY OR NON-INFRINGEMENT. \r\n \r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) {\n    if (b.hasOwnProperty(p)) d[p] = b[p];\n  }\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ts;\n\n(function (ts) {\n  // token > SyntaxKind.Identifer => token is a keyword\n  // Also, If you add a new SyntaxKind be sure to keep the `Markers` section at the bottom in sync\n  (function (SyntaxKind) {\n    SyntaxKind[SyntaxKind[\"Unknown\"] = 0] = \"Unknown\";\n    SyntaxKind[SyntaxKind[\"EndOfFileToken\"] = 1] = \"EndOfFileToken\";\n    SyntaxKind[SyntaxKind[\"SingleLineCommentTrivia\"] = 2] = \"SingleLineCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"MultiLineCommentTrivia\"] = 3] = \"MultiLineCommentTrivia\";\n    SyntaxKind[SyntaxKind[\"NewLineTrivia\"] = 4] = \"NewLineTrivia\";\n    SyntaxKind[SyntaxKind[\"WhitespaceTrivia\"] = 5] = \"WhitespaceTrivia\"; // We detect and preserve #! on the first line\n\n    SyntaxKind[SyntaxKind[\"ShebangTrivia\"] = 6] = \"ShebangTrivia\"; // We detect and provide better error recovery when we encounter a git merge marker.  This\n    // allows us to edit files with git-conflict markers in them in a much more pleasant manner.\n\n    SyntaxKind[SyntaxKind[\"ConflictMarkerTrivia\"] = 7] = \"ConflictMarkerTrivia\"; // Literals\n\n    SyntaxKind[SyntaxKind[\"NumericLiteral\"] = 8] = \"NumericLiteral\";\n    SyntaxKind[SyntaxKind[\"StringLiteral\"] = 9] = \"StringLiteral\";\n    SyntaxKind[SyntaxKind[\"RegularExpressionLiteral\"] = 10] = \"RegularExpressionLiteral\";\n    SyntaxKind[SyntaxKind[\"NoSubstitutionTemplateLiteral\"] = 11] = \"NoSubstitutionTemplateLiteral\"; // Pseudo-literals\n\n    SyntaxKind[SyntaxKind[\"TemplateHead\"] = 12] = \"TemplateHead\";\n    SyntaxKind[SyntaxKind[\"TemplateMiddle\"] = 13] = \"TemplateMiddle\";\n    SyntaxKind[SyntaxKind[\"TemplateTail\"] = 14] = \"TemplateTail\"; // Punctuation\n\n    SyntaxKind[SyntaxKind[\"OpenBraceToken\"] = 15] = \"OpenBraceToken\";\n    SyntaxKind[SyntaxKind[\"CloseBraceToken\"] = 16] = \"CloseBraceToken\";\n    SyntaxKind[SyntaxKind[\"OpenParenToken\"] = 17] = \"OpenParenToken\";\n    SyntaxKind[SyntaxKind[\"CloseParenToken\"] = 18] = \"CloseParenToken\";\n    SyntaxKind[SyntaxKind[\"OpenBracketToken\"] = 19] = \"OpenBracketToken\";\n    SyntaxKind[SyntaxKind[\"CloseBracketToken\"] = 20] = \"CloseBracketToken\";\n    SyntaxKind[SyntaxKind[\"DotToken\"] = 21] = \"DotToken\";\n    SyntaxKind[SyntaxKind[\"DotDotDotToken\"] = 22] = \"DotDotDotToken\";\n    SyntaxKind[SyntaxKind[\"SemicolonToken\"] = 23] = \"SemicolonToken\";\n    SyntaxKind[SyntaxKind[\"CommaToken\"] = 24] = \"CommaToken\";\n    SyntaxKind[SyntaxKind[\"LessThanToken\"] = 25] = \"LessThanToken\";\n    SyntaxKind[SyntaxKind[\"LessThanSlashToken\"] = 26] = \"LessThanSlashToken\";\n    SyntaxKind[SyntaxKind[\"GreaterThanToken\"] = 27] = \"GreaterThanToken\";\n    SyntaxKind[SyntaxKind[\"LessThanEqualsToken\"] = 28] = \"LessThanEqualsToken\";\n    SyntaxKind[SyntaxKind[\"GreaterThanEqualsToken\"] = 29] = \"GreaterThanEqualsToken\";\n    SyntaxKind[SyntaxKind[\"EqualsEqualsToken\"] = 30] = \"EqualsEqualsToken\";\n    SyntaxKind[SyntaxKind[\"ExclamationEqualsToken\"] = 31] = \"ExclamationEqualsToken\";\n    SyntaxKind[SyntaxKind[\"EqualsEqualsEqualsToken\"] = 32] = \"EqualsEqualsEqualsToken\";\n    SyntaxKind[SyntaxKind[\"ExclamationEqualsEqualsToken\"] = 33] = \"ExclamationEqualsEqualsToken\";\n    SyntaxKind[SyntaxKind[\"EqualsGreaterThanToken\"] = 34] = \"EqualsGreaterThanToken\";\n    SyntaxKind[SyntaxKind[\"PlusToken\"] = 35] = \"PlusToken\";\n    SyntaxKind[SyntaxKind[\"MinusToken\"] = 36] = \"MinusToken\";\n    SyntaxKind[SyntaxKind[\"AsteriskToken\"] = 37] = \"AsteriskToken\";\n    SyntaxKind[SyntaxKind[\"AsteriskAsteriskToken\"] = 38] = \"AsteriskAsteriskToken\";\n    SyntaxKind[SyntaxKind[\"SlashToken\"] = 39] = \"SlashToken\";\n    SyntaxKind[SyntaxKind[\"PercentToken\"] = 40] = \"PercentToken\";\n    SyntaxKind[SyntaxKind[\"PlusPlusToken\"] = 41] = \"PlusPlusToken\";\n    SyntaxKind[SyntaxKind[\"MinusMinusToken\"] = 42] = \"MinusMinusToken\";\n    SyntaxKind[SyntaxKind[\"LessThanLessThanToken\"] = 43] = \"LessThanLessThanToken\";\n    SyntaxKind[SyntaxKind[\"GreaterThanGreaterThanToken\"] = 44] = \"GreaterThanGreaterThanToken\";\n    SyntaxKind[SyntaxKind[\"GreaterThanGreaterThanGreaterThanToken\"] = 45] = \"GreaterThanGreaterThanGreaterThanToken\";\n    SyntaxKind[SyntaxKind[\"AmpersandToken\"] = 46] = \"AmpersandToken\";\n    SyntaxKind[SyntaxKind[\"BarToken\"] = 47] = \"BarToken\";\n    SyntaxKind[SyntaxKind[\"CaretToken\"] = 48] = \"CaretToken\";\n    SyntaxKind[SyntaxKind[\"ExclamationToken\"] = 49] = \"ExclamationToken\";\n    SyntaxKind[SyntaxKind[\"TildeToken\"] = 50] = \"TildeToken\";\n    SyntaxKind[SyntaxKind[\"AmpersandAmpersandToken\"] = 51] = \"AmpersandAmpersandToken\";\n    SyntaxKind[SyntaxKind[\"BarBarToken\"] = 52] = \"BarBarToken\";\n    SyntaxKind[SyntaxKind[\"QuestionToken\"] = 53] = \"QuestionToken\";\n    SyntaxKind[SyntaxKind[\"ColonToken\"] = 54] = \"ColonToken\";\n    SyntaxKind[SyntaxKind[\"AtToken\"] = 55] = \"AtToken\"; // Assignments\n\n    SyntaxKind[SyntaxKind[\"EqualsToken\"] = 56] = \"EqualsToken\";\n    SyntaxKind[SyntaxKind[\"PlusEqualsToken\"] = 57] = \"PlusEqualsToken\";\n    SyntaxKind[SyntaxKind[\"MinusEqualsToken\"] = 58] = \"MinusEqualsToken\";\n    SyntaxKind[SyntaxKind[\"AsteriskEqualsToken\"] = 59] = \"AsteriskEqualsToken\";\n    SyntaxKind[SyntaxKind[\"AsteriskAsteriskEqualsToken\"] = 60] = \"AsteriskAsteriskEqualsToken\";\n    SyntaxKind[SyntaxKind[\"SlashEqualsToken\"] = 61] = \"SlashEqualsToken\";\n    SyntaxKind[SyntaxKind[\"PercentEqualsToken\"] = 62] = \"PercentEqualsToken\";\n    SyntaxKind[SyntaxKind[\"LessThanLessThanEqualsToken\"] = 63] = \"LessThanLessThanEqualsToken\";\n    SyntaxKind[SyntaxKind[\"GreaterThanGreaterThanEqualsToken\"] = 64] = \"GreaterThanGreaterThanEqualsToken\";\n    SyntaxKind[SyntaxKind[\"GreaterThanGreaterThanGreaterThanEqualsToken\"] = 65] = \"GreaterThanGreaterThanGreaterThanEqualsToken\";\n    SyntaxKind[SyntaxKind[\"AmpersandEqualsToken\"] = 66] = \"AmpersandEqualsToken\";\n    SyntaxKind[SyntaxKind[\"BarEqualsToken\"] = 67] = \"BarEqualsToken\";\n    SyntaxKind[SyntaxKind[\"CaretEqualsToken\"] = 68] = \"CaretEqualsToken\"; // Identifiers\n\n    SyntaxKind[SyntaxKind[\"Identifier\"] = 69] = \"Identifier\"; // Reserved words\n\n    SyntaxKind[SyntaxKind[\"BreakKeyword\"] = 70] = \"BreakKeyword\";\n    SyntaxKind[SyntaxKind[\"CaseKeyword\"] = 71] = \"CaseKeyword\";\n    SyntaxKind[SyntaxKind[\"CatchKeyword\"] = 72] = \"CatchKeyword\";\n    SyntaxKind[SyntaxKind[\"ClassKeyword\"] = 73] = \"ClassKeyword\";\n    SyntaxKind[SyntaxKind[\"ConstKeyword\"] = 74] = \"ConstKeyword\";\n    SyntaxKind[SyntaxKind[\"ContinueKeyword\"] = 75] = \"ContinueKeyword\";\n    SyntaxKind[SyntaxKind[\"DebuggerKeyword\"] = 76] = \"DebuggerKeyword\";\n    SyntaxKind[SyntaxKind[\"DefaultKeyword\"] = 77] = \"DefaultKeyword\";\n    SyntaxKind[SyntaxKind[\"DeleteKeyword\"] = 78] = \"DeleteKeyword\";\n    SyntaxKind[SyntaxKind[\"DoKeyword\"] = 79] = \"DoKeyword\";\n    SyntaxKind[SyntaxKind[\"ElseKeyword\"] = 80] = \"ElseKeyword\";\n    SyntaxKind[SyntaxKind[\"EnumKeyword\"] = 81] = \"EnumKeyword\";\n    SyntaxKind[SyntaxKind[\"ExportKeyword\"] = 82] = \"ExportKeyword\";\n    SyntaxKind[SyntaxKind[\"ExtendsKeyword\"] = 83] = \"ExtendsKeyword\";\n    SyntaxKind[SyntaxKind[\"FalseKeyword\"] = 84] = \"FalseKeyword\";\n    SyntaxKind[SyntaxKind[\"FinallyKeyword\"] = 85] = \"FinallyKeyword\";\n    SyntaxKind[SyntaxKind[\"ForKeyword\"] = 86] = \"ForKeyword\";\n    SyntaxKind[SyntaxKind[\"FunctionKeyword\"] = 87] = \"FunctionKeyword\";\n    SyntaxKind[SyntaxKind[\"IfKeyword\"] = 88] = \"IfKeyword\";\n    SyntaxKind[SyntaxKind[\"ImportKeyword\"] = 89] = \"ImportKeyword\";\n    SyntaxKind[SyntaxKind[\"InKeyword\"] = 90] = \"InKeyword\";\n    SyntaxKind[SyntaxKind[\"InstanceOfKeyword\"] = 91] = \"InstanceOfKeyword\";\n    SyntaxKind[SyntaxKind[\"NewKeyword\"] = 92] = \"NewKeyword\";\n    SyntaxKind[SyntaxKind[\"NullKeyword\"] = 93] = \"NullKeyword\";\n    SyntaxKind[SyntaxKind[\"ReturnKeyword\"] = 94] = \"ReturnKeyword\";\n    SyntaxKind[SyntaxKind[\"SuperKeyword\"] = 95] = \"SuperKeyword\";\n    SyntaxKind[SyntaxKind[\"SwitchKeyword\"] = 96] = \"SwitchKeyword\";\n    SyntaxKind[SyntaxKind[\"ThisKeyword\"] = 97] = \"ThisKeyword\";\n    SyntaxKind[SyntaxKind[\"ThrowKeyword\"] = 98] = \"ThrowKeyword\";\n    SyntaxKind[SyntaxKind[\"TrueKeyword\"] = 99] = \"TrueKeyword\";\n    SyntaxKind[SyntaxKind[\"TryKeyword\"] = 100] = \"TryKeyword\";\n    SyntaxKind[SyntaxKind[\"TypeOfKeyword\"] = 101] = \"TypeOfKeyword\";\n    SyntaxKind[SyntaxKind[\"VarKeyword\"] = 102] = \"VarKeyword\";\n    SyntaxKind[SyntaxKind[\"VoidKeyword\"] = 103] = \"VoidKeyword\";\n    SyntaxKind[SyntaxKind[\"WhileKeyword\"] = 104] = \"WhileKeyword\";\n    SyntaxKind[SyntaxKind[\"WithKeyword\"] = 105] = \"WithKeyword\"; // Strict mode reserved words\n\n    SyntaxKind[SyntaxKind[\"ImplementsKeyword\"] = 106] = \"ImplementsKeyword\";\n    SyntaxKind[SyntaxKind[\"InterfaceKeyword\"] = 107] = \"InterfaceKeyword\";\n    SyntaxKind[SyntaxKind[\"LetKeyword\"] = 108] = \"LetKeyword\";\n    SyntaxKind[SyntaxKind[\"PackageKeyword\"] = 109] = \"PackageKeyword\";\n    SyntaxKind[SyntaxKind[\"PrivateKeyword\"] = 110] = \"PrivateKeyword\";\n    SyntaxKind[SyntaxKind[\"ProtectedKeyword\"] = 111] = \"ProtectedKeyword\";\n    SyntaxKind[SyntaxKind[\"PublicKeyword\"] = 112] = \"PublicKeyword\";\n    SyntaxKind[SyntaxKind[\"StaticKeyword\"] = 113] = \"StaticKeyword\";\n    SyntaxKind[SyntaxKind[\"YieldKeyword\"] = 114] = \"YieldKeyword\"; // Contextual keywords\n\n    SyntaxKind[SyntaxKind[\"AbstractKeyword\"] = 115] = \"AbstractKeyword\";\n    SyntaxKind[SyntaxKind[\"AsKeyword\"] = 116] = \"AsKeyword\";\n    SyntaxKind[SyntaxKind[\"AnyKeyword\"] = 117] = \"AnyKeyword\";\n    SyntaxKind[SyntaxKind[\"AsyncKeyword\"] = 118] = \"AsyncKeyword\";\n    SyntaxKind[SyntaxKind[\"AwaitKeyword\"] = 119] = \"AwaitKeyword\";\n    SyntaxKind[SyntaxKind[\"BooleanKeyword\"] = 120] = \"BooleanKeyword\";\n    SyntaxKind[SyntaxKind[\"ConstructorKeyword\"] = 121] = \"ConstructorKeyword\";\n    SyntaxKind[SyntaxKind[\"DeclareKeyword\"] = 122] = \"DeclareKeyword\";\n    SyntaxKind[SyntaxKind[\"GetKeyword\"] = 123] = \"GetKeyword\";\n    SyntaxKind[SyntaxKind[\"IsKeyword\"] = 124] = \"IsKeyword\";\n    SyntaxKind[SyntaxKind[\"ModuleKeyword\"] = 125] = \"ModuleKeyword\";\n    SyntaxKind[SyntaxKind[\"NamespaceKeyword\"] = 126] = \"NamespaceKeyword\";\n    SyntaxKind[SyntaxKind[\"RequireKeyword\"] = 127] = \"RequireKeyword\";\n    SyntaxKind[SyntaxKind[\"NumberKeyword\"] = 128] = \"NumberKeyword\";\n    SyntaxKind[SyntaxKind[\"SetKeyword\"] = 129] = \"SetKeyword\";\n    SyntaxKind[SyntaxKind[\"StringKeyword\"] = 130] = \"StringKeyword\";\n    SyntaxKind[SyntaxKind[\"SymbolKeyword\"] = 131] = \"SymbolKeyword\";\n    SyntaxKind[SyntaxKind[\"TypeKeyword\"] = 132] = \"TypeKeyword\";\n    SyntaxKind[SyntaxKind[\"FromKeyword\"] = 133] = \"FromKeyword\";\n    SyntaxKind[SyntaxKind[\"GlobalKeyword\"] = 134] = \"GlobalKeyword\";\n    SyntaxKind[SyntaxKind[\"OfKeyword\"] = 135] = \"OfKeyword\"; // Parse tree nodes\n    // Names\n\n    SyntaxKind[SyntaxKind[\"QualifiedName\"] = 136] = \"QualifiedName\";\n    SyntaxKind[SyntaxKind[\"ComputedPropertyName\"] = 137] = \"ComputedPropertyName\"; // Signature elements\n\n    SyntaxKind[SyntaxKind[\"TypeParameter\"] = 138] = \"TypeParameter\";\n    SyntaxKind[SyntaxKind[\"Parameter\"] = 139] = \"Parameter\";\n    SyntaxKind[SyntaxKind[\"Decorator\"] = 140] = \"Decorator\"; // TypeMember\n\n    SyntaxKind[SyntaxKind[\"PropertySignature\"] = 141] = \"PropertySignature\";\n    SyntaxKind[SyntaxKind[\"PropertyDeclaration\"] = 142] = \"PropertyDeclaration\";\n    SyntaxKind[SyntaxKind[\"MethodSignature\"] = 143] = \"MethodSignature\";\n    SyntaxKind[SyntaxKind[\"MethodDeclaration\"] = 144] = \"MethodDeclaration\";\n    SyntaxKind[SyntaxKind[\"Constructor\"] = 145] = \"Constructor\";\n    SyntaxKind[SyntaxKind[\"GetAccessor\"] = 146] = \"GetAccessor\";\n    SyntaxKind[SyntaxKind[\"SetAccessor\"] = 147] = \"SetAccessor\";\n    SyntaxKind[SyntaxKind[\"CallSignature\"] = 148] = \"CallSignature\";\n    SyntaxKind[SyntaxKind[\"ConstructSignature\"] = 149] = \"ConstructSignature\";\n    SyntaxKind[SyntaxKind[\"IndexSignature\"] = 150] = \"IndexSignature\"; // Type\n\n    SyntaxKind[SyntaxKind[\"TypePredicate\"] = 151] = \"TypePredicate\";\n    SyntaxKind[SyntaxKind[\"TypeReference\"] = 152] = \"TypeReference\";\n    SyntaxKind[SyntaxKind[\"FunctionType\"] = 153] = \"FunctionType\";\n    SyntaxKind[SyntaxKind[\"ConstructorType\"] = 154] = \"ConstructorType\";\n    SyntaxKind[SyntaxKind[\"TypeQuery\"] = 155] = \"TypeQuery\";\n    SyntaxKind[SyntaxKind[\"TypeLiteral\"] = 156] = \"TypeLiteral\";\n    SyntaxKind[SyntaxKind[\"ArrayType\"] = 157] = \"ArrayType\";\n    SyntaxKind[SyntaxKind[\"TupleType\"] = 158] = \"TupleType\";\n    SyntaxKind[SyntaxKind[\"UnionType\"] = 159] = \"UnionType\";\n    SyntaxKind[SyntaxKind[\"IntersectionType\"] = 160] = \"IntersectionType\";\n    SyntaxKind[SyntaxKind[\"ParenthesizedType\"] = 161] = \"ParenthesizedType\";\n    SyntaxKind[SyntaxKind[\"ThisType\"] = 162] = \"ThisType\";\n    SyntaxKind[SyntaxKind[\"StringLiteralType\"] = 163] = \"StringLiteralType\"; // Binding patterns\n\n    SyntaxKind[SyntaxKind[\"ObjectBindingPattern\"] = 164] = \"ObjectBindingPattern\";\n    SyntaxKind[SyntaxKind[\"ArrayBindingPattern\"] = 165] = \"ArrayBindingPattern\";\n    SyntaxKind[SyntaxKind[\"BindingElement\"] = 166] = \"BindingElement\"; // Expression\n\n    SyntaxKind[SyntaxKind[\"ArrayLiteralExpression\"] = 167] = \"ArrayLiteralExpression\";\n    SyntaxKind[SyntaxKind[\"ObjectLiteralExpression\"] = 168] = \"ObjectLiteralExpression\";\n    SyntaxKind[SyntaxKind[\"PropertyAccessExpression\"] = 169] = \"PropertyAccessExpression\";\n    SyntaxKind[SyntaxKind[\"ElementAccessExpression\"] = 170] = \"ElementAccessExpression\";\n    SyntaxKind[SyntaxKind[\"CallExpression\"] = 171] = \"CallExpression\";\n    SyntaxKind[SyntaxKind[\"NewExpression\"] = 172] = \"NewExpression\";\n    SyntaxKind[SyntaxKind[\"TaggedTemplateExpression\"] = 173] = \"TaggedTemplateExpression\";\n    SyntaxKind[SyntaxKind[\"TypeAssertionExpression\"] = 174] = \"TypeAssertionExpression\";\n    SyntaxKind[SyntaxKind[\"ParenthesizedExpression\"] = 175] = \"ParenthesizedExpression\";\n    SyntaxKind[SyntaxKind[\"FunctionExpression\"] = 176] = \"FunctionExpression\";\n    SyntaxKind[SyntaxKind[\"ArrowFunction\"] = 177] = \"ArrowFunction\";\n    SyntaxKind[SyntaxKind[\"DeleteExpression\"] = 178] = \"DeleteExpression\";\n    SyntaxKind[SyntaxKind[\"TypeOfExpression\"] = 179] = \"TypeOfExpression\";\n    SyntaxKind[SyntaxKind[\"VoidExpression\"] = 180] = \"VoidExpression\";\n    SyntaxKind[SyntaxKind[\"AwaitExpression\"] = 181] = \"AwaitExpression\";\n    SyntaxKind[SyntaxKind[\"PrefixUnaryExpression\"] = 182] = \"PrefixUnaryExpression\";\n    SyntaxKind[SyntaxKind[\"PostfixUnaryExpression\"] = 183] = \"PostfixUnaryExpression\";\n    SyntaxKind[SyntaxKind[\"BinaryExpression\"] = 184] = \"BinaryExpression\";\n    SyntaxKind[SyntaxKind[\"ConditionalExpression\"] = 185] = \"ConditionalExpression\";\n    SyntaxKind[SyntaxKind[\"TemplateExpression\"] = 186] = \"TemplateExpression\";\n    SyntaxKind[SyntaxKind[\"YieldExpression\"] = 187] = \"YieldExpression\";\n    SyntaxKind[SyntaxKind[\"SpreadElementExpression\"] = 188] = \"SpreadElementExpression\";\n    SyntaxKind[SyntaxKind[\"ClassExpression\"] = 189] = \"ClassExpression\";\n    SyntaxKind[SyntaxKind[\"OmittedExpression\"] = 190] = \"OmittedExpression\";\n    SyntaxKind[SyntaxKind[\"ExpressionWithTypeArguments\"] = 191] = \"ExpressionWithTypeArguments\";\n    SyntaxKind[SyntaxKind[\"AsExpression\"] = 192] = \"AsExpression\"; // Misc\n\n    SyntaxKind[SyntaxKind[\"TemplateSpan\"] = 193] = \"TemplateSpan\";\n    SyntaxKind[SyntaxKind[\"SemicolonClassElement\"] = 194] = \"SemicolonClassElement\"; // Element\n\n    SyntaxKind[SyntaxKind[\"Block\"] = 195] = \"Block\";\n    SyntaxKind[SyntaxKind[\"VariableStatement\"] = 196] = \"VariableStatement\";\n    SyntaxKind[SyntaxKind[\"EmptyStatement\"] = 197] = \"EmptyStatement\";\n    SyntaxKind[SyntaxKind[\"ExpressionStatement\"] = 198] = \"ExpressionStatement\";\n    SyntaxKind[SyntaxKind[\"IfStatement\"] = 199] = \"IfStatement\";\n    SyntaxKind[SyntaxKind[\"DoStatement\"] = 200] = \"DoStatement\";\n    SyntaxKind[SyntaxKind[\"WhileStatement\"] = 201] = \"WhileStatement\";\n    SyntaxKind[SyntaxKind[\"ForStatement\"] = 202] = \"ForStatement\";\n    SyntaxKind[SyntaxKind[\"ForInStatement\"] = 203] = \"ForInStatement\";\n    SyntaxKind[SyntaxKind[\"ForOfStatement\"] = 204] = \"ForOfStatement\";\n    SyntaxKind[SyntaxKind[\"ContinueStatement\"] = 205] = \"ContinueStatement\";\n    SyntaxKind[SyntaxKind[\"BreakStatement\"] = 206] = \"BreakStatement\";\n    SyntaxKind[SyntaxKind[\"ReturnStatement\"] = 207] = \"ReturnStatement\";\n    SyntaxKind[SyntaxKind[\"WithStatement\"] = 208] = \"WithStatement\";\n    SyntaxKind[SyntaxKind[\"SwitchStatement\"] = 209] = \"SwitchStatement\";\n    SyntaxKind[SyntaxKind[\"LabeledStatement\"] = 210] = \"LabeledStatement\";\n    SyntaxKind[SyntaxKind[\"ThrowStatement\"] = 211] = \"ThrowStatement\";\n    SyntaxKind[SyntaxKind[\"TryStatement\"] = 212] = \"TryStatement\";\n    SyntaxKind[SyntaxKind[\"DebuggerStatement\"] = 213] = \"DebuggerStatement\";\n    SyntaxKind[SyntaxKind[\"VariableDeclaration\"] = 214] = \"VariableDeclaration\";\n    SyntaxKind[SyntaxKind[\"VariableDeclarationList\"] = 215] = \"VariableDeclarationList\";\n    SyntaxKind[SyntaxKind[\"FunctionDeclaration\"] = 216] = \"FunctionDeclaration\";\n    SyntaxKind[SyntaxKind[\"ClassDeclaration\"] = 217] = \"ClassDeclaration\";\n    SyntaxKind[SyntaxKind[\"InterfaceDeclaration\"] = 218] = \"InterfaceDeclaration\";\n    SyntaxKind[SyntaxKind[\"TypeAliasDeclaration\"] = 219] = \"TypeAliasDeclaration\";\n    SyntaxKind[SyntaxKind[\"EnumDeclaration\"] = 220] = \"EnumDeclaration\";\n    SyntaxKind[SyntaxKind[\"ModuleDeclaration\"] = 221] = \"ModuleDeclaration\";\n    SyntaxKind[SyntaxKind[\"ModuleBlock\"] = 222] = \"ModuleBlock\";\n    SyntaxKind[SyntaxKind[\"CaseBlock\"] = 223] = \"CaseBlock\";\n    SyntaxKind[SyntaxKind[\"ImportEqualsDeclaration\"] = 224] = \"ImportEqualsDeclaration\";\n    SyntaxKind[SyntaxKind[\"ImportDeclaration\"] = 225] = \"ImportDeclaration\";\n    SyntaxKind[SyntaxKind[\"ImportClause\"] = 226] = \"ImportClause\";\n    SyntaxKind[SyntaxKind[\"NamespaceImport\"] = 227] = \"NamespaceImport\";\n    SyntaxKind[SyntaxKind[\"NamedImports\"] = 228] = \"NamedImports\";\n    SyntaxKind[SyntaxKind[\"ImportSpecifier\"] = 229] = \"ImportSpecifier\";\n    SyntaxKind[SyntaxKind[\"ExportAssignment\"] = 230] = \"ExportAssignment\";\n    SyntaxKind[SyntaxKind[\"ExportDeclaration\"] = 231] = \"ExportDeclaration\";\n    SyntaxKind[SyntaxKind[\"NamedExports\"] = 232] = \"NamedExports\";\n    SyntaxKind[SyntaxKind[\"ExportSpecifier\"] = 233] = \"ExportSpecifier\";\n    SyntaxKind[SyntaxKind[\"MissingDeclaration\"] = 234] = \"MissingDeclaration\"; // Module references\n\n    SyntaxKind[SyntaxKind[\"ExternalModuleReference\"] = 235] = \"ExternalModuleReference\"; // JSX\n\n    SyntaxKind[SyntaxKind[\"JsxElement\"] = 236] = \"JsxElement\";\n    SyntaxKind[SyntaxKind[\"JsxSelfClosingElement\"] = 237] = \"JsxSelfClosingElement\";\n    SyntaxKind[SyntaxKind[\"JsxOpeningElement\"] = 238] = \"JsxOpeningElement\";\n    SyntaxKind[SyntaxKind[\"JsxText\"] = 239] = \"JsxText\";\n    SyntaxKind[SyntaxKind[\"JsxClosingElement\"] = 240] = \"JsxClosingElement\";\n    SyntaxKind[SyntaxKind[\"JsxAttribute\"] = 241] = \"JsxAttribute\";\n    SyntaxKind[SyntaxKind[\"JsxSpreadAttribute\"] = 242] = \"JsxSpreadAttribute\";\n    SyntaxKind[SyntaxKind[\"JsxExpression\"] = 243] = \"JsxExpression\"; // Clauses\n\n    SyntaxKind[SyntaxKind[\"CaseClause\"] = 244] = \"CaseClause\";\n    SyntaxKind[SyntaxKind[\"DefaultClause\"] = 245] = \"DefaultClause\";\n    SyntaxKind[SyntaxKind[\"HeritageClause\"] = 246] = \"HeritageClause\";\n    SyntaxKind[SyntaxKind[\"CatchClause\"] = 247] = \"CatchClause\"; // Property assignments\n\n    SyntaxKind[SyntaxKind[\"PropertyAssignment\"] = 248] = \"PropertyAssignment\";\n    SyntaxKind[SyntaxKind[\"ShorthandPropertyAssignment\"] = 249] = \"ShorthandPropertyAssignment\"; // Enum\n\n    SyntaxKind[SyntaxKind[\"EnumMember\"] = 250] = \"EnumMember\"; // Top-level nodes\n\n    SyntaxKind[SyntaxKind[\"SourceFile\"] = 251] = \"SourceFile\"; // JSDoc nodes\n\n    SyntaxKind[SyntaxKind[\"JSDocTypeExpression\"] = 252] = \"JSDocTypeExpression\"; // The * type\n\n    SyntaxKind[SyntaxKind[\"JSDocAllType\"] = 253] = \"JSDocAllType\"; // The ? type\n\n    SyntaxKind[SyntaxKind[\"JSDocUnknownType\"] = 254] = \"JSDocUnknownType\";\n    SyntaxKind[SyntaxKind[\"JSDocArrayType\"] = 255] = \"JSDocArrayType\";\n    SyntaxKind[SyntaxKind[\"JSDocUnionType\"] = 256] = \"JSDocUnionType\";\n    SyntaxKind[SyntaxKind[\"JSDocTupleType\"] = 257] = \"JSDocTupleType\";\n    SyntaxKind[SyntaxKind[\"JSDocNullableType\"] = 258] = \"JSDocNullableType\";\n    SyntaxKind[SyntaxKind[\"JSDocNonNullableType\"] = 259] = \"JSDocNonNullableType\";\n    SyntaxKind[SyntaxKind[\"JSDocRecordType\"] = 260] = \"JSDocRecordType\";\n    SyntaxKind[SyntaxKind[\"JSDocRecordMember\"] = 261] = \"JSDocRecordMember\";\n    SyntaxKind[SyntaxKind[\"JSDocTypeReference\"] = 262] = \"JSDocTypeReference\";\n    SyntaxKind[SyntaxKind[\"JSDocOptionalType\"] = 263] = \"JSDocOptionalType\";\n    SyntaxKind[SyntaxKind[\"JSDocFunctionType\"] = 264] = \"JSDocFunctionType\";\n    SyntaxKind[SyntaxKind[\"JSDocVariadicType\"] = 265] = \"JSDocVariadicType\";\n    SyntaxKind[SyntaxKind[\"JSDocConstructorType\"] = 266] = \"JSDocConstructorType\";\n    SyntaxKind[SyntaxKind[\"JSDocThisType\"] = 267] = \"JSDocThisType\";\n    SyntaxKind[SyntaxKind[\"JSDocComment\"] = 268] = \"JSDocComment\";\n    SyntaxKind[SyntaxKind[\"JSDocTag\"] = 269] = \"JSDocTag\";\n    SyntaxKind[SyntaxKind[\"JSDocParameterTag\"] = 270] = \"JSDocParameterTag\";\n    SyntaxKind[SyntaxKind[\"JSDocReturnTag\"] = 271] = \"JSDocReturnTag\";\n    SyntaxKind[SyntaxKind[\"JSDocTypeTag\"] = 272] = \"JSDocTypeTag\";\n    SyntaxKind[SyntaxKind[\"JSDocTemplateTag\"] = 273] = \"JSDocTemplateTag\"; // Synthesized list\n\n    SyntaxKind[SyntaxKind[\"SyntaxList\"] = 274] = \"SyntaxList\"; // Enum value count\n\n    SyntaxKind[SyntaxKind[\"Count\"] = 275] = \"Count\"; // Markers\n\n    SyntaxKind[SyntaxKind[\"FirstAssignment\"] = 56] = \"FirstAssignment\";\n    SyntaxKind[SyntaxKind[\"LastAssignment\"] = 68] = \"LastAssignment\";\n    SyntaxKind[SyntaxKind[\"FirstReservedWord\"] = 70] = \"FirstReservedWord\";\n    SyntaxKind[SyntaxKind[\"LastReservedWord\"] = 105] = \"LastReservedWord\";\n    SyntaxKind[SyntaxKind[\"FirstKeyword\"] = 70] = \"FirstKeyword\";\n    SyntaxKind[SyntaxKind[\"LastKeyword\"] = 135] = \"LastKeyword\";\n    SyntaxKind[SyntaxKind[\"FirstFutureReservedWord\"] = 106] = \"FirstFutureReservedWord\";\n    SyntaxKind[SyntaxKind[\"LastFutureReservedWord\"] = 114] = \"LastFutureReservedWord\";\n    SyntaxKind[SyntaxKind[\"FirstTypeNode\"] = 151] = \"FirstTypeNode\";\n    SyntaxKind[SyntaxKind[\"LastTypeNode\"] = 163] = \"LastTypeNode\";\n    SyntaxKind[SyntaxKind[\"FirstPunctuation\"] = 15] = \"FirstPunctuation\";\n    SyntaxKind[SyntaxKind[\"LastPunctuation\"] = 68] = \"LastPunctuation\";\n    SyntaxKind[SyntaxKind[\"FirstToken\"] = 0] = \"FirstToken\";\n    SyntaxKind[SyntaxKind[\"LastToken\"] = 135] = \"LastToken\";\n    SyntaxKind[SyntaxKind[\"FirstTriviaToken\"] = 2] = \"FirstTriviaToken\";\n    SyntaxKind[SyntaxKind[\"LastTriviaToken\"] = 7] = \"LastTriviaToken\";\n    SyntaxKind[SyntaxKind[\"FirstLiteralToken\"] = 8] = \"FirstLiteralToken\";\n    SyntaxKind[SyntaxKind[\"LastLiteralToken\"] = 11] = \"LastLiteralToken\";\n    SyntaxKind[SyntaxKind[\"FirstTemplateToken\"] = 11] = \"FirstTemplateToken\";\n    SyntaxKind[SyntaxKind[\"LastTemplateToken\"] = 14] = \"LastTemplateToken\";\n    SyntaxKind[SyntaxKind[\"FirstBinaryOperator\"] = 25] = \"FirstBinaryOperator\";\n    SyntaxKind[SyntaxKind[\"LastBinaryOperator\"] = 68] = \"LastBinaryOperator\";\n    SyntaxKind[SyntaxKind[\"FirstNode\"] = 136] = \"FirstNode\";\n  })(ts.SyntaxKind || (ts.SyntaxKind = {}));\n\n  var SyntaxKind = ts.SyntaxKind;\n\n  (function (NodeFlags) {\n    NodeFlags[NodeFlags[\"None\"] = 0] = \"None\";\n    NodeFlags[NodeFlags[\"Export\"] = 2] = \"Export\";\n    NodeFlags[NodeFlags[\"Ambient\"] = 4] = \"Ambient\";\n    NodeFlags[NodeFlags[\"Public\"] = 8] = \"Public\";\n    NodeFlags[NodeFlags[\"Private\"] = 16] = \"Private\";\n    NodeFlags[NodeFlags[\"Protected\"] = 32] = \"Protected\";\n    NodeFlags[NodeFlags[\"Static\"] = 64] = \"Static\";\n    NodeFlags[NodeFlags[\"Abstract\"] = 128] = \"Abstract\";\n    NodeFlags[NodeFlags[\"Async\"] = 256] = \"Async\";\n    NodeFlags[NodeFlags[\"Default\"] = 512] = \"Default\";\n    NodeFlags[NodeFlags[\"MultiLine\"] = 1024] = \"MultiLine\";\n    NodeFlags[NodeFlags[\"Synthetic\"] = 2048] = \"Synthetic\";\n    NodeFlags[NodeFlags[\"DeclarationFile\"] = 4096] = \"DeclarationFile\";\n    NodeFlags[NodeFlags[\"Let\"] = 8192] = \"Let\";\n    NodeFlags[NodeFlags[\"Const\"] = 16384] = \"Const\";\n    NodeFlags[NodeFlags[\"OctalLiteral\"] = 32768] = \"OctalLiteral\";\n    NodeFlags[NodeFlags[\"Namespace\"] = 65536] = \"Namespace\";\n    NodeFlags[NodeFlags[\"ExportContext\"] = 131072] = \"ExportContext\";\n    NodeFlags[NodeFlags[\"ContainsThis\"] = 262144] = \"ContainsThis\";\n    NodeFlags[NodeFlags[\"HasImplicitReturn\"] = 524288] = \"HasImplicitReturn\";\n    NodeFlags[NodeFlags[\"HasExplicitReturn\"] = 1048576] = \"HasExplicitReturn\";\n    NodeFlags[NodeFlags[\"GlobalAugmentation\"] = 2097152] = \"GlobalAugmentation\";\n    NodeFlags[NodeFlags[\"HasClassExtends\"] = 4194304] = \"HasClassExtends\";\n    NodeFlags[NodeFlags[\"HasDecorators\"] = 8388608] = \"HasDecorators\";\n    NodeFlags[NodeFlags[\"HasParamDecorators\"] = 16777216] = \"HasParamDecorators\";\n    NodeFlags[NodeFlags[\"HasAsyncFunctions\"] = 33554432] = \"HasAsyncFunctions\"; // This was picked out from the 'master' branch.\n    // To keep the flags consistent, we're skipping a few ahead.\n\n    NodeFlags[NodeFlags[\"HasJsxSpreadAttribute\"] = 1073741824] = \"HasJsxSpreadAttribute\";\n    NodeFlags[NodeFlags[\"Modifier\"] = 1022] = \"Modifier\";\n    NodeFlags[NodeFlags[\"AccessibilityModifier\"] = 56] = \"AccessibilityModifier\";\n    NodeFlags[NodeFlags[\"BlockScoped\"] = 24576] = \"BlockScoped\";\n    NodeFlags[NodeFlags[\"ReachabilityCheckFlags\"] = 1572864] = \"ReachabilityCheckFlags\";\n    NodeFlags[NodeFlags[\"EmitHelperFlags\"] = 62914560] = \"EmitHelperFlags\";\n  })(ts.NodeFlags || (ts.NodeFlags = {}));\n\n  var NodeFlags = ts.NodeFlags;\n  /* @internal */\n\n  (function (ParserContextFlags) {\n    ParserContextFlags[ParserContextFlags[\"None\"] = 0] = \"None\"; // If this node was parsed in a context where 'in-expressions' are not allowed.\n\n    ParserContextFlags[ParserContextFlags[\"DisallowIn\"] = 1] = \"DisallowIn\"; // If this node was parsed in the 'yield' context created when parsing a generator.\n\n    ParserContextFlags[ParserContextFlags[\"Yield\"] = 2] = \"Yield\"; // If this node was parsed as part of a decorator\n\n    ParserContextFlags[ParserContextFlags[\"Decorator\"] = 4] = \"Decorator\"; // If this node was parsed in the 'await' context created when parsing an async function.\n\n    ParserContextFlags[ParserContextFlags[\"Await\"] = 8] = \"Await\"; // If the parser encountered an error when parsing the code that created this node.  Note\n    // the parser only sets this directly on the node it creates right after encountering the\n    // error.\n\n    ParserContextFlags[ParserContextFlags[\"ThisNodeHasError\"] = 16] = \"ThisNodeHasError\"; // This node was parsed in a JavaScript file and can be processed differently.  For example\n    // its type can be specified usign a JSDoc comment.\n\n    ParserContextFlags[ParserContextFlags[\"JavaScriptFile\"] = 32] = \"JavaScriptFile\"; // Context flags set directly by the parser.\n\n    ParserContextFlags[ParserContextFlags[\"ParserGeneratedFlags\"] = 63] = \"ParserGeneratedFlags\"; // Exclude these flags when parsing a Type\n\n    ParserContextFlags[ParserContextFlags[\"TypeExcludesFlags\"] = 10] = \"TypeExcludesFlags\"; // Context flags computed by aggregating child flags upwards.\n    // Used during incremental parsing to determine if this node or any of its children had an\n    // error.  Computed only once and then cached.\n\n    ParserContextFlags[ParserContextFlags[\"ThisNodeOrAnySubNodesHasError\"] = 64] = \"ThisNodeOrAnySubNodesHasError\"; // Used to know if we've computed data from children and cached it in this node.\n\n    ParserContextFlags[ParserContextFlags[\"HasAggregatedChildData\"] = 128] = \"HasAggregatedChildData\";\n  })(ts.ParserContextFlags || (ts.ParserContextFlags = {}));\n\n  var ParserContextFlags = ts.ParserContextFlags;\n\n  (function (JsxFlags) {\n    JsxFlags[JsxFlags[\"None\"] = 0] = \"None\";\n    /** An element from a named property of the JSX.IntrinsicElements interface */\n\n    JsxFlags[JsxFlags[\"IntrinsicNamedElement\"] = 1] = \"IntrinsicNamedElement\";\n    /** An element inferred from the string index signature of the JSX.IntrinsicElements interface */\n\n    JsxFlags[JsxFlags[\"IntrinsicIndexedElement\"] = 2] = \"IntrinsicIndexedElement\";\n    /** An element backed by a class, class-like, or function value */\n\n    JsxFlags[JsxFlags[\"ValueElement\"] = 4] = \"ValueElement\";\n    /** Element resolution failed */\n\n    JsxFlags[JsxFlags[\"UnknownElement\"] = 16] = \"UnknownElement\";\n    JsxFlags[JsxFlags[\"IntrinsicElement\"] = 3] = \"IntrinsicElement\";\n  })(ts.JsxFlags || (ts.JsxFlags = {}));\n\n  var JsxFlags = ts.JsxFlags;\n  /* @internal */\n\n  (function (RelationComparisonResult) {\n    RelationComparisonResult[RelationComparisonResult[\"Succeeded\"] = 1] = \"Succeeded\";\n    RelationComparisonResult[RelationComparisonResult[\"Failed\"] = 2] = \"Failed\";\n    RelationComparisonResult[RelationComparisonResult[\"FailedAndReported\"] = 3] = \"FailedAndReported\";\n  })(ts.RelationComparisonResult || (ts.RelationComparisonResult = {}));\n\n  var RelationComparisonResult = ts.RelationComparisonResult;\n\n  var OperationCanceledException = function () {\n    function OperationCanceledException() {}\n\n    return OperationCanceledException;\n  }();\n\n  ts.OperationCanceledException = OperationCanceledException;\n  /** Return code used by getEmitOutput function to indicate status of the function */\n\n  (function (ExitStatus) {\n    // Compiler ran successfully.  Either this was a simple do-nothing compilation (for example,\n    // when -version or -help was provided, or this was a normal compilation, no diagnostics\n    // were produced, and all outputs were generated successfully.\n    ExitStatus[ExitStatus[\"Success\"] = 0] = \"Success\"; // Diagnostics were produced and because of them no code was generated.\n\n    ExitStatus[ExitStatus[\"DiagnosticsPresent_OutputsSkipped\"] = 1] = \"DiagnosticsPresent_OutputsSkipped\"; // Diagnostics were produced and outputs were generated in spite of them.\n\n    ExitStatus[ExitStatus[\"DiagnosticsPresent_OutputsGenerated\"] = 2] = \"DiagnosticsPresent_OutputsGenerated\";\n  })(ts.ExitStatus || (ts.ExitStatus = {}));\n\n  var ExitStatus = ts.ExitStatus;\n\n  (function (TypeFormatFlags) {\n    TypeFormatFlags[TypeFormatFlags[\"None\"] = 0] = \"None\";\n    TypeFormatFlags[TypeFormatFlags[\"WriteArrayAsGenericType\"] = 1] = \"WriteArrayAsGenericType\";\n    TypeFormatFlags[TypeFormatFlags[\"UseTypeOfFunction\"] = 2] = \"UseTypeOfFunction\";\n    TypeFormatFlags[TypeFormatFlags[\"NoTruncation\"] = 4] = \"NoTruncation\";\n    TypeFormatFlags[TypeFormatFlags[\"WriteArrowStyleSignature\"] = 8] = \"WriteArrowStyleSignature\";\n    TypeFormatFlags[TypeFormatFlags[\"WriteOwnNameForAnyLike\"] = 16] = \"WriteOwnNameForAnyLike\";\n    TypeFormatFlags[TypeFormatFlags[\"WriteTypeArgumentsOfSignature\"] = 32] = \"WriteTypeArgumentsOfSignature\";\n    TypeFormatFlags[TypeFormatFlags[\"InElementType\"] = 64] = \"InElementType\";\n    TypeFormatFlags[TypeFormatFlags[\"UseFullyQualifiedType\"] = 128] = \"UseFullyQualifiedType\";\n  })(ts.TypeFormatFlags || (ts.TypeFormatFlags = {}));\n\n  var TypeFormatFlags = ts.TypeFormatFlags;\n\n  (function (SymbolFormatFlags) {\n    SymbolFormatFlags[SymbolFormatFlags[\"None\"] = 0] = \"None\"; // Write symbols's type argument if it is instantiated symbol\n    // eg. class C<T> { p: T }   <-- Show p as C<T>.p here\n    //     var a: C<number>;\n    //     var p = a.p;  <--- Here p is property of C<number> so show it as C<number>.p instead of just C.p\n\n    SymbolFormatFlags[SymbolFormatFlags[\"WriteTypeParametersOrArguments\"] = 1] = \"WriteTypeParametersOrArguments\"; // Use only external alias information to get the symbol name in the given context\n    // eg.  module m { export class c { } } import x = m.c;\n    // When this flag is specified m.c will be used to refer to the class instead of alias symbol x\n\n    SymbolFormatFlags[SymbolFormatFlags[\"UseOnlyExternalAliasing\"] = 2] = \"UseOnlyExternalAliasing\";\n  })(ts.SymbolFormatFlags || (ts.SymbolFormatFlags = {}));\n\n  var SymbolFormatFlags = ts.SymbolFormatFlags;\n  /* @internal */\n\n  (function (SymbolAccessibility) {\n    SymbolAccessibility[SymbolAccessibility[\"Accessible\"] = 0] = \"Accessible\";\n    SymbolAccessibility[SymbolAccessibility[\"NotAccessible\"] = 1] = \"NotAccessible\";\n    SymbolAccessibility[SymbolAccessibility[\"CannotBeNamed\"] = 2] = \"CannotBeNamed\";\n  })(ts.SymbolAccessibility || (ts.SymbolAccessibility = {}));\n\n  var SymbolAccessibility = ts.SymbolAccessibility;\n\n  (function (TypePredicateKind) {\n    TypePredicateKind[TypePredicateKind[\"This\"] = 0] = \"This\";\n    TypePredicateKind[TypePredicateKind[\"Identifier\"] = 1] = \"Identifier\";\n  })(ts.TypePredicateKind || (ts.TypePredicateKind = {}));\n\n  var TypePredicateKind = ts.TypePredicateKind;\n  /** Indicates how to serialize the name for a TypeReferenceNode when emitting decorator\n    * metadata */\n\n  /* @internal */\n\n  (function (TypeReferenceSerializationKind) {\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"Unknown\"] = 0] = \"Unknown\"; // should be emitted using a safe fallback.\n\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"TypeWithConstructSignatureAndValue\"] = 1] = \"TypeWithConstructSignatureAndValue\"; // function that can be reached at runtime (e.g. a `class`\n    // declaration or a `var` declaration for the static side\n    // of a type, such as the global `Promise` type in lib.d.ts).\n\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"VoidType\"] = 2] = \"VoidType\";\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"NumberLikeType\"] = 3] = \"NumberLikeType\";\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"StringLikeType\"] = 4] = \"StringLikeType\";\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"BooleanType\"] = 5] = \"BooleanType\";\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"ArrayLikeType\"] = 6] = \"ArrayLikeType\";\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"ESSymbolType\"] = 7] = \"ESSymbolType\";\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"TypeWithCallSignature\"] = 8] = \"TypeWithCallSignature\"; // with call signatures.\n\n    TypeReferenceSerializationKind[TypeReferenceSerializationKind[\"ObjectType\"] = 9] = \"ObjectType\";\n  })(ts.TypeReferenceSerializationKind || (ts.TypeReferenceSerializationKind = {}));\n\n  var TypeReferenceSerializationKind = ts.TypeReferenceSerializationKind;\n\n  (function (SymbolFlags) {\n    SymbolFlags[SymbolFlags[\"None\"] = 0] = \"None\";\n    SymbolFlags[SymbolFlags[\"FunctionScopedVariable\"] = 1] = \"FunctionScopedVariable\";\n    SymbolFlags[SymbolFlags[\"BlockScopedVariable\"] = 2] = \"BlockScopedVariable\";\n    SymbolFlags[SymbolFlags[\"Property\"] = 4] = \"Property\";\n    SymbolFlags[SymbolFlags[\"EnumMember\"] = 8] = \"EnumMember\";\n    SymbolFlags[SymbolFlags[\"Function\"] = 16] = \"Function\";\n    SymbolFlags[SymbolFlags[\"Class\"] = 32] = \"Class\";\n    SymbolFlags[SymbolFlags[\"Interface\"] = 64] = \"Interface\";\n    SymbolFlags[SymbolFlags[\"ConstEnum\"] = 128] = \"ConstEnum\";\n    SymbolFlags[SymbolFlags[\"RegularEnum\"] = 256] = \"RegularEnum\";\n    SymbolFlags[SymbolFlags[\"ValueModule\"] = 512] = \"ValueModule\";\n    SymbolFlags[SymbolFlags[\"NamespaceModule\"] = 1024] = \"NamespaceModule\";\n    SymbolFlags[SymbolFlags[\"TypeLiteral\"] = 2048] = \"TypeLiteral\";\n    SymbolFlags[SymbolFlags[\"ObjectLiteral\"] = 4096] = \"ObjectLiteral\";\n    SymbolFlags[SymbolFlags[\"Method\"] = 8192] = \"Method\";\n    SymbolFlags[SymbolFlags[\"Constructor\"] = 16384] = \"Constructor\";\n    SymbolFlags[SymbolFlags[\"GetAccessor\"] = 32768] = \"GetAccessor\";\n    SymbolFlags[SymbolFlags[\"SetAccessor\"] = 65536] = \"SetAccessor\";\n    SymbolFlags[SymbolFlags[\"Signature\"] = 131072] = \"Signature\";\n    SymbolFlags[SymbolFlags[\"TypeParameter\"] = 262144] = \"TypeParameter\";\n    SymbolFlags[SymbolFlags[\"TypeAlias\"] = 524288] = \"TypeAlias\";\n    SymbolFlags[SymbolFlags[\"ExportValue\"] = 1048576] = \"ExportValue\";\n    SymbolFlags[SymbolFlags[\"ExportType\"] = 2097152] = \"ExportType\";\n    SymbolFlags[SymbolFlags[\"ExportNamespace\"] = 4194304] = \"ExportNamespace\";\n    SymbolFlags[SymbolFlags[\"Alias\"] = 8388608] = \"Alias\";\n    SymbolFlags[SymbolFlags[\"Instantiated\"] = 16777216] = \"Instantiated\";\n    SymbolFlags[SymbolFlags[\"Merged\"] = 33554432] = \"Merged\";\n    SymbolFlags[SymbolFlags[\"Transient\"] = 67108864] = \"Transient\";\n    SymbolFlags[SymbolFlags[\"Prototype\"] = 134217728] = \"Prototype\";\n    SymbolFlags[SymbolFlags[\"SyntheticProperty\"] = 268435456] = \"SyntheticProperty\";\n    SymbolFlags[SymbolFlags[\"Optional\"] = 536870912] = \"Optional\";\n    SymbolFlags[SymbolFlags[\"ExportStar\"] = 1073741824] = \"ExportStar\";\n    SymbolFlags[SymbolFlags[\"Enum\"] = 384] = \"Enum\";\n    SymbolFlags[SymbolFlags[\"Variable\"] = 3] = \"Variable\";\n    SymbolFlags[SymbolFlags[\"Value\"] = 107455] = \"Value\";\n    SymbolFlags[SymbolFlags[\"Type\"] = 793056] = \"Type\";\n    SymbolFlags[SymbolFlags[\"Namespace\"] = 1536] = \"Namespace\";\n    SymbolFlags[SymbolFlags[\"Module\"] = 1536] = \"Module\";\n    SymbolFlags[SymbolFlags[\"Accessor\"] = 98304] = \"Accessor\"; // Variables can be redeclared, but can not redeclare a block-scoped declaration with the\n    // same name, or any other value that is not a variable, e.g. ValueModule or Class\n\n    SymbolFlags[SymbolFlags[\"FunctionScopedVariableExcludes\"] = 107454] = \"FunctionScopedVariableExcludes\"; // Block-scoped declarations are not allowed to be re-declared\n    // they can not merge with anything in the value space\n\n    SymbolFlags[SymbolFlags[\"BlockScopedVariableExcludes\"] = 107455] = \"BlockScopedVariableExcludes\";\n    SymbolFlags[SymbolFlags[\"ParameterExcludes\"] = 107455] = \"ParameterExcludes\";\n    SymbolFlags[SymbolFlags[\"PropertyExcludes\"] = 107455] = \"PropertyExcludes\";\n    SymbolFlags[SymbolFlags[\"EnumMemberExcludes\"] = 107455] = \"EnumMemberExcludes\";\n    SymbolFlags[SymbolFlags[\"FunctionExcludes\"] = 106927] = \"FunctionExcludes\";\n    SymbolFlags[SymbolFlags[\"ClassExcludes\"] = 899519] = \"ClassExcludes\";\n    SymbolFlags[SymbolFlags[\"InterfaceExcludes\"] = 792960] = \"InterfaceExcludes\";\n    SymbolFlags[SymbolFlags[\"RegularEnumExcludes\"] = 899327] = \"RegularEnumExcludes\";\n    SymbolFlags[SymbolFlags[\"ConstEnumExcludes\"] = 899967] = \"ConstEnumExcludes\";\n    SymbolFlags[SymbolFlags[\"ValueModuleExcludes\"] = 106639] = \"ValueModuleExcludes\";\n    SymbolFlags[SymbolFlags[\"NamespaceModuleExcludes\"] = 0] = \"NamespaceModuleExcludes\";\n    SymbolFlags[SymbolFlags[\"MethodExcludes\"] = 99263] = \"MethodExcludes\";\n    SymbolFlags[SymbolFlags[\"GetAccessorExcludes\"] = 41919] = \"GetAccessorExcludes\";\n    SymbolFlags[SymbolFlags[\"SetAccessorExcludes\"] = 74687] = \"SetAccessorExcludes\";\n    SymbolFlags[SymbolFlags[\"TypeParameterExcludes\"] = 530912] = \"TypeParameterExcludes\";\n    SymbolFlags[SymbolFlags[\"TypeAliasExcludes\"] = 793056] = \"TypeAliasExcludes\";\n    SymbolFlags[SymbolFlags[\"AliasExcludes\"] = 8388608] = \"AliasExcludes\";\n    SymbolFlags[SymbolFlags[\"ModuleMember\"] = 8914931] = \"ModuleMember\";\n    SymbolFlags[SymbolFlags[\"ExportHasLocal\"] = 944] = \"ExportHasLocal\";\n    SymbolFlags[SymbolFlags[\"HasExports\"] = 1952] = \"HasExports\";\n    SymbolFlags[SymbolFlags[\"HasMembers\"] = 6240] = \"HasMembers\";\n    SymbolFlags[SymbolFlags[\"BlockScoped\"] = 418] = \"BlockScoped\";\n    SymbolFlags[SymbolFlags[\"PropertyOrAccessor\"] = 98308] = \"PropertyOrAccessor\";\n    SymbolFlags[SymbolFlags[\"Export\"] = 7340032] = \"Export\";\n    /* @internal */\n    // The set of things we consider semantically classifiable.  Used to speed up the LS during\n    // classification.\n\n    SymbolFlags[SymbolFlags[\"Classifiable\"] = 788448] = \"Classifiable\";\n  })(ts.SymbolFlags || (ts.SymbolFlags = {}));\n\n  var SymbolFlags = ts.SymbolFlags;\n  /* @internal */\n\n  (function (NodeCheckFlags) {\n    NodeCheckFlags[NodeCheckFlags[\"TypeChecked\"] = 1] = \"TypeChecked\";\n    NodeCheckFlags[NodeCheckFlags[\"LexicalThis\"] = 2] = \"LexicalThis\";\n    NodeCheckFlags[NodeCheckFlags[\"CaptureThis\"] = 4] = \"CaptureThis\";\n    NodeCheckFlags[NodeCheckFlags[\"SuperInstance\"] = 256] = \"SuperInstance\";\n    NodeCheckFlags[NodeCheckFlags[\"SuperStatic\"] = 512] = \"SuperStatic\";\n    NodeCheckFlags[NodeCheckFlags[\"ContextChecked\"] = 1024] = \"ContextChecked\";\n    NodeCheckFlags[NodeCheckFlags[\"AsyncMethodWithSuper\"] = 2048] = \"AsyncMethodWithSuper\";\n    NodeCheckFlags[NodeCheckFlags[\"AsyncMethodWithSuperBinding\"] = 4096] = \"AsyncMethodWithSuperBinding\";\n    NodeCheckFlags[NodeCheckFlags[\"CaptureArguments\"] = 8192] = \"CaptureArguments\"; // Values for enum members have been computed, and any errors have been reported for them.\n\n    NodeCheckFlags[NodeCheckFlags[\"EnumValuesComputed\"] = 16384] = \"EnumValuesComputed\";\n    NodeCheckFlags[NodeCheckFlags[\"LexicalModuleMergesWithClass\"] = 32768] = \"LexicalModuleMergesWithClass\";\n    NodeCheckFlags[NodeCheckFlags[\"LoopWithCapturedBlockScopedBinding\"] = 65536] = \"LoopWithCapturedBlockScopedBinding\";\n    NodeCheckFlags[NodeCheckFlags[\"CapturedBlockScopedBinding\"] = 131072] = \"CapturedBlockScopedBinding\";\n    NodeCheckFlags[NodeCheckFlags[\"BlockScopedBindingInLoop\"] = 262144] = \"BlockScopedBindingInLoop\";\n    NodeCheckFlags[NodeCheckFlags[\"ClassWithBodyScopedClassBinding\"] = 524288] = \"ClassWithBodyScopedClassBinding\";\n    NodeCheckFlags[NodeCheckFlags[\"BodyScopedClassBinding\"] = 1048576] = \"BodyScopedClassBinding\";\n    NodeCheckFlags[NodeCheckFlags[\"NeedsLoopOutParameter\"] = 2097152] = \"NeedsLoopOutParameter\";\n  })(ts.NodeCheckFlags || (ts.NodeCheckFlags = {}));\n\n  var NodeCheckFlags = ts.NodeCheckFlags;\n\n  (function (TypeFlags) {\n    TypeFlags[TypeFlags[\"Any\"] = 1] = \"Any\";\n    TypeFlags[TypeFlags[\"String\"] = 2] = \"String\";\n    TypeFlags[TypeFlags[\"Number\"] = 4] = \"Number\";\n    TypeFlags[TypeFlags[\"Boolean\"] = 8] = \"Boolean\";\n    TypeFlags[TypeFlags[\"Void\"] = 16] = \"Void\";\n    TypeFlags[TypeFlags[\"Undefined\"] = 32] = \"Undefined\";\n    TypeFlags[TypeFlags[\"Null\"] = 64] = \"Null\";\n    TypeFlags[TypeFlags[\"Enum\"] = 128] = \"Enum\";\n    TypeFlags[TypeFlags[\"StringLiteral\"] = 256] = \"StringLiteral\";\n    TypeFlags[TypeFlags[\"TypeParameter\"] = 512] = \"TypeParameter\";\n    TypeFlags[TypeFlags[\"Class\"] = 1024] = \"Class\";\n    TypeFlags[TypeFlags[\"Interface\"] = 2048] = \"Interface\";\n    TypeFlags[TypeFlags[\"Reference\"] = 4096] = \"Reference\";\n    TypeFlags[TypeFlags[\"Tuple\"] = 8192] = \"Tuple\";\n    TypeFlags[TypeFlags[\"Union\"] = 16384] = \"Union\";\n    TypeFlags[TypeFlags[\"Intersection\"] = 32768] = \"Intersection\";\n    TypeFlags[TypeFlags[\"Anonymous\"] = 65536] = \"Anonymous\";\n    TypeFlags[TypeFlags[\"Instantiated\"] = 131072] = \"Instantiated\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"FromSignature\"] = 262144] = \"FromSignature\";\n    TypeFlags[TypeFlags[\"ObjectLiteral\"] = 524288] = \"ObjectLiteral\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"FreshObjectLiteral\"] = 1048576] = \"FreshObjectLiteral\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"ContainsUndefinedOrNull\"] = 2097152] = \"ContainsUndefinedOrNull\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"ContainsObjectLiteral\"] = 4194304] = \"ContainsObjectLiteral\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"ContainsAnyFunctionType\"] = 8388608] = \"ContainsAnyFunctionType\";\n    TypeFlags[TypeFlags[\"ESSymbol\"] = 16777216] = \"ESSymbol\";\n    TypeFlags[TypeFlags[\"ThisType\"] = 33554432] = \"ThisType\";\n    TypeFlags[TypeFlags[\"ObjectLiteralPatternWithComputedProperties\"] = 67108864] = \"ObjectLiteralPatternWithComputedProperties\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"Intrinsic\"] = 16777343] = \"Intrinsic\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"Primitive\"] = 16777726] = \"Primitive\";\n    TypeFlags[TypeFlags[\"StringLike\"] = 258] = \"StringLike\";\n    TypeFlags[TypeFlags[\"NumberLike\"] = 132] = \"NumberLike\";\n    TypeFlags[TypeFlags[\"ObjectType\"] = 80896] = \"ObjectType\";\n    TypeFlags[TypeFlags[\"UnionOrIntersection\"] = 49152] = \"UnionOrIntersection\";\n    TypeFlags[TypeFlags[\"StructuredType\"] = 130048] = \"StructuredType\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"RequiresWidening\"] = 6291456] = \"RequiresWidening\";\n    /* @internal */\n\n    TypeFlags[TypeFlags[\"PropagatingFlags\"] = 14680064] = \"PropagatingFlags\";\n  })(ts.TypeFlags || (ts.TypeFlags = {}));\n\n  var TypeFlags = ts.TypeFlags;\n\n  (function (SignatureKind) {\n    SignatureKind[SignatureKind[\"Call\"] = 0] = \"Call\";\n    SignatureKind[SignatureKind[\"Construct\"] = 1] = \"Construct\";\n  })(ts.SignatureKind || (ts.SignatureKind = {}));\n\n  var SignatureKind = ts.SignatureKind;\n\n  (function (IndexKind) {\n    IndexKind[IndexKind[\"String\"] = 0] = \"String\";\n    IndexKind[IndexKind[\"Number\"] = 1] = \"Number\";\n  })(ts.IndexKind || (ts.IndexKind = {}));\n\n  var IndexKind = ts.IndexKind;\n  /* @internal */\n\n  (function (SpecialPropertyAssignmentKind) {\n    SpecialPropertyAssignmentKind[SpecialPropertyAssignmentKind[\"None\"] = 0] = \"None\"; /// exports.name = expr\n\n    SpecialPropertyAssignmentKind[SpecialPropertyAssignmentKind[\"ExportsProperty\"] = 1] = \"ExportsProperty\"; /// module.exports = expr\n\n    SpecialPropertyAssignmentKind[SpecialPropertyAssignmentKind[\"ModuleExports\"] = 2] = \"ModuleExports\"; /// className.prototype.name = expr\n\n    SpecialPropertyAssignmentKind[SpecialPropertyAssignmentKind[\"PrototypeProperty\"] = 3] = \"PrototypeProperty\"; /// this.name = expr\n\n    SpecialPropertyAssignmentKind[SpecialPropertyAssignmentKind[\"ThisProperty\"] = 4] = \"ThisProperty\";\n  })(ts.SpecialPropertyAssignmentKind || (ts.SpecialPropertyAssignmentKind = {}));\n\n  var SpecialPropertyAssignmentKind = ts.SpecialPropertyAssignmentKind;\n\n  (function (DiagnosticCategory) {\n    DiagnosticCategory[DiagnosticCategory[\"Warning\"] = 0] = \"Warning\";\n    DiagnosticCategory[DiagnosticCategory[\"Error\"] = 1] = \"Error\";\n    DiagnosticCategory[DiagnosticCategory[\"Message\"] = 2] = \"Message\";\n  })(ts.DiagnosticCategory || (ts.DiagnosticCategory = {}));\n\n  var DiagnosticCategory = ts.DiagnosticCategory;\n\n  (function (ModuleResolutionKind) {\n    ModuleResolutionKind[ModuleResolutionKind[\"Classic\"] = 1] = \"Classic\";\n    ModuleResolutionKind[ModuleResolutionKind[\"NodeJs\"] = 2] = \"NodeJs\";\n  })(ts.ModuleResolutionKind || (ts.ModuleResolutionKind = {}));\n\n  var ModuleResolutionKind = ts.ModuleResolutionKind;\n\n  (function (ModuleKind) {\n    ModuleKind[ModuleKind[\"None\"] = 0] = \"None\";\n    ModuleKind[ModuleKind[\"CommonJS\"] = 1] = \"CommonJS\";\n    ModuleKind[ModuleKind[\"AMD\"] = 2] = \"AMD\";\n    ModuleKind[ModuleKind[\"UMD\"] = 3] = \"UMD\";\n    ModuleKind[ModuleKind[\"System\"] = 4] = \"System\";\n    ModuleKind[ModuleKind[\"ES6\"] = 5] = \"ES6\";\n    ModuleKind[ModuleKind[\"ES2015\"] = 5] = \"ES2015\";\n  })(ts.ModuleKind || (ts.ModuleKind = {}));\n\n  var ModuleKind = ts.ModuleKind;\n\n  (function (JsxEmit) {\n    JsxEmit[JsxEmit[\"None\"] = 0] = \"None\";\n    JsxEmit[JsxEmit[\"Preserve\"] = 1] = \"Preserve\";\n    JsxEmit[JsxEmit[\"React\"] = 2] = \"React\";\n  })(ts.JsxEmit || (ts.JsxEmit = {}));\n\n  var JsxEmit = ts.JsxEmit;\n\n  (function (NewLineKind) {\n    NewLineKind[NewLineKind[\"CarriageReturnLineFeed\"] = 0] = \"CarriageReturnLineFeed\";\n    NewLineKind[NewLineKind[\"LineFeed\"] = 1] = \"LineFeed\";\n  })(ts.NewLineKind || (ts.NewLineKind = {}));\n\n  var NewLineKind = ts.NewLineKind;\n\n  (function (ScriptKind) {\n    ScriptKind[ScriptKind[\"Unknown\"] = 0] = \"Unknown\";\n    ScriptKind[ScriptKind[\"JS\"] = 1] = \"JS\";\n    ScriptKind[ScriptKind[\"JSX\"] = 2] = \"JSX\";\n    ScriptKind[ScriptKind[\"TS\"] = 3] = \"TS\";\n    ScriptKind[ScriptKind[\"TSX\"] = 4] = \"TSX\";\n  })(ts.ScriptKind || (ts.ScriptKind = {}));\n\n  var ScriptKind = ts.ScriptKind;\n\n  (function (ScriptTarget) {\n    ScriptTarget[ScriptTarget[\"ES3\"] = 0] = \"ES3\";\n    ScriptTarget[ScriptTarget[\"ES5\"] = 1] = \"ES5\";\n    ScriptTarget[ScriptTarget[\"ES6\"] = 2] = \"ES6\";\n    ScriptTarget[ScriptTarget[\"ES2015\"] = 2] = \"ES2015\";\n    ScriptTarget[ScriptTarget[\"Latest\"] = 2] = \"Latest\";\n  })(ts.ScriptTarget || (ts.ScriptTarget = {}));\n\n  var ScriptTarget = ts.ScriptTarget;\n\n  (function (LanguageVariant) {\n    LanguageVariant[LanguageVariant[\"Standard\"] = 0] = \"Standard\";\n    LanguageVariant[LanguageVariant[\"JSX\"] = 1] = \"JSX\";\n  })(ts.LanguageVariant || (ts.LanguageVariant = {}));\n\n  var LanguageVariant = ts.LanguageVariant;\n  /* @internal */\n\n  (function (DiagnosticStyle) {\n    DiagnosticStyle[DiagnosticStyle[\"Simple\"] = 0] = \"Simple\";\n    DiagnosticStyle[DiagnosticStyle[\"Pretty\"] = 1] = \"Pretty\";\n  })(ts.DiagnosticStyle || (ts.DiagnosticStyle = {}));\n\n  var DiagnosticStyle = ts.DiagnosticStyle;\n  /* @internal */\n\n  (function (CharacterCodes) {\n    CharacterCodes[CharacterCodes[\"nullCharacter\"] = 0] = \"nullCharacter\";\n    CharacterCodes[CharacterCodes[\"maxAsciiCharacter\"] = 127] = \"maxAsciiCharacter\";\n    CharacterCodes[CharacterCodes[\"lineFeed\"] = 10] = \"lineFeed\";\n    CharacterCodes[CharacterCodes[\"carriageReturn\"] = 13] = \"carriageReturn\";\n    CharacterCodes[CharacterCodes[\"lineSeparator\"] = 8232] = \"lineSeparator\";\n    CharacterCodes[CharacterCodes[\"paragraphSeparator\"] = 8233] = \"paragraphSeparator\";\n    CharacterCodes[CharacterCodes[\"nextLine\"] = 133] = \"nextLine\"; // Unicode 3.0 space characters\n\n    CharacterCodes[CharacterCodes[\"space\"] = 32] = \"space\";\n    CharacterCodes[CharacterCodes[\"nonBreakingSpace\"] = 160] = \"nonBreakingSpace\";\n    CharacterCodes[CharacterCodes[\"enQuad\"] = 8192] = \"enQuad\";\n    CharacterCodes[CharacterCodes[\"emQuad\"] = 8193] = \"emQuad\";\n    CharacterCodes[CharacterCodes[\"enSpace\"] = 8194] = \"enSpace\";\n    CharacterCodes[CharacterCodes[\"emSpace\"] = 8195] = \"emSpace\";\n    CharacterCodes[CharacterCodes[\"threePerEmSpace\"] = 8196] = \"threePerEmSpace\";\n    CharacterCodes[CharacterCodes[\"fourPerEmSpace\"] = 8197] = \"fourPerEmSpace\";\n    CharacterCodes[CharacterCodes[\"sixPerEmSpace\"] = 8198] = \"sixPerEmSpace\";\n    CharacterCodes[CharacterCodes[\"figureSpace\"] = 8199] = \"figureSpace\";\n    CharacterCodes[CharacterCodes[\"punctuationSpace\"] = 8200] = \"punctuationSpace\";\n    CharacterCodes[CharacterCodes[\"thinSpace\"] = 8201] = \"thinSpace\";\n    CharacterCodes[CharacterCodes[\"hairSpace\"] = 8202] = \"hairSpace\";\n    CharacterCodes[CharacterCodes[\"zeroWidthSpace\"] = 8203] = \"zeroWidthSpace\";\n    CharacterCodes[CharacterCodes[\"narrowNoBreakSpace\"] = 8239] = \"narrowNoBreakSpace\";\n    CharacterCodes[CharacterCodes[\"ideographicSpace\"] = 12288] = \"ideographicSpace\";\n    CharacterCodes[CharacterCodes[\"mathematicalSpace\"] = 8287] = \"mathematicalSpace\";\n    CharacterCodes[CharacterCodes[\"ogham\"] = 5760] = \"ogham\";\n    CharacterCodes[CharacterCodes[\"_\"] = 95] = \"_\";\n    CharacterCodes[CharacterCodes[\"$\"] = 36] = \"$\";\n    CharacterCodes[CharacterCodes[\"_0\"] = 48] = \"_0\";\n    CharacterCodes[CharacterCodes[\"_1\"] = 49] = \"_1\";\n    CharacterCodes[CharacterCodes[\"_2\"] = 50] = \"_2\";\n    CharacterCodes[CharacterCodes[\"_3\"] = 51] = \"_3\";\n    CharacterCodes[CharacterCodes[\"_4\"] = 52] = \"_4\";\n    CharacterCodes[CharacterCodes[\"_5\"] = 53] = \"_5\";\n    CharacterCodes[CharacterCodes[\"_6\"] = 54] = \"_6\";\n    CharacterCodes[CharacterCodes[\"_7\"] = 55] = \"_7\";\n    CharacterCodes[CharacterCodes[\"_8\"] = 56] = \"_8\";\n    CharacterCodes[CharacterCodes[\"_9\"] = 57] = \"_9\";\n    CharacterCodes[CharacterCodes[\"a\"] = 97] = \"a\";\n    CharacterCodes[CharacterCodes[\"b\"] = 98] = \"b\";\n    CharacterCodes[CharacterCodes[\"c\"] = 99] = \"c\";\n    CharacterCodes[CharacterCodes[\"d\"] = 100] = \"d\";\n    CharacterCodes[CharacterCodes[\"e\"] = 101] = \"e\";\n    CharacterCodes[CharacterCodes[\"f\"] = 102] = \"f\";\n    CharacterCodes[CharacterCodes[\"g\"] = 103] = \"g\";\n    CharacterCodes[CharacterCodes[\"h\"] = 104] = \"h\";\n    CharacterCodes[CharacterCodes[\"i\"] = 105] = \"i\";\n    CharacterCodes[CharacterCodes[\"j\"] = 106] = \"j\";\n    CharacterCodes[CharacterCodes[\"k\"] = 107] = \"k\";\n    CharacterCodes[CharacterCodes[\"l\"] = 108] = \"l\";\n    CharacterCodes[CharacterCodes[\"m\"] = 109] = \"m\";\n    CharacterCodes[CharacterCodes[\"n\"] = 110] = \"n\";\n    CharacterCodes[CharacterCodes[\"o\"] = 111] = \"o\";\n    CharacterCodes[CharacterCodes[\"p\"] = 112] = \"p\";\n    CharacterCodes[CharacterCodes[\"q\"] = 113] = \"q\";\n    CharacterCodes[CharacterCodes[\"r\"] = 114] = \"r\";\n    CharacterCodes[CharacterCodes[\"s\"] = 115] = \"s\";\n    CharacterCodes[CharacterCodes[\"t\"] = 116] = \"t\";\n    CharacterCodes[CharacterCodes[\"u\"] = 117] = \"u\";\n    CharacterCodes[CharacterCodes[\"v\"] = 118] = \"v\";\n    CharacterCodes[CharacterCodes[\"w\"] = 119] = \"w\";\n    CharacterCodes[CharacterCodes[\"x\"] = 120] = \"x\";\n    CharacterCodes[CharacterCodes[\"y\"] = 121] = \"y\";\n    CharacterCodes[CharacterCodes[\"z\"] = 122] = \"z\";\n    CharacterCodes[CharacterCodes[\"A\"] = 65] = \"A\";\n    CharacterCodes[CharacterCodes[\"B\"] = 66] = \"B\";\n    CharacterCodes[CharacterCodes[\"C\"] = 67] = \"C\";\n    CharacterCodes[CharacterCodes[\"D\"] = 68] = \"D\";\n    CharacterCodes[CharacterCodes[\"E\"] = 69] = \"E\";\n    CharacterCodes[CharacterCodes[\"F\"] = 70] = \"F\";\n    CharacterCodes[CharacterCodes[\"G\"] = 71] = \"G\";\n    CharacterCodes[CharacterCodes[\"H\"] = 72] = \"H\";\n    CharacterCodes[CharacterCodes[\"I\"] = 73] = \"I\";\n    CharacterCodes[CharacterCodes[\"J\"] = 74] = \"J\";\n    CharacterCodes[CharacterCodes[\"K\"] = 75] = \"K\";\n    CharacterCodes[CharacterCodes[\"L\"] = 76] = \"L\";\n    CharacterCodes[CharacterCodes[\"M\"] = 77] = \"M\";\n    CharacterCodes[CharacterCodes[\"N\"] = 78] = \"N\";\n    CharacterCodes[CharacterCodes[\"O\"] = 79] = \"O\";\n    CharacterCodes[CharacterCodes[\"P\"] = 80] = \"P\";\n    CharacterCodes[CharacterCodes[\"Q\"] = 81] = \"Q\";\n    CharacterCodes[CharacterCodes[\"R\"] = 82] = \"R\";\n    CharacterCodes[CharacterCodes[\"S\"] = 83] = \"S\";\n    CharacterCodes[CharacterCodes[\"T\"] = 84] = \"T\";\n    CharacterCodes[CharacterCodes[\"U\"] = 85] = \"U\";\n    CharacterCodes[CharacterCodes[\"V\"] = 86] = \"V\";\n    CharacterCodes[CharacterCodes[\"W\"] = 87] = \"W\";\n    CharacterCodes[CharacterCodes[\"X\"] = 88] = \"X\";\n    CharacterCodes[CharacterCodes[\"Y\"] = 89] = \"Y\";\n    CharacterCodes[CharacterCodes[\"Z\"] = 90] = \"Z\";\n    CharacterCodes[CharacterCodes[\"ampersand\"] = 38] = \"ampersand\";\n    CharacterCodes[CharacterCodes[\"asterisk\"] = 42] = \"asterisk\";\n    CharacterCodes[CharacterCodes[\"at\"] = 64] = \"at\";\n    CharacterCodes[CharacterCodes[\"backslash\"] = 92] = \"backslash\";\n    CharacterCodes[CharacterCodes[\"backtick\"] = 96] = \"backtick\";\n    CharacterCodes[CharacterCodes[\"bar\"] = 124] = \"bar\";\n    CharacterCodes[CharacterCodes[\"caret\"] = 94] = \"caret\";\n    CharacterCodes[CharacterCodes[\"closeBrace\"] = 125] = \"closeBrace\";\n    CharacterCodes[CharacterCodes[\"closeBracket\"] = 93] = \"closeBracket\";\n    CharacterCodes[CharacterCodes[\"closeParen\"] = 41] = \"closeParen\";\n    CharacterCodes[CharacterCodes[\"colon\"] = 58] = \"colon\";\n    CharacterCodes[CharacterCodes[\"comma\"] = 44] = \"comma\";\n    CharacterCodes[CharacterCodes[\"dot\"] = 46] = \"dot\";\n    CharacterCodes[CharacterCodes[\"doubleQuote\"] = 34] = \"doubleQuote\";\n    CharacterCodes[CharacterCodes[\"equals\"] = 61] = \"equals\";\n    CharacterCodes[CharacterCodes[\"exclamation\"] = 33] = \"exclamation\";\n    CharacterCodes[CharacterCodes[\"greaterThan\"] = 62] = \"greaterThan\";\n    CharacterCodes[CharacterCodes[\"hash\"] = 35] = \"hash\";\n    CharacterCodes[CharacterCodes[\"lessThan\"] = 60] = \"lessThan\";\n    CharacterCodes[CharacterCodes[\"minus\"] = 45] = \"minus\";\n    CharacterCodes[CharacterCodes[\"openBrace\"] = 123] = \"openBrace\";\n    CharacterCodes[CharacterCodes[\"openBracket\"] = 91] = \"openBracket\";\n    CharacterCodes[CharacterCodes[\"openParen\"] = 40] = \"openParen\";\n    CharacterCodes[CharacterCodes[\"percent\"] = 37] = \"percent\";\n    CharacterCodes[CharacterCodes[\"plus\"] = 43] = \"plus\";\n    CharacterCodes[CharacterCodes[\"question\"] = 63] = \"question\";\n    CharacterCodes[CharacterCodes[\"semicolon\"] = 59] = \"semicolon\";\n    CharacterCodes[CharacterCodes[\"singleQuote\"] = 39] = \"singleQuote\";\n    CharacterCodes[CharacterCodes[\"slash\"] = 47] = \"slash\";\n    CharacterCodes[CharacterCodes[\"tilde\"] = 126] = \"tilde\";\n    CharacterCodes[CharacterCodes[\"backspace\"] = 8] = \"backspace\";\n    CharacterCodes[CharacterCodes[\"formFeed\"] = 12] = \"formFeed\";\n    CharacterCodes[CharacterCodes[\"byteOrderMark\"] = 65279] = \"byteOrderMark\";\n    CharacterCodes[CharacterCodes[\"tab\"] = 9] = \"tab\";\n    CharacterCodes[CharacterCodes[\"verticalTab\"] = 11] = \"verticalTab\";\n  })(ts.CharacterCodes || (ts.CharacterCodes = {}));\n\n  var CharacterCodes = ts.CharacterCodes;\n})(ts || (ts = {})); /// <reference path=\"types.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  /**\n   * Ternary values are defined such that\n   * x & y is False if either x or y is False.\n   * x & y is Maybe if either x or y is Maybe, but neither x or y is False.\n   * x & y is True if both x and y are True.\n   * x | y is False if both x and y are False.\n   * x | y is Maybe if either x or y is Maybe, but neither x or y is True.\n   * x | y is True if either x or y is True.\n   */\n  (function (Ternary) {\n    Ternary[Ternary[\"False\"] = 0] = \"False\";\n    Ternary[Ternary[\"Maybe\"] = 1] = \"Maybe\";\n    Ternary[Ternary[\"True\"] = -1] = \"True\";\n  })(ts.Ternary || (ts.Ternary = {}));\n\n  var Ternary = ts.Ternary;\n\n  function createFileMap(keyMapper) {\n    var files = {};\n    return {\n      get: get,\n      set: set,\n      contains: contains,\n      remove: remove,\n      forEachValue: forEachValueInMap,\n      clear: clear\n    };\n\n    function forEachValueInMap(f) {\n      for (var key in files) {\n        f(key, files[key]);\n      }\n    } // path should already be well-formed so it does not need to be normalized\n\n\n    function get(path) {\n      return files[toKey(path)];\n    }\n\n    function set(path, value) {\n      files[toKey(path)] = value;\n    }\n\n    function contains(path) {\n      return hasProperty(files, toKey(path));\n    }\n\n    function remove(path) {\n      var key = toKey(path);\n      delete files[key];\n    }\n\n    function clear() {\n      files = {};\n    }\n\n    function toKey(path) {\n      return keyMapper ? keyMapper(path) : path;\n    }\n  }\n\n  ts.createFileMap = createFileMap;\n\n  function toPath(fileName, basePath, getCanonicalFileName) {\n    var nonCanonicalizedPath = isRootedDiskPath(fileName) ? normalizePath(fileName) : getNormalizedAbsolutePath(fileName, basePath);\n    return getCanonicalFileName(nonCanonicalizedPath);\n  }\n\n  ts.toPath = toPath;\n\n  (function (Comparison) {\n    Comparison[Comparison[\"LessThan\"] = -1] = \"LessThan\";\n    Comparison[Comparison[\"EqualTo\"] = 0] = \"EqualTo\";\n    Comparison[Comparison[\"GreaterThan\"] = 1] = \"GreaterThan\";\n  })(ts.Comparison || (ts.Comparison = {}));\n\n  var Comparison = ts.Comparison;\n  /**\n   * Iterates through 'array' by index and performs the callback on each element of array until the callback\n   * returns a truthy value, then returns that value.\n   * If no such value is found, the callback is applied to each element of array and undefined is returned.\n   */\n\n  function forEach(array, callback) {\n    if (array) {\n      for (var i = 0, len = array.length; i < len; i++) {\n        var result = callback(array[i], i);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ts.forEach = forEach;\n\n  function contains(array, value) {\n    if (array) {\n      for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {\n        var v = array_1[_i];\n\n        if (v === value) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  ts.contains = contains;\n\n  function indexOf(array, value) {\n    if (array) {\n      for (var i = 0, len = array.length; i < len; i++) {\n        if (array[i] === value) {\n          return i;\n        }\n      }\n    }\n\n    return -1;\n  }\n\n  ts.indexOf = indexOf;\n\n  function countWhere(array, predicate) {\n    var count = 0;\n\n    if (array) {\n      for (var _i = 0, array_2 = array; _i < array_2.length; _i++) {\n        var v = array_2[_i];\n\n        if (predicate(v)) {\n          count++;\n        }\n      }\n    }\n\n    return count;\n  }\n\n  ts.countWhere = countWhere;\n\n  function filter(array, f) {\n    var result;\n\n    if (array) {\n      result = [];\n\n      for (var _i = 0, array_3 = array; _i < array_3.length; _i++) {\n        var item = array_3[_i];\n\n        if (f(item)) {\n          result.push(item);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  ts.filter = filter;\n\n  function map(array, f) {\n    var result;\n\n    if (array) {\n      result = [];\n\n      for (var _i = 0, array_4 = array; _i < array_4.length; _i++) {\n        var v = array_4[_i];\n        result.push(f(v));\n      }\n    }\n\n    return result;\n  }\n\n  ts.map = map;\n\n  function concatenate(array1, array2) {\n    if (!array2 || !array2.length) return array1;\n    if (!array1 || !array1.length) return array2;\n    return array1.concat(array2);\n  }\n\n  ts.concatenate = concatenate;\n\n  function deduplicate(array) {\n    var result;\n\n    if (array) {\n      result = [];\n\n      for (var _i = 0, array_5 = array; _i < array_5.length; _i++) {\n        var item = array_5[_i];\n\n        if (!contains(result, item)) {\n          result.push(item);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  ts.deduplicate = deduplicate;\n\n  function sum(array, prop) {\n    var result = 0;\n\n    for (var _i = 0, array_6 = array; _i < array_6.length; _i++) {\n      var v = array_6[_i];\n      result += v[prop];\n    }\n\n    return result;\n  }\n\n  ts.sum = sum;\n\n  function addRange(to, from) {\n    if (to && from) {\n      for (var _i = 0, from_1 = from; _i < from_1.length; _i++) {\n        var v = from_1[_i];\n        to.push(v);\n      }\n    }\n  }\n\n  ts.addRange = addRange;\n\n  function rangeEquals(array1, array2, pos, end) {\n    while (pos < end) {\n      if (array1[pos] !== array2[pos]) {\n        return false;\n      }\n\n      pos++;\n    }\n\n    return true;\n  }\n\n  ts.rangeEquals = rangeEquals;\n  /**\n   * Returns the last element of an array if non-empty, undefined otherwise.\n   */\n\n  function lastOrUndefined(array) {\n    if (array.length === 0) {\n      return undefined;\n    }\n\n    return array[array.length - 1];\n  }\n\n  ts.lastOrUndefined = lastOrUndefined;\n  /**\n   * Performs a binary search, finding the index at which 'value' occurs in 'array'.\n   * If no such index is found, returns the 2's-complement of first index at which\n   * number[index] exceeds number.\n   * @param array A sorted array whose first element must be no larger than number\n   * @param number The value to be searched for in the array.\n   */\n\n  function binarySearch(array, value) {\n    var low = 0;\n    var high = array.length - 1;\n\n    while (low <= high) {\n      var middle = low + (high - low >> 1);\n      var midValue = array[middle];\n\n      if (midValue === value) {\n        return middle;\n      } else if (midValue > value) {\n        high = middle - 1;\n      } else {\n        low = middle + 1;\n      }\n    }\n\n    return ~low;\n  }\n\n  ts.binarySearch = binarySearch;\n\n  function reduceLeft(array, f, initial) {\n    if (array) {\n      var count = array.length;\n\n      if (count > 0) {\n        var pos = 0;\n        var result = arguments.length <= 2 ? array[pos] : initial;\n        pos++;\n\n        while (pos < count) {\n          result = f(result, array[pos]);\n          pos++;\n        }\n\n        return result;\n      }\n    }\n\n    return initial;\n  }\n\n  ts.reduceLeft = reduceLeft;\n\n  function reduceRight(array, f, initial) {\n    if (array) {\n      var pos = array.length - 1;\n\n      if (pos >= 0) {\n        var result = arguments.length <= 2 ? array[pos] : initial;\n        pos--;\n\n        while (pos >= 0) {\n          result = f(result, array[pos]);\n          pos--;\n        }\n\n        return result;\n      }\n    }\n\n    return initial;\n  }\n\n  ts.reduceRight = reduceRight;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function hasProperty(map, key) {\n    return hasOwnProperty.call(map, key);\n  }\n\n  ts.hasProperty = hasProperty;\n\n  function getKeys(map) {\n    var keys = [];\n\n    for (var key in map) {\n      keys.push(key);\n    }\n\n    return keys;\n  }\n\n  ts.getKeys = getKeys;\n\n  function getProperty(map, key) {\n    return hasOwnProperty.call(map, key) ? map[key] : undefined;\n  }\n\n  ts.getProperty = getProperty;\n\n  function isEmpty(map) {\n    for (var id in map) {\n      if (hasProperty(map, id)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  ts.isEmpty = isEmpty;\n\n  function clone(object) {\n    var result = {};\n\n    for (var id in object) {\n      result[id] = object[id];\n    }\n\n    return result;\n  }\n\n  ts.clone = clone;\n\n  function extend(first, second) {\n    var result = {};\n\n    for (var id in first) {\n      result[id] = first[id];\n    }\n\n    for (var id in second) {\n      if (!hasProperty(result, id)) {\n        result[id] = second[id];\n      }\n    }\n\n    return result;\n  }\n\n  ts.extend = extend;\n\n  function forEachValue(map, callback) {\n    var result;\n\n    for (var id in map) {\n      if (result = callback(map[id])) break;\n    }\n\n    return result;\n  }\n\n  ts.forEachValue = forEachValue;\n\n  function forEachKey(map, callback) {\n    var result;\n\n    for (var id in map) {\n      if (result = callback(id)) break;\n    }\n\n    return result;\n  }\n\n  ts.forEachKey = forEachKey;\n\n  function lookUp(map, key) {\n    return hasProperty(map, key) ? map[key] : undefined;\n  }\n\n  ts.lookUp = lookUp;\n\n  function copyMap(source, target) {\n    for (var p in source) {\n      target[p] = source[p];\n    }\n  }\n\n  ts.copyMap = copyMap;\n  /**\n   * Creates a map from the elements of an array.\n   *\n   * @param array the array of input elements.\n   * @param makeKey a function that produces a key for a given element.\n   *\n   * This function makes no effort to avoid collisions; if any two elements produce\n   * the same key with the given 'makeKey' function, then the element with the higher\n   * index in the array will be the one associated with the produced key.\n   */\n\n  function arrayToMap(array, makeKey) {\n    var result = {};\n    forEach(array, function (value) {\n      result[makeKey(value)] = value;\n    });\n    return result;\n  }\n\n  ts.arrayToMap = arrayToMap;\n  /**\n   * Reduce the properties of a map.\n   *\n   * @param map The map to reduce\n   * @param callback An aggregation function that is called for each entry in the map\n   * @param initial The initial value for the reduction.\n   */\n\n  function reduceProperties(map, callback, initial) {\n    var result = initial;\n\n    if (map) {\n      for (var key in map) {\n        if (hasProperty(map, key)) {\n          result = callback(result, map[key], String(key));\n        }\n      }\n    }\n\n    return result;\n  }\n\n  ts.reduceProperties = reduceProperties;\n  /**\n   * Tests whether a value is an array.\n   */\n\n  function isArray(value) {\n    return Array.isArray ? Array.isArray(value) : value instanceof Array;\n  }\n\n  ts.isArray = isArray;\n\n  function memoize(callback) {\n    var value;\n    return function () {\n      if (callback) {\n        value = callback();\n        callback = undefined;\n      }\n\n      return value;\n    };\n  }\n\n  ts.memoize = memoize;\n\n  function formatStringFromArgs(text, args, baseIndex) {\n    baseIndex = baseIndex || 0;\n    return text.replace(/{(\\d+)}/g, function (match, index) {\n      return args[+index + baseIndex];\n    });\n  }\n\n  ts.localizedDiagnosticMessages = undefined;\n\n  function getLocaleSpecificMessage(message) {\n    return ts.localizedDiagnosticMessages && ts.localizedDiagnosticMessages[message.key] ? ts.localizedDiagnosticMessages[message.key] : message.message;\n  }\n\n  ts.getLocaleSpecificMessage = getLocaleSpecificMessage;\n\n  function createFileDiagnostic(file, start, length, message) {\n    var end = start + length;\n    Debug.assert(start >= 0, \"start must be non-negative, is \" + start);\n    Debug.assert(length >= 0, \"length must be non-negative, is \" + length);\n\n    if (file) {\n      Debug.assert(start <= file.text.length, \"start must be within the bounds of the file. \" + start + \" > \" + file.text.length);\n      Debug.assert(end <= file.text.length, \"end must be the bounds of the file. \" + end + \" > \" + file.text.length);\n    }\n\n    var text = getLocaleSpecificMessage(message);\n\n    if (arguments.length > 4) {\n      text = formatStringFromArgs(text, arguments, 4);\n    }\n\n    return {\n      file: file,\n      start: start,\n      length: length,\n      messageText: text,\n      category: message.category,\n      code: message.code\n    };\n  }\n\n  ts.createFileDiagnostic = createFileDiagnostic;\n\n  function createCompilerDiagnostic(message) {\n    var text = getLocaleSpecificMessage(message);\n\n    if (arguments.length > 1) {\n      text = formatStringFromArgs(text, arguments, 1);\n    }\n\n    return {\n      file: undefined,\n      start: undefined,\n      length: undefined,\n      messageText: text,\n      category: message.category,\n      code: message.code\n    };\n  }\n\n  ts.createCompilerDiagnostic = createCompilerDiagnostic;\n\n  function chainDiagnosticMessages(details, message) {\n    var text = getLocaleSpecificMessage(message);\n\n    if (arguments.length > 2) {\n      text = formatStringFromArgs(text, arguments, 2);\n    }\n\n    return {\n      messageText: text,\n      category: message.category,\n      code: message.code,\n      next: details\n    };\n  }\n\n  ts.chainDiagnosticMessages = chainDiagnosticMessages;\n\n  function concatenateDiagnosticMessageChains(headChain, tailChain) {\n    var lastChain = headChain;\n\n    while (lastChain.next) {\n      lastChain = lastChain.next;\n    }\n\n    lastChain.next = tailChain;\n    return headChain;\n  }\n\n  ts.concatenateDiagnosticMessageChains = concatenateDiagnosticMessageChains;\n\n  function compareValues(a, b) {\n    if (a === b) return 0\n    /* EqualTo */\n    ;\n    if (a === undefined) return -1\n    /* LessThan */\n    ;\n    if (b === undefined) return 1\n    /* GreaterThan */\n    ;\n    return a < b ? -1\n    /* LessThan */\n    : 1\n    /* GreaterThan */\n    ;\n  }\n\n  ts.compareValues = compareValues;\n\n  function getDiagnosticFileName(diagnostic) {\n    return diagnostic.file ? diagnostic.file.fileName : undefined;\n  }\n\n  function compareDiagnostics(d1, d2) {\n    return compareValues(getDiagnosticFileName(d1), getDiagnosticFileName(d2)) || compareValues(d1.start, d2.start) || compareValues(d1.length, d2.length) || compareValues(d1.code, d2.code) || compareMessageText(d1.messageText, d2.messageText) || 0\n    /* EqualTo */\n    ;\n  }\n\n  ts.compareDiagnostics = compareDiagnostics;\n\n  function compareMessageText(text1, text2) {\n    while (text1 && text2) {\n      // We still have both chains.\n      var string1 = typeof text1 === \"string\" ? text1 : text1.messageText;\n      var string2 = typeof text2 === \"string\" ? text2 : text2.messageText;\n      var res = compareValues(string1, string2);\n\n      if (res) {\n        return res;\n      }\n\n      text1 = typeof text1 === \"string\" ? undefined : text1.next;\n      text2 = typeof text2 === \"string\" ? undefined : text2.next;\n    }\n\n    if (!text1 && !text2) {\n      // if the chains are done, then these messages are the same.\n      return 0\n      /* EqualTo */\n      ;\n    } // We still have one chain remaining.  The shorter chain should come first.\n\n\n    return text1 ? 1\n    /* GreaterThan */\n    : -1\n    /* LessThan */\n    ;\n  }\n\n  function sortAndDeduplicateDiagnostics(diagnostics) {\n    return deduplicateSortedDiagnostics(diagnostics.sort(compareDiagnostics));\n  }\n\n  ts.sortAndDeduplicateDiagnostics = sortAndDeduplicateDiagnostics;\n\n  function deduplicateSortedDiagnostics(diagnostics) {\n    if (diagnostics.length < 2) {\n      return diagnostics;\n    }\n\n    var newDiagnostics = [diagnostics[0]];\n    var previousDiagnostic = diagnostics[0];\n\n    for (var i = 1; i < diagnostics.length; i++) {\n      var currentDiagnostic = diagnostics[i];\n      var isDupe = compareDiagnostics(currentDiagnostic, previousDiagnostic) === 0\n      /* EqualTo */\n      ;\n\n      if (!isDupe) {\n        newDiagnostics.push(currentDiagnostic);\n        previousDiagnostic = currentDiagnostic;\n      }\n    }\n\n    return newDiagnostics;\n  }\n\n  ts.deduplicateSortedDiagnostics = deduplicateSortedDiagnostics;\n\n  function normalizeSlashes(path) {\n    return path.replace(/\\\\/g, \"/\");\n  }\n\n  ts.normalizeSlashes = normalizeSlashes; // Returns length of path root (i.e. length of \"/\", \"x:/\", \"//server/share/, file:///user/files\")\n\n  function getRootLength(path) {\n    if (path.charCodeAt(0) === 47\n    /* slash */\n    ) {\n        if (path.charCodeAt(1) !== 47\n        /* slash */\n        ) return 1;\n        var p1 = path.indexOf(\"/\", 2);\n        if (p1 < 0) return 2;\n        var p2 = path.indexOf(\"/\", p1 + 1);\n        if (p2 < 0) return p1 + 1;\n        return p2 + 1;\n      }\n\n    if (path.charCodeAt(1) === 58\n    /* colon */\n    ) {\n        if (path.charCodeAt(2) === 47\n        /* slash */\n        ) return 3;\n        return 2;\n      } // Per RFC 1738 'file' URI schema has the shape file://<host>/<path>\n    // if <host> is omitted then it is assumed that host value is 'localhost',\n    // however slash after the omitted <host> is not removed.\n    // file:///folder1/file1 - this is a correct URI\n    // file://folder2/file2 - this is an incorrect URI\n\n\n    if (path.lastIndexOf(\"file:///\", 0) === 0) {\n      return \"file:///\".length;\n    }\n\n    var idx = path.indexOf(\"://\");\n\n    if (idx !== -1) {\n      return idx + \"://\".length;\n    }\n\n    return 0;\n  }\n\n  ts.getRootLength = getRootLength;\n  ts.directorySeparator = \"/\";\n\n  function getNormalizedParts(normalizedSlashedPath, rootLength) {\n    var parts = normalizedSlashedPath.substr(rootLength).split(ts.directorySeparator);\n    var normalized = [];\n\n    for (var _i = 0, parts_1 = parts; _i < parts_1.length; _i++) {\n      var part = parts_1[_i];\n\n      if (part !== \".\") {\n        if (part === \"..\" && normalized.length > 0 && lastOrUndefined(normalized) !== \"..\") {\n          normalized.pop();\n        } else {\n          // A part may be an empty string (which is 'falsy') if the path had consecutive slashes,\n          // e.g. \"path//file.ts\".  Drop these before re-joining the parts.\n          if (part) {\n            normalized.push(part);\n          }\n        }\n      }\n    }\n\n    return normalized;\n  }\n\n  function normalizePath(path) {\n    path = normalizeSlashes(path);\n    var rootLength = getRootLength(path);\n    var normalized = getNormalizedParts(path, rootLength);\n    return path.substr(0, rootLength) + normalized.join(ts.directorySeparator);\n  }\n\n  ts.normalizePath = normalizePath;\n\n  function getDirectoryPath(path) {\n    return path.substr(0, Math.max(getRootLength(path), path.lastIndexOf(ts.directorySeparator)));\n  }\n\n  ts.getDirectoryPath = getDirectoryPath;\n\n  function isUrl(path) {\n    return path && !isRootedDiskPath(path) && path.indexOf(\"://\") !== -1;\n  }\n\n  ts.isUrl = isUrl;\n\n  function isRootedDiskPath(path) {\n    return getRootLength(path) !== 0;\n  }\n\n  ts.isRootedDiskPath = isRootedDiskPath;\n\n  function normalizedPathComponents(path, rootLength) {\n    var normalizedParts = getNormalizedParts(path, rootLength);\n    return [path.substr(0, rootLength)].concat(normalizedParts);\n  }\n\n  function getNormalizedPathComponents(path, currentDirectory) {\n    path = normalizeSlashes(path);\n    var rootLength = getRootLength(path);\n\n    if (rootLength === 0) {\n      // If the path is not rooted it is relative to current directory\n      path = combinePaths(normalizeSlashes(currentDirectory), path);\n      rootLength = getRootLength(path);\n    }\n\n    return normalizedPathComponents(path, rootLength);\n  }\n\n  ts.getNormalizedPathComponents = getNormalizedPathComponents;\n\n  function getNormalizedAbsolutePath(fileName, currentDirectory) {\n    return getNormalizedPathFromPathComponents(getNormalizedPathComponents(fileName, currentDirectory));\n  }\n\n  ts.getNormalizedAbsolutePath = getNormalizedAbsolutePath;\n\n  function getNormalizedPathFromPathComponents(pathComponents) {\n    if (pathComponents && pathComponents.length) {\n      return pathComponents[0] + pathComponents.slice(1).join(ts.directorySeparator);\n    }\n  }\n\n  ts.getNormalizedPathFromPathComponents = getNormalizedPathFromPathComponents;\n\n  function getNormalizedPathComponentsOfUrl(url) {\n    // Get root length of http://www.website.com/folder1/foler2/\n    // In this example the root is:  http://www.website.com/\n    // normalized path components should be [\"http://www.website.com/\", \"folder1\", \"folder2\"]\n    var urlLength = url.length; // Initial root length is http:// part\n\n    var rootLength = url.indexOf(\"://\") + \"://\".length;\n\n    while (rootLength < urlLength) {\n      // Consume all immediate slashes in the protocol\n      // eg.initial rootlength is just file:// but it needs to consume another \"/\" in file:///\n      if (url.charCodeAt(rootLength) === 47\n      /* slash */\n      ) {\n          rootLength++;\n        } else {\n        // non slash character means we continue proceeding to next component of root search\n        break;\n      }\n    } // there are no parts after http:// just return current string as the pathComponent\n\n\n    if (rootLength === urlLength) {\n      return [url];\n    } // Find the index of \"/\" after website.com so the root can be http://www.website.com/ (from existing http://)\n\n\n    var indexOfNextSlash = url.indexOf(ts.directorySeparator, rootLength);\n\n    if (indexOfNextSlash !== -1) {\n      // Found the \"/\" after the website.com so the root is length of http://www.website.com/\n      // and get components afetr the root normally like any other folder components\n      rootLength = indexOfNextSlash + 1;\n      return normalizedPathComponents(url, rootLength);\n    } else {\n      // Can't find the host assume the rest of the string as component\n      // but make sure we append \"/\"  to it as root is not joined using \"/\"\n      // eg. if url passed in was http://website.com we want to use root as [http://website.com/]\n      // so that other path manipulations will be correct and it can be merged with relative paths correctly\n      return [url + ts.directorySeparator];\n    }\n  }\n\n  function getNormalizedPathOrUrlComponents(pathOrUrl, currentDirectory) {\n    if (isUrl(pathOrUrl)) {\n      return getNormalizedPathComponentsOfUrl(pathOrUrl);\n    } else {\n      return getNormalizedPathComponents(pathOrUrl, currentDirectory);\n    }\n  }\n\n  function getRelativePathToDirectoryOrUrl(directoryPathOrUrl, relativeOrAbsolutePath, currentDirectory, getCanonicalFileName, isAbsolutePathAnUrl) {\n    var pathComponents = getNormalizedPathOrUrlComponents(relativeOrAbsolutePath, currentDirectory);\n    var directoryComponents = getNormalizedPathOrUrlComponents(directoryPathOrUrl, currentDirectory);\n\n    if (directoryComponents.length > 1 && lastOrUndefined(directoryComponents) === \"\") {\n      // If the directory path given was of type test/cases/ then we really need components of directory to be only till its name\n      // that is  [\"test\", \"cases\", \"\"] needs to be actually [\"test\", \"cases\"]\n      directoryComponents.length--;\n    } // Find the component that differs\n\n\n    var joinStartIndex;\n\n    for (joinStartIndex = 0; joinStartIndex < pathComponents.length && joinStartIndex < directoryComponents.length; joinStartIndex++) {\n      if (getCanonicalFileName(directoryComponents[joinStartIndex]) !== getCanonicalFileName(pathComponents[joinStartIndex])) {\n        break;\n      }\n    } // Get the relative path\n\n\n    if (joinStartIndex) {\n      var relativePath = \"\";\n      var relativePathComponents = pathComponents.slice(joinStartIndex, pathComponents.length);\n\n      for (; joinStartIndex < directoryComponents.length; joinStartIndex++) {\n        if (directoryComponents[joinStartIndex] !== \"\") {\n          relativePath = relativePath + \"..\" + ts.directorySeparator;\n        }\n      }\n\n      return relativePath + relativePathComponents.join(ts.directorySeparator);\n    } // Cant find the relative path, get the absolute path\n\n\n    var absolutePath = getNormalizedPathFromPathComponents(pathComponents);\n\n    if (isAbsolutePathAnUrl && isRootedDiskPath(absolutePath)) {\n      absolutePath = \"file:///\" + absolutePath;\n    }\n\n    return absolutePath;\n  }\n\n  ts.getRelativePathToDirectoryOrUrl = getRelativePathToDirectoryOrUrl;\n\n  function getBaseFileName(path) {\n    if (path === undefined) {\n      return undefined;\n    }\n\n    var i = path.lastIndexOf(ts.directorySeparator);\n    return i < 0 ? path : path.substring(i + 1);\n  }\n\n  ts.getBaseFileName = getBaseFileName;\n\n  function combinePaths(path1, path2) {\n    if (!(path1 && path1.length)) return path2;\n    if (!(path2 && path2.length)) return path1;\n    if (getRootLength(path2) !== 0) return path2;\n    if (path1.charAt(path1.length - 1) === ts.directorySeparator) return path1 + path2;\n    return path1 + ts.directorySeparator + path2;\n  }\n\n  ts.combinePaths = combinePaths;\n\n  function fileExtensionIs(path, extension) {\n    var pathLen = path.length;\n    var extLen = extension.length;\n    return pathLen > extLen && path.substr(pathLen - extLen, extLen) === extension;\n  }\n\n  ts.fileExtensionIs = fileExtensionIs;\n\n  function ensureScriptKind(fileName, scriptKind) {\n    // Using scriptKind as a condition handles both:\n    // - 'scriptKind' is unspecified and thus it is `undefined`\n    // - 'scriptKind' is set and it is `Unknown` (0)\n    // If the 'scriptKind' is 'undefined' or 'Unknown' then we attempt\n    // to get the ScriptKind from the file name. If it cannot be resolved\n    // from the file name then the default 'TS' script kind is returned.\n    return scriptKind || getScriptKindFromFileName(fileName) || 3\n    /* TS */\n    ;\n  }\n\n  ts.ensureScriptKind = ensureScriptKind;\n\n  function getScriptKindFromFileName(fileName) {\n    var ext = fileName.substr(fileName.lastIndexOf(\".\"));\n\n    switch (ext.toLowerCase()) {\n      case \".js\":\n        return 1\n        /* JS */\n        ;\n\n      case \".jsx\":\n        return 2\n        /* JSX */\n        ;\n\n      case \".ts\":\n        return 3\n        /* TS */\n        ;\n\n      case \".tsx\":\n        return 4\n        /* TSX */\n        ;\n\n      default:\n        return 0\n        /* Unknown */\n        ;\n    }\n  }\n\n  ts.getScriptKindFromFileName = getScriptKindFromFileName;\n  /**\n   *  List of supported extensions in order of file resolution precedence.\n   */\n\n  ts.supportedTypeScriptExtensions = [\".ts\", \".tsx\", \".d.ts\"];\n  ts.supportedJavascriptExtensions = [\".js\", \".jsx\"];\n  var allSupportedExtensions = ts.supportedTypeScriptExtensions.concat(ts.supportedJavascriptExtensions);\n\n  function getSupportedExtensions(options) {\n    return options && options.allowJs ? allSupportedExtensions : ts.supportedTypeScriptExtensions;\n  }\n\n  ts.getSupportedExtensions = getSupportedExtensions;\n\n  function isSupportedSourceFileName(fileName, compilerOptions) {\n    if (!fileName) {\n      return false;\n    }\n\n    for (var _i = 0, _a = getSupportedExtensions(compilerOptions); _i < _a.length; _i++) {\n      var extension = _a[_i];\n\n      if (fileExtensionIs(fileName, extension)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  ts.isSupportedSourceFileName = isSupportedSourceFileName;\n  var extensionsToRemove = [\".d.ts\", \".ts\", \".js\", \".tsx\", \".jsx\"];\n\n  function removeFileExtension(path) {\n    for (var _i = 0, extensionsToRemove_1 = extensionsToRemove; _i < extensionsToRemove_1.length; _i++) {\n      var ext = extensionsToRemove_1[_i];\n\n      if (fileExtensionIs(path, ext)) {\n        return path.substr(0, path.length - ext.length);\n      }\n    }\n\n    return path;\n  }\n\n  ts.removeFileExtension = removeFileExtension;\n\n  function Symbol(flags, name) {\n    this.flags = flags;\n    this.name = name;\n    this.declarations = undefined;\n  }\n\n  function Type(checker, flags) {\n    this.flags = flags;\n  }\n\n  function Signature(checker) {}\n\n  function Node(kind, pos, end) {\n    this.kind = kind;\n    this.pos = pos;\n    this.end = end;\n    this.flags = 0\n    /* None */\n    ;\n    this.parent = undefined;\n  }\n\n  ts.objectAllocator = {\n    getNodeConstructor: function getNodeConstructor() {\n      return Node;\n    },\n    getSourceFileConstructor: function getSourceFileConstructor() {\n      return Node;\n    },\n    getSymbolConstructor: function getSymbolConstructor() {\n      return Symbol;\n    },\n    getTypeConstructor: function getTypeConstructor() {\n      return Type;\n    },\n    getSignatureConstructor: function getSignatureConstructor() {\n      return Signature;\n    }\n  };\n\n  (function (AssertionLevel) {\n    AssertionLevel[AssertionLevel[\"None\"] = 0] = \"None\";\n    AssertionLevel[AssertionLevel[\"Normal\"] = 1] = \"Normal\";\n    AssertionLevel[AssertionLevel[\"Aggressive\"] = 2] = \"Aggressive\";\n    AssertionLevel[AssertionLevel[\"VeryAggressive\"] = 3] = \"VeryAggressive\";\n  })(ts.AssertionLevel || (ts.AssertionLevel = {}));\n\n  var AssertionLevel = ts.AssertionLevel;\n  var Debug;\n\n  (function (Debug) {\n    var currentAssertionLevel = 0\n    /* None */\n    ;\n\n    function shouldAssert(level) {\n      return currentAssertionLevel >= level;\n    }\n\n    Debug.shouldAssert = shouldAssert;\n\n    function assert(expression, message, verboseDebugInfo) {\n      if (!expression) {\n        var verboseDebugString = \"\";\n\n        if (verboseDebugInfo) {\n          verboseDebugString = \"\\r\\nVerbose Debug Information: \" + verboseDebugInfo();\n        }\n\n        debugger;\n        throw new Error(\"Debug Failure. False expression: \" + (message || \"\") + verboseDebugString);\n      }\n    }\n\n    Debug.assert = assert;\n\n    function fail(message) {\n      Debug.assert(\n      /*expression*/\n      false, message);\n    }\n\n    Debug.fail = fail;\n  })(Debug = ts.Debug || (ts.Debug = {}));\n\n  function copyListRemovingItem(item, list) {\n    var copiedList = [];\n\n    for (var _i = 0, list_1 = list; _i < list_1.length; _i++) {\n      var e = list_1[_i];\n\n      if (e !== item) {\n        copiedList.push(e);\n      }\n    }\n\n    return copiedList;\n  }\n\n  ts.copyListRemovingItem = copyListRemovingItem;\n\n  function createGetCanonicalFileName(useCaseSensitivefileNames) {\n    return useCaseSensitivefileNames ? function (fileName) {\n      return fileName;\n    } : function (fileName) {\n      return fileName.toLowerCase();\n    };\n  }\n\n  ts.createGetCanonicalFileName = createGetCanonicalFileName;\n})(ts || (ts = {})); /// <reference path=\"core.ts\"/>\n\n\nvar ts;\n\n(function (ts) {\n  ts.sys = function () {\n    function getWScriptSystem() {\n      var fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n      var fileStream = new ActiveXObject(\"ADODB.Stream\");\n      fileStream.Type = 2\n      /*text*/\n      ;\n      var binaryStream = new ActiveXObject(\"ADODB.Stream\");\n      binaryStream.Type = 1\n      /*binary*/\n      ;\n      var args = [];\n\n      for (var i = 0; i < WScript.Arguments.length; i++) {\n        args[i] = WScript.Arguments.Item(i);\n      }\n\n      function readFile(fileName, encoding) {\n        if (!fso.FileExists(fileName)) {\n          return undefined;\n        }\n\n        fileStream.Open();\n\n        try {\n          if (encoding) {\n            fileStream.Charset = encoding;\n            fileStream.LoadFromFile(fileName);\n          } else {\n            // Load file and read the first two bytes into a string with no interpretation\n            fileStream.Charset = \"x-ansi\";\n            fileStream.LoadFromFile(fileName);\n            var bom = fileStream.ReadText(2) || \"\"; // Position must be at 0 before encoding can be changed\n\n            fileStream.Position = 0; // [0xFF,0xFE] and [0xFE,0xFF] mean utf-16 (little or big endian), otherwise default to utf-8\n\n            fileStream.Charset = bom.length >= 2 && (bom.charCodeAt(0) === 0xFF && bom.charCodeAt(1) === 0xFE || bom.charCodeAt(0) === 0xFE && bom.charCodeAt(1) === 0xFF) ? \"unicode\" : \"utf-8\";\n          } // ReadText method always strips byte order mark from resulting string\n\n\n          return fileStream.ReadText();\n        } catch (e) {\n          throw e;\n        } finally {\n          fileStream.Close();\n        }\n      }\n\n      function writeFile(fileName, data, writeByteOrderMark) {\n        fileStream.Open();\n        binaryStream.Open();\n\n        try {\n          // Write characters in UTF-8 encoding\n          fileStream.Charset = \"utf-8\";\n          fileStream.WriteText(data); // If we don't want the BOM, then skip it by setting the starting location to 3 (size of BOM).\n          // If not, start from position 0, as the BOM will be added automatically when charset==utf8.\n\n          if (writeByteOrderMark) {\n            fileStream.Position = 0;\n          } else {\n            fileStream.Position = 3;\n          }\n\n          fileStream.CopyTo(binaryStream);\n          binaryStream.SaveToFile(fileName, 2\n          /*overwrite*/\n          );\n        } finally {\n          binaryStream.Close();\n          fileStream.Close();\n        }\n      }\n\n      function getCanonicalPath(path) {\n        return path.toLowerCase();\n      }\n\n      function getNames(collection) {\n        var result = [];\n\n        for (var e = new Enumerator(collection); !e.atEnd(); e.moveNext()) {\n          result.push(e.item().Name);\n        }\n\n        return result.sort();\n      }\n\n      function readDirectory(path, extension, exclude) {\n        var result = [];\n        exclude = ts.map(exclude, function (s) {\n          return getCanonicalPath(ts.combinePaths(path, s));\n        });\n        visitDirectory(path);\n        return result;\n\n        function visitDirectory(path) {\n          var folder = fso.GetFolder(path || \".\");\n          var files = getNames(folder.files);\n\n          for (var _i = 0, files_1 = files; _i < files_1.length; _i++) {\n            var current = files_1[_i];\n            var name_1 = ts.combinePaths(path, current);\n\n            if ((!extension || ts.fileExtensionIs(name_1, extension)) && !ts.contains(exclude, getCanonicalPath(name_1))) {\n              result.push(name_1);\n            }\n          }\n\n          var subfolders = getNames(folder.subfolders);\n\n          for (var _a = 0, subfolders_1 = subfolders; _a < subfolders_1.length; _a++) {\n            var current = subfolders_1[_a];\n            var name_2 = ts.combinePaths(path, current);\n\n            if (!ts.contains(exclude, getCanonicalPath(name_2))) {\n              visitDirectory(name_2);\n            }\n          }\n        }\n      }\n\n      return {\n        args: args,\n        newLine: \"\\r\\n\",\n        useCaseSensitiveFileNames: false,\n        write: function write(s) {\n          WScript.StdOut.Write(s);\n        },\n        readFile: readFile,\n        writeFile: writeFile,\n        resolvePath: function resolvePath(path) {\n          return fso.GetAbsolutePathName(path);\n        },\n        fileExists: function fileExists(path) {\n          return fso.FileExists(path);\n        },\n        directoryExists: function directoryExists(path) {\n          return fso.FolderExists(path);\n        },\n        createDirectory: function createDirectory(directoryName) {\n          if (!this.directoryExists(directoryName)) {\n            fso.CreateFolder(directoryName);\n          }\n        },\n        getExecutingFilePath: function getExecutingFilePath() {\n          return WScript.ScriptFullName;\n        },\n        getCurrentDirectory: function getCurrentDirectory() {\n          return new ActiveXObject(\"WScript.Shell\").CurrentDirectory;\n        },\n        readDirectory: readDirectory,\n        exit: function exit(exitCode) {\n          try {\n            WScript.Quit(exitCode);\n          } catch (e) {}\n        }\n      };\n    }\n\n    function getNodeSystem() {\n      var _fs = require(\"fs\");\n\n      var _path = require(\"path\");\n\n      var _os = require(\"os\"); // average async stat takes about 30 microseconds\n      // set chunk size to do 30 files in < 1 millisecond\n\n\n      function createPollingWatchedFileSet(interval, chunkSize) {\n        if (interval === void 0) {\n          interval = 2500;\n        }\n\n        if (chunkSize === void 0) {\n          chunkSize = 30;\n        }\n\n        var watchedFiles = [];\n        var nextFileToCheck = 0;\n        var watchTimer;\n\n        function getModifiedTime(fileName) {\n          return _fs.statSync(fileName).mtime;\n        }\n\n        function poll(checkedIndex) {\n          var watchedFile = watchedFiles[checkedIndex];\n\n          if (!watchedFile) {\n            return;\n          }\n\n          _fs.stat(watchedFile.filePath, function (err, stats) {\n            if (err) {\n              watchedFile.callback(watchedFile.filePath);\n            } else if (watchedFile.mtime.getTime() !== stats.mtime.getTime()) {\n              watchedFile.mtime = getModifiedTime(watchedFile.filePath);\n              watchedFile.callback(watchedFile.filePath, watchedFile.mtime.getTime() === 0);\n            }\n          });\n        } // this implementation uses polling and\n        // stat due to inconsistencies of fs.watch\n        // and efficiency of stat on modern filesystems\n\n\n        function startWatchTimer() {\n          watchTimer = setInterval(function () {\n            var count = 0;\n            var nextToCheck = nextFileToCheck;\n            var firstCheck = -1;\n\n            while (count < chunkSize && nextToCheck !== firstCheck) {\n              poll(nextToCheck);\n\n              if (firstCheck < 0) {\n                firstCheck = nextToCheck;\n              }\n\n              nextToCheck++;\n\n              if (nextToCheck === watchedFiles.length) {\n                nextToCheck = 0;\n              }\n\n              count++;\n            }\n\n            nextFileToCheck = nextToCheck;\n          }, interval);\n        }\n\n        function addFile(filePath, callback) {\n          var file = {\n            filePath: filePath,\n            callback: callback,\n            mtime: getModifiedTime(filePath)\n          };\n          watchedFiles.push(file);\n\n          if (watchedFiles.length === 1) {\n            startWatchTimer();\n          }\n\n          return file;\n        }\n\n        function removeFile(file) {\n          watchedFiles = ts.copyListRemovingItem(file, watchedFiles);\n        }\n\n        return {\n          getModifiedTime: getModifiedTime,\n          poll: poll,\n          startWatchTimer: startWatchTimer,\n          addFile: addFile,\n          removeFile: removeFile\n        };\n      }\n\n      function createWatchedFileSet() {\n        var dirWatchers = ts.createFileMap(); // One file can have multiple watchers\n\n        var fileWatcherCallbacks = ts.createFileMap();\n        return {\n          addFile: addFile,\n          removeFile: removeFile\n        };\n\n        function reduceDirWatcherRefCountForFile(filePath) {\n          var dirPath = ts.getDirectoryPath(filePath);\n\n          if (dirWatchers.contains(dirPath)) {\n            var watcher = dirWatchers.get(dirPath);\n            watcher.referenceCount -= 1;\n\n            if (watcher.referenceCount <= 0) {\n              watcher.close();\n              dirWatchers.remove(dirPath);\n            }\n          }\n        }\n\n        function addDirWatcher(dirPath) {\n          if (dirWatchers.contains(dirPath)) {\n            var watcher_1 = dirWatchers.get(dirPath);\n            watcher_1.referenceCount += 1;\n            return;\n          }\n\n          var watcher = _fs.watch(dirPath, {\n            persistent: true\n          }, function (eventName, relativeFileName) {\n            return fileEventHandler(eventName, relativeFileName, dirPath);\n          });\n\n          watcher.referenceCount = 1;\n          dirWatchers.set(dirPath, watcher);\n          return;\n        }\n\n        function addFileWatcherCallback(filePath, callback) {\n          if (fileWatcherCallbacks.contains(filePath)) {\n            fileWatcherCallbacks.get(filePath).push(callback);\n          } else {\n            fileWatcherCallbacks.set(filePath, [callback]);\n          }\n        }\n\n        function addFile(filePath, callback) {\n          addFileWatcherCallback(filePath, callback);\n          addDirWatcher(ts.getDirectoryPath(filePath));\n          return {\n            filePath: filePath,\n            callback: callback\n          };\n        }\n\n        function removeFile(watchedFile) {\n          removeFileWatcherCallback(watchedFile.filePath, watchedFile.callback);\n          reduceDirWatcherRefCountForFile(watchedFile.filePath);\n        }\n\n        function removeFileWatcherCallback(filePath, callback) {\n          if (fileWatcherCallbacks.contains(filePath)) {\n            var newCallbacks = ts.copyListRemovingItem(callback, fileWatcherCallbacks.get(filePath));\n\n            if (newCallbacks.length === 0) {\n              fileWatcherCallbacks.remove(filePath);\n            } else {\n              fileWatcherCallbacks.set(filePath, newCallbacks);\n            }\n          }\n        }\n        /**\n         * @param watcherPath is the path from which the watcher is triggered.\n         */\n\n\n        function fileEventHandler(eventName, relativeFileName, baseDirPath) {\n          // When files are deleted from disk, the triggered \"rename\" event would have a relativefileName of \"undefined\"\n          var filePath = typeof relativeFileName !== \"string\" ? undefined : ts.toPath(relativeFileName, baseDirPath, ts.createGetCanonicalFileName(ts.sys.useCaseSensitiveFileNames)); // Some applications save a working file via rename operations\n\n          if ((eventName === \"change\" || eventName === \"rename\") && fileWatcherCallbacks.contains(filePath)) {\n            for (var _i = 0, _a = fileWatcherCallbacks.get(filePath); _i < _a.length; _i++) {\n              var fileCallback = _a[_i];\n              fileCallback(filePath);\n            }\n          }\n        }\n      } // REVIEW: for now this implementation uses polling.\n      // The advantage of polling is that it works reliably\n      // on all os and with network mounted files.\n      // For 90 referenced files, the average time to detect\n      // changes is 2*msInterval (by default 5 seconds).\n      // The overhead of this is .04 percent (1/2500) with\n      // average pause of < 1 millisecond (and max\n      // pause less than 1.5 milliseconds); question is\n      // do we anticipate reference sets in the 100s and\n      // do we care about waiting 10-20 seconds to detect\n      // changes for large reference sets? If so, do we want\n      // to increase the chunk size or decrease the interval\n      // time dynamically to match the large reference set?\n\n\n      var pollingWatchedFileSet = createPollingWatchedFileSet();\n      var watchedFileSet = createWatchedFileSet();\n\n      function isNode4OrLater() {\n        return parseInt(process.version.charAt(1)) >= 4;\n      }\n\n      var platform = _os.platform(); // win32\\win64 are case insensitive platforms, MacOS (darwin) by default is also case insensitive\n\n\n      var useCaseSensitiveFileNames = platform !== \"win32\" && platform !== \"win64\" && platform !== \"darwin\";\n\n      function readFile(fileName, encoding) {\n        if (!_fs.existsSync(fileName)) {\n          return undefined;\n        }\n\n        var buffer = _fs.readFileSync(fileName);\n\n        var len = buffer.length;\n\n        if (len >= 2 && buffer[0] === 0xFE && buffer[1] === 0xFF) {\n          // Big endian UTF-16 byte order mark detected. Since big endian is not supported by node.js,\n          // flip all byte pairs and treat as little endian.\n          len &= ~1;\n\n          for (var i = 0; i < len; i += 2) {\n            var temp = buffer[i];\n            buffer[i] = buffer[i + 1];\n            buffer[i + 1] = temp;\n          }\n\n          return buffer.toString(\"utf16le\", 2);\n        }\n\n        if (len >= 2 && buffer[0] === 0xFF && buffer[1] === 0xFE) {\n          // Little endian UTF-16 byte order mark detected\n          return buffer.toString(\"utf16le\", 2);\n        }\n\n        if (len >= 3 && buffer[0] === 0xEF && buffer[1] === 0xBB && buffer[2] === 0xBF) {\n          // UTF-8 byte order mark detected\n          return buffer.toString(\"utf8\", 3);\n        } // Default is UTF-8 with no byte order mark\n\n\n        return buffer.toString(\"utf8\");\n      }\n\n      function writeFile(fileName, data, writeByteOrderMark) {\n        // If a BOM is required, emit one\n        if (writeByteOrderMark) {\n          data = \"\\uFEFF\" + data;\n        }\n\n        var fd;\n\n        try {\n          fd = _fs.openSync(fileName, \"w\");\n\n          _fs.writeSync(fd, data, undefined, \"utf8\");\n        } finally {\n          if (fd !== undefined) {\n            _fs.closeSync(fd);\n          }\n        }\n      }\n\n      function getCanonicalPath(path) {\n        return useCaseSensitiveFileNames ? path : path.toLowerCase();\n      }\n\n      function readDirectory(path, extension, exclude) {\n        var result = [];\n        exclude = ts.map(exclude, function (s) {\n          return getCanonicalPath(ts.combinePaths(path, s));\n        });\n        visitDirectory(path);\n        return result;\n\n        function visitDirectory(path) {\n          var files = _fs.readdirSync(path || \".\").sort();\n\n          var directories = [];\n\n          for (var _i = 0, files_2 = files; _i < files_2.length; _i++) {\n            var current = files_2[_i];\n            var name_3 = ts.combinePaths(path, current);\n\n            if (!ts.contains(exclude, getCanonicalPath(name_3))) {\n              // fs.statSync would throw an exception if the file is a symlink\n              // whose linked file doesn't exist.\n              try {\n                var stat = _fs.statSync(name_3);\n\n                if (stat.isFile()) {\n                  if (!extension || ts.fileExtensionIs(name_3, extension)) {\n                    result.push(name_3);\n                  }\n                } else if (stat.isDirectory()) {\n                  directories.push(name_3);\n                }\n              } catch (e) {}\n            }\n          }\n\n          for (var _a = 0, directories_1 = directories; _a < directories_1.length; _a++) {\n            var current = directories_1[_a];\n            visitDirectory(current);\n          }\n        }\n      }\n\n      return {\n        args: process.argv.slice(2),\n        newLine: _os.EOL,\n        useCaseSensitiveFileNames: useCaseSensitiveFileNames,\n        write: function write(s) {\n          process.stdout.write(s);\n        },\n        readFile: readFile,\n        writeFile: writeFile,\n        watchFile: function watchFile(filePath, callback) {\n          // Node 4.0 stablized the `fs.watch` function on Windows which avoids polling\n          // and is more efficient than `fs.watchFile` (ref: https://github.com/nodejs/node/pull/2649\n          // and https://github.com/Microsoft/TypeScript/issues/4643), therefore\n          // if the current node.js version is newer than 4, use `fs.watch` instead.\n          var watchSet = isNode4OrLater() ? watchedFileSet : pollingWatchedFileSet;\n          var watchedFile = watchSet.addFile(filePath, callback);\n          return {\n            close: function close() {\n              return watchSet.removeFile(watchedFile);\n            }\n          };\n        },\n        watchDirectory: function watchDirectory(path, callback, recursive) {\n          // Node 4.0 `fs.watch` function supports the \"recursive\" option on both OSX and Windows\n          // (ref: https://github.com/nodejs/node/pull/2649 and https://github.com/Microsoft/TypeScript/issues/4643)\n          var options;\n\n          if (isNode4OrLater() && (process.platform === \"win32\" || process.platform === \"darwin\")) {\n            options = {\n              persistent: true,\n              recursive: !!recursive\n            };\n          } else {\n            options = {\n              persistent: true\n            };\n          }\n\n          return _fs.watch(path, options, function (eventName, relativeFileName) {\n            // In watchDirectory we only care about adding and removing files (when event name is\n            // \"rename\"); changes made within files are handled by corresponding fileWatchers (when\n            // event name is \"change\")\n            if (eventName === \"rename\") {\n              // When deleting a file, the passed baseFileName is null\n              callback(!relativeFileName ? relativeFileName : ts.normalizePath(ts.combinePaths(path, relativeFileName)));\n            }\n\n            ;\n          });\n        },\n        resolvePath: function resolvePath(path) {\n          return _path.resolve(path);\n        },\n        fileExists: function fileExists(path) {\n          return _fs.existsSync(path);\n        },\n        directoryExists: function directoryExists(path) {\n          return _fs.existsSync(path) && _fs.statSync(path).isDirectory();\n        },\n        createDirectory: function createDirectory(directoryName) {\n          if (!this.directoryExists(directoryName)) {\n            _fs.mkdirSync(directoryName);\n          }\n        },\n        getExecutingFilePath: function getExecutingFilePath() {\n          return __filename;\n        },\n        getCurrentDirectory: function getCurrentDirectory() {\n          return process.cwd();\n        },\n        readDirectory: readDirectory,\n        getMemoryUsage: function getMemoryUsage() {\n          if (global.gc) {\n            global.gc();\n          }\n\n          return process.memoryUsage().heapUsed;\n        },\n        exit: function exit(exitCode) {\n          process.exit(exitCode);\n        }\n      };\n    }\n\n    function getChakraSystem() {\n      return {\n        newLine: ChakraHost.newLine || \"\\r\\n\",\n        args: ChakraHost.args,\n        useCaseSensitiveFileNames: !!ChakraHost.useCaseSensitiveFileNames,\n        write: ChakraHost.echo,\n        readFile: function readFile(path, encoding) {\n          // encoding is automatically handled by the implementation in ChakraHost\n          return ChakraHost.readFile(path);\n        },\n        writeFile: function writeFile(path, data, writeByteOrderMark) {\n          // If a BOM is required, emit one\n          if (writeByteOrderMark) {\n            data = \"\\uFEFF\" + data;\n          }\n\n          ChakraHost.writeFile(path, data);\n        },\n        resolvePath: ChakraHost.resolvePath,\n        fileExists: ChakraHost.fileExists,\n        directoryExists: ChakraHost.directoryExists,\n        createDirectory: ChakraHost.createDirectory,\n        getExecutingFilePath: function getExecutingFilePath() {\n          return ChakraHost.executingFile;\n        },\n        getCurrentDirectory: function getCurrentDirectory() {\n          return ChakraHost.currentDirectory;\n        },\n        readDirectory: ChakraHost.readDirectory,\n        exit: ChakraHost.quit\n      };\n    }\n\n    if (typeof WScript !== \"undefined\" && typeof ActiveXObject === \"function\") {\n      return getWScriptSystem();\n    } else if (typeof process !== \"undefined\" && process.nextTick && !process.browser && typeof require !== \"undefined\") {\n      // process and process.nextTick checks if current environment is node-like\n      // process.browser check excludes webpack and browserify\n      return getNodeSystem();\n    } else if (typeof ChakraHost !== \"undefined\") {\n      return getChakraSystem();\n    } else {\n      return undefined; // Unsupported host\n    }\n  }();\n})(ts || (ts = {})); // <auto-generated />\n/// <reference path=\"types.ts\" />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  ts.Diagnostics = {\n    Unterminated_string_literal: {\n      code: 1002,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unterminated_string_literal_1002\",\n      message: \"Unterminated string literal.\"\n    },\n    Identifier_expected: {\n      code: 1003,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Identifier_expected_1003\",\n      message: \"Identifier expected.\"\n    },\n    _0_expected: {\n      code: 1005,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_expected_1005\",\n      message: \"'{0}' expected.\"\n    },\n    A_file_cannot_have_a_reference_to_itself: {\n      code: 1006,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_file_cannot_have_a_reference_to_itself_1006\",\n      message: \"A file cannot have a reference to itself.\"\n    },\n    Trailing_comma_not_allowed: {\n      code: 1009,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Trailing_comma_not_allowed_1009\",\n      message: \"Trailing comma not allowed.\"\n    },\n    Asterisk_Slash_expected: {\n      code: 1010,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Asterisk_Slash_expected_1010\",\n      message: \"'*/' expected.\"\n    },\n    Unexpected_token: {\n      code: 1012,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unexpected_token_1012\",\n      message: \"Unexpected token.\"\n    },\n    A_rest_parameter_must_be_last_in_a_parameter_list: {\n      code: 1014,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_rest_parameter_must_be_last_in_a_parameter_list_1014\",\n      message: \"A rest parameter must be last in a parameter list.\"\n    },\n    Parameter_cannot_have_question_mark_and_initializer: {\n      code: 1015,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_cannot_have_question_mark_and_initializer_1015\",\n      message: \"Parameter cannot have question mark and initializer.\"\n    },\n    A_required_parameter_cannot_follow_an_optional_parameter: {\n      code: 1016,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_required_parameter_cannot_follow_an_optional_parameter_1016\",\n      message: \"A required parameter cannot follow an optional parameter.\"\n    },\n    An_index_signature_cannot_have_a_rest_parameter: {\n      code: 1017,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_cannot_have_a_rest_parameter_1017\",\n      message: \"An index signature cannot have a rest parameter.\"\n    },\n    An_index_signature_parameter_cannot_have_an_accessibility_modifier: {\n      code: 1018,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_parameter_cannot_have_an_accessibility_modifier_1018\",\n      message: \"An index signature parameter cannot have an accessibility modifier.\"\n    },\n    An_index_signature_parameter_cannot_have_a_question_mark: {\n      code: 1019,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_parameter_cannot_have_a_question_mark_1019\",\n      message: \"An index signature parameter cannot have a question mark.\"\n    },\n    An_index_signature_parameter_cannot_have_an_initializer: {\n      code: 1020,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_parameter_cannot_have_an_initializer_1020\",\n      message: \"An index signature parameter cannot have an initializer.\"\n    },\n    An_index_signature_must_have_a_type_annotation: {\n      code: 1021,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_must_have_a_type_annotation_1021\",\n      message: \"An index signature must have a type annotation.\"\n    },\n    An_index_signature_parameter_must_have_a_type_annotation: {\n      code: 1022,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_parameter_must_have_a_type_annotation_1022\",\n      message: \"An index signature parameter must have a type annotation.\"\n    },\n    An_index_signature_parameter_type_must_be_string_or_number: {\n      code: 1023,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_parameter_type_must_be_string_or_number_1023\",\n      message: \"An index signature parameter type must be 'string' or 'number'.\"\n    },\n    Accessibility_modifier_already_seen: {\n      code: 1028,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Accessibility_modifier_already_seen_1028\",\n      message: \"Accessibility modifier already seen.\"\n    },\n    _0_modifier_must_precede_1_modifier: {\n      code: 1029,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_must_precede_1_modifier_1029\",\n      message: \"'{0}' modifier must precede '{1}' modifier.\"\n    },\n    _0_modifier_already_seen: {\n      code: 1030,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_already_seen_1030\",\n      message: \"'{0}' modifier already seen.\"\n    },\n    _0_modifier_cannot_appear_on_a_class_element: {\n      code: 1031,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_appear_on_a_class_element_1031\",\n      message: \"'{0}' modifier cannot appear on a class element.\"\n    },\n    super_must_be_followed_by_an_argument_list_or_member_access: {\n      code: 1034,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_must_be_followed_by_an_argument_list_or_member_access_1034\",\n      message: \"'super' must be followed by an argument list or member access.\"\n    },\n    Only_ambient_modules_can_use_quoted_names: {\n      code: 1035,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Only_ambient_modules_can_use_quoted_names_1035\",\n      message: \"Only ambient modules can use quoted names.\"\n    },\n    Statements_are_not_allowed_in_ambient_contexts: {\n      code: 1036,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Statements_are_not_allowed_in_ambient_contexts_1036\",\n      message: \"Statements are not allowed in ambient contexts.\"\n    },\n    A_declare_modifier_cannot_be_used_in_an_already_ambient_context: {\n      code: 1038,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_declare_modifier_cannot_be_used_in_an_already_ambient_context_1038\",\n      message: \"A 'declare' modifier cannot be used in an already ambient context.\"\n    },\n    Initializers_are_not_allowed_in_ambient_contexts: {\n      code: 1039,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Initializers_are_not_allowed_in_ambient_contexts_1039\",\n      message: \"Initializers are not allowed in ambient contexts.\"\n    },\n    _0_modifier_cannot_be_used_in_an_ambient_context: {\n      code: 1040,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_be_used_in_an_ambient_context_1040\",\n      message: \"'{0}' modifier cannot be used in an ambient context.\"\n    },\n    _0_modifier_cannot_be_used_with_a_class_declaration: {\n      code: 1041,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_be_used_with_a_class_declaration_1041\",\n      message: \"'{0}' modifier cannot be used with a class declaration.\"\n    },\n    _0_modifier_cannot_be_used_here: {\n      code: 1042,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_be_used_here_1042\",\n      message: \"'{0}' modifier cannot be used here.\"\n    },\n    _0_modifier_cannot_appear_on_a_data_property: {\n      code: 1043,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_appear_on_a_data_property_1043\",\n      message: \"'{0}' modifier cannot appear on a data property.\"\n    },\n    _0_modifier_cannot_appear_on_a_module_element: {\n      code: 1044,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_appear_on_a_module_element_1044\",\n      message: \"'{0}' modifier cannot appear on a module element.\"\n    },\n    A_0_modifier_cannot_be_used_with_an_interface_declaration: {\n      code: 1045,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_0_modifier_cannot_be_used_with_an_interface_declaration_1045\",\n      message: \"A '{0}' modifier cannot be used with an interface declaration.\"\n    },\n    A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file: {\n      code: 1046,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file_1046\",\n      message: \"A 'declare' modifier is required for a top level declaration in a .d.ts file.\"\n    },\n    A_rest_parameter_cannot_be_optional: {\n      code: 1047,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_rest_parameter_cannot_be_optional_1047\",\n      message: \"A rest parameter cannot be optional.\"\n    },\n    A_rest_parameter_cannot_have_an_initializer: {\n      code: 1048,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_rest_parameter_cannot_have_an_initializer_1048\",\n      message: \"A rest parameter cannot have an initializer.\"\n    },\n    A_set_accessor_must_have_exactly_one_parameter: {\n      code: 1049,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_set_accessor_must_have_exactly_one_parameter_1049\",\n      message: \"A 'set' accessor must have exactly one parameter.\"\n    },\n    A_set_accessor_cannot_have_an_optional_parameter: {\n      code: 1051,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_set_accessor_cannot_have_an_optional_parameter_1051\",\n      message: \"A 'set' accessor cannot have an optional parameter.\"\n    },\n    A_set_accessor_parameter_cannot_have_an_initializer: {\n      code: 1052,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_set_accessor_parameter_cannot_have_an_initializer_1052\",\n      message: \"A 'set' accessor parameter cannot have an initializer.\"\n    },\n    A_set_accessor_cannot_have_rest_parameter: {\n      code: 1053,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_set_accessor_cannot_have_rest_parameter_1053\",\n      message: \"A 'set' accessor cannot have rest parameter.\"\n    },\n    A_get_accessor_cannot_have_parameters: {\n      code: 1054,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_get_accessor_cannot_have_parameters_1054\",\n      message: \"A 'get' accessor cannot have parameters.\"\n    },\n    Type_0_is_not_a_valid_async_function_return_type: {\n      code: 1055,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_is_not_a_valid_async_function_return_type_1055\",\n      message: \"Type '{0}' is not a valid async function return type.\"\n    },\n    Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher: {\n      code: 1056,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher_1056\",\n      message: \"Accessors are only available when targeting ECMAScript 5 and higher.\"\n    },\n    An_async_function_or_method_must_have_a_valid_awaitable_return_type: {\n      code: 1057,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_async_function_or_method_must_have_a_valid_awaitable_return_type_1057\",\n      message: \"An async function or method must have a valid awaitable return type.\"\n    },\n    Operand_for_await_does_not_have_a_valid_callable_then_member: {\n      code: 1058,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Operand_for_await_does_not_have_a_valid_callable_then_member_1058\",\n      message: \"Operand for 'await' does not have a valid callable 'then' member.\"\n    },\n    Return_expression_in_async_function_does_not_have_a_valid_callable_then_member: {\n      code: 1059,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_expression_in_async_function_does_not_have_a_valid_callable_then_member_1059\",\n      message: \"Return expression in async function does not have a valid callable 'then' member.\"\n    },\n    Expression_body_for_async_arrow_function_does_not_have_a_valid_callable_then_member: {\n      code: 1060,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Expression_body_for_async_arrow_function_does_not_have_a_valid_callable_then_member_1060\",\n      message: \"Expression body for async arrow function does not have a valid callable 'then' member.\"\n    },\n    Enum_member_must_have_initializer: {\n      code: 1061,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Enum_member_must_have_initializer_1061\",\n      message: \"Enum member must have initializer.\"\n    },\n    _0_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method: {\n      code: 1062,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method_1062\",\n      message: \"{0} is referenced directly or indirectly in the fulfillment callback of its own 'then' method.\"\n    },\n    An_export_assignment_cannot_be_used_in_a_namespace: {\n      code: 1063,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_export_assignment_cannot_be_used_in_a_namespace_1063\",\n      message: \"An export assignment cannot be used in a namespace.\"\n    },\n    The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type: {\n      code: 1064,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type_1064\",\n      message: \"The return type of an async function or method must be the global Promise<T> type.\"\n    },\n    In_ambient_enum_declarations_member_initializer_must_be_constant_expression: {\n      code: 1066,\n      category: ts.DiagnosticCategory.Error,\n      key: \"In_ambient_enum_declarations_member_initializer_must_be_constant_expression_1066\",\n      message: \"In ambient enum declarations member initializer must be constant expression.\"\n    },\n    Unexpected_token_A_constructor_method_accessor_or_property_was_expected: {\n      code: 1068,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unexpected_token_A_constructor_method_accessor_or_property_was_expected_1068\",\n      message: \"Unexpected token. A constructor, method, accessor, or property was expected.\"\n    },\n    A_0_modifier_cannot_be_used_with_an_import_declaration: {\n      code: 1079,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_0_modifier_cannot_be_used_with_an_import_declaration_1079\",\n      message: \"A '{0}' modifier cannot be used with an import declaration.\"\n    },\n    Invalid_reference_directive_syntax: {\n      code: 1084,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_reference_directive_syntax_1084\",\n      message: \"Invalid 'reference' directive syntax.\"\n    },\n    Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher: {\n      code: 1085,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher_1085\",\n      message: \"Octal literals are not available when targeting ECMAScript 5 and higher.\"\n    },\n    An_accessor_cannot_be_declared_in_an_ambient_context: {\n      code: 1086,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_accessor_cannot_be_declared_in_an_ambient_context_1086\",\n      message: \"An accessor cannot be declared in an ambient context.\"\n    },\n    _0_modifier_cannot_appear_on_a_constructor_declaration: {\n      code: 1089,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_appear_on_a_constructor_declaration_1089\",\n      message: \"'{0}' modifier cannot appear on a constructor declaration.\"\n    },\n    _0_modifier_cannot_appear_on_a_parameter: {\n      code: 1090,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_appear_on_a_parameter_1090\",\n      message: \"'{0}' modifier cannot appear on a parameter.\"\n    },\n    Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement: {\n      code: 1091,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement_1091\",\n      message: \"Only a single variable declaration is allowed in a 'for...in' statement.\"\n    },\n    Type_parameters_cannot_appear_on_a_constructor_declaration: {\n      code: 1092,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameters_cannot_appear_on_a_constructor_declaration_1092\",\n      message: \"Type parameters cannot appear on a constructor declaration.\"\n    },\n    Type_annotation_cannot_appear_on_a_constructor_declaration: {\n      code: 1093,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_annotation_cannot_appear_on_a_constructor_declaration_1093\",\n      message: \"Type annotation cannot appear on a constructor declaration.\"\n    },\n    An_accessor_cannot_have_type_parameters: {\n      code: 1094,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_accessor_cannot_have_type_parameters_1094\",\n      message: \"An accessor cannot have type parameters.\"\n    },\n    A_set_accessor_cannot_have_a_return_type_annotation: {\n      code: 1095,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_set_accessor_cannot_have_a_return_type_annotation_1095\",\n      message: \"A 'set' accessor cannot have a return type annotation.\"\n    },\n    An_index_signature_must_have_exactly_one_parameter: {\n      code: 1096,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_signature_must_have_exactly_one_parameter_1096\",\n      message: \"An index signature must have exactly one parameter.\"\n    },\n    _0_list_cannot_be_empty: {\n      code: 1097,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_list_cannot_be_empty_1097\",\n      message: \"'{0}' list cannot be empty.\"\n    },\n    Type_parameter_list_cannot_be_empty: {\n      code: 1098,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_list_cannot_be_empty_1098\",\n      message: \"Type parameter list cannot be empty.\"\n    },\n    Type_argument_list_cannot_be_empty: {\n      code: 1099,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_argument_list_cannot_be_empty_1099\",\n      message: \"Type argument list cannot be empty.\"\n    },\n    Invalid_use_of_0_in_strict_mode: {\n      code: 1100,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_use_of_0_in_strict_mode_1100\",\n      message: \"Invalid use of '{0}' in strict mode.\"\n    },\n    with_statements_are_not_allowed_in_strict_mode: {\n      code: 1101,\n      category: ts.DiagnosticCategory.Error,\n      key: \"with_statements_are_not_allowed_in_strict_mode_1101\",\n      message: \"'with' statements are not allowed in strict mode.\"\n    },\n    delete_cannot_be_called_on_an_identifier_in_strict_mode: {\n      code: 1102,\n      category: ts.DiagnosticCategory.Error,\n      key: \"delete_cannot_be_called_on_an_identifier_in_strict_mode_1102\",\n      message: \"'delete' cannot be called on an identifier in strict mode.\"\n    },\n    A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement: {\n      code: 1104,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement_1104\",\n      message: \"A 'continue' statement can only be used within an enclosing iteration statement.\"\n    },\n    A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement: {\n      code: 1105,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement_1105\",\n      message: \"A 'break' statement can only be used within an enclosing iteration or switch statement.\"\n    },\n    Jump_target_cannot_cross_function_boundary: {\n      code: 1107,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Jump_target_cannot_cross_function_boundary_1107\",\n      message: \"Jump target cannot cross function boundary.\"\n    },\n    A_return_statement_can_only_be_used_within_a_function_body: {\n      code: 1108,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_return_statement_can_only_be_used_within_a_function_body_1108\",\n      message: \"A 'return' statement can only be used within a function body.\"\n    },\n    Expression_expected: {\n      code: 1109,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Expression_expected_1109\",\n      message: \"Expression expected.\"\n    },\n    Type_expected: {\n      code: 1110,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_expected_1110\",\n      message: \"Type expected.\"\n    },\n    A_class_member_cannot_be_declared_optional: {\n      code: 1112,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_class_member_cannot_be_declared_optional_1112\",\n      message: \"A class member cannot be declared optional.\"\n    },\n    A_default_clause_cannot_appear_more_than_once_in_a_switch_statement: {\n      code: 1113,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_default_clause_cannot_appear_more_than_once_in_a_switch_statement_1113\",\n      message: \"A 'default' clause cannot appear more than once in a 'switch' statement.\"\n    },\n    Duplicate_label_0: {\n      code: 1114,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_label_0_1114\",\n      message: \"Duplicate label '{0}'\"\n    },\n    A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement: {\n      code: 1115,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement_1115\",\n      message: \"A 'continue' statement can only jump to a label of an enclosing iteration statement.\"\n    },\n    A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement: {\n      code: 1116,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement_1116\",\n      message: \"A 'break' statement can only jump to a label of an enclosing statement.\"\n    },\n    An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode: {\n      code: 1117,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode_1117\",\n      message: \"An object literal cannot have multiple properties with the same name in strict mode.\"\n    },\n    An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name: {\n      code: 1118,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name_1118\",\n      message: \"An object literal cannot have multiple get/set accessors with the same name.\"\n    },\n    An_object_literal_cannot_have_property_and_accessor_with_the_same_name: {\n      code: 1119,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_object_literal_cannot_have_property_and_accessor_with_the_same_name_1119\",\n      message: \"An object literal cannot have property and accessor with the same name.\"\n    },\n    An_export_assignment_cannot_have_modifiers: {\n      code: 1120,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_export_assignment_cannot_have_modifiers_1120\",\n      message: \"An export assignment cannot have modifiers.\"\n    },\n    Octal_literals_are_not_allowed_in_strict_mode: {\n      code: 1121,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Octal_literals_are_not_allowed_in_strict_mode_1121\",\n      message: \"Octal literals are not allowed in strict mode.\"\n    },\n    A_tuple_type_element_list_cannot_be_empty: {\n      code: 1122,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_tuple_type_element_list_cannot_be_empty_1122\",\n      message: \"A tuple type element list cannot be empty.\"\n    },\n    Variable_declaration_list_cannot_be_empty: {\n      code: 1123,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Variable_declaration_list_cannot_be_empty_1123\",\n      message: \"Variable declaration list cannot be empty.\"\n    },\n    Digit_expected: {\n      code: 1124,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Digit_expected_1124\",\n      message: \"Digit expected.\"\n    },\n    Hexadecimal_digit_expected: {\n      code: 1125,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Hexadecimal_digit_expected_1125\",\n      message: \"Hexadecimal digit expected.\"\n    },\n    Unexpected_end_of_text: {\n      code: 1126,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unexpected_end_of_text_1126\",\n      message: \"Unexpected end of text.\"\n    },\n    Invalid_character: {\n      code: 1127,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_character_1127\",\n      message: \"Invalid character.\"\n    },\n    Declaration_or_statement_expected: {\n      code: 1128,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Declaration_or_statement_expected_1128\",\n      message: \"Declaration or statement expected.\"\n    },\n    Statement_expected: {\n      code: 1129,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Statement_expected_1129\",\n      message: \"Statement expected.\"\n    },\n    case_or_default_expected: {\n      code: 1130,\n      category: ts.DiagnosticCategory.Error,\n      key: \"case_or_default_expected_1130\",\n      message: \"'case' or 'default' expected.\"\n    },\n    Property_or_signature_expected: {\n      code: 1131,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_or_signature_expected_1131\",\n      message: \"Property or signature expected.\"\n    },\n    Enum_member_expected: {\n      code: 1132,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Enum_member_expected_1132\",\n      message: \"Enum member expected.\"\n    },\n    Variable_declaration_expected: {\n      code: 1134,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Variable_declaration_expected_1134\",\n      message: \"Variable declaration expected.\"\n    },\n    Argument_expression_expected: {\n      code: 1135,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Argument_expression_expected_1135\",\n      message: \"Argument expression expected.\"\n    },\n    Property_assignment_expected: {\n      code: 1136,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_assignment_expected_1136\",\n      message: \"Property assignment expected.\"\n    },\n    Expression_or_comma_expected: {\n      code: 1137,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Expression_or_comma_expected_1137\",\n      message: \"Expression or comma expected.\"\n    },\n    Parameter_declaration_expected: {\n      code: 1138,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_declaration_expected_1138\",\n      message: \"Parameter declaration expected.\"\n    },\n    Type_parameter_declaration_expected: {\n      code: 1139,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_declaration_expected_1139\",\n      message: \"Type parameter declaration expected.\"\n    },\n    Type_argument_expected: {\n      code: 1140,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_argument_expected_1140\",\n      message: \"Type argument expected.\"\n    },\n    String_literal_expected: {\n      code: 1141,\n      category: ts.DiagnosticCategory.Error,\n      key: \"String_literal_expected_1141\",\n      message: \"String literal expected.\"\n    },\n    Line_break_not_permitted_here: {\n      code: 1142,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Line_break_not_permitted_here_1142\",\n      message: \"Line break not permitted here.\"\n    },\n    or_expected: {\n      code: 1144,\n      category: ts.DiagnosticCategory.Error,\n      key: \"or_expected_1144\",\n      message: \"'{' or ';' expected.\"\n    },\n    Modifiers_not_permitted_on_index_signature_members: {\n      code: 1145,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Modifiers_not_permitted_on_index_signature_members_1145\",\n      message: \"Modifiers not permitted on index signature members.\"\n    },\n    Declaration_expected: {\n      code: 1146,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Declaration_expected_1146\",\n      message: \"Declaration expected.\"\n    },\n    Import_declarations_in_a_namespace_cannot_reference_a_module: {\n      code: 1147,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Import_declarations_in_a_namespace_cannot_reference_a_module_1147\",\n      message: \"Import declarations in a namespace cannot reference a module.\"\n    },\n    Cannot_compile_modules_unless_the_module_flag_is_provided_with_a_valid_module_type_Consider_setting_the_module_compiler_option_in_a_tsconfig_json_file: {\n      code: 1148,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_compile_modules_unless_the_module_flag_is_provided_with_a_valid_module_type_Consider_setting__1148\",\n      message: \"Cannot compile modules unless the '--module' flag is provided with a valid module type. Consider setting the 'module' compiler option in a 'tsconfig.json' file.\"\n    },\n    File_name_0_differs_from_already_included_file_name_1_only_in_casing: {\n      code: 1149,\n      category: ts.DiagnosticCategory.Error,\n      key: \"File_name_0_differs_from_already_included_file_name_1_only_in_casing_1149\",\n      message: \"File name '{0}' differs from already included file name '{1}' only in casing\"\n    },\n    new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead: {\n      code: 1150,\n      category: ts.DiagnosticCategory.Error,\n      key: \"new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead_1150\",\n      message: \"'new T[]' cannot be used to create an array. Use 'new Array<T>()' instead.\"\n    },\n    const_declarations_must_be_initialized: {\n      code: 1155,\n      category: ts.DiagnosticCategory.Error,\n      key: \"const_declarations_must_be_initialized_1155\",\n      message: \"'const' declarations must be initialized\"\n    },\n    const_declarations_can_only_be_declared_inside_a_block: {\n      code: 1156,\n      category: ts.DiagnosticCategory.Error,\n      key: \"const_declarations_can_only_be_declared_inside_a_block_1156\",\n      message: \"'const' declarations can only be declared inside a block.\"\n    },\n    let_declarations_can_only_be_declared_inside_a_block: {\n      code: 1157,\n      category: ts.DiagnosticCategory.Error,\n      key: \"let_declarations_can_only_be_declared_inside_a_block_1157\",\n      message: \"'let' declarations can only be declared inside a block.\"\n    },\n    Unterminated_template_literal: {\n      code: 1160,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unterminated_template_literal_1160\",\n      message: \"Unterminated template literal.\"\n    },\n    Unterminated_regular_expression_literal: {\n      code: 1161,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unterminated_regular_expression_literal_1161\",\n      message: \"Unterminated regular expression literal.\"\n    },\n    An_object_member_cannot_be_declared_optional: {\n      code: 1162,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_object_member_cannot_be_declared_optional_1162\",\n      message: \"An object member cannot be declared optional.\"\n    },\n    A_yield_expression_is_only_allowed_in_a_generator_body: {\n      code: 1163,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_yield_expression_is_only_allowed_in_a_generator_body_1163\",\n      message: \"A 'yield' expression is only allowed in a generator body.\"\n    },\n    Computed_property_names_are_not_allowed_in_enums: {\n      code: 1164,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Computed_property_names_are_not_allowed_in_enums_1164\",\n      message: \"Computed property names are not allowed in enums.\"\n    },\n    A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol: {\n      code: 1165,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol_1165\",\n      message: \"A computed property name in an ambient context must directly refer to a built-in symbol.\"\n    },\n    A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol: {\n      code: 1166,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol_1166\",\n      message: \"A computed property name in a class property declaration must directly refer to a built-in symbol.\"\n    },\n    A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol: {\n      code: 1168,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol_1168\",\n      message: \"A computed property name in a method overload must directly refer to a built-in symbol.\"\n    },\n    A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol: {\n      code: 1169,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol_1169\",\n      message: \"A computed property name in an interface must directly refer to a built-in symbol.\"\n    },\n    A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol: {\n      code: 1170,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol_1170\",\n      message: \"A computed property name in a type literal must directly refer to a built-in symbol.\"\n    },\n    A_comma_expression_is_not_allowed_in_a_computed_property_name: {\n      code: 1171,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_comma_expression_is_not_allowed_in_a_computed_property_name_1171\",\n      message: \"A comma expression is not allowed in a computed property name.\"\n    },\n    extends_clause_already_seen: {\n      code: 1172,\n      category: ts.DiagnosticCategory.Error,\n      key: \"extends_clause_already_seen_1172\",\n      message: \"'extends' clause already seen.\"\n    },\n    extends_clause_must_precede_implements_clause: {\n      code: 1173,\n      category: ts.DiagnosticCategory.Error,\n      key: \"extends_clause_must_precede_implements_clause_1173\",\n      message: \"'extends' clause must precede 'implements' clause.\"\n    },\n    Classes_can_only_extend_a_single_class: {\n      code: 1174,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Classes_can_only_extend_a_single_class_1174\",\n      message: \"Classes can only extend a single class.\"\n    },\n    implements_clause_already_seen: {\n      code: 1175,\n      category: ts.DiagnosticCategory.Error,\n      key: \"implements_clause_already_seen_1175\",\n      message: \"'implements' clause already seen.\"\n    },\n    Interface_declaration_cannot_have_implements_clause: {\n      code: 1176,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Interface_declaration_cannot_have_implements_clause_1176\",\n      message: \"Interface declaration cannot have 'implements' clause.\"\n    },\n    Binary_digit_expected: {\n      code: 1177,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Binary_digit_expected_1177\",\n      message: \"Binary digit expected.\"\n    },\n    Octal_digit_expected: {\n      code: 1178,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Octal_digit_expected_1178\",\n      message: \"Octal digit expected.\"\n    },\n    Unexpected_token_expected: {\n      code: 1179,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unexpected_token_expected_1179\",\n      message: \"Unexpected token. '{' expected.\"\n    },\n    Property_destructuring_pattern_expected: {\n      code: 1180,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_destructuring_pattern_expected_1180\",\n      message: \"Property destructuring pattern expected.\"\n    },\n    Array_element_destructuring_pattern_expected: {\n      code: 1181,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Array_element_destructuring_pattern_expected_1181\",\n      message: \"Array element destructuring pattern expected.\"\n    },\n    A_destructuring_declaration_must_have_an_initializer: {\n      code: 1182,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_destructuring_declaration_must_have_an_initializer_1182\",\n      message: \"A destructuring declaration must have an initializer.\"\n    },\n    An_implementation_cannot_be_declared_in_ambient_contexts: {\n      code: 1183,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_implementation_cannot_be_declared_in_ambient_contexts_1183\",\n      message: \"An implementation cannot be declared in ambient contexts.\"\n    },\n    Modifiers_cannot_appear_here: {\n      code: 1184,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Modifiers_cannot_appear_here_1184\",\n      message: \"Modifiers cannot appear here.\"\n    },\n    Merge_conflict_marker_encountered: {\n      code: 1185,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Merge_conflict_marker_encountered_1185\",\n      message: \"Merge conflict marker encountered.\"\n    },\n    A_rest_element_cannot_have_an_initializer: {\n      code: 1186,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_rest_element_cannot_have_an_initializer_1186\",\n      message: \"A rest element cannot have an initializer.\"\n    },\n    A_parameter_property_may_not_be_a_binding_pattern: {\n      code: 1187,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_parameter_property_may_not_be_a_binding_pattern_1187\",\n      message: \"A parameter property may not be a binding pattern.\"\n    },\n    Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement: {\n      code: 1188,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement_1188\",\n      message: \"Only a single variable declaration is allowed in a 'for...of' statement.\"\n    },\n    The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer: {\n      code: 1189,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer_1189\",\n      message: \"The variable declaration of a 'for...in' statement cannot have an initializer.\"\n    },\n    The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer: {\n      code: 1190,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer_1190\",\n      message: \"The variable declaration of a 'for...of' statement cannot have an initializer.\"\n    },\n    An_import_declaration_cannot_have_modifiers: {\n      code: 1191,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_import_declaration_cannot_have_modifiers_1191\",\n      message: \"An import declaration cannot have modifiers.\"\n    },\n    Module_0_has_no_default_export: {\n      code: 1192,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Module_0_has_no_default_export_1192\",\n      message: \"Module '{0}' has no default export.\"\n    },\n    An_export_declaration_cannot_have_modifiers: {\n      code: 1193,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_export_declaration_cannot_have_modifiers_1193\",\n      message: \"An export declaration cannot have modifiers.\"\n    },\n    Export_declarations_are_not_permitted_in_a_namespace: {\n      code: 1194,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Export_declarations_are_not_permitted_in_a_namespace_1194\",\n      message: \"Export declarations are not permitted in a namespace.\"\n    },\n    Catch_clause_variable_name_must_be_an_identifier: {\n      code: 1195,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Catch_clause_variable_name_must_be_an_identifier_1195\",\n      message: \"Catch clause variable name must be an identifier.\"\n    },\n    Catch_clause_variable_cannot_have_a_type_annotation: {\n      code: 1196,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Catch_clause_variable_cannot_have_a_type_annotation_1196\",\n      message: \"Catch clause variable cannot have a type annotation.\"\n    },\n    Catch_clause_variable_cannot_have_an_initializer: {\n      code: 1197,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Catch_clause_variable_cannot_have_an_initializer_1197\",\n      message: \"Catch clause variable cannot have an initializer.\"\n    },\n    An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive: {\n      code: 1198,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive_1198\",\n      message: \"An extended Unicode escape value must be between 0x0 and 0x10FFFF inclusive.\"\n    },\n    Unterminated_Unicode_escape_sequence: {\n      code: 1199,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unterminated_Unicode_escape_sequence_1199\",\n      message: \"Unterminated Unicode escape sequence.\"\n    },\n    Line_terminator_not_permitted_before_arrow: {\n      code: 1200,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Line_terminator_not_permitted_before_arrow_1200\",\n      message: \"Line terminator not permitted before arrow.\"\n    },\n    Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead: {\n      code: 1202,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_import_Asterisk__1202\",\n      message: \"Import assignment cannot be used when targeting ECMAScript 6 modules. Consider using 'import * as ns from \\\"mod\\\"', 'import {a} from \\\"mod\\\"', 'import d from \\\"mod\\\"', or another module format instead.\"\n    },\n    Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_export_default_or_another_module_format_instead: {\n      code: 1203,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_export_default_o_1203\",\n      message: \"Export assignment cannot be used when targeting ECMAScript 6 modules. Consider using 'export default' or another module format instead.\"\n    },\n    Cannot_compile_modules_into_es2015_when_targeting_ES5_or_lower: {\n      code: 1204,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_compile_modules_into_es2015_when_targeting_ES5_or_lower_1204\",\n      message: \"Cannot compile modules into 'es2015' when targeting 'ES5' or lower.\"\n    },\n    Decorators_are_not_valid_here: {\n      code: 1206,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Decorators_are_not_valid_here_1206\",\n      message: \"Decorators are not valid here.\"\n    },\n    Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name: {\n      code: 1207,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name_1207\",\n      message: \"Decorators cannot be applied to multiple get/set accessors of the same name.\"\n    },\n    Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided: {\n      code: 1208,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided_1208\",\n      message: \"Cannot compile namespaces when the '--isolatedModules' flag is provided.\"\n    },\n    Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided: {\n      code: 1209,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided_1209\",\n      message: \"Ambient const enums are not allowed when the '--isolatedModules' flag is provided.\"\n    },\n    Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode: {\n      code: 1210,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode_1210\",\n      message: \"Invalid use of '{0}'. Class definitions are automatically in strict mode.\"\n    },\n    A_class_declaration_without_the_default_modifier_must_have_a_name: {\n      code: 1211,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_class_declaration_without_the_default_modifier_must_have_a_name_1211\",\n      message: \"A class declaration without the 'default' modifier must have a name\"\n    },\n    Identifier_expected_0_is_a_reserved_word_in_strict_mode: {\n      code: 1212,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Identifier_expected_0_is_a_reserved_word_in_strict_mode_1212\",\n      message: \"Identifier expected. '{0}' is a reserved word in strict mode\"\n    },\n    Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode: {\n      code: 1213,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_stric_1213\",\n      message: \"Identifier expected. '{0}' is a reserved word in strict mode. Class definitions are automatically in strict mode.\"\n    },\n    Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode: {\n      code: 1214,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode_1214\",\n      message: \"Identifier expected. '{0}' is a reserved word in strict mode. Modules are automatically in strict mode.\"\n    },\n    Invalid_use_of_0_Modules_are_automatically_in_strict_mode: {\n      code: 1215,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_use_of_0_Modules_are_automatically_in_strict_mode_1215\",\n      message: \"Invalid use of '{0}'. Modules are automatically in strict mode.\"\n    },\n    Export_assignment_is_not_supported_when_module_flag_is_system: {\n      code: 1218,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Export_assignment_is_not_supported_when_module_flag_is_system_1218\",\n      message: \"Export assignment is not supported when '--module' flag is 'system'.\"\n    },\n    Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Set_the_experimentalDecorators_option_to_remove_this_warning: {\n      code: 1219,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Set_t_1219\",\n      message: \"Experimental support for decorators is a feature that is subject to change in a future release. Set the 'experimentalDecorators' option to remove this warning.\"\n    },\n    Generators_are_only_available_when_targeting_ECMAScript_6_or_higher: {\n      code: 1220,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Generators_are_only_available_when_targeting_ECMAScript_6_or_higher_1220\",\n      message: \"Generators are only available when targeting ECMAScript 6 or higher.\"\n    },\n    Generators_are_not_allowed_in_an_ambient_context: {\n      code: 1221,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Generators_are_not_allowed_in_an_ambient_context_1221\",\n      message: \"Generators are not allowed in an ambient context.\"\n    },\n    An_overload_signature_cannot_be_declared_as_a_generator: {\n      code: 1222,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_overload_signature_cannot_be_declared_as_a_generator_1222\",\n      message: \"An overload signature cannot be declared as a generator.\"\n    },\n    _0_tag_already_specified: {\n      code: 1223,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_tag_already_specified_1223\",\n      message: \"'{0}' tag already specified.\"\n    },\n    Signature_0_must_have_a_type_predicate: {\n      code: 1224,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Signature_0_must_have_a_type_predicate_1224\",\n      message: \"Signature '{0}' must have a type predicate.\"\n    },\n    Cannot_find_parameter_0: {\n      code: 1225,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_parameter_0_1225\",\n      message: \"Cannot find parameter '{0}'.\"\n    },\n    Type_predicate_0_is_not_assignable_to_1: {\n      code: 1226,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_predicate_0_is_not_assignable_to_1_1226\",\n      message: \"Type predicate '{0}' is not assignable to '{1}'.\"\n    },\n    Parameter_0_is_not_in_the_same_position_as_parameter_1: {\n      code: 1227,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_is_not_in_the_same_position_as_parameter_1_1227\",\n      message: \"Parameter '{0}' is not in the same position as parameter '{1}'.\"\n    },\n    A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods: {\n      code: 1228,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods_1228\",\n      message: \"A type predicate is only allowed in return type position for functions and methods.\"\n    },\n    A_type_predicate_cannot_reference_a_rest_parameter: {\n      code: 1229,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_type_predicate_cannot_reference_a_rest_parameter_1229\",\n      message: \"A type predicate cannot reference a rest parameter.\"\n    },\n    A_type_predicate_cannot_reference_element_0_in_a_binding_pattern: {\n      code: 1230,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_type_predicate_cannot_reference_element_0_in_a_binding_pattern_1230\",\n      message: \"A type predicate cannot reference element '{0}' in a binding pattern.\"\n    },\n    An_export_assignment_can_only_be_used_in_a_module: {\n      code: 1231,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_export_assignment_can_only_be_used_in_a_module_1231\",\n      message: \"An export assignment can only be used in a module.\"\n    },\n    An_import_declaration_can_only_be_used_in_a_namespace_or_module: {\n      code: 1232,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_import_declaration_can_only_be_used_in_a_namespace_or_module_1232\",\n      message: \"An import declaration can only be used in a namespace or module.\"\n    },\n    An_export_declaration_can_only_be_used_in_a_module: {\n      code: 1233,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_export_declaration_can_only_be_used_in_a_module_1233\",\n      message: \"An export declaration can only be used in a module.\"\n    },\n    An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file: {\n      code: 1234,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file_1234\",\n      message: \"An ambient module declaration is only allowed at the top level in a file.\"\n    },\n    A_namespace_declaration_is_only_allowed_in_a_namespace_or_module: {\n      code: 1235,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_namespace_declaration_is_only_allowed_in_a_namespace_or_module_1235\",\n      message: \"A namespace declaration is only allowed in a namespace or module.\"\n    },\n    The_return_type_of_a_property_decorator_function_must_be_either_void_or_any: {\n      code: 1236,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_return_type_of_a_property_decorator_function_must_be_either_void_or_any_1236\",\n      message: \"The return type of a property decorator function must be either 'void' or 'any'.\"\n    },\n    The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any: {\n      code: 1237,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any_1237\",\n      message: \"The return type of a parameter decorator function must be either 'void' or 'any'.\"\n    },\n    Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression: {\n      code: 1238,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression_1238\",\n      message: \"Unable to resolve signature of class decorator when called as an expression.\"\n    },\n    Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression: {\n      code: 1239,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression_1239\",\n      message: \"Unable to resolve signature of parameter decorator when called as an expression.\"\n    },\n    Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression: {\n      code: 1240,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression_1240\",\n      message: \"Unable to resolve signature of property decorator when called as an expression.\"\n    },\n    Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression: {\n      code: 1241,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression_1241\",\n      message: \"Unable to resolve signature of method decorator when called as an expression.\"\n    },\n    abstract_modifier_can_only_appear_on_a_class_or_method_declaration: {\n      code: 1242,\n      category: ts.DiagnosticCategory.Error,\n      key: \"abstract_modifier_can_only_appear_on_a_class_or_method_declaration_1242\",\n      message: \"'abstract' modifier can only appear on a class or method declaration.\"\n    },\n    _0_modifier_cannot_be_used_with_1_modifier: {\n      code: 1243,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_modifier_cannot_be_used_with_1_modifier_1243\",\n      message: \"'{0}' modifier cannot be used with '{1}' modifier.\"\n    },\n    Abstract_methods_can_only_appear_within_an_abstract_class: {\n      code: 1244,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Abstract_methods_can_only_appear_within_an_abstract_class_1244\",\n      message: \"Abstract methods can only appear within an abstract class.\"\n    },\n    Method_0_cannot_have_an_implementation_because_it_is_marked_abstract: {\n      code: 1245,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Method_0_cannot_have_an_implementation_because_it_is_marked_abstract_1245\",\n      message: \"Method '{0}' cannot have an implementation because it is marked abstract.\"\n    },\n    An_interface_property_cannot_have_an_initializer: {\n      code: 1246,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_interface_property_cannot_have_an_initializer_1246\",\n      message: \"An interface property cannot have an initializer.\"\n    },\n    A_type_literal_property_cannot_have_an_initializer: {\n      code: 1247,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_type_literal_property_cannot_have_an_initializer_1247\",\n      message: \"A type literal property cannot have an initializer.\"\n    },\n    A_class_member_cannot_have_the_0_keyword: {\n      code: 1248,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_class_member_cannot_have_the_0_keyword_1248\",\n      message: \"A class member cannot have the '{0}' keyword.\"\n    },\n    A_decorator_can_only_decorate_a_method_implementation_not_an_overload: {\n      code: 1249,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_decorator_can_only_decorate_a_method_implementation_not_an_overload_1249\",\n      message: \"A decorator can only decorate a method implementation, not an overload.\"\n    },\n    with_statements_are_not_allowed_in_an_async_function_block: {\n      code: 1300,\n      category: ts.DiagnosticCategory.Error,\n      key: \"with_statements_are_not_allowed_in_an_async_function_block_1300\",\n      message: \"'with' statements are not allowed in an async function block.\"\n    },\n    await_expression_is_only_allowed_within_an_async_function: {\n      code: 1308,\n      category: ts.DiagnosticCategory.Error,\n      key: \"await_expression_is_only_allowed_within_an_async_function_1308\",\n      message: \"'await' expression is only allowed within an async function.\"\n    },\n    Async_functions_are_only_available_when_targeting_ECMAScript_6_and_higher: {\n      code: 1311,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Async_functions_are_only_available_when_targeting_ECMAScript_6_and_higher_1311\",\n      message: \"Async functions are only available when targeting ECMAScript 6 and higher.\"\n    },\n    can_only_be_used_in_an_object_literal_property_inside_a_destructuring_assignment: {\n      code: 1312,\n      category: ts.DiagnosticCategory.Error,\n      key: \"can_only_be_used_in_an_object_literal_property_inside_a_destructuring_assignment_1312\",\n      message: \"'=' can only be used in an object literal property inside a destructuring assignment.\"\n    },\n    The_body_of_an_if_statement_cannot_be_the_empty_statement: {\n      code: 1313,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_body_of_an_if_statement_cannot_be_the_empty_statement_1313\",\n      message: \"The body of an 'if' statement cannot be the empty statement.\"\n    },\n    Duplicate_identifier_0: {\n      code: 2300,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_identifier_0_2300\",\n      message: \"Duplicate identifier '{0}'.\"\n    },\n    Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor: {\n      code: 2301,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor_2301\",\n      message: \"Initializer of instance member variable '{0}' cannot reference identifier '{1}' declared in the constructor.\"\n    },\n    Static_members_cannot_reference_class_type_parameters: {\n      code: 2302,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Static_members_cannot_reference_class_type_parameters_2302\",\n      message: \"Static members cannot reference class type parameters.\"\n    },\n    Circular_definition_of_import_alias_0: {\n      code: 2303,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Circular_definition_of_import_alias_0_2303\",\n      message: \"Circular definition of import alias '{0}'.\"\n    },\n    Cannot_find_name_0: {\n      code: 2304,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_name_0_2304\",\n      message: \"Cannot find name '{0}'.\"\n    },\n    Module_0_has_no_exported_member_1: {\n      code: 2305,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Module_0_has_no_exported_member_1_2305\",\n      message: \"Module '{0}' has no exported member '{1}'.\"\n    },\n    File_0_is_not_a_module: {\n      code: 2306,\n      category: ts.DiagnosticCategory.Error,\n      key: \"File_0_is_not_a_module_2306\",\n      message: \"File '{0}' is not a module.\"\n    },\n    Cannot_find_module_0: {\n      code: 2307,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_module_0_2307\",\n      message: \"Cannot find module '{0}'.\"\n    },\n    Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity: {\n      code: 2308,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambig_2308\",\n      message: \"Module {0} has already exported a member named '{1}'. Consider explicitly re-exporting to resolve the ambiguity.\"\n    },\n    An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements: {\n      code: 2309,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements_2309\",\n      message: \"An export assignment cannot be used in a module with other exported elements.\"\n    },\n    Type_0_recursively_references_itself_as_a_base_type: {\n      code: 2310,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_recursively_references_itself_as_a_base_type_2310\",\n      message: \"Type '{0}' recursively references itself as a base type.\"\n    },\n    A_class_may_only_extend_another_class: {\n      code: 2311,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_class_may_only_extend_another_class_2311\",\n      message: \"A class may only extend another class.\"\n    },\n    An_interface_may_only_extend_a_class_or_another_interface: {\n      code: 2312,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_interface_may_only_extend_a_class_or_another_interface_2312\",\n      message: \"An interface may only extend a class or another interface.\"\n    },\n    Type_parameter_0_has_a_circular_constraint: {\n      code: 2313,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_has_a_circular_constraint_2313\",\n      message: \"Type parameter '{0}' has a circular constraint.\"\n    },\n    Generic_type_0_requires_1_type_argument_s: {\n      code: 2314,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Generic_type_0_requires_1_type_argument_s_2314\",\n      message: \"Generic type '{0}' requires {1} type argument(s).\"\n    },\n    Type_0_is_not_generic: {\n      code: 2315,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_is_not_generic_2315\",\n      message: \"Type '{0}' is not generic.\"\n    },\n    Global_type_0_must_be_a_class_or_interface_type: {\n      code: 2316,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Global_type_0_must_be_a_class_or_interface_type_2316\",\n      message: \"Global type '{0}' must be a class or interface type.\"\n    },\n    Global_type_0_must_have_1_type_parameter_s: {\n      code: 2317,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Global_type_0_must_have_1_type_parameter_s_2317\",\n      message: \"Global type '{0}' must have {1} type parameter(s).\"\n    },\n    Cannot_find_global_type_0: {\n      code: 2318,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_global_type_0_2318\",\n      message: \"Cannot find global type '{0}'.\"\n    },\n    Named_property_0_of_types_1_and_2_are_not_identical: {\n      code: 2319,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Named_property_0_of_types_1_and_2_are_not_identical_2319\",\n      message: \"Named property '{0}' of types '{1}' and '{2}' are not identical.\"\n    },\n    Interface_0_cannot_simultaneously_extend_types_1_and_2: {\n      code: 2320,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Interface_0_cannot_simultaneously_extend_types_1_and_2_2320\",\n      message: \"Interface '{0}' cannot simultaneously extend types '{1}' and '{2}'.\"\n    },\n    Excessive_stack_depth_comparing_types_0_and_1: {\n      code: 2321,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Excessive_stack_depth_comparing_types_0_and_1_2321\",\n      message: \"Excessive stack depth comparing types '{0}' and '{1}'.\"\n    },\n    Type_0_is_not_assignable_to_type_1: {\n      code: 2322,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_is_not_assignable_to_type_1_2322\",\n      message: \"Type '{0}' is not assignable to type '{1}'.\"\n    },\n    Cannot_redeclare_exported_variable_0: {\n      code: 2323,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_redeclare_exported_variable_0_2323\",\n      message: \"Cannot redeclare exported variable '{0}'.\"\n    },\n    Property_0_is_missing_in_type_1: {\n      code: 2324,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_missing_in_type_1_2324\",\n      message: \"Property '{0}' is missing in type '{1}'.\"\n    },\n    Property_0_is_private_in_type_1_but_not_in_type_2: {\n      code: 2325,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_private_in_type_1_but_not_in_type_2_2325\",\n      message: \"Property '{0}' is private in type '{1}' but not in type '{2}'.\"\n    },\n    Types_of_property_0_are_incompatible: {\n      code: 2326,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Types_of_property_0_are_incompatible_2326\",\n      message: \"Types of property '{0}' are incompatible.\"\n    },\n    Property_0_is_optional_in_type_1_but_required_in_type_2: {\n      code: 2327,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_optional_in_type_1_but_required_in_type_2_2327\",\n      message: \"Property '{0}' is optional in type '{1}' but required in type '{2}'.\"\n    },\n    Types_of_parameters_0_and_1_are_incompatible: {\n      code: 2328,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Types_of_parameters_0_and_1_are_incompatible_2328\",\n      message: \"Types of parameters '{0}' and '{1}' are incompatible.\"\n    },\n    Index_signature_is_missing_in_type_0: {\n      code: 2329,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Index_signature_is_missing_in_type_0_2329\",\n      message: \"Index signature is missing in type '{0}'.\"\n    },\n    Index_signatures_are_incompatible: {\n      code: 2330,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Index_signatures_are_incompatible_2330\",\n      message: \"Index signatures are incompatible.\"\n    },\n    this_cannot_be_referenced_in_a_module_or_namespace_body: {\n      code: 2331,\n      category: ts.DiagnosticCategory.Error,\n      key: \"this_cannot_be_referenced_in_a_module_or_namespace_body_2331\",\n      message: \"'this' cannot be referenced in a module or namespace body.\"\n    },\n    this_cannot_be_referenced_in_current_location: {\n      code: 2332,\n      category: ts.DiagnosticCategory.Error,\n      key: \"this_cannot_be_referenced_in_current_location_2332\",\n      message: \"'this' cannot be referenced in current location.\"\n    },\n    this_cannot_be_referenced_in_constructor_arguments: {\n      code: 2333,\n      category: ts.DiagnosticCategory.Error,\n      key: \"this_cannot_be_referenced_in_constructor_arguments_2333\",\n      message: \"'this' cannot be referenced in constructor arguments.\"\n    },\n    this_cannot_be_referenced_in_a_static_property_initializer: {\n      code: 2334,\n      category: ts.DiagnosticCategory.Error,\n      key: \"this_cannot_be_referenced_in_a_static_property_initializer_2334\",\n      message: \"'this' cannot be referenced in a static property initializer.\"\n    },\n    super_can_only_be_referenced_in_a_derived_class: {\n      code: 2335,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_can_only_be_referenced_in_a_derived_class_2335\",\n      message: \"'super' can only be referenced in a derived class.\"\n    },\n    super_cannot_be_referenced_in_constructor_arguments: {\n      code: 2336,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_cannot_be_referenced_in_constructor_arguments_2336\",\n      message: \"'super' cannot be referenced in constructor arguments.\"\n    },\n    Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors: {\n      code: 2337,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors_2337\",\n      message: \"Super calls are not permitted outside constructors or in nested functions inside constructors.\"\n    },\n    super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class: {\n      code: 2338,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_der_2338\",\n      message: \"'super' property access is permitted only in a constructor, member function, or member accessor of a derived class.\"\n    },\n    Property_0_does_not_exist_on_type_1: {\n      code: 2339,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_does_not_exist_on_type_1_2339\",\n      message: \"Property '{0}' does not exist on type '{1}'.\"\n    },\n    Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword: {\n      code: 2340,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword_2340\",\n      message: \"Only public and protected methods of the base class are accessible via the 'super' keyword.\"\n    },\n    Property_0_is_private_and_only_accessible_within_class_1: {\n      code: 2341,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_private_and_only_accessible_within_class_1_2341\",\n      message: \"Property '{0}' is private and only accessible within class '{1}'.\"\n    },\n    An_index_expression_argument_must_be_of_type_string_number_symbol_or_any: {\n      code: 2342,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_index_expression_argument_must_be_of_type_string_number_symbol_or_any_2342\",\n      message: \"An index expression argument must be of type 'string', 'number', 'symbol', or 'any'.\"\n    },\n    Type_0_does_not_satisfy_the_constraint_1: {\n      code: 2344,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_does_not_satisfy_the_constraint_1_2344\",\n      message: \"Type '{0}' does not satisfy the constraint '{1}'.\"\n    },\n    Argument_of_type_0_is_not_assignable_to_parameter_of_type_1: {\n      code: 2345,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Argument_of_type_0_is_not_assignable_to_parameter_of_type_1_2345\",\n      message: \"Argument of type '{0}' is not assignable to parameter of type '{1}'.\"\n    },\n    Supplied_parameters_do_not_match_any_signature_of_call_target: {\n      code: 2346,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Supplied_parameters_do_not_match_any_signature_of_call_target_2346\",\n      message: \"Supplied parameters do not match any signature of call target.\"\n    },\n    Untyped_function_calls_may_not_accept_type_arguments: {\n      code: 2347,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Untyped_function_calls_may_not_accept_type_arguments_2347\",\n      message: \"Untyped function calls may not accept type arguments.\"\n    },\n    Value_of_type_0_is_not_callable_Did_you_mean_to_include_new: {\n      code: 2348,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Value_of_type_0_is_not_callable_Did_you_mean_to_include_new_2348\",\n      message: \"Value of type '{0}' is not callable. Did you mean to include 'new'?\"\n    },\n    Cannot_invoke_an_expression_whose_type_lacks_a_call_signature: {\n      code: 2349,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_invoke_an_expression_whose_type_lacks_a_call_signature_2349\",\n      message: \"Cannot invoke an expression whose type lacks a call signature.\"\n    },\n    Only_a_void_function_can_be_called_with_the_new_keyword: {\n      code: 2350,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Only_a_void_function_can_be_called_with_the_new_keyword_2350\",\n      message: \"Only a void function can be called with the 'new' keyword.\"\n    },\n    Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature: {\n      code: 2351,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature_2351\",\n      message: \"Cannot use 'new' with an expression whose type lacks a call or construct signature.\"\n    },\n    Neither_type_0_nor_type_1_is_assignable_to_the_other: {\n      code: 2352,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Neither_type_0_nor_type_1_is_assignable_to_the_other_2352\",\n      message: \"Neither type '{0}' nor type '{1}' is assignable to the other.\"\n    },\n    Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1: {\n      code: 2353,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1_2353\",\n      message: \"Object literal may only specify known properties, and '{0}' does not exist in type '{1}'.\"\n    },\n    No_best_common_type_exists_among_return_expressions: {\n      code: 2354,\n      category: ts.DiagnosticCategory.Error,\n      key: \"No_best_common_type_exists_among_return_expressions_2354\",\n      message: \"No best common type exists among return expressions.\"\n    },\n    A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value: {\n      code: 2355,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value_2355\",\n      message: \"A function whose declared type is neither 'void' nor 'any' must return a value.\"\n    },\n    An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type: {\n      code: 2356,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type_2356\",\n      message: \"An arithmetic operand must be of type 'any', 'number' or an enum type.\"\n    },\n    The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer: {\n      code: 2357,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer_2357\",\n      message: \"The operand of an increment or decrement operator must be a variable, property or indexer.\"\n    },\n    The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: {\n      code: 2358,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_paramete_2358\",\n      message: \"The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.\"\n    },\n    The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type: {\n      code: 2359,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_F_2359\",\n      message: \"The right-hand side of an 'instanceof' expression must be of type 'any' or of a type assignable to the 'Function' interface type.\"\n    },\n    The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol: {\n      code: 2360,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol_2360\",\n      message: \"The left-hand side of an 'in' expression must be of type 'any', 'string', 'number', or 'symbol'.\"\n    },\n    The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter: {\n      code: 2361,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter_2361\",\n      message: \"The right-hand side of an 'in' expression must be of type 'any', an object type or a type parameter\"\n    },\n    The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: {\n      code: 2362,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type_2362\",\n      message: \"The left-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.\"\n    },\n    The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type: {\n      code: 2363,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type_2363\",\n      message: \"The right-hand side of an arithmetic operation must be of type 'any', 'number' or an enum type.\"\n    },\n    Invalid_left_hand_side_of_assignment_expression: {\n      code: 2364,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_left_hand_side_of_assignment_expression_2364\",\n      message: \"Invalid left-hand side of assignment expression.\"\n    },\n    Operator_0_cannot_be_applied_to_types_1_and_2: {\n      code: 2365,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Operator_0_cannot_be_applied_to_types_1_and_2_2365\",\n      message: \"Operator '{0}' cannot be applied to types '{1}' and '{2}'.\"\n    },\n    Type_parameter_name_cannot_be_0: {\n      code: 2368,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_name_cannot_be_0_2368\",\n      message: \"Type parameter name cannot be '{0}'\"\n    },\n    A_parameter_property_is_only_allowed_in_a_constructor_implementation: {\n      code: 2369,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_parameter_property_is_only_allowed_in_a_constructor_implementation_2369\",\n      message: \"A parameter property is only allowed in a constructor implementation.\"\n    },\n    A_rest_parameter_must_be_of_an_array_type: {\n      code: 2370,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_rest_parameter_must_be_of_an_array_type_2370\",\n      message: \"A rest parameter must be of an array type.\"\n    },\n    A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation: {\n      code: 2371,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation_2371\",\n      message: \"A parameter initializer is only allowed in a function or constructor implementation.\"\n    },\n    Parameter_0_cannot_be_referenced_in_its_initializer: {\n      code: 2372,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_cannot_be_referenced_in_its_initializer_2372\",\n      message: \"Parameter '{0}' cannot be referenced in its initializer.\"\n    },\n    Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it: {\n      code: 2373,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it_2373\",\n      message: \"Initializer of parameter '{0}' cannot reference identifier '{1}' declared after it.\"\n    },\n    Duplicate_string_index_signature: {\n      code: 2374,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_string_index_signature_2374\",\n      message: \"Duplicate string index signature.\"\n    },\n    Duplicate_number_index_signature: {\n      code: 2375,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_number_index_signature_2375\",\n      message: \"Duplicate number index signature.\"\n    },\n    A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties: {\n      code: 2376,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_proper_2376\",\n      message: \"A 'super' call must be the first statement in the constructor when a class contains initialized properties or has parameter properties.\"\n    },\n    Constructors_for_derived_classes_must_contain_a_super_call: {\n      code: 2377,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Constructors_for_derived_classes_must_contain_a_super_call_2377\",\n      message: \"Constructors for derived classes must contain a 'super' call.\"\n    },\n    A_get_accessor_must_return_a_value: {\n      code: 2378,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_get_accessor_must_return_a_value_2378\",\n      message: \"A 'get' accessor must return a value.\"\n    },\n    Getter_and_setter_accessors_do_not_agree_in_visibility: {\n      code: 2379,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Getter_and_setter_accessors_do_not_agree_in_visibility_2379\",\n      message: \"Getter and setter accessors do not agree in visibility.\"\n    },\n    get_and_set_accessor_must_have_the_same_type: {\n      code: 2380,\n      category: ts.DiagnosticCategory.Error,\n      key: \"get_and_set_accessor_must_have_the_same_type_2380\",\n      message: \"'get' and 'set' accessor must have the same type.\"\n    },\n    A_signature_with_an_implementation_cannot_use_a_string_literal_type: {\n      code: 2381,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_signature_with_an_implementation_cannot_use_a_string_literal_type_2381\",\n      message: \"A signature with an implementation cannot use a string literal type.\"\n    },\n    Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature: {\n      code: 2382,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature_2382\",\n      message: \"Specialized overload signature is not assignable to any non-specialized signature.\"\n    },\n    Overload_signatures_must_all_be_exported_or_not_exported: {\n      code: 2383,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Overload_signatures_must_all_be_exported_or_not_exported_2383\",\n      message: \"Overload signatures must all be exported or not exported.\"\n    },\n    Overload_signatures_must_all_be_ambient_or_non_ambient: {\n      code: 2384,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Overload_signatures_must_all_be_ambient_or_non_ambient_2384\",\n      message: \"Overload signatures must all be ambient or non-ambient.\"\n    },\n    Overload_signatures_must_all_be_public_private_or_protected: {\n      code: 2385,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Overload_signatures_must_all_be_public_private_or_protected_2385\",\n      message: \"Overload signatures must all be public, private or protected.\"\n    },\n    Overload_signatures_must_all_be_optional_or_required: {\n      code: 2386,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Overload_signatures_must_all_be_optional_or_required_2386\",\n      message: \"Overload signatures must all be optional or required.\"\n    },\n    Function_overload_must_be_static: {\n      code: 2387,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Function_overload_must_be_static_2387\",\n      message: \"Function overload must be static.\"\n    },\n    Function_overload_must_not_be_static: {\n      code: 2388,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Function_overload_must_not_be_static_2388\",\n      message: \"Function overload must not be static.\"\n    },\n    Function_implementation_name_must_be_0: {\n      code: 2389,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Function_implementation_name_must_be_0_2389\",\n      message: \"Function implementation name must be '{0}'.\"\n    },\n    Constructor_implementation_is_missing: {\n      code: 2390,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Constructor_implementation_is_missing_2390\",\n      message: \"Constructor implementation is missing.\"\n    },\n    Function_implementation_is_missing_or_not_immediately_following_the_declaration: {\n      code: 2391,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Function_implementation_is_missing_or_not_immediately_following_the_declaration_2391\",\n      message: \"Function implementation is missing or not immediately following the declaration.\"\n    },\n    Multiple_constructor_implementations_are_not_allowed: {\n      code: 2392,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Multiple_constructor_implementations_are_not_allowed_2392\",\n      message: \"Multiple constructor implementations are not allowed.\"\n    },\n    Duplicate_function_implementation: {\n      code: 2393,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_function_implementation_2393\",\n      message: \"Duplicate function implementation.\"\n    },\n    Overload_signature_is_not_compatible_with_function_implementation: {\n      code: 2394,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Overload_signature_is_not_compatible_with_function_implementation_2394\",\n      message: \"Overload signature is not compatible with function implementation.\"\n    },\n    Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local: {\n      code: 2395,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local_2395\",\n      message: \"Individual declarations in merged declaration '{0}' must be all exported or all local.\"\n    },\n    Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters: {\n      code: 2396,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters_2396\",\n      message: \"Duplicate identifier 'arguments'. Compiler uses 'arguments' to initialize rest parameters.\"\n    },\n    Declaration_name_conflicts_with_built_in_global_identifier_0: {\n      code: 2397,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Declaration_name_conflicts_with_built_in_global_identifier_0_2397\",\n      message: \"Declaration name conflicts with built-in global identifier '{0}'.\"\n    },\n    Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference: {\n      code: 2399,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference_2399\",\n      message: \"Duplicate identifier '_this'. Compiler uses variable declaration '_this' to capture 'this' reference.\"\n    },\n    Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference: {\n      code: 2400,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference_2400\",\n      message: \"Expression resolves to variable declaration '_this' that compiler uses to capture 'this' reference.\"\n    },\n    Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference: {\n      code: 2401,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference_2401\",\n      message: \"Duplicate identifier '_super'. Compiler uses '_super' to capture base class reference.\"\n    },\n    Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference: {\n      code: 2402,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference_2402\",\n      message: \"Expression resolves to '_super' that compiler uses to capture base class reference.\"\n    },\n    Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2: {\n      code: 2403,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_t_2403\",\n      message: \"Subsequent variable declarations must have the same type.  Variable '{0}' must be of type '{1}', but here has type '{2}'.\"\n    },\n    The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation: {\n      code: 2404,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation_2404\",\n      message: \"The left-hand side of a 'for...in' statement cannot use a type annotation.\"\n    },\n    The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any: {\n      code: 2405,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any_2405\",\n      message: \"The left-hand side of a 'for...in' statement must be of type 'string' or 'any'.\"\n    },\n    Invalid_left_hand_side_in_for_in_statement: {\n      code: 2406,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_left_hand_side_in_for_in_statement_2406\",\n      message: \"Invalid left-hand side in 'for...in' statement.\"\n    },\n    The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter: {\n      code: 2407,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter_2407\",\n      message: \"The right-hand side of a 'for...in' statement must be of type 'any', an object type or a type parameter.\"\n    },\n    Setters_cannot_return_a_value: {\n      code: 2408,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Setters_cannot_return_a_value_2408\",\n      message: \"Setters cannot return a value.\"\n    },\n    Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class: {\n      code: 2409,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class_2409\",\n      message: \"Return type of constructor signature must be assignable to the instance type of the class\"\n    },\n    All_symbols_within_a_with_block_will_be_resolved_to_any: {\n      code: 2410,\n      category: ts.DiagnosticCategory.Error,\n      key: \"All_symbols_within_a_with_block_will_be_resolved_to_any_2410\",\n      message: \"All symbols within a 'with' block will be resolved to 'any'.\"\n    },\n    Property_0_of_type_1_is_not_assignable_to_string_index_type_2: {\n      code: 2411,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_of_type_1_is_not_assignable_to_string_index_type_2_2411\",\n      message: \"Property '{0}' of type '{1}' is not assignable to string index type '{2}'.\"\n    },\n    Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2: {\n      code: 2412,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2_2412\",\n      message: \"Property '{0}' of type '{1}' is not assignable to numeric index type '{2}'.\"\n    },\n    Numeric_index_type_0_is_not_assignable_to_string_index_type_1: {\n      code: 2413,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Numeric_index_type_0_is_not_assignable_to_string_index_type_1_2413\",\n      message: \"Numeric index type '{0}' is not assignable to string index type '{1}'.\"\n    },\n    Class_name_cannot_be_0: {\n      code: 2414,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_name_cannot_be_0_2414\",\n      message: \"Class name cannot be '{0}'\"\n    },\n    Class_0_incorrectly_extends_base_class_1: {\n      code: 2415,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_0_incorrectly_extends_base_class_1_2415\",\n      message: \"Class '{0}' incorrectly extends base class '{1}'.\"\n    },\n    Class_static_side_0_incorrectly_extends_base_class_static_side_1: {\n      code: 2417,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_static_side_0_incorrectly_extends_base_class_static_side_1_2417\",\n      message: \"Class static side '{0}' incorrectly extends base class static side '{1}'.\"\n    },\n    Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0: {\n      code: 2419,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_name_0_in_extends_clause_does_not_reference_constructor_function_for_0_2419\",\n      message: \"Type name '{0}' in extends clause does not reference constructor function for '{0}'.\"\n    },\n    Class_0_incorrectly_implements_interface_1: {\n      code: 2420,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_0_incorrectly_implements_interface_1_2420\",\n      message: \"Class '{0}' incorrectly implements interface '{1}'.\"\n    },\n    A_class_may_only_implement_another_class_or_interface: {\n      code: 2422,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_class_may_only_implement_another_class_or_interface_2422\",\n      message: \"A class may only implement another class or interface.\"\n    },\n    Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor: {\n      code: 2423,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_access_2423\",\n      message: \"Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member accessor.\"\n    },\n    Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property: {\n      code: 2424,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_proper_2424\",\n      message: \"Class '{0}' defines instance member function '{1}', but extended class '{2}' defines it as instance member property.\"\n    },\n    Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function: {\n      code: 2425,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_functi_2425\",\n      message: \"Class '{0}' defines instance member property '{1}', but extended class '{2}' defines it as instance member function.\"\n    },\n    Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function: {\n      code: 2426,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_functi_2426\",\n      message: \"Class '{0}' defines instance member accessor '{1}', but extended class '{2}' defines it as instance member function.\"\n    },\n    Interface_name_cannot_be_0: {\n      code: 2427,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Interface_name_cannot_be_0_2427\",\n      message: \"Interface name cannot be '{0}'\"\n    },\n    All_declarations_of_an_interface_must_have_identical_type_parameters: {\n      code: 2428,\n      category: ts.DiagnosticCategory.Error,\n      key: \"All_declarations_of_an_interface_must_have_identical_type_parameters_2428\",\n      message: \"All declarations of an interface must have identical type parameters.\"\n    },\n    Interface_0_incorrectly_extends_interface_1: {\n      code: 2430,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Interface_0_incorrectly_extends_interface_1_2430\",\n      message: \"Interface '{0}' incorrectly extends interface '{1}'.\"\n    },\n    Enum_name_cannot_be_0: {\n      code: 2431,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Enum_name_cannot_be_0_2431\",\n      message: \"Enum name cannot be '{0}'\"\n    },\n    In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element: {\n      code: 2432,\n      category: ts.DiagnosticCategory.Error,\n      key: \"In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enu_2432\",\n      message: \"In an enum with multiple declarations, only one declaration can omit an initializer for its first enum element.\"\n    },\n    A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged: {\n      code: 2433,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merg_2433\",\n      message: \"A namespace declaration cannot be in a different file from a class or function with which it is merged\"\n    },\n    A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged: {\n      code: 2434,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged_2434\",\n      message: \"A namespace declaration cannot be located prior to a class or function with which it is merged\"\n    },\n    Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces: {\n      code: 2435,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces_2435\",\n      message: \"Ambient modules cannot be nested in other modules or namespaces.\"\n    },\n    Ambient_module_declaration_cannot_specify_relative_module_name: {\n      code: 2436,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Ambient_module_declaration_cannot_specify_relative_module_name_2436\",\n      message: \"Ambient module declaration cannot specify relative module name.\"\n    },\n    Module_0_is_hidden_by_a_local_declaration_with_the_same_name: {\n      code: 2437,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Module_0_is_hidden_by_a_local_declaration_with_the_same_name_2437\",\n      message: \"Module '{0}' is hidden by a local declaration with the same name\"\n    },\n    Import_name_cannot_be_0: {\n      code: 2438,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Import_name_cannot_be_0_2438\",\n      message: \"Import name cannot be '{0}'\"\n    },\n    Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name: {\n      code: 2439,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relati_2439\",\n      message: \"Import or export declaration in an ambient module declaration cannot reference module through relative module name.\"\n    },\n    Import_declaration_conflicts_with_local_declaration_of_0: {\n      code: 2440,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Import_declaration_conflicts_with_local_declaration_of_0_2440\",\n      message: \"Import declaration conflicts with local declaration of '{0}'\"\n    },\n    Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module: {\n      code: 2441,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_2441\",\n      message: \"Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module.\"\n    },\n    Types_have_separate_declarations_of_a_private_property_0: {\n      code: 2442,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Types_have_separate_declarations_of_a_private_property_0_2442\",\n      message: \"Types have separate declarations of a private property '{0}'.\"\n    },\n    Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2: {\n      code: 2443,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2_2443\",\n      message: \"Property '{0}' is protected but type '{1}' is not a class derived from '{2}'.\"\n    },\n    Property_0_is_protected_in_type_1_but_public_in_type_2: {\n      code: 2444,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_protected_in_type_1_but_public_in_type_2_2444\",\n      message: \"Property '{0}' is protected in type '{1}' but public in type '{2}'.\"\n    },\n    Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses: {\n      code: 2445,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses_2445\",\n      message: \"Property '{0}' is protected and only accessible within class '{1}' and its subclasses.\"\n    },\n    Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1: {\n      code: 2446,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1_2446\",\n      message: \"Property '{0}' is protected and only accessible through an instance of class '{1}'.\"\n    },\n    The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead: {\n      code: 2447,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead_2447\",\n      message: \"The '{0}' operator is not allowed for boolean types. Consider using '{1}' instead.\"\n    },\n    Block_scoped_variable_0_used_before_its_declaration: {\n      code: 2448,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Block_scoped_variable_0_used_before_its_declaration_2448\",\n      message: \"Block-scoped variable '{0}' used before its declaration.\"\n    },\n    The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant: {\n      code: 2449,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant_2449\",\n      message: \"The operand of an increment or decrement operator cannot be a constant.\"\n    },\n    Left_hand_side_of_assignment_expression_cannot_be_a_constant: {\n      code: 2450,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Left_hand_side_of_assignment_expression_cannot_be_a_constant_2450\",\n      message: \"Left-hand side of assignment expression cannot be a constant.\"\n    },\n    Cannot_redeclare_block_scoped_variable_0: {\n      code: 2451,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_redeclare_block_scoped_variable_0_2451\",\n      message: \"Cannot redeclare block-scoped variable '{0}'.\"\n    },\n    An_enum_member_cannot_have_a_numeric_name: {\n      code: 2452,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_enum_member_cannot_have_a_numeric_name_2452\",\n      message: \"An enum member cannot have a numeric name.\"\n    },\n    The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly: {\n      code: 2453,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_typ_2453\",\n      message: \"The type argument for type parameter '{0}' cannot be inferred from the usage. Consider specifying the type arguments explicitly.\"\n    },\n    Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0: {\n      code: 2455,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0_2455\",\n      message: \"Type argument candidate '{1}' is not a valid type argument because it is not a supertype of candidate '{0}'.\"\n    },\n    Type_alias_0_circularly_references_itself: {\n      code: 2456,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_alias_0_circularly_references_itself_2456\",\n      message: \"Type alias '{0}' circularly references itself.\"\n    },\n    Type_alias_name_cannot_be_0: {\n      code: 2457,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_alias_name_cannot_be_0_2457\",\n      message: \"Type alias name cannot be '{0}'\"\n    },\n    An_AMD_module_cannot_have_multiple_name_assignments: {\n      code: 2458,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_AMD_module_cannot_have_multiple_name_assignments_2458\",\n      message: \"An AMD module cannot have multiple name assignments.\"\n    },\n    Type_0_has_no_property_1_and_no_string_index_signature: {\n      code: 2459,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_has_no_property_1_and_no_string_index_signature_2459\",\n      message: \"Type '{0}' has no property '{1}' and no string index signature.\"\n    },\n    Type_0_has_no_property_1: {\n      code: 2460,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_has_no_property_1_2460\",\n      message: \"Type '{0}' has no property '{1}'.\"\n    },\n    Type_0_is_not_an_array_type: {\n      code: 2461,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_is_not_an_array_type_2461\",\n      message: \"Type '{0}' is not an array type.\"\n    },\n    A_rest_element_must_be_last_in_an_array_destructuring_pattern: {\n      code: 2462,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_rest_element_must_be_last_in_an_array_destructuring_pattern_2462\",\n      message: \"A rest element must be last in an array destructuring pattern\"\n    },\n    A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature: {\n      code: 2463,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature_2463\",\n      message: \"A binding pattern parameter cannot be optional in an implementation signature.\"\n    },\n    A_computed_property_name_must_be_of_type_string_number_symbol_or_any: {\n      code: 2464,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_must_be_of_type_string_number_symbol_or_any_2464\",\n      message: \"A computed property name must be of type 'string', 'number', 'symbol', or 'any'.\"\n    },\n    this_cannot_be_referenced_in_a_computed_property_name: {\n      code: 2465,\n      category: ts.DiagnosticCategory.Error,\n      key: \"this_cannot_be_referenced_in_a_computed_property_name_2465\",\n      message: \"'this' cannot be referenced in a computed property name.\"\n    },\n    super_cannot_be_referenced_in_a_computed_property_name: {\n      code: 2466,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_cannot_be_referenced_in_a_computed_property_name_2466\",\n      message: \"'super' cannot be referenced in a computed property name.\"\n    },\n    A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type: {\n      code: 2467,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type_2467\",\n      message: \"A computed property name cannot reference a type parameter from its containing type.\"\n    },\n    Cannot_find_global_value_0: {\n      code: 2468,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_global_value_0_2468\",\n      message: \"Cannot find global value '{0}'.\"\n    },\n    The_0_operator_cannot_be_applied_to_type_symbol: {\n      code: 2469,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_0_operator_cannot_be_applied_to_type_symbol_2469\",\n      message: \"The '{0}' operator cannot be applied to type 'symbol'.\"\n    },\n    Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object: {\n      code: 2470,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object_2470\",\n      message: \"'Symbol' reference does not refer to the global Symbol constructor object.\"\n    },\n    A_computed_property_name_of_the_form_0_must_be_of_type_symbol: {\n      code: 2471,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_computed_property_name_of_the_form_0_must_be_of_type_symbol_2471\",\n      message: \"A computed property name of the form '{0}' must be of type 'symbol'.\"\n    },\n    Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher: {\n      code: 2472,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher_2472\",\n      message: \"Spread operator in 'new' expressions is only available when targeting ECMAScript 5 and higher.\"\n    },\n    Enum_declarations_must_all_be_const_or_non_const: {\n      code: 2473,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Enum_declarations_must_all_be_const_or_non_const_2473\",\n      message: \"Enum declarations must all be const or non-const.\"\n    },\n    In_const_enum_declarations_member_initializer_must_be_constant_expression: {\n      code: 2474,\n      category: ts.DiagnosticCategory.Error,\n      key: \"In_const_enum_declarations_member_initializer_must_be_constant_expression_2474\",\n      message: \"In 'const' enum declarations member initializer must be constant expression.\"\n    },\n    const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment: {\n      code: 2475,\n      category: ts.DiagnosticCategory.Error,\n      key: \"const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_im_2475\",\n      message: \"'const' enums can only be used in property or index access expressions or the right hand side of an import declaration or export assignment.\"\n    },\n    A_const_enum_member_can_only_be_accessed_using_a_string_literal: {\n      code: 2476,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_const_enum_member_can_only_be_accessed_using_a_string_literal_2476\",\n      message: \"A const enum member can only be accessed using a string literal.\"\n    },\n    const_enum_member_initializer_was_evaluated_to_a_non_finite_value: {\n      code: 2477,\n      category: ts.DiagnosticCategory.Error,\n      key: \"const_enum_member_initializer_was_evaluated_to_a_non_finite_value_2477\",\n      message: \"'const' enum member initializer was evaluated to a non-finite value.\"\n    },\n    const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN: {\n      code: 2478,\n      category: ts.DiagnosticCategory.Error,\n      key: \"const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN_2478\",\n      message: \"'const' enum member initializer was evaluated to disallowed value 'NaN'.\"\n    },\n    Property_0_does_not_exist_on_const_enum_1: {\n      code: 2479,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_does_not_exist_on_const_enum_1_2479\",\n      message: \"Property '{0}' does not exist on 'const' enum '{1}'.\"\n    },\n    let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations: {\n      code: 2480,\n      category: ts.DiagnosticCategory.Error,\n      key: \"let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations_2480\",\n      message: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\"\n    },\n    Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1: {\n      code: 2481,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1_2481\",\n      message: \"Cannot initialize outer scoped variable '{0}' in the same scope as block scoped declaration '{1}'.\"\n    },\n    The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation: {\n      code: 2483,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation_2483\",\n      message: \"The left-hand side of a 'for...of' statement cannot use a type annotation.\"\n    },\n    Export_declaration_conflicts_with_exported_declaration_of_0: {\n      code: 2484,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Export_declaration_conflicts_with_exported_declaration_of_0_2484\",\n      message: \"Export declaration conflicts with exported declaration of '{0}'\"\n    },\n    The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant: {\n      code: 2485,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant_2485\",\n      message: \"The left-hand side of a 'for...of' statement cannot be a previously defined constant.\"\n    },\n    The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant: {\n      code: 2486,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant_2486\",\n      message: \"The left-hand side of a 'for...in' statement cannot be a previously defined constant.\"\n    },\n    Invalid_left_hand_side_in_for_of_statement: {\n      code: 2487,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_left_hand_side_in_for_of_statement_2487\",\n      message: \"Invalid left-hand side in 'for...of' statement.\"\n    },\n    Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator: {\n      code: 2488,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator_2488\",\n      message: \"Type must have a '[Symbol.iterator]()' method that returns an iterator.\"\n    },\n    An_iterator_must_have_a_next_method: {\n      code: 2489,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_iterator_must_have_a_next_method_2489\",\n      message: \"An iterator must have a 'next()' method.\"\n    },\n    The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property: {\n      code: 2490,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property_2490\",\n      message: \"The type returned by the 'next()' method of an iterator must have a 'value' property.\"\n    },\n    The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern: {\n      code: 2491,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern_2491\",\n      message: \"The left-hand side of a 'for...in' statement cannot be a destructuring pattern.\"\n    },\n    Cannot_redeclare_identifier_0_in_catch_clause: {\n      code: 2492,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_redeclare_identifier_0_in_catch_clause_2492\",\n      message: \"Cannot redeclare identifier '{0}' in catch clause\"\n    },\n    Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2: {\n      code: 2493,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2_2493\",\n      message: \"Tuple type '{0}' with length '{1}' cannot be assigned to tuple with length '{2}'.\"\n    },\n    Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher: {\n      code: 2494,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher_2494\",\n      message: \"Using a string in a 'for...of' statement is only supported in ECMAScript 5 and higher.\"\n    },\n    Type_0_is_not_an_array_type_or_a_string_type: {\n      code: 2495,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_is_not_an_array_type_or_a_string_type_2495\",\n      message: \"Type '{0}' is not an array type or a string type.\"\n    },\n    The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression: {\n      code: 2496,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_stand_2496\",\n      message: \"The 'arguments' object cannot be referenced in an arrow function in ES3 and ES5. Consider using a standard function expression.\"\n    },\n    Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct: {\n      code: 2497,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct_2497\",\n      message: \"Module '{0}' resolves to a non-module entity and cannot be imported using this construct.\"\n    },\n    Module_0_uses_export_and_cannot_be_used_with_export_Asterisk: {\n      code: 2498,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Module_0_uses_export_and_cannot_be_used_with_export_Asterisk_2498\",\n      message: \"Module '{0}' uses 'export =' and cannot be used with 'export *'.\"\n    },\n    An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments: {\n      code: 2499,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments_2499\",\n      message: \"An interface can only extend an identifier/qualified-name with optional type arguments.\"\n    },\n    A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments: {\n      code: 2500,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments_2500\",\n      message: \"A class can only implement an identifier/qualified-name with optional type arguments.\"\n    },\n    A_rest_element_cannot_contain_a_binding_pattern: {\n      code: 2501,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_rest_element_cannot_contain_a_binding_pattern_2501\",\n      message: \"A rest element cannot contain a binding pattern.\"\n    },\n    _0_is_referenced_directly_or_indirectly_in_its_own_type_annotation: {\n      code: 2502,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_is_referenced_directly_or_indirectly_in_its_own_type_annotation_2502\",\n      message: \"'{0}' is referenced directly or indirectly in its own type annotation.\"\n    },\n    Cannot_find_namespace_0: {\n      code: 2503,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_namespace_0_2503\",\n      message: \"Cannot find namespace '{0}'.\"\n    },\n    No_best_common_type_exists_among_yield_expressions: {\n      code: 2504,\n      category: ts.DiagnosticCategory.Error,\n      key: \"No_best_common_type_exists_among_yield_expressions_2504\",\n      message: \"No best common type exists among yield expressions.\"\n    },\n    A_generator_cannot_have_a_void_type_annotation: {\n      code: 2505,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_generator_cannot_have_a_void_type_annotation_2505\",\n      message: \"A generator cannot have a 'void' type annotation.\"\n    },\n    _0_is_referenced_directly_or_indirectly_in_its_own_base_expression: {\n      code: 2506,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_is_referenced_directly_or_indirectly_in_its_own_base_expression_2506\",\n      message: \"'{0}' is referenced directly or indirectly in its own base expression.\"\n    },\n    Type_0_is_not_a_constructor_function_type: {\n      code: 2507,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_is_not_a_constructor_function_type_2507\",\n      message: \"Type '{0}' is not a constructor function type.\"\n    },\n    No_base_constructor_has_the_specified_number_of_type_arguments: {\n      code: 2508,\n      category: ts.DiagnosticCategory.Error,\n      key: \"No_base_constructor_has_the_specified_number_of_type_arguments_2508\",\n      message: \"No base constructor has the specified number of type arguments.\"\n    },\n    Base_constructor_return_type_0_is_not_a_class_or_interface_type: {\n      code: 2509,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Base_constructor_return_type_0_is_not_a_class_or_interface_type_2509\",\n      message: \"Base constructor return type '{0}' is not a class or interface type.\"\n    },\n    Base_constructors_must_all_have_the_same_return_type: {\n      code: 2510,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Base_constructors_must_all_have_the_same_return_type_2510\",\n      message: \"Base constructors must all have the same return type.\"\n    },\n    Cannot_create_an_instance_of_the_abstract_class_0: {\n      code: 2511,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_create_an_instance_of_the_abstract_class_0_2511\",\n      message: \"Cannot create an instance of the abstract class '{0}'.\"\n    },\n    Overload_signatures_must_all_be_abstract_or_not_abstract: {\n      code: 2512,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Overload_signatures_must_all_be_abstract_or_not_abstract_2512\",\n      message: \"Overload signatures must all be abstract or not abstract.\"\n    },\n    Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression: {\n      code: 2513,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression_2513\",\n      message: \"Abstract method '{0}' in class '{1}' cannot be accessed via super expression.\"\n    },\n    Classes_containing_abstract_methods_must_be_marked_abstract: {\n      code: 2514,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Classes_containing_abstract_methods_must_be_marked_abstract_2514\",\n      message: \"Classes containing abstract methods must be marked abstract.\"\n    },\n    Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2: {\n      code: 2515,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2_2515\",\n      message: \"Non-abstract class '{0}' does not implement inherited abstract member '{1}' from class '{2}'.\"\n    },\n    All_declarations_of_an_abstract_method_must_be_consecutive: {\n      code: 2516,\n      category: ts.DiagnosticCategory.Error,\n      key: \"All_declarations_of_an_abstract_method_must_be_consecutive_2516\",\n      message: \"All declarations of an abstract method must be consecutive.\"\n    },\n    Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type: {\n      code: 2517,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type_2517\",\n      message: \"Cannot assign an abstract constructor type to a non-abstract constructor type.\"\n    },\n    A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard: {\n      code: 2518,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard_2518\",\n      message: \"A 'this'-based type guard is not compatible with a parameter-based type guard.\"\n    },\n    Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions: {\n      code: 2520,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions_2520\",\n      message: \"Duplicate identifier '{0}'. Compiler uses declaration '{1}' to support async functions.\"\n    },\n    Expression_resolves_to_variable_declaration_0_that_compiler_uses_to_support_async_functions: {\n      code: 2521,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Expression_resolves_to_variable_declaration_0_that_compiler_uses_to_support_async_functions_2521\",\n      message: \"Expression resolves to variable declaration '{0}' that compiler uses to support async functions.\"\n    },\n    The_arguments_object_cannot_be_referenced_in_an_async_arrow_function_Consider_using_a_standard_async_function_expression: {\n      code: 2522,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_arguments_object_cannot_be_referenced_in_an_async_arrow_function_Consider_using_a_standard_async_2522\",\n      message: \"The 'arguments' object cannot be referenced in an async arrow function. Consider using a standard async function expression.\"\n    },\n    yield_expressions_cannot_be_used_in_a_parameter_initializer: {\n      code: 2523,\n      category: ts.DiagnosticCategory.Error,\n      key: \"yield_expressions_cannot_be_used_in_a_parameter_initializer_2523\",\n      message: \"'yield' expressions cannot be used in a parameter initializer.\"\n    },\n    await_expressions_cannot_be_used_in_a_parameter_initializer: {\n      code: 2524,\n      category: ts.DiagnosticCategory.Error,\n      key: \"await_expressions_cannot_be_used_in_a_parameter_initializer_2524\",\n      message: \"'await' expressions cannot be used in a parameter initializer.\"\n    },\n    Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value: {\n      code: 2525,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value_2525\",\n      message: \"Initializer provides no value for this binding element and the binding element has no default value.\"\n    },\n    A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface: {\n      code: 2526,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface_2526\",\n      message: \"A 'this' type is available only in a non-static member of a class or interface.\"\n    },\n    The_inferred_type_of_0_references_an_inaccessible_this_type_A_type_annotation_is_necessary: {\n      code: 2527,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_inferred_type_of_0_references_an_inaccessible_this_type_A_type_annotation_is_necessary_2527\",\n      message: \"The inferred type of '{0}' references an inaccessible 'this' type. A type annotation is necessary.\"\n    },\n    A_module_cannot_have_multiple_default_exports: {\n      code: 2528,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_module_cannot_have_multiple_default_exports_2528\",\n      message: \"A module cannot have multiple default exports.\"\n    },\n    Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions: {\n      code: 2529,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_func_2529\",\n      message: \"Duplicate identifier '{0}'. Compiler reserves name '{1}' in top level scope of a module containing async functions.\"\n    },\n    JSX_element_attributes_type_0_may_not_be_a_union_type: {\n      code: 2600,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_element_attributes_type_0_may_not_be_a_union_type_2600\",\n      message: \"JSX element attributes type '{0}' may not be a union type.\"\n    },\n    The_return_type_of_a_JSX_element_constructor_must_return_an_object_type: {\n      code: 2601,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_return_type_of_a_JSX_element_constructor_must_return_an_object_type_2601\",\n      message: \"The return type of a JSX element constructor must return an object type.\"\n    },\n    JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist: {\n      code: 2602,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist_2602\",\n      message: \"JSX element implicitly has type 'any' because the global type 'JSX.Element' does not exist.\"\n    },\n    Property_0_in_type_1_is_not_assignable_to_type_2: {\n      code: 2603,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_in_type_1_is_not_assignable_to_type_2_2603\",\n      message: \"Property '{0}' in type '{1}' is not assignable to type '{2}'\"\n    },\n    JSX_element_type_0_does_not_have_any_construct_or_call_signatures: {\n      code: 2604,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_element_type_0_does_not_have_any_construct_or_call_signatures_2604\",\n      message: \"JSX element type '{0}' does not have any construct or call signatures.\"\n    },\n    JSX_element_type_0_is_not_a_constructor_function_for_JSX_elements: {\n      code: 2605,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_element_type_0_is_not_a_constructor_function_for_JSX_elements_2605\",\n      message: \"JSX element type '{0}' is not a constructor function for JSX elements.\"\n    },\n    Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property: {\n      code: 2606,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property_2606\",\n      message: \"Property '{0}' of JSX spread attribute is not assignable to target property.\"\n    },\n    JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property: {\n      code: 2607,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property_2607\",\n      message: \"JSX element class does not support attributes because it does not have a '{0}' property\"\n    },\n    The_global_type_JSX_0_may_not_have_more_than_one_property: {\n      code: 2608,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_global_type_JSX_0_may_not_have_more_than_one_property_2608\",\n      message: \"The global type 'JSX.{0}' may not have more than one property\"\n    },\n    Cannot_emit_namespaced_JSX_elements_in_React: {\n      code: 2650,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_emit_namespaced_JSX_elements_in_React_2650\",\n      message: \"Cannot emit namespaced JSX elements in React\"\n    },\n    A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums: {\n      code: 2651,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_memb_2651\",\n      message: \"A member initializer in a enum declaration cannot reference members declared after it, including members defined in other enums.\"\n    },\n    Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead: {\n      code: 2652,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_d_2652\",\n      message: \"Merged declaration '{0}' cannot include a default export declaration. Consider adding a separate 'export default {0}' declaration instead.\"\n    },\n    Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1: {\n      code: 2653,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1_2653\",\n      message: \"Non-abstract class expression does not implement inherited abstract member '{0}' from class '{1}'.\"\n    },\n    Exported_external_package_typings_file_cannot_contain_tripleslash_references_Please_contact_the_package_author_to_update_the_package_definition: {\n      code: 2654,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Exported_external_package_typings_file_cannot_contain_tripleslash_references_Please_contact_the_pack_2654\",\n      message: \"Exported external package typings file cannot contain tripleslash references. Please contact the package author to update the package definition.\"\n    },\n    Exported_external_package_typings_file_0_is_not_a_module_Please_contact_the_package_author_to_update_the_package_definition: {\n      code: 2656,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Exported_external_package_typings_file_0_is_not_a_module_Please_contact_the_package_author_to_update_2656\",\n      message: \"Exported external package typings file '{0}' is not a module. Please contact the package author to update the package definition.\"\n    },\n    JSX_expressions_must_have_one_parent_element: {\n      code: 2657,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_expressions_must_have_one_parent_element_2657\",\n      message: \"JSX expressions must have one parent element\"\n    },\n    Type_0_provides_no_match_for_the_signature_1: {\n      code: 2658,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_0_provides_no_match_for_the_signature_1_2658\",\n      message: \"Type '{0}' provides no match for the signature '{1}'\"\n    },\n    super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher: {\n      code: 2659,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_highe_2659\",\n      message: \"'super' is only allowed in members of object literal expressions when option 'target' is 'ES2015' or higher.\"\n    },\n    super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions: {\n      code: 2660,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions_2660\",\n      message: \"'super' can only be referenced in members of derived classes or object literal expressions.\"\n    },\n    Cannot_re_export_name_that_is_not_defined_in_the_module: {\n      code: 2661,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_re_export_name_that_is_not_defined_in_the_module_2661\",\n      message: \"Cannot re-export name that is not defined in the module.\"\n    },\n    Cannot_find_name_0_Did_you_mean_the_static_member_1_0: {\n      code: 2662,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_name_0_Did_you_mean_the_static_member_1_0_2662\",\n      message: \"Cannot find name '{0}'. Did you mean the static member '{1}.{0}'?\"\n    },\n    Cannot_find_name_0_Did_you_mean_the_instance_member_this_0: {\n      code: 2663,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_name_0_Did_you_mean_the_instance_member_this_0_2663\",\n      message: \"Cannot find name '{0}'. Did you mean the instance member 'this.{0}'?\"\n    },\n    Invalid_module_name_in_augmentation_module_0_cannot_be_found: {\n      code: 2664,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalid_module_name_in_augmentation_module_0_cannot_be_found_2664\",\n      message: \"Invalid module name in augmentation, module '{0}' cannot be found.\"\n    },\n    Module_augmentation_cannot_introduce_new_names_in_the_top_level_scope: {\n      code: 2665,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Module_augmentation_cannot_introduce_new_names_in_the_top_level_scope_2665\",\n      message: \"Module augmentation cannot introduce new names in the top level scope.\"\n    },\n    Exports_and_export_assignments_are_not_permitted_in_module_augmentations: {\n      code: 2666,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Exports_and_export_assignments_are_not_permitted_in_module_augmentations_2666\",\n      message: \"Exports and export assignments are not permitted in module augmentations.\"\n    },\n    Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module: {\n      code: 2667,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_mod_2667\",\n      message: \"Imports are not permitted in module augmentations. Consider moving them to the enclosing external module.\"\n    },\n    export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always_visible: {\n      code: 2668,\n      category: ts.DiagnosticCategory.Error,\n      key: \"export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always__2668\",\n      message: \"'export' modifier cannot be applied to ambient modules and module augmentations since they are always visible.\"\n    },\n    Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations: {\n      code: 2669,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_2669\",\n      message: \"Augmentations for the global scope can only be directly nested in external modules or ambient module declarations.\"\n    },\n    Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context: {\n      code: 2670,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambien_2670\",\n      message: \"Augmentations for the global scope should have 'declare' modifier unless they appear in already ambient context.\"\n    },\n    Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity: {\n      code: 2671,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity_2671\",\n      message: \"Cannot augment module '{0}' because it resolves to a non-module entity.\"\n    },\n    Import_declaration_0_is_using_private_name_1: {\n      code: 4000,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Import_declaration_0_is_using_private_name_1_4000\",\n      message: \"Import declaration '{0}' is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_exported_class_has_or_is_using_private_name_1: {\n      code: 4002,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_exported_class_has_or_is_using_private_name_1_4002\",\n      message: \"Type parameter '{0}' of exported class has or is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1: {\n      code: 4004,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1_4004\",\n      message: \"Type parameter '{0}' of exported interface has or is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: {\n      code: 4006,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4006\",\n      message: \"Type parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: {\n      code: 4008,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4008\",\n      message: \"Type parameter '{0}' of call signature from exported interface has or is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: {\n      code: 4010,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4010\",\n      message: \"Type parameter '{0}' of public static method from exported class has or is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: {\n      code: 4012,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4012\",\n      message: \"Type parameter '{0}' of public method from exported class has or is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: {\n      code: 4014,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4014\",\n      message: \"Type parameter '{0}' of method from exported interface has or is using private name '{1}'.\"\n    },\n    Type_parameter_0_of_exported_function_has_or_is_using_private_name_1: {\n      code: 4016,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Type_parameter_0_of_exported_function_has_or_is_using_private_name_1_4016\",\n      message: \"Type parameter '{0}' of exported function has or is using private name '{1}'.\"\n    },\n    Implements_clause_of_exported_class_0_has_or_is_using_private_name_1: {\n      code: 4019,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Implements_clause_of_exported_class_0_has_or_is_using_private_name_1_4019\",\n      message: \"Implements clause of exported class '{0}' has or is using private name '{1}'.\"\n    },\n    Extends_clause_of_exported_class_0_has_or_is_using_private_name_1: {\n      code: 4020,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Extends_clause_of_exported_class_0_has_or_is_using_private_name_1_4020\",\n      message: \"Extends clause of exported class '{0}' has or is using private name '{1}'.\"\n    },\n    Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1: {\n      code: 4022,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1_4022\",\n      message: \"Extends clause of exported interface '{0}' has or is using private name '{1}'.\"\n    },\n    Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: {\n      code: 4023,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4023\",\n      message: \"Exported variable '{0}' has or is using name '{1}' from external module {2} but cannot be named.\"\n    },\n    Exported_variable_0_has_or_is_using_name_1_from_private_module_2: {\n      code: 4024,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Exported_variable_0_has_or_is_using_name_1_from_private_module_2_4024\",\n      message: \"Exported variable '{0}' has or is using name '{1}' from private module '{2}'.\"\n    },\n    Exported_variable_0_has_or_is_using_private_name_1: {\n      code: 4025,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Exported_variable_0_has_or_is_using_private_name_1_4025\",\n      message: \"Exported variable '{0}' has or is using private name '{1}'.\"\n    },\n    Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: {\n      code: 4026,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot__4026\",\n      message: \"Public static property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.\"\n    },\n    Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: {\n      code: 4027,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4027\",\n      message: \"Public static property '{0}' of exported class has or is using name '{1}' from private module '{2}'.\"\n    },\n    Public_static_property_0_of_exported_class_has_or_is_using_private_name_1: {\n      code: 4028,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Public_static_property_0_of_exported_class_has_or_is_using_private_name_1_4028\",\n      message: \"Public static property '{0}' of exported class has or is using private name '{1}'.\"\n    },\n    Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: {\n      code: 4029,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_name_4029\",\n      message: \"Public property '{0}' of exported class has or is using name '{1}' from external module {2} but cannot be named.\"\n    },\n    Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2: {\n      code: 4030,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2_4030\",\n      message: \"Public property '{0}' of exported class has or is using name '{1}' from private module '{2}'.\"\n    },\n    Public_property_0_of_exported_class_has_or_is_using_private_name_1: {\n      code: 4031,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Public_property_0_of_exported_class_has_or_is_using_private_name_1_4031\",\n      message: \"Public property '{0}' of exported class has or is using private name '{1}'.\"\n    },\n    Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2: {\n      code: 4032,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2_4032\",\n      message: \"Property '{0}' of exported interface has or is using name '{1}' from private module '{2}'.\"\n    },\n    Property_0_of_exported_interface_has_or_is_using_private_name_1: {\n      code: 4033,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_of_exported_interface_has_or_is_using_private_name_1_4033\",\n      message: \"Property '{0}' of exported interface has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: {\n      code: 4034,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_4034\",\n      message: \"Parameter '{0}' of public static property setter from exported class has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1: {\n      code: 4035,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1_4035\",\n      message: \"Parameter '{0}' of public static property setter from exported class has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2: {\n      code: 4036,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_4036\",\n      message: \"Parameter '{0}' of public property setter from exported class has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1: {\n      code: 4037,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1_4037\",\n      message: \"Parameter '{0}' of public property setter from exported class has or is using private name '{1}'.\"\n    },\n    Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: {\n      code: 4038,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_externa_4038\",\n      message: \"Return type of public static property getter from exported class has or is using name '{0}' from external module {1} but cannot be named.\"\n    },\n    Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: {\n      code: 4039,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_4039\",\n      message: \"Return type of public static property getter from exported class has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0: {\n      code: 4040,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0_4040\",\n      message: \"Return type of public static property getter from exported class has or is using private name '{0}'.\"\n    },\n    Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: {\n      code: 4041,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_modul_4041\",\n      message: \"Return type of public property getter from exported class has or is using name '{0}' from external module {1} but cannot be named.\"\n    },\n    Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1: {\n      code: 4042,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_4042\",\n      message: \"Return type of public property getter from exported class has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0: {\n      code: 4043,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0_4043\",\n      message: \"Return type of public property getter from exported class has or is using private name '{0}'.\"\n    },\n    Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: {\n      code: 4044,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_mod_4044\",\n      message: \"Return type of constructor signature from exported interface has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0: {\n      code: 4045,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0_4045\",\n      message: \"Return type of constructor signature from exported interface has or is using private name '{0}'.\"\n    },\n    Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: {\n      code: 4046,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4046\",\n      message: \"Return type of call signature from exported interface has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0: {\n      code: 4047,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0_4047\",\n      message: \"Return type of call signature from exported interface has or is using private name '{0}'.\"\n    },\n    Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1: {\n      code: 4048,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4048\",\n      message: \"Return type of index signature from exported interface has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0: {\n      code: 4049,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0_4049\",\n      message: \"Return type of index signature from exported interface has or is using private name '{0}'.\"\n    },\n    Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: {\n      code: 4050,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module__4050\",\n      message: \"Return type of public static method from exported class has or is using name '{0}' from external module {1} but cannot be named.\"\n    },\n    Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: {\n      code: 4051,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4051\",\n      message: \"Return type of public static method from exported class has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0: {\n      code: 4052,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0_4052\",\n      message: \"Return type of public static method from exported class has or is using private name '{0}'.\"\n    },\n    Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: {\n      code: 4053,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_c_4053\",\n      message: \"Return type of public method from exported class has or is using name '{0}' from external module {1} but cannot be named.\"\n    },\n    Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1: {\n      code: 4054,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1_4054\",\n      message: \"Return type of public method from exported class has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0: {\n      code: 4055,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0_4055\",\n      message: \"Return type of public method from exported class has or is using private name '{0}'.\"\n    },\n    Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1: {\n      code: 4056,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1_4056\",\n      message: \"Return type of method from exported interface has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0: {\n      code: 4057,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0_4057\",\n      message: \"Return type of method from exported interface has or is using private name '{0}'.\"\n    },\n    Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named: {\n      code: 4058,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named_4058\",\n      message: \"Return type of exported function has or is using name '{0}' from external module {1} but cannot be named.\"\n    },\n    Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1: {\n      code: 4059,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1_4059\",\n      message: \"Return type of exported function has or is using name '{0}' from private module '{1}'.\"\n    },\n    Return_type_of_exported_function_has_or_is_using_private_name_0: {\n      code: 4060,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Return_type_of_exported_function_has_or_is_using_private_name_0_4060\",\n      message: \"Return type of exported function has or is using private name '{0}'.\"\n    },\n    Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: {\n      code: 4061,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_can_4061\",\n      message: \"Parameter '{0}' of constructor from exported class has or is using name '{1}' from external module {2} but cannot be named.\"\n    },\n    Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2: {\n      code: 4062,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2_4062\",\n      message: \"Parameter '{0}' of constructor from exported class has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1: {\n      code: 4063,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1_4063\",\n      message: \"Parameter '{0}' of constructor from exported class has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: {\n      code: 4064,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_mod_4064\",\n      message: \"Parameter '{0}' of constructor signature from exported interface has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1: {\n      code: 4065,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1_4065\",\n      message: \"Parameter '{0}' of constructor signature from exported interface has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2: {\n      code: 4066,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4066\",\n      message: \"Parameter '{0}' of call signature from exported interface has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1: {\n      code: 4067,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1_4067\",\n      message: \"Parameter '{0}' of call signature from exported interface has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: {\n      code: 4068,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module__4068\",\n      message: \"Parameter '{0}' of public static method from exported class has or is using name '{1}' from external module {2} but cannot be named.\"\n    },\n    Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: {\n      code: 4069,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4069\",\n      message: \"Parameter '{0}' of public static method from exported class has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1: {\n      code: 4070,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1_4070\",\n      message: \"Parameter '{0}' of public static method from exported class has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: {\n      code: 4071,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_c_4071\",\n      message: \"Parameter '{0}' of public method from exported class has or is using name '{1}' from external module {2} but cannot be named.\"\n    },\n    Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2: {\n      code: 4072,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2_4072\",\n      message: \"Parameter '{0}' of public method from exported class has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1: {\n      code: 4073,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1_4073\",\n      message: \"Parameter '{0}' of public method from exported class has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2: {\n      code: 4074,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2_4074\",\n      message: \"Parameter '{0}' of method from exported interface has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1: {\n      code: 4075,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1_4075\",\n      message: \"Parameter '{0}' of method from exported interface has or is using private name '{1}'.\"\n    },\n    Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named: {\n      code: 4076,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named_4076\",\n      message: \"Parameter '{0}' of exported function has or is using name '{1}' from external module {2} but cannot be named.\"\n    },\n    Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2: {\n      code: 4077,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2_4077\",\n      message: \"Parameter '{0}' of exported function has or is using name '{1}' from private module '{2}'.\"\n    },\n    Parameter_0_of_exported_function_has_or_is_using_private_name_1: {\n      code: 4078,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_of_exported_function_has_or_is_using_private_name_1_4078\",\n      message: \"Parameter '{0}' of exported function has or is using private name '{1}'.\"\n    },\n    Exported_type_alias_0_has_or_is_using_private_name_1: {\n      code: 4081,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Exported_type_alias_0_has_or_is_using_private_name_1_4081\",\n      message: \"Exported type alias '{0}' has or is using private name '{1}'.\"\n    },\n    Default_export_of_the_module_has_or_is_using_private_name_0: {\n      code: 4082,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Default_export_of_the_module_has_or_is_using_private_name_0_4082\",\n      message: \"Default export of the module has or is using private name '{0}'.\"\n    },\n    The_current_host_does_not_support_the_0_option: {\n      code: 5001,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_current_host_does_not_support_the_0_option_5001\",\n      message: \"The current host does not support the '{0}' option.\"\n    },\n    Cannot_find_the_common_subdirectory_path_for_the_input_files: {\n      code: 5009,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_the_common_subdirectory_path_for_the_input_files_5009\",\n      message: \"Cannot find the common subdirectory path for the input files.\"\n    },\n    Cannot_read_file_0_Colon_1: {\n      code: 5012,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_read_file_0_Colon_1_5012\",\n      message: \"Cannot read file '{0}': {1}\"\n    },\n    Unsupported_file_encoding: {\n      code: 5013,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unsupported_file_encoding_5013\",\n      message: \"Unsupported file encoding.\"\n    },\n    Failed_to_parse_file_0_Colon_1: {\n      code: 5014,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Failed_to_parse_file_0_Colon_1_5014\",\n      message: \"Failed to parse file '{0}': {1}.\"\n    },\n    Unknown_compiler_option_0: {\n      code: 5023,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unknown_compiler_option_0_5023\",\n      message: \"Unknown compiler option '{0}'.\"\n    },\n    Compiler_option_0_requires_a_value_of_type_1: {\n      code: 5024,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Compiler_option_0_requires_a_value_of_type_1_5024\",\n      message: \"Compiler option '{0}' requires a value of type {1}.\"\n    },\n    Could_not_write_file_0_Colon_1: {\n      code: 5033,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Could_not_write_file_0_Colon_1_5033\",\n      message: \"Could not write file '{0}': {1}\"\n    },\n    Option_project_cannot_be_mixed_with_source_files_on_a_command_line: {\n      code: 5042,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Option_project_cannot_be_mixed_with_source_files_on_a_command_line_5042\",\n      message: \"Option 'project' cannot be mixed with source files on a command line.\"\n    },\n    Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES2015_or_higher: {\n      code: 5047,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES_5047\",\n      message: \"Option 'isolatedModules' can only be used when either option '--module' is provided or option 'target' is 'ES2015' or higher.\"\n    },\n    Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided: {\n      code: 5051,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_prov_5051\",\n      message: \"Option 'inlineSources' can only be used when either option '--inlineSourceMap' or option '--sourceMap' is provided.\"\n    },\n    Option_0_cannot_be_specified_without_specifying_option_1: {\n      code: 5052,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Option_0_cannot_be_specified_without_specifying_option_1_5052\",\n      message: \"Option '{0}' cannot be specified without specifying option '{1}'.\"\n    },\n    Option_0_cannot_be_specified_with_option_1: {\n      code: 5053,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Option_0_cannot_be_specified_with_option_1_5053\",\n      message: \"Option '{0}' cannot be specified with option '{1}'.\"\n    },\n    A_tsconfig_json_file_is_already_defined_at_Colon_0: {\n      code: 5054,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_tsconfig_json_file_is_already_defined_at_Colon_0_5054\",\n      message: \"A 'tsconfig.json' file is already defined at: '{0}'.\"\n    },\n    Cannot_write_file_0_because_it_would_overwrite_input_file: {\n      code: 5055,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_write_file_0_because_it_would_overwrite_input_file_5055\",\n      message: \"Cannot write file '{0}' because it would overwrite input file.\"\n    },\n    Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files: {\n      code: 5056,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files_5056\",\n      message: \"Cannot write file '{0}' because it would be overwritten by multiple input files.\"\n    },\n    Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0: {\n      code: 5057,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_find_a_tsconfig_json_file_at_the_specified_directory_Colon_0_5057\",\n      message: \"Cannot find a tsconfig.json file at the specified directory: '{0}'\"\n    },\n    The_specified_path_does_not_exist_Colon_0: {\n      code: 5058,\n      category: ts.DiagnosticCategory.Error,\n      key: \"The_specified_path_does_not_exist_Colon_0_5058\",\n      message: \"The specified path does not exist: '{0}'\"\n    },\n    Invalide_value_for_reactNamespace_0_is_not_a_valid_identifier: {\n      code: 5059,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Invalide_value_for_reactNamespace_0_is_not_a_valid_identifier_5059\",\n      message: \"Invalide value for '--reactNamespace'. '{0}' is not a valid identifier.\"\n    },\n    Concatenate_and_emit_output_to_single_file: {\n      code: 6001,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Concatenate_and_emit_output_to_single_file_6001\",\n      message: \"Concatenate and emit output to single file.\"\n    },\n    Generates_corresponding_d_ts_file: {\n      code: 6002,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Generates_corresponding_d_ts_file_6002\",\n      message: \"Generates corresponding '.d.ts' file.\"\n    },\n    Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations: {\n      code: 6003,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations_6003\",\n      message: \"Specifies the location where debugger should locate map files instead of generated locations.\"\n    },\n    Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations: {\n      code: 6004,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations_6004\",\n      message: \"Specifies the location where debugger should locate TypeScript files instead of source locations.\"\n    },\n    Watch_input_files: {\n      code: 6005,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Watch_input_files_6005\",\n      message: \"Watch input files.\"\n    },\n    Redirect_output_structure_to_the_directory: {\n      code: 6006,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Redirect_output_structure_to_the_directory_6006\",\n      message: \"Redirect output structure to the directory.\"\n    },\n    Do_not_erase_const_enum_declarations_in_generated_code: {\n      code: 6007,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_erase_const_enum_declarations_in_generated_code_6007\",\n      message: \"Do not erase const enum declarations in generated code.\"\n    },\n    Do_not_emit_outputs_if_any_errors_were_reported: {\n      code: 6008,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_emit_outputs_if_any_errors_were_reported_6008\",\n      message: \"Do not emit outputs if any errors were reported.\"\n    },\n    Do_not_emit_comments_to_output: {\n      code: 6009,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_emit_comments_to_output_6009\",\n      message: \"Do not emit comments to output.\"\n    },\n    Do_not_emit_outputs: {\n      code: 6010,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_emit_outputs_6010\",\n      message: \"Do not emit outputs.\"\n    },\n    Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typechecking: {\n      code: 6011,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typech_6011\",\n      message: \"Allow default imports from modules with no default export. This does not affect code emit, just typechecking.\"\n    },\n    Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES2015_experimental: {\n      code: 6015,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES2015_experimental_6015\",\n      message: \"Specify ECMAScript target version: 'ES3' (default), 'ES5', or 'ES2015' (experimental)\"\n    },\n    Specify_module_code_generation_Colon_commonjs_amd_system_umd_or_es2015: {\n      code: 6016,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specify_module_code_generation_Colon_commonjs_amd_system_umd_or_es2015_6016\",\n      message: \"Specify module code generation: 'commonjs', 'amd', 'system', 'umd' or 'es2015'\"\n    },\n    Print_this_message: {\n      code: 6017,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Print_this_message_6017\",\n      message: \"Print this message.\"\n    },\n    Print_the_compiler_s_version: {\n      code: 6019,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Print_the_compiler_s_version_6019\",\n      message: \"Print the compiler's version.\"\n    },\n    Compile_the_project_in_the_given_directory: {\n      code: 6020,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Compile_the_project_in_the_given_directory_6020\",\n      message: \"Compile the project in the given directory.\"\n    },\n    Syntax_Colon_0: {\n      code: 6023,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Syntax_Colon_0_6023\",\n      message: \"Syntax: {0}\"\n    },\n    options: {\n      code: 6024,\n      category: ts.DiagnosticCategory.Message,\n      key: \"options_6024\",\n      message: \"options\"\n    },\n    file: {\n      code: 6025,\n      category: ts.DiagnosticCategory.Message,\n      key: \"file_6025\",\n      message: \"file\"\n    },\n    Examples_Colon_0: {\n      code: 6026,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Examples_Colon_0_6026\",\n      message: \"Examples: {0}\"\n    },\n    Options_Colon: {\n      code: 6027,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Options_Colon_6027\",\n      message: \"Options:\"\n    },\n    Version_0: {\n      code: 6029,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Version_0_6029\",\n      message: \"Version {0}\"\n    },\n    Insert_command_line_options_and_files_from_a_file: {\n      code: 6030,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Insert_command_line_options_and_files_from_a_file_6030\",\n      message: \"Insert command line options and files from a file.\"\n    },\n    File_change_detected_Starting_incremental_compilation: {\n      code: 6032,\n      category: ts.DiagnosticCategory.Message,\n      key: \"File_change_detected_Starting_incremental_compilation_6032\",\n      message: \"File change detected. Starting incremental compilation...\"\n    },\n    KIND: {\n      code: 6034,\n      category: ts.DiagnosticCategory.Message,\n      key: \"KIND_6034\",\n      message: \"KIND\"\n    },\n    FILE: {\n      code: 6035,\n      category: ts.DiagnosticCategory.Message,\n      key: \"FILE_6035\",\n      message: \"FILE\"\n    },\n    VERSION: {\n      code: 6036,\n      category: ts.DiagnosticCategory.Message,\n      key: \"VERSION_6036\",\n      message: \"VERSION\"\n    },\n    LOCATION: {\n      code: 6037,\n      category: ts.DiagnosticCategory.Message,\n      key: \"LOCATION_6037\",\n      message: \"LOCATION\"\n    },\n    DIRECTORY: {\n      code: 6038,\n      category: ts.DiagnosticCategory.Message,\n      key: \"DIRECTORY_6038\",\n      message: \"DIRECTORY\"\n    },\n    Compilation_complete_Watching_for_file_changes: {\n      code: 6042,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Compilation_complete_Watching_for_file_changes_6042\",\n      message: \"Compilation complete. Watching for file changes.\"\n    },\n    Generates_corresponding_map_file: {\n      code: 6043,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Generates_corresponding_map_file_6043\",\n      message: \"Generates corresponding '.map' file.\"\n    },\n    Compiler_option_0_expects_an_argument: {\n      code: 6044,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Compiler_option_0_expects_an_argument_6044\",\n      message: \"Compiler option '{0}' expects an argument.\"\n    },\n    Unterminated_quoted_string_in_response_file_0: {\n      code: 6045,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unterminated_quoted_string_in_response_file_0_6045\",\n      message: \"Unterminated quoted string in response file '{0}'.\"\n    },\n    Argument_for_module_option_must_be_commonjs_amd_system_umd_es2015_or_none: {\n      code: 6046,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Argument_for_module_option_must_be_commonjs_amd_system_umd_es2015_or_none_6046\",\n      message: \"Argument for '--module' option must be 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'none'.\"\n    },\n    Argument_for_target_option_must_be_ES3_ES5_or_ES2015: {\n      code: 6047,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Argument_for_target_option_must_be_ES3_ES5_or_ES2015_6047\",\n      message: \"Argument for '--target' option must be 'ES3', 'ES5', or 'ES2015'.\"\n    },\n    Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1: {\n      code: 6048,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Locale_must_be_of_the_form_language_or_language_territory_For_example_0_or_1_6048\",\n      message: \"Locale must be of the form <language> or <language>-<territory>. For example '{0}' or '{1}'.\"\n    },\n    Unsupported_locale_0: {\n      code: 6049,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unsupported_locale_0_6049\",\n      message: \"Unsupported locale '{0}'.\"\n    },\n    Unable_to_open_file_0: {\n      code: 6050,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unable_to_open_file_0_6050\",\n      message: \"Unable to open file '{0}'.\"\n    },\n    Corrupted_locale_file_0: {\n      code: 6051,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Corrupted_locale_file_0_6051\",\n      message: \"Corrupted locale file {0}.\"\n    },\n    Raise_error_on_expressions_and_declarations_with_an_implied_any_type: {\n      code: 6052,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Raise_error_on_expressions_and_declarations_with_an_implied_any_type_6052\",\n      message: \"Raise error on expressions and declarations with an implied 'any' type.\"\n    },\n    File_0_not_found: {\n      code: 6053,\n      category: ts.DiagnosticCategory.Error,\n      key: \"File_0_not_found_6053\",\n      message: \"File '{0}' not found.\"\n    },\n    File_0_has_unsupported_extension_The_only_supported_extensions_are_1: {\n      code: 6054,\n      category: ts.DiagnosticCategory.Error,\n      key: \"File_0_has_unsupported_extension_The_only_supported_extensions_are_1_6054\",\n      message: \"File '{0}' has unsupported extension. The only supported extensions are {1}.\"\n    },\n    Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures: {\n      code: 6055,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures_6055\",\n      message: \"Suppress noImplicitAny errors for indexing objects lacking index signatures.\"\n    },\n    Do_not_emit_declarations_for_code_that_has_an_internal_annotation: {\n      code: 6056,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_emit_declarations_for_code_that_has_an_internal_annotation_6056\",\n      message: \"Do not emit declarations for code that has an '@internal' annotation.\"\n    },\n    Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir: {\n      code: 6058,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDi_6058\",\n      message: \"Specifies the root directory of input files. Use to control the output directory structure with --outDir.\"\n    },\n    File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files: {\n      code: 6059,\n      category: ts.DiagnosticCategory.Error,\n      key: \"File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files_6059\",\n      message: \"File '{0}' is not under 'rootDir' '{1}'. 'rootDir' is expected to contain all source files.\"\n    },\n    Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix: {\n      code: 6060,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix_6060\",\n      message: \"Specifies the end of line sequence to be used when emitting files: 'CRLF' (dos) or 'LF' (unix).\"\n    },\n    NEWLINE: {\n      code: 6061,\n      category: ts.DiagnosticCategory.Message,\n      key: \"NEWLINE_6061\",\n      message: \"NEWLINE\"\n    },\n    Argument_for_newLine_option_must_be_CRLF_or_LF: {\n      code: 6062,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Argument_for_newLine_option_must_be_CRLF_or_LF_6062\",\n      message: \"Argument for '--newLine' option must be 'CRLF' or 'LF'.\"\n    },\n    Argument_for_moduleResolution_option_must_be_node_or_classic: {\n      code: 6063,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Argument_for_moduleResolution_option_must_be_node_or_classic_6063\",\n      message: \"Argument for '--moduleResolution' option must be 'node' or 'classic'.\"\n    },\n    Enables_experimental_support_for_ES7_decorators: {\n      code: 6065,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Enables_experimental_support_for_ES7_decorators_6065\",\n      message: \"Enables experimental support for ES7 decorators.\"\n    },\n    Enables_experimental_support_for_emitting_type_metadata_for_decorators: {\n      code: 6066,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Enables_experimental_support_for_emitting_type_metadata_for_decorators_6066\",\n      message: \"Enables experimental support for emitting type metadata for decorators.\"\n    },\n    Enables_experimental_support_for_ES7_async_functions: {\n      code: 6068,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Enables_experimental_support_for_ES7_async_functions_6068\",\n      message: \"Enables experimental support for ES7 async functions.\"\n    },\n    Specifies_module_resolution_strategy_Colon_node_Node_js_or_classic_TypeScript_pre_1_6: {\n      code: 6069,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specifies_module_resolution_strategy_Colon_node_Node_js_or_classic_TypeScript_pre_1_6_6069\",\n      message: \"Specifies module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).\"\n    },\n    Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file: {\n      code: 6070,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file_6070\",\n      message: \"Initializes a TypeScript project and creates a tsconfig.json file.\"\n    },\n    Successfully_created_a_tsconfig_json_file: {\n      code: 6071,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Successfully_created_a_tsconfig_json_file_6071\",\n      message: \"Successfully created a tsconfig.json file.\"\n    },\n    Suppress_excess_property_checks_for_object_literals: {\n      code: 6072,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Suppress_excess_property_checks_for_object_literals_6072\",\n      message: \"Suppress excess property checks for object literals.\"\n    },\n    Stylize_errors_and_messages_using_color_and_context_experimental: {\n      code: 6073,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Stylize_errors_and_messages_using_color_and_context_experimental_6073\",\n      message: \"Stylize errors and messages using color and context. (experimental)\"\n    },\n    Do_not_report_errors_on_unused_labels: {\n      code: 6074,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_report_errors_on_unused_labels_6074\",\n      message: \"Do not report errors on unused labels.\"\n    },\n    Report_error_when_not_all_code_paths_in_function_return_a_value: {\n      code: 6075,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Report_error_when_not_all_code_paths_in_function_return_a_value_6075\",\n      message: \"Report error when not all code paths in function return a value.\"\n    },\n    Report_errors_for_fallthrough_cases_in_switch_statement: {\n      code: 6076,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Report_errors_for_fallthrough_cases_in_switch_statement_6076\",\n      message: \"Report errors for fallthrough cases in switch statement.\"\n    },\n    Do_not_report_errors_on_unreachable_code: {\n      code: 6077,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_report_errors_on_unreachable_code_6077\",\n      message: \"Do not report errors on unreachable code.\"\n    },\n    Disallow_inconsistently_cased_references_to_the_same_file: {\n      code: 6078,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Disallow_inconsistently_cased_references_to_the_same_file_6078\",\n      message: \"Disallow inconsistently-cased references to the same file.\"\n    },\n    Specify_JSX_code_generation_Colon_preserve_or_react: {\n      code: 6080,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specify_JSX_code_generation_Colon_preserve_or_react_6080\",\n      message: \"Specify JSX code generation: 'preserve' or 'react'\"\n    },\n    Argument_for_jsx_must_be_preserve_or_react: {\n      code: 6081,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Argument_for_jsx_must_be_preserve_or_react_6081\",\n      message: \"Argument for '--jsx' must be 'preserve' or 'react'.\"\n    },\n    Only_amd_and_system_modules_are_supported_alongside_0: {\n      code: 6082,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Only_amd_and_system_modules_are_supported_alongside_0_6082\",\n      message: \"Only 'amd' and 'system' modules are supported alongside --{0}.\"\n    },\n    Allow_javascript_files_to_be_compiled: {\n      code: 6083,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Allow_javascript_files_to_be_compiled_6083\",\n      message: \"Allow javascript files to be compiled.\"\n    },\n    Specifies_the_object_invoked_for_createElement_and_spread_when_targeting_react_JSX_emit: {\n      code: 6084,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Specifies_the_object_invoked_for_createElement_and_spread_when_targeting_react_JSX_emit_6084\",\n      message: \"Specifies the object invoked for createElement and __spread when targeting 'react' JSX emit\"\n    },\n    Option_0_should_have_array_of_strings_as_a_value: {\n      code: 6103,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Option_0_should_have_array_of_strings_as_a_value_6103\",\n      message: \"Option '{0}' should have array of strings as a value.\"\n    },\n    Do_not_emit_use_strict_directives_in_module_output: {\n      code: 6112,\n      category: ts.DiagnosticCategory.Message,\n      key: \"Do_not_emit_use_strict_directives_in_module_output_6112\",\n      message: \"Do not emit 'use strict' directives in module output.\"\n    },\n    Variable_0_implicitly_has_an_1_type: {\n      code: 7005,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Variable_0_implicitly_has_an_1_type_7005\",\n      message: \"Variable '{0}' implicitly has an '{1}' type.\"\n    },\n    Parameter_0_implicitly_has_an_1_type: {\n      code: 7006,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Parameter_0_implicitly_has_an_1_type_7006\",\n      message: \"Parameter '{0}' implicitly has an '{1}' type.\"\n    },\n    Member_0_implicitly_has_an_1_type: {\n      code: 7008,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Member_0_implicitly_has_an_1_type_7008\",\n      message: \"Member '{0}' implicitly has an '{1}' type.\"\n    },\n    new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type: {\n      code: 7009,\n      category: ts.DiagnosticCategory.Error,\n      key: \"new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type_7009\",\n      message: \"'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.\"\n    },\n    _0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type: {\n      code: 7010,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type_7010\",\n      message: \"'{0}', which lacks return-type annotation, implicitly has an '{1}' return type.\"\n    },\n    Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type: {\n      code: 7011,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type_7011\",\n      message: \"Function expression, which lacks return-type annotation, implicitly has an '{0}' return type.\"\n    },\n    Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: {\n      code: 7013,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7013\",\n      message: \"Construct signature, which lacks return-type annotation, implicitly has an 'any' return type.\"\n    },\n    Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number: {\n      code: 7015,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number_7015\",\n      message: \"Element implicitly has an 'any' type because index expression is not of type 'number'.\"\n    },\n    Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation: {\n      code: 7016,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation_7016\",\n      message: \"Property '{0}' implicitly has type 'any', because its 'set' accessor lacks a type annotation.\"\n    },\n    Index_signature_of_object_type_implicitly_has_an_any_type: {\n      code: 7017,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Index_signature_of_object_type_implicitly_has_an_any_type_7017\",\n      message: \"Index signature of object type implicitly has an 'any' type.\"\n    },\n    Object_literal_s_property_0_implicitly_has_an_1_type: {\n      code: 7018,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Object_literal_s_property_0_implicitly_has_an_1_type_7018\",\n      message: \"Object literal's property '{0}' implicitly has an '{1}' type.\"\n    },\n    Rest_parameter_0_implicitly_has_an_any_type: {\n      code: 7019,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Rest_parameter_0_implicitly_has_an_any_type_7019\",\n      message: \"Rest parameter '{0}' implicitly has an 'any[]' type.\"\n    },\n    Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type: {\n      code: 7020,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type_7020\",\n      message: \"Call signature, which lacks return-type annotation, implicitly has an 'any' return type.\"\n    },\n    _0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer: {\n      code: 7022,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or__7022\",\n      message: \"'{0}' implicitly has type 'any' because it does not have a type annotation and is referenced directly or indirectly in its own initializer.\"\n    },\n    _0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: {\n      code: 7023,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_reference_7023\",\n      message: \"'{0}' implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.\"\n    },\n    Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions: {\n      code: 7024,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_ref_7024\",\n      message: \"Function implicitly has return type 'any' because it does not have a return type annotation and is referenced directly or indirectly in one of its return expressions.\"\n    },\n    Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type: {\n      code: 7025,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_typ_7025\",\n      message: \"Generator implicitly has type '{0}' because it does not yield any values. Consider supplying a return type.\"\n    },\n    JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists: {\n      code: 7026,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists_7026\",\n      message: \"JSX element implicitly has type 'any' because no interface 'JSX.{0}' exists\"\n    },\n    Unreachable_code_detected: {\n      code: 7027,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unreachable_code_detected_7027\",\n      message: \"Unreachable code detected.\"\n    },\n    Unused_label: {\n      code: 7028,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unused_label_7028\",\n      message: \"Unused label.\"\n    },\n    Fallthrough_case_in_switch: {\n      code: 7029,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Fallthrough_case_in_switch_7029\",\n      message: \"Fallthrough case in switch.\"\n    },\n    Not_all_code_paths_return_a_value: {\n      code: 7030,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Not_all_code_paths_return_a_value_7030\",\n      message: \"Not all code paths return a value.\"\n    },\n    You_cannot_rename_this_element: {\n      code: 8000,\n      category: ts.DiagnosticCategory.Error,\n      key: \"You_cannot_rename_this_element_8000\",\n      message: \"You cannot rename this element.\"\n    },\n    You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library: {\n      code: 8001,\n      category: ts.DiagnosticCategory.Error,\n      key: \"You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library_8001\",\n      message: \"You cannot rename elements that are defined in the standard TypeScript library.\"\n    },\n    import_can_only_be_used_in_a_ts_file: {\n      code: 8002,\n      category: ts.DiagnosticCategory.Error,\n      key: \"import_can_only_be_used_in_a_ts_file_8002\",\n      message: \"'import ... =' can only be used in a .ts file.\"\n    },\n    export_can_only_be_used_in_a_ts_file: {\n      code: 8003,\n      category: ts.DiagnosticCategory.Error,\n      key: \"export_can_only_be_used_in_a_ts_file_8003\",\n      message: \"'export=' can only be used in a .ts file.\"\n    },\n    type_parameter_declarations_can_only_be_used_in_a_ts_file: {\n      code: 8004,\n      category: ts.DiagnosticCategory.Error,\n      key: \"type_parameter_declarations_can_only_be_used_in_a_ts_file_8004\",\n      message: \"'type parameter declarations' can only be used in a .ts file.\"\n    },\n    implements_clauses_can_only_be_used_in_a_ts_file: {\n      code: 8005,\n      category: ts.DiagnosticCategory.Error,\n      key: \"implements_clauses_can_only_be_used_in_a_ts_file_8005\",\n      message: \"'implements clauses' can only be used in a .ts file.\"\n    },\n    interface_declarations_can_only_be_used_in_a_ts_file: {\n      code: 8006,\n      category: ts.DiagnosticCategory.Error,\n      key: \"interface_declarations_can_only_be_used_in_a_ts_file_8006\",\n      message: \"'interface declarations' can only be used in a .ts file.\"\n    },\n    module_declarations_can_only_be_used_in_a_ts_file: {\n      code: 8007,\n      category: ts.DiagnosticCategory.Error,\n      key: \"module_declarations_can_only_be_used_in_a_ts_file_8007\",\n      message: \"'module declarations' can only be used in a .ts file.\"\n    },\n    type_aliases_can_only_be_used_in_a_ts_file: {\n      code: 8008,\n      category: ts.DiagnosticCategory.Error,\n      key: \"type_aliases_can_only_be_used_in_a_ts_file_8008\",\n      message: \"'type aliases' can only be used in a .ts file.\"\n    },\n    _0_can_only_be_used_in_a_ts_file: {\n      code: 8009,\n      category: ts.DiagnosticCategory.Error,\n      key: \"_0_can_only_be_used_in_a_ts_file_8009\",\n      message: \"'{0}' can only be used in a .ts file.\"\n    },\n    types_can_only_be_used_in_a_ts_file: {\n      code: 8010,\n      category: ts.DiagnosticCategory.Error,\n      key: \"types_can_only_be_used_in_a_ts_file_8010\",\n      message: \"'types' can only be used in a .ts file.\"\n    },\n    type_arguments_can_only_be_used_in_a_ts_file: {\n      code: 8011,\n      category: ts.DiagnosticCategory.Error,\n      key: \"type_arguments_can_only_be_used_in_a_ts_file_8011\",\n      message: \"'type arguments' can only be used in a .ts file.\"\n    },\n    parameter_modifiers_can_only_be_used_in_a_ts_file: {\n      code: 8012,\n      category: ts.DiagnosticCategory.Error,\n      key: \"parameter_modifiers_can_only_be_used_in_a_ts_file_8012\",\n      message: \"'parameter modifiers' can only be used in a .ts file.\"\n    },\n    property_declarations_can_only_be_used_in_a_ts_file: {\n      code: 8014,\n      category: ts.DiagnosticCategory.Error,\n      key: \"property_declarations_can_only_be_used_in_a_ts_file_8014\",\n      message: \"'property declarations' can only be used in a .ts file.\"\n    },\n    enum_declarations_can_only_be_used_in_a_ts_file: {\n      code: 8015,\n      category: ts.DiagnosticCategory.Error,\n      key: \"enum_declarations_can_only_be_used_in_a_ts_file_8015\",\n      message: \"'enum declarations' can only be used in a .ts file.\"\n    },\n    type_assertion_expressions_can_only_be_used_in_a_ts_file: {\n      code: 8016,\n      category: ts.DiagnosticCategory.Error,\n      key: \"type_assertion_expressions_can_only_be_used_in_a_ts_file_8016\",\n      message: \"'type assertion expressions' can only be used in a .ts file.\"\n    },\n    Only_identifiers_Slashqualified_names_with_optional_type_arguments_are_currently_supported_in_a_class_extends_clauses: {\n      code: 9002,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Only_identifiers_Slashqualified_names_with_optional_type_arguments_are_currently_supported_in_a_clas_9002\",\n      message: \"Only identifiers/qualified-names with optional type arguments are currently supported in a class 'extends' clauses.\"\n    },\n    class_expressions_are_not_currently_supported: {\n      code: 9003,\n      category: ts.DiagnosticCategory.Error,\n      key: \"class_expressions_are_not_currently_supported_9003\",\n      message: \"'class' expressions are not currently supported.\"\n    },\n    JSX_attributes_must_only_be_assigned_a_non_empty_expression: {\n      code: 17000,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_attributes_must_only_be_assigned_a_non_empty_expression_17000\",\n      message: \"JSX attributes must only be assigned a non-empty 'expression'.\"\n    },\n    JSX_elements_cannot_have_multiple_attributes_with_the_same_name: {\n      code: 17001,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_elements_cannot_have_multiple_attributes_with_the_same_name_17001\",\n      message: \"JSX elements cannot have multiple attributes with the same name.\"\n    },\n    Expected_corresponding_JSX_closing_tag_for_0: {\n      code: 17002,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Expected_corresponding_JSX_closing_tag_for_0_17002\",\n      message: \"Expected corresponding JSX closing tag for '{0}'.\"\n    },\n    JSX_attribute_expected: {\n      code: 17003,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_attribute_expected_17003\",\n      message: \"JSX attribute expected.\"\n    },\n    Cannot_use_JSX_unless_the_jsx_flag_is_provided: {\n      code: 17004,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Cannot_use_JSX_unless_the_jsx_flag_is_provided_17004\",\n      message: \"Cannot use JSX unless the '--jsx' flag is provided.\"\n    },\n    A_constructor_cannot_contain_a_super_call_when_its_class_extends_null: {\n      code: 17005,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_constructor_cannot_contain_a_super_call_when_its_class_extends_null_17005\",\n      message: \"A constructor cannot contain a 'super' call when its class extends 'null'\"\n    },\n    An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: {\n      code: 17006,\n      category: ts.DiagnosticCategory.Error,\n      key: \"An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_ex_17006\",\n      message: \"An unary expression with the '{0}' operator is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.\"\n    },\n    A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses: {\n      code: 17007,\n      category: ts.DiagnosticCategory.Error,\n      key: \"A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Con_17007\",\n      message: \"A type assertion expression is not allowed in the left-hand side of an exponentiation expression. Consider enclosing the expression in parentheses.\"\n    },\n    JSX_element_0_has_no_corresponding_closing_tag: {\n      code: 17008,\n      category: ts.DiagnosticCategory.Error,\n      key: \"JSX_element_0_has_no_corresponding_closing_tag_17008\",\n      message: \"JSX element '{0}' has no corresponding closing tag.\"\n    },\n    super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class: {\n      code: 17009,\n      category: ts.DiagnosticCategory.Error,\n      key: \"super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class_17009\",\n      message: \"'super' must be called before accessing 'this' in the constructor of a derived class.\"\n    },\n    Unknown_typing_option_0: {\n      code: 17010,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Unknown_typing_option_0_17010\",\n      message: \"Unknown typing option '{0}'.\"\n    },\n    Too_many_JavaScript_files_in_the_project_Consider_specifying_the_exclude_setting_in_project_configuration_to_limit_included_source_folders_The_likely_folder_to_exclude_is_0_To_disable_the_project_size_limit_set_the_disableSizeLimit_compiler_option_to_true: {\n      code: 17012,\n      category: ts.DiagnosticCategory.Error,\n      key: \"Too_many_JavaScript_files_in_the_project_Consider_specifying_the_exclude_setting_in_project_configur_17012\",\n      message: \"Too many JavaScript files in the project. Consider specifying the 'exclude' setting in project configuration to limit included source folders. The likely folder to exclude is '{0}'. To disable the project size limit, set the 'disableSizeLimit' compiler option to 'true'.\"\n    }\n  };\n})(ts || (ts = {})); /// <reference path=\"core.ts\"/>\n/// <reference path=\"diagnosticInformationMap.generated.ts\"/>\n\n\nvar ts;\n\n(function (ts) {\n  /* @internal */\n  function tokenIsIdentifierOrKeyword(token) {\n    return token >= 69\n    /* Identifier */\n    ;\n  }\n\n  ts.tokenIsIdentifierOrKeyword = tokenIsIdentifierOrKeyword;\n  var textToToken = {\n    \"abstract\": 115\n    /* AbstractKeyword */\n    ,\n    \"any\": 117\n    /* AnyKeyword */\n    ,\n    \"as\": 116\n    /* AsKeyword */\n    ,\n    \"boolean\": 120\n    /* BooleanKeyword */\n    ,\n    \"break\": 70\n    /* BreakKeyword */\n    ,\n    \"case\": 71\n    /* CaseKeyword */\n    ,\n    \"catch\": 72\n    /* CatchKeyword */\n    ,\n    \"class\": 73\n    /* ClassKeyword */\n    ,\n    \"continue\": 75\n    /* ContinueKeyword */\n    ,\n    \"const\": 74\n    /* ConstKeyword */\n    ,\n    \"constructor\": 121\n    /* ConstructorKeyword */\n    ,\n    \"debugger\": 76\n    /* DebuggerKeyword */\n    ,\n    \"declare\": 122\n    /* DeclareKeyword */\n    ,\n    \"default\": 77\n    /* DefaultKeyword */\n    ,\n    \"delete\": 78\n    /* DeleteKeyword */\n    ,\n    \"do\": 79\n    /* DoKeyword */\n    ,\n    \"else\": 80\n    /* ElseKeyword */\n    ,\n    \"enum\": 81\n    /* EnumKeyword */\n    ,\n    \"export\": 82\n    /* ExportKeyword */\n    ,\n    \"extends\": 83\n    /* ExtendsKeyword */\n    ,\n    \"false\": 84\n    /* FalseKeyword */\n    ,\n    \"finally\": 85\n    /* FinallyKeyword */\n    ,\n    \"for\": 86\n    /* ForKeyword */\n    ,\n    \"from\": 133\n    /* FromKeyword */\n    ,\n    \"function\": 87\n    /* FunctionKeyword */\n    ,\n    \"get\": 123\n    /* GetKeyword */\n    ,\n    \"if\": 88\n    /* IfKeyword */\n    ,\n    \"implements\": 106\n    /* ImplementsKeyword */\n    ,\n    \"import\": 89\n    /* ImportKeyword */\n    ,\n    \"in\": 90\n    /* InKeyword */\n    ,\n    \"instanceof\": 91\n    /* InstanceOfKeyword */\n    ,\n    \"interface\": 107\n    /* InterfaceKeyword */\n    ,\n    \"is\": 124\n    /* IsKeyword */\n    ,\n    \"let\": 108\n    /* LetKeyword */\n    ,\n    \"module\": 125\n    /* ModuleKeyword */\n    ,\n    \"namespace\": 126\n    /* NamespaceKeyword */\n    ,\n    \"new\": 92\n    /* NewKeyword */\n    ,\n    \"null\": 93\n    /* NullKeyword */\n    ,\n    \"number\": 128\n    /* NumberKeyword */\n    ,\n    \"package\": 109\n    /* PackageKeyword */\n    ,\n    \"private\": 110\n    /* PrivateKeyword */\n    ,\n    \"protected\": 111\n    /* ProtectedKeyword */\n    ,\n    \"public\": 112\n    /* PublicKeyword */\n    ,\n    \"require\": 127\n    /* RequireKeyword */\n    ,\n    \"global\": 134\n    /* GlobalKeyword */\n    ,\n    \"return\": 94\n    /* ReturnKeyword */\n    ,\n    \"set\": 129\n    /* SetKeyword */\n    ,\n    \"static\": 113\n    /* StaticKeyword */\n    ,\n    \"string\": 130\n    /* StringKeyword */\n    ,\n    \"super\": 95\n    /* SuperKeyword */\n    ,\n    \"switch\": 96\n    /* SwitchKeyword */\n    ,\n    \"symbol\": 131\n    /* SymbolKeyword */\n    ,\n    \"this\": 97\n    /* ThisKeyword */\n    ,\n    \"throw\": 98\n    /* ThrowKeyword */\n    ,\n    \"true\": 99\n    /* TrueKeyword */\n    ,\n    \"try\": 100\n    /* TryKeyword */\n    ,\n    \"type\": 132\n    /* TypeKeyword */\n    ,\n    \"typeof\": 101\n    /* TypeOfKeyword */\n    ,\n    \"var\": 102\n    /* VarKeyword */\n    ,\n    \"void\": 103\n    /* VoidKeyword */\n    ,\n    \"while\": 104\n    /* WhileKeyword */\n    ,\n    \"with\": 105\n    /* WithKeyword */\n    ,\n    \"yield\": 114\n    /* YieldKeyword */\n    ,\n    \"async\": 118\n    /* AsyncKeyword */\n    ,\n    \"await\": 119\n    /* AwaitKeyword */\n    ,\n    \"of\": 135\n    /* OfKeyword */\n    ,\n    \"{\": 15\n    /* OpenBraceToken */\n    ,\n    \"}\": 16\n    /* CloseBraceToken */\n    ,\n    \"(\": 17\n    /* OpenParenToken */\n    ,\n    \")\": 18\n    /* CloseParenToken */\n    ,\n    \"[\": 19\n    /* OpenBracketToken */\n    ,\n    \"]\": 20\n    /* CloseBracketToken */\n    ,\n    \".\": 21\n    /* DotToken */\n    ,\n    \"...\": 22\n    /* DotDotDotToken */\n    ,\n    \";\": 23\n    /* SemicolonToken */\n    ,\n    \",\": 24\n    /* CommaToken */\n    ,\n    \"<\": 25\n    /* LessThanToken */\n    ,\n    \">\": 27\n    /* GreaterThanToken */\n    ,\n    \"<=\": 28\n    /* LessThanEqualsToken */\n    ,\n    \">=\": 29\n    /* GreaterThanEqualsToken */\n    ,\n    \"==\": 30\n    /* EqualsEqualsToken */\n    ,\n    \"!=\": 31\n    /* ExclamationEqualsToken */\n    ,\n    \"===\": 32\n    /* EqualsEqualsEqualsToken */\n    ,\n    \"!==\": 33\n    /* ExclamationEqualsEqualsToken */\n    ,\n    \"=>\": 34\n    /* EqualsGreaterThanToken */\n    ,\n    \"+\": 35\n    /* PlusToken */\n    ,\n    \"-\": 36\n    /* MinusToken */\n    ,\n    \"**\": 38\n    /* AsteriskAsteriskToken */\n    ,\n    \"*\": 37\n    /* AsteriskToken */\n    ,\n    \"/\": 39\n    /* SlashToken */\n    ,\n    \"%\": 40\n    /* PercentToken */\n    ,\n    \"++\": 41\n    /* PlusPlusToken */\n    ,\n    \"--\": 42\n    /* MinusMinusToken */\n    ,\n    \"<<\": 43\n    /* LessThanLessThanToken */\n    ,\n    \"</\": 26\n    /* LessThanSlashToken */\n    ,\n    \">>\": 44\n    /* GreaterThanGreaterThanToken */\n    ,\n    \">>>\": 45\n    /* GreaterThanGreaterThanGreaterThanToken */\n    ,\n    \"&\": 46\n    /* AmpersandToken */\n    ,\n    \"|\": 47\n    /* BarToken */\n    ,\n    \"^\": 48\n    /* CaretToken */\n    ,\n    \"!\": 49\n    /* ExclamationToken */\n    ,\n    \"~\": 50\n    /* TildeToken */\n    ,\n    \"&&\": 51\n    /* AmpersandAmpersandToken */\n    ,\n    \"||\": 52\n    /* BarBarToken */\n    ,\n    \"?\": 53\n    /* QuestionToken */\n    ,\n    \":\": 54\n    /* ColonToken */\n    ,\n    \"=\": 56\n    /* EqualsToken */\n    ,\n    \"+=\": 57\n    /* PlusEqualsToken */\n    ,\n    \"-=\": 58\n    /* MinusEqualsToken */\n    ,\n    \"*=\": 59\n    /* AsteriskEqualsToken */\n    ,\n    \"**=\": 60\n    /* AsteriskAsteriskEqualsToken */\n    ,\n    \"/=\": 61\n    /* SlashEqualsToken */\n    ,\n    \"%=\": 62\n    /* PercentEqualsToken */\n    ,\n    \"<<=\": 63\n    /* LessThanLessThanEqualsToken */\n    ,\n    \">>=\": 64\n    /* GreaterThanGreaterThanEqualsToken */\n    ,\n    \">>>=\": 65\n    /* GreaterThanGreaterThanGreaterThanEqualsToken */\n    ,\n    \"&=\": 66\n    /* AmpersandEqualsToken */\n    ,\n    \"|=\": 67\n    /* BarEqualsToken */\n    ,\n    \"^=\": 68\n    /* CaretEqualsToken */\n    ,\n    \"@\": 55\n    /* AtToken */\n\n  };\n  /*\n      As per ECMAScript Language Specification 3th Edition, Section 7.6: Identifiers\n      IdentifierStart ::\n          Can contain Unicode 3.0.0  categories:\n          Uppercase letter (Lu),\n          Lowercase letter (Ll),\n          Titlecase letter (Lt),\n          Modifier letter (Lm),\n          Other letter (Lo), or\n          Letter number (Nl).\n      IdentifierPart :: =\n          Can contain IdentifierStart + Unicode 3.0.0  categories:\n          Non-spacing mark (Mn),\n          Combining spacing mark (Mc),\n          Decimal number (Nd), or\n          Connector punctuation (Pc).\n       Codepoint ranges for ES3 Identifiers are extracted from the Unicode 3.0.0 specification at:\n      http://www.unicode.org/Public/3.0-Update/UnicodeData-3.0.0.txt\n  */\n\n  var unicodeES3IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1610, 1649, 1747, 1749, 1749, 1765, 1766, 1786, 1788, 1808, 1808, 1810, 1836, 1920, 1957, 2309, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2784, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3294, 3294, 3296, 3297, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3424, 3425, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3805, 3840, 3840, 3904, 3911, 3913, 3946, 3976, 3979, 4096, 4129, 4131, 4135, 4137, 4138, 4176, 4181, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6067, 6176, 6263, 6272, 6312, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8319, 8319, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12346, 12353, 12436, 12445, 12446, 12449, 12538, 12540, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65138, 65140, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];\n  var unicodeES3IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 543, 546, 563, 592, 685, 688, 696, 699, 705, 720, 721, 736, 740, 750, 750, 768, 846, 864, 866, 890, 890, 902, 902, 904, 906, 908, 908, 910, 929, 931, 974, 976, 983, 986, 1011, 1024, 1153, 1155, 1158, 1164, 1220, 1223, 1224, 1227, 1228, 1232, 1269, 1272, 1273, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1441, 1443, 1465, 1467, 1469, 1471, 1471, 1473, 1474, 1476, 1476, 1488, 1514, 1520, 1522, 1569, 1594, 1600, 1621, 1632, 1641, 1648, 1747, 1749, 1756, 1759, 1768, 1770, 1773, 1776, 1788, 1808, 1836, 1840, 1866, 1920, 1968, 2305, 2307, 2309, 2361, 2364, 2381, 2384, 2388, 2392, 2403, 2406, 2415, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2492, 2494, 2500, 2503, 2504, 2507, 2509, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2562, 2562, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2649, 2652, 2654, 2654, 2662, 2676, 2689, 2691, 2693, 2699, 2701, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2784, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2870, 2873, 2876, 2883, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2913, 2918, 2927, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 2997, 2999, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3031, 3031, 3047, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3134, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3168, 3169, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3262, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3297, 3302, 3311, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3368, 3370, 3385, 3390, 3395, 3398, 3400, 3402, 3405, 3415, 3415, 3424, 3425, 3430, 3439, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3805, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3946, 3953, 3972, 3974, 3979, 3984, 3991, 3993, 4028, 4038, 4038, 4096, 4129, 4131, 4135, 4137, 4138, 4140, 4146, 4150, 4153, 4160, 4169, 4176, 4185, 4256, 4293, 4304, 4342, 4352, 4441, 4447, 4514, 4520, 4601, 4608, 4614, 4616, 4678, 4680, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4742, 4744, 4744, 4746, 4749, 4752, 4782, 4784, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4814, 4816, 4822, 4824, 4846, 4848, 4878, 4880, 4880, 4882, 4885, 4888, 4894, 4896, 4934, 4936, 4954, 4969, 4977, 5024, 5108, 5121, 5740, 5743, 5750, 5761, 5786, 5792, 5866, 6016, 6099, 6112, 6121, 6160, 6169, 6176, 6263, 6272, 6313, 7680, 7835, 7840, 7929, 7936, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8255, 8256, 8319, 8319, 8400, 8412, 8417, 8417, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8497, 8499, 8505, 8544, 8579, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12346, 12353, 12436, 12441, 12442, 12445, 12446, 12449, 12542, 12549, 12588, 12593, 12686, 12704, 12727, 13312, 19893, 19968, 40869, 40960, 42124, 44032, 55203, 63744, 64045, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65056, 65059, 65075, 65076, 65101, 65103, 65136, 65138, 65140, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65381, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];\n  /*\n      As per ECMAScript Language Specification 5th Edition, Section 7.6: ISyntaxToken Names and Identifiers\n      IdentifierStart ::\n          Can contain Unicode 6.2  categories:\n          Uppercase letter (Lu),\n          Lowercase letter (Ll),\n          Titlecase letter (Lt),\n          Modifier letter (Lm),\n          Other letter (Lo), or\n          Letter number (Nl).\n      IdentifierPart ::\n          Can contain IdentifierStart + Unicode 6.2  categories:\n          Non-spacing mark (Mn),\n          Combining spacing mark (Mc),\n          Decimal number (Nd),\n          Connector punctuation (Pc),\n          <ZWNJ>, or\n          <ZWJ>.\n       Codepoint ranges for ES5 Identifiers are extracted from the Unicode 6.2 specification at:\n      http://www.unicode.org/Public/6.2.0/ucd/UnicodeData.txt\n  */\n\n  var unicodeES5IdentifierStart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 880, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1488, 1514, 1520, 1522, 1568, 1610, 1646, 1647, 1649, 1747, 1749, 1749, 1765, 1766, 1774, 1775, 1786, 1788, 1791, 1791, 1808, 1808, 1810, 1839, 1869, 1957, 1969, 1969, 1994, 2026, 2036, 2037, 2042, 2042, 2048, 2069, 2074, 2074, 2084, 2084, 2088, 2088, 2112, 2136, 2208, 2208, 2210, 2220, 2308, 2361, 2365, 2365, 2384, 2384, 2392, 2401, 2417, 2423, 2425, 2431, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2493, 2493, 2510, 2510, 2524, 2525, 2527, 2529, 2544, 2545, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2649, 2652, 2654, 2654, 2674, 2676, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2749, 2749, 2768, 2768, 2784, 2785, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2877, 2877, 2908, 2909, 2911, 2913, 2929, 2929, 2947, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3024, 3024, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3133, 3160, 3161, 3168, 3169, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3261, 3261, 3294, 3294, 3296, 3297, 3313, 3314, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3389, 3406, 3406, 3424, 3425, 3450, 3455, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3585, 3632, 3634, 3635, 3648, 3654, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3760, 3762, 3763, 3773, 3773, 3776, 3780, 3782, 3782, 3804, 3807, 3840, 3840, 3904, 3911, 3913, 3948, 3976, 3980, 4096, 4138, 4159, 4159, 4176, 4181, 4186, 4189, 4193, 4193, 4197, 4198, 4206, 4208, 4213, 4225, 4238, 4238, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5905, 5920, 5937, 5952, 5969, 5984, 5996, 5998, 6000, 6016, 6067, 6103, 6103, 6108, 6108, 6176, 6263, 6272, 6312, 6314, 6314, 6320, 6389, 6400, 6428, 6480, 6509, 6512, 6516, 6528, 6571, 6593, 6599, 6656, 6678, 6688, 6740, 6823, 6823, 6917, 6963, 6981, 6987, 7043, 7072, 7086, 7087, 7098, 7141, 7168, 7203, 7245, 7247, 7258, 7293, 7401, 7404, 7406, 7409, 7413, 7414, 7424, 7615, 7680, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8305, 8305, 8319, 8319, 8336, 8348, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11502, 11506, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11648, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11823, 11823, 12293, 12295, 12321, 12329, 12337, 12341, 12344, 12348, 12353, 12438, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42527, 42538, 42539, 42560, 42606, 42623, 42647, 42656, 42735, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43009, 43011, 43013, 43015, 43018, 43020, 43042, 43072, 43123, 43138, 43187, 43250, 43255, 43259, 43259, 43274, 43301, 43312, 43334, 43360, 43388, 43396, 43442, 43471, 43471, 43520, 43560, 43584, 43586, 43588, 43595, 43616, 43638, 43642, 43642, 43648, 43695, 43697, 43697, 43701, 43702, 43705, 43709, 43712, 43712, 43714, 43714, 43739, 43741, 43744, 43754, 43762, 43764, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44002, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64285, 64287, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65136, 65140, 65142, 65276, 65313, 65338, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];\n  var unicodeES5IdentifierPart = [170, 170, 181, 181, 186, 186, 192, 214, 216, 246, 248, 705, 710, 721, 736, 740, 748, 748, 750, 750, 768, 884, 886, 887, 890, 893, 902, 902, 904, 906, 908, 908, 910, 929, 931, 1013, 1015, 1153, 1155, 1159, 1162, 1319, 1329, 1366, 1369, 1369, 1377, 1415, 1425, 1469, 1471, 1471, 1473, 1474, 1476, 1477, 1479, 1479, 1488, 1514, 1520, 1522, 1552, 1562, 1568, 1641, 1646, 1747, 1749, 1756, 1759, 1768, 1770, 1788, 1791, 1791, 1808, 1866, 1869, 1969, 1984, 2037, 2042, 2042, 2048, 2093, 2112, 2139, 2208, 2208, 2210, 2220, 2276, 2302, 2304, 2403, 2406, 2415, 2417, 2423, 2425, 2431, 2433, 2435, 2437, 2444, 2447, 2448, 2451, 2472, 2474, 2480, 2482, 2482, 2486, 2489, 2492, 2500, 2503, 2504, 2507, 2510, 2519, 2519, 2524, 2525, 2527, 2531, 2534, 2545, 2561, 2563, 2565, 2570, 2575, 2576, 2579, 2600, 2602, 2608, 2610, 2611, 2613, 2614, 2616, 2617, 2620, 2620, 2622, 2626, 2631, 2632, 2635, 2637, 2641, 2641, 2649, 2652, 2654, 2654, 2662, 2677, 2689, 2691, 2693, 2701, 2703, 2705, 2707, 2728, 2730, 2736, 2738, 2739, 2741, 2745, 2748, 2757, 2759, 2761, 2763, 2765, 2768, 2768, 2784, 2787, 2790, 2799, 2817, 2819, 2821, 2828, 2831, 2832, 2835, 2856, 2858, 2864, 2866, 2867, 2869, 2873, 2876, 2884, 2887, 2888, 2891, 2893, 2902, 2903, 2908, 2909, 2911, 2915, 2918, 2927, 2929, 2929, 2946, 2947, 2949, 2954, 2958, 2960, 2962, 2965, 2969, 2970, 2972, 2972, 2974, 2975, 2979, 2980, 2984, 2986, 2990, 3001, 3006, 3010, 3014, 3016, 3018, 3021, 3024, 3024, 3031, 3031, 3046, 3055, 3073, 3075, 3077, 3084, 3086, 3088, 3090, 3112, 3114, 3123, 3125, 3129, 3133, 3140, 3142, 3144, 3146, 3149, 3157, 3158, 3160, 3161, 3168, 3171, 3174, 3183, 3202, 3203, 3205, 3212, 3214, 3216, 3218, 3240, 3242, 3251, 3253, 3257, 3260, 3268, 3270, 3272, 3274, 3277, 3285, 3286, 3294, 3294, 3296, 3299, 3302, 3311, 3313, 3314, 3330, 3331, 3333, 3340, 3342, 3344, 3346, 3386, 3389, 3396, 3398, 3400, 3402, 3406, 3415, 3415, 3424, 3427, 3430, 3439, 3450, 3455, 3458, 3459, 3461, 3478, 3482, 3505, 3507, 3515, 3517, 3517, 3520, 3526, 3530, 3530, 3535, 3540, 3542, 3542, 3544, 3551, 3570, 3571, 3585, 3642, 3648, 3662, 3664, 3673, 3713, 3714, 3716, 3716, 3719, 3720, 3722, 3722, 3725, 3725, 3732, 3735, 3737, 3743, 3745, 3747, 3749, 3749, 3751, 3751, 3754, 3755, 3757, 3769, 3771, 3773, 3776, 3780, 3782, 3782, 3784, 3789, 3792, 3801, 3804, 3807, 3840, 3840, 3864, 3865, 3872, 3881, 3893, 3893, 3895, 3895, 3897, 3897, 3902, 3911, 3913, 3948, 3953, 3972, 3974, 3991, 3993, 4028, 4038, 4038, 4096, 4169, 4176, 4253, 4256, 4293, 4295, 4295, 4301, 4301, 4304, 4346, 4348, 4680, 4682, 4685, 4688, 4694, 4696, 4696, 4698, 4701, 4704, 4744, 4746, 4749, 4752, 4784, 4786, 4789, 4792, 4798, 4800, 4800, 4802, 4805, 4808, 4822, 4824, 4880, 4882, 4885, 4888, 4954, 4957, 4959, 4992, 5007, 5024, 5108, 5121, 5740, 5743, 5759, 5761, 5786, 5792, 5866, 5870, 5872, 5888, 5900, 5902, 5908, 5920, 5940, 5952, 5971, 5984, 5996, 5998, 6000, 6002, 6003, 6016, 6099, 6103, 6103, 6108, 6109, 6112, 6121, 6155, 6157, 6160, 6169, 6176, 6263, 6272, 6314, 6320, 6389, 6400, 6428, 6432, 6443, 6448, 6459, 6470, 6509, 6512, 6516, 6528, 6571, 6576, 6601, 6608, 6617, 6656, 6683, 6688, 6750, 6752, 6780, 6783, 6793, 6800, 6809, 6823, 6823, 6912, 6987, 6992, 7001, 7019, 7027, 7040, 7155, 7168, 7223, 7232, 7241, 7245, 7293, 7376, 7378, 7380, 7414, 7424, 7654, 7676, 7957, 7960, 7965, 7968, 8005, 8008, 8013, 8016, 8023, 8025, 8025, 8027, 8027, 8029, 8029, 8031, 8061, 8064, 8116, 8118, 8124, 8126, 8126, 8130, 8132, 8134, 8140, 8144, 8147, 8150, 8155, 8160, 8172, 8178, 8180, 8182, 8188, 8204, 8205, 8255, 8256, 8276, 8276, 8305, 8305, 8319, 8319, 8336, 8348, 8400, 8412, 8417, 8417, 8421, 8432, 8450, 8450, 8455, 8455, 8458, 8467, 8469, 8469, 8473, 8477, 8484, 8484, 8486, 8486, 8488, 8488, 8490, 8493, 8495, 8505, 8508, 8511, 8517, 8521, 8526, 8526, 8544, 8584, 11264, 11310, 11312, 11358, 11360, 11492, 11499, 11507, 11520, 11557, 11559, 11559, 11565, 11565, 11568, 11623, 11631, 11631, 11647, 11670, 11680, 11686, 11688, 11694, 11696, 11702, 11704, 11710, 11712, 11718, 11720, 11726, 11728, 11734, 11736, 11742, 11744, 11775, 11823, 11823, 12293, 12295, 12321, 12335, 12337, 12341, 12344, 12348, 12353, 12438, 12441, 12442, 12445, 12447, 12449, 12538, 12540, 12543, 12549, 12589, 12593, 12686, 12704, 12730, 12784, 12799, 13312, 19893, 19968, 40908, 40960, 42124, 42192, 42237, 42240, 42508, 42512, 42539, 42560, 42607, 42612, 42621, 42623, 42647, 42655, 42737, 42775, 42783, 42786, 42888, 42891, 42894, 42896, 42899, 42912, 42922, 43000, 43047, 43072, 43123, 43136, 43204, 43216, 43225, 43232, 43255, 43259, 43259, 43264, 43309, 43312, 43347, 43360, 43388, 43392, 43456, 43471, 43481, 43520, 43574, 43584, 43597, 43600, 43609, 43616, 43638, 43642, 43643, 43648, 43714, 43739, 43741, 43744, 43759, 43762, 43766, 43777, 43782, 43785, 43790, 43793, 43798, 43808, 43814, 43816, 43822, 43968, 44010, 44012, 44013, 44016, 44025, 44032, 55203, 55216, 55238, 55243, 55291, 63744, 64109, 64112, 64217, 64256, 64262, 64275, 64279, 64285, 64296, 64298, 64310, 64312, 64316, 64318, 64318, 64320, 64321, 64323, 64324, 64326, 64433, 64467, 64829, 64848, 64911, 64914, 64967, 65008, 65019, 65024, 65039, 65056, 65062, 65075, 65076, 65101, 65103, 65136, 65140, 65142, 65276, 65296, 65305, 65313, 65338, 65343, 65343, 65345, 65370, 65382, 65470, 65474, 65479, 65482, 65487, 65490, 65495, 65498, 65500];\n\n  function lookupInUnicodeMap(code, map) {\n    // Bail out quickly if it couldn't possibly be in the map.\n    if (code < map[0]) {\n      return false;\n    } // Perform binary search in one of the Unicode range maps\n\n\n    var lo = 0;\n    var hi = map.length;\n    var mid;\n\n    while (lo + 1 < hi) {\n      mid = lo + (hi - lo) / 2; // mid has to be even to catch a range's beginning\n\n      mid -= mid % 2;\n\n      if (map[mid] <= code && code <= map[mid + 1]) {\n        return true;\n      }\n\n      if (code < map[mid]) {\n        hi = mid;\n      } else {\n        lo = mid + 2;\n      }\n    }\n\n    return false;\n  }\n  /* @internal */\n\n\n  function isUnicodeIdentifierStart(code, languageVersion) {\n    return languageVersion >= 1\n    /* ES5 */\n    ? lookupInUnicodeMap(code, unicodeES5IdentifierStart) : lookupInUnicodeMap(code, unicodeES3IdentifierStart);\n  }\n\n  ts.isUnicodeIdentifierStart = isUnicodeIdentifierStart;\n\n  function isUnicodeIdentifierPart(code, languageVersion) {\n    return languageVersion >= 1\n    /* ES5 */\n    ? lookupInUnicodeMap(code, unicodeES5IdentifierPart) : lookupInUnicodeMap(code, unicodeES3IdentifierPart);\n  }\n\n  function makeReverseMap(source) {\n    var result = [];\n\n    for (var name_4 in source) {\n      if (source.hasOwnProperty(name_4)) {\n        result[source[name_4]] = name_4;\n      }\n    }\n\n    return result;\n  }\n\n  var tokenStrings = makeReverseMap(textToToken);\n\n  function tokenToString(t) {\n    return tokenStrings[t];\n  }\n\n  ts.tokenToString = tokenToString;\n  /* @internal */\n\n  function stringToToken(s) {\n    return textToToken[s];\n  }\n\n  ts.stringToToken = stringToToken;\n  /* @internal */\n\n  function computeLineStarts(text) {\n    var result = new Array();\n    var pos = 0;\n    var lineStart = 0;\n\n    while (pos < text.length) {\n      var ch = text.charCodeAt(pos);\n      pos++;\n\n      switch (ch) {\n        case 13\n        /* carriageReturn */\n        :\n          if (text.charCodeAt(pos) === 10\n          /* lineFeed */\n          ) {\n              pos++;\n            }\n\n        case 10\n        /* lineFeed */\n        :\n          result.push(lineStart);\n          lineStart = pos;\n          break;\n\n        default:\n          if (ch > 127\n          /* maxAsciiCharacter */\n          && isLineBreak(ch)) {\n            result.push(lineStart);\n            lineStart = pos;\n          }\n\n          break;\n      }\n    }\n\n    result.push(lineStart);\n    return result;\n  }\n\n  ts.computeLineStarts = computeLineStarts;\n\n  function getPositionOfLineAndCharacter(sourceFile, line, character) {\n    return computePositionOfLineAndCharacter(getLineStarts(sourceFile), line, character);\n  }\n\n  ts.getPositionOfLineAndCharacter = getPositionOfLineAndCharacter;\n  /* @internal */\n\n  function computePositionOfLineAndCharacter(lineStarts, line, character) {\n    ts.Debug.assert(line >= 0 && line < lineStarts.length);\n    return lineStarts[line] + character;\n  }\n\n  ts.computePositionOfLineAndCharacter = computePositionOfLineAndCharacter;\n  /* @internal */\n\n  function getLineStarts(sourceFile) {\n    return sourceFile.lineMap || (sourceFile.lineMap = computeLineStarts(sourceFile.text));\n  }\n\n  ts.getLineStarts = getLineStarts;\n  /* @internal */\n\n  /**\n   * We assume the first line starts at position 0 and 'position' is non-negative.\n   */\n\n  function computeLineAndCharacterOfPosition(lineStarts, position) {\n    var lineNumber = ts.binarySearch(lineStarts, position);\n\n    if (lineNumber < 0) {\n      // If the actual position was not found,\n      // the binary search returns the 2's-complement of the next line start\n      // e.g. if the line starts at [5, 10, 23, 80] and the position requested was 20\n      // then the search will return -2.\n      //\n      // We want the index of the previous line start, so we subtract 1.\n      // Review 2's-complement if this is confusing.\n      lineNumber = ~lineNumber - 1;\n      ts.Debug.assert(lineNumber !== -1, \"position cannot precede the beginning of the file\");\n    }\n\n    return {\n      line: lineNumber,\n      character: position - lineStarts[lineNumber]\n    };\n  }\n\n  ts.computeLineAndCharacterOfPosition = computeLineAndCharacterOfPosition;\n\n  function getLineAndCharacterOfPosition(sourceFile, position) {\n    return computeLineAndCharacterOfPosition(getLineStarts(sourceFile), position);\n  }\n\n  ts.getLineAndCharacterOfPosition = getLineAndCharacterOfPosition;\n  var hasOwnProperty = Object.prototype.hasOwnProperty;\n\n  function isWhiteSpace(ch) {\n    // Note: nextLine is in the Zs space, and should be considered to be a whitespace.\n    // It is explicitly not a line-break as it isn't in the exact set specified by EcmaScript.\n    return ch === 32\n    /* space */\n    || ch === 9\n    /* tab */\n    || ch === 11\n    /* verticalTab */\n    || ch === 12\n    /* formFeed */\n    || ch === 160\n    /* nonBreakingSpace */\n    || ch === 133\n    /* nextLine */\n    || ch === 5760\n    /* ogham */\n    || ch >= 8192\n    /* enQuad */\n    && ch <= 8203\n    /* zeroWidthSpace */\n    || ch === 8239\n    /* narrowNoBreakSpace */\n    || ch === 8287\n    /* mathematicalSpace */\n    || ch === 12288\n    /* ideographicSpace */\n    || ch === 65279\n    /* byteOrderMark */\n    ;\n  }\n\n  ts.isWhiteSpace = isWhiteSpace;\n\n  function isLineBreak(ch) {\n    // ES5 7.3:\n    // The ECMAScript line terminator characters are listed in Table 3.\n    //     Table 3: Line Terminator Characters\n    //     Code Unit Value     Name                    Formal Name\n    //     \\u000A              Line Feed               <LF>\n    //     \\u000D              Carriage Return         <CR>\n    //     \\u2028              Line separator          <LS>\n    //     \\u2029              Paragraph separator     <PS>\n    // Only the characters in Table 3 are treated as line terminators. Other new line or line\n    // breaking characters are treated as white space but not as line terminators.\n    return ch === 10\n    /* lineFeed */\n    || ch === 13\n    /* carriageReturn */\n    || ch === 8232\n    /* lineSeparator */\n    || ch === 8233\n    /* paragraphSeparator */\n    ;\n  }\n\n  ts.isLineBreak = isLineBreak;\n\n  function isDigit(ch) {\n    return ch >= 48\n    /* _0 */\n    && ch <= 57\n    /* _9 */\n    ;\n  }\n  /* @internal */\n\n\n  function isOctalDigit(ch) {\n    return ch >= 48\n    /* _0 */\n    && ch <= 55\n    /* _7 */\n    ;\n  }\n\n  ts.isOctalDigit = isOctalDigit;\n\n  function couldStartTrivia(text, pos) {\n    // Keep in sync with skipTrivia\n    var ch = text.charCodeAt(pos);\n\n    switch (ch) {\n      case 13\n      /* carriageReturn */\n      :\n      case 10\n      /* lineFeed */\n      :\n      case 9\n      /* tab */\n      :\n      case 11\n      /* verticalTab */\n      :\n      case 12\n      /* formFeed */\n      :\n      case 32\n      /* space */\n      :\n      case 47\n      /* slash */\n      : // starts of normal trivia\n\n      case 60\n      /* lessThan */\n      :\n      case 61\n      /* equals */\n      :\n      case 62\n      /* greaterThan */\n      :\n        // Starts of conflict marker trivia\n        return true;\n\n      case 35\n      /* hash */\n      :\n        // Only if its the beginning can we have #! trivia\n        return pos === 0;\n\n      default:\n        return ch > 127\n        /* maxAsciiCharacter */\n        ;\n    }\n  }\n\n  ts.couldStartTrivia = couldStartTrivia;\n  /* @internal */\n\n  function skipTrivia(text, pos, stopAfterLineBreak) {\n    // Using ! with a greater than test is a fast way of testing the following conditions:\n    //  pos === undefined || pos === null || isNaN(pos) || pos < 0;\n    if (!(pos >= 0)) {\n      return pos;\n    } // Keep in sync with couldStartTrivia\n\n\n    while (true) {\n      var ch = text.charCodeAt(pos);\n\n      switch (ch) {\n        case 13\n        /* carriageReturn */\n        :\n          if (text.charCodeAt(pos + 1) === 10\n          /* lineFeed */\n          ) {\n              pos++;\n            }\n\n        case 10\n        /* lineFeed */\n        :\n          pos++;\n\n          if (stopAfterLineBreak) {\n            return pos;\n          }\n\n          continue;\n\n        case 9\n        /* tab */\n        :\n        case 11\n        /* verticalTab */\n        :\n        case 12\n        /* formFeed */\n        :\n        case 32\n        /* space */\n        :\n          pos++;\n          continue;\n\n        case 47\n        /* slash */\n        :\n          if (text.charCodeAt(pos + 1) === 47\n          /* slash */\n          ) {\n              pos += 2;\n\n              while (pos < text.length) {\n                if (isLineBreak(text.charCodeAt(pos))) {\n                  break;\n                }\n\n                pos++;\n              }\n\n              continue;\n            }\n\n          if (text.charCodeAt(pos + 1) === 42\n          /* asterisk */\n          ) {\n              pos += 2;\n\n              while (pos < text.length) {\n                if (text.charCodeAt(pos) === 42\n                /* asterisk */\n                && text.charCodeAt(pos + 1) === 47\n                /* slash */\n                ) {\n                    pos += 2;\n                    break;\n                  }\n\n                pos++;\n              }\n\n              continue;\n            }\n\n          break;\n\n        case 60\n        /* lessThan */\n        :\n        case 61\n        /* equals */\n        :\n        case 62\n        /* greaterThan */\n        :\n          if (isConflictMarkerTrivia(text, pos)) {\n            pos = scanConflictMarkerTrivia(text, pos);\n            continue;\n          }\n\n          break;\n\n        case 35\n        /* hash */\n        :\n          if (pos === 0 && isShebangTrivia(text, pos)) {\n            pos = scanShebangTrivia(text, pos);\n            continue;\n          }\n\n          break;\n\n        default:\n          if (ch > 127\n          /* maxAsciiCharacter */\n          && (isWhiteSpace(ch) || isLineBreak(ch))) {\n            pos++;\n            continue;\n          }\n\n          break;\n      }\n\n      return pos;\n    }\n  }\n\n  ts.skipTrivia = skipTrivia; // All conflict markers consist of the same character repeated seven times.  If it is\n  // a <<<<<<< or >>>>>>> marker then it is also followd by a space.\n\n  var mergeConflictMarkerLength = \"<<<<<<<\".length;\n\n  function isConflictMarkerTrivia(text, pos) {\n    ts.Debug.assert(pos >= 0); // Conflict markers must be at the start of a line.\n\n    if (pos === 0 || isLineBreak(text.charCodeAt(pos - 1))) {\n      var ch = text.charCodeAt(pos);\n\n      if (pos + mergeConflictMarkerLength < text.length) {\n        for (var i = 0, n = mergeConflictMarkerLength; i < n; i++) {\n          if (text.charCodeAt(pos + i) !== ch) {\n            return false;\n          }\n        }\n\n        return ch === 61\n        /* equals */\n        || text.charCodeAt(pos + mergeConflictMarkerLength) === 32\n        /* space */\n        ;\n      }\n    }\n\n    return false;\n  }\n\n  function scanConflictMarkerTrivia(text, pos, error) {\n    if (error) {\n      error(ts.Diagnostics.Merge_conflict_marker_encountered, mergeConflictMarkerLength);\n    }\n\n    var ch = text.charCodeAt(pos);\n    var len = text.length;\n\n    if (ch === 60\n    /* lessThan */\n    || ch === 62\n    /* greaterThan */\n    ) {\n        while (pos < len && !isLineBreak(text.charCodeAt(pos))) {\n          pos++;\n        }\n      } else {\n      ts.Debug.assert(ch === 61\n      /* equals */\n      ); // Consume everything from the start of the mid-conlict marker to the start of the next\n      // end-conflict marker.\n\n      while (pos < len) {\n        var ch_1 = text.charCodeAt(pos);\n\n        if (ch_1 === 62\n        /* greaterThan */\n        && isConflictMarkerTrivia(text, pos)) {\n          break;\n        }\n\n        pos++;\n      }\n    }\n\n    return pos;\n  }\n\n  var shebangTriviaRegex = /^#!.*/;\n\n  function isShebangTrivia(text, pos) {\n    // Shebangs check must only be done at the start of the file\n    ts.Debug.assert(pos === 0);\n    return shebangTriviaRegex.test(text);\n  }\n\n  function scanShebangTrivia(text, pos) {\n    var shebang = shebangTriviaRegex.exec(text)[0];\n    pos = pos + shebang.length;\n    return pos;\n  }\n  /**\n   * Extract comments from text prefixing the token closest following `pos`.\n   * The return value is an array containing a TextRange for each comment.\n   * Single-line comment ranges include the beginning '//' characters but not the ending line break.\n   * Multi - line comment ranges include the beginning '/* and ending '<asterisk>/' characters.\n   * The return value is undefined if no comments were found.\n   * @param trailing\n   * If false, whitespace is skipped until the first line break and comments between that location\n   * and the next token are returned.\n   * If true, comments occurring between the given position and the next line break are returned.\n   */\n\n\n  function getCommentRanges(text, pos, trailing) {\n    var result;\n    var collecting = trailing || pos === 0;\n\n    while (pos < text.length) {\n      var ch = text.charCodeAt(pos);\n\n      switch (ch) {\n        case 13\n        /* carriageReturn */\n        :\n          if (text.charCodeAt(pos + 1) === 10\n          /* lineFeed */\n          ) {\n              pos++;\n            }\n\n        case 10\n        /* lineFeed */\n        :\n          pos++;\n\n          if (trailing) {\n            return result;\n          }\n\n          collecting = true;\n\n          if (result && result.length) {\n            ts.lastOrUndefined(result).hasTrailingNewLine = true;\n          }\n\n          continue;\n\n        case 9\n        /* tab */\n        :\n        case 11\n        /* verticalTab */\n        :\n        case 12\n        /* formFeed */\n        :\n        case 32\n        /* space */\n        :\n          pos++;\n          continue;\n\n        case 47\n        /* slash */\n        :\n          var nextChar = text.charCodeAt(pos + 1);\n          var hasTrailingNewLine = false;\n\n          if (nextChar === 47\n          /* slash */\n          || nextChar === 42\n          /* asterisk */\n          ) {\n              var kind = nextChar === 47\n              /* slash */\n              ? 2\n              /* SingleLineCommentTrivia */\n              : 3\n              /* MultiLineCommentTrivia */\n              ;\n              var startPos = pos;\n              pos += 2;\n\n              if (nextChar === 47\n              /* slash */\n              ) {\n                  while (pos < text.length) {\n                    if (isLineBreak(text.charCodeAt(pos))) {\n                      hasTrailingNewLine = true;\n                      break;\n                    }\n\n                    pos++;\n                  }\n                } else {\n                while (pos < text.length) {\n                  if (text.charCodeAt(pos) === 42\n                  /* asterisk */\n                  && text.charCodeAt(pos + 1) === 47\n                  /* slash */\n                  ) {\n                      pos += 2;\n                      break;\n                    }\n\n                  pos++;\n                }\n              }\n\n              if (collecting) {\n                if (!result) {\n                  result = [];\n                }\n\n                result.push({\n                  pos: startPos,\n                  end: pos,\n                  hasTrailingNewLine: hasTrailingNewLine,\n                  kind: kind\n                });\n              }\n\n              continue;\n            }\n\n          break;\n\n        default:\n          if (ch > 127\n          /* maxAsciiCharacter */\n          && (isWhiteSpace(ch) || isLineBreak(ch))) {\n            if (result && result.length && isLineBreak(ch)) {\n              ts.lastOrUndefined(result).hasTrailingNewLine = true;\n            }\n\n            pos++;\n            continue;\n          }\n\n          break;\n      }\n\n      return result;\n    }\n\n    return result;\n  }\n\n  function getLeadingCommentRanges(text, pos) {\n    return getCommentRanges(text, pos,\n    /*trailing*/\n    false);\n  }\n\n  ts.getLeadingCommentRanges = getLeadingCommentRanges;\n\n  function getTrailingCommentRanges(text, pos) {\n    return getCommentRanges(text, pos,\n    /*trailing*/\n    true);\n  }\n\n  ts.getTrailingCommentRanges = getTrailingCommentRanges;\n  /** Optionally, get the shebang */\n\n  function getShebang(text) {\n    return shebangTriviaRegex.test(text) ? shebangTriviaRegex.exec(text)[0] : undefined;\n  }\n\n  ts.getShebang = getShebang;\n\n  function isIdentifierStart(ch, languageVersion) {\n    return ch >= 65\n    /* A */\n    && ch <= 90\n    /* Z */\n    || ch >= 97\n    /* a */\n    && ch <= 122\n    /* z */\n    || ch === 36\n    /* $ */\n    || ch === 95\n    /* _ */\n    || ch > 127\n    /* maxAsciiCharacter */\n    && isUnicodeIdentifierStart(ch, languageVersion);\n  }\n\n  ts.isIdentifierStart = isIdentifierStart;\n\n  function isIdentifierPart(ch, languageVersion) {\n    return ch >= 65\n    /* A */\n    && ch <= 90\n    /* Z */\n    || ch >= 97\n    /* a */\n    && ch <= 122\n    /* z */\n    || ch >= 48\n    /* _0 */\n    && ch <= 57\n    /* _9 */\n    || ch === 36\n    /* $ */\n    || ch === 95\n    /* _ */\n    || ch > 127\n    /* maxAsciiCharacter */\n    && isUnicodeIdentifierPart(ch, languageVersion);\n  }\n\n  ts.isIdentifierPart = isIdentifierPart;\n  /* @internal */\n\n  function isIdentifier(name, languageVersion) {\n    if (!isIdentifierStart(name.charCodeAt(0), languageVersion)) {\n      return false;\n    }\n\n    for (var i = 1, n = name.length; i < n; i++) {\n      if (!isIdentifierPart(name.charCodeAt(i), languageVersion)) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  ts.isIdentifier = isIdentifier; // Creates a scanner over a (possibly unspecified) range of a piece of text.\n\n  function createScanner(languageVersion, skipTrivia, languageVariant, text, onError, start, length) {\n    if (languageVariant === void 0) {\n      languageVariant = 0\n      /* Standard */\n      ;\n    } // Current position (end position of text of current token)\n\n\n    var pos; // end of text\n\n    var end; // Start position of whitespace before current token\n\n    var startPos; // Start position of text of current token\n\n    var tokenPos;\n    var token;\n    var tokenValue;\n    var precedingLineBreak;\n\n    var _hasExtendedUnicodeEscape;\n\n    var tokenIsUnterminated;\n    setText(text, start, length);\n    return {\n      getStartPos: function getStartPos() {\n        return startPos;\n      },\n      getTextPos: function getTextPos() {\n        return pos;\n      },\n      getToken: function getToken() {\n        return token;\n      },\n      getTokenPos: function getTokenPos() {\n        return tokenPos;\n      },\n      getTokenText: function getTokenText() {\n        return text.substring(tokenPos, pos);\n      },\n      getTokenValue: function getTokenValue() {\n        return tokenValue;\n      },\n      hasExtendedUnicodeEscape: function hasExtendedUnicodeEscape() {\n        return _hasExtendedUnicodeEscape;\n      },\n      hasPrecedingLineBreak: function hasPrecedingLineBreak() {\n        return precedingLineBreak;\n      },\n      isIdentifier: function isIdentifier() {\n        return token === 69\n        /* Identifier */\n        || token > 105\n        /* LastReservedWord */\n        ;\n      },\n      isReservedWord: function isReservedWord() {\n        return token >= 70\n        /* FirstReservedWord */\n        && token <= 105\n        /* LastReservedWord */\n        ;\n      },\n      isUnterminated: function isUnterminated() {\n        return tokenIsUnterminated;\n      },\n      reScanGreaterToken: reScanGreaterToken,\n      reScanSlashToken: reScanSlashToken,\n      reScanTemplateToken: reScanTemplateToken,\n      scanJsxIdentifier: scanJsxIdentifier,\n      reScanJsxToken: reScanJsxToken,\n      scanJsxToken: scanJsxToken,\n      scanJSDocToken: scanJSDocToken,\n      scan: scan,\n      setText: setText,\n      setScriptTarget: setScriptTarget,\n      setLanguageVariant: setLanguageVariant,\n      setOnError: setOnError,\n      setTextPos: setTextPos,\n      tryScan: tryScan,\n      lookAhead: lookAhead,\n      scanRange: scanRange\n    };\n\n    function error(message, length) {\n      if (onError) {\n        onError(message, length || 0);\n      }\n    }\n\n    function scanNumber() {\n      var start = pos;\n\n      while (isDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n\n      if (text.charCodeAt(pos) === 46\n      /* dot */\n      ) {\n          pos++;\n\n          while (isDigit(text.charCodeAt(pos))) {\n            pos++;\n          }\n        }\n\n      var end = pos;\n\n      if (text.charCodeAt(pos) === 69\n      /* E */\n      || text.charCodeAt(pos) === 101\n      /* e */\n      ) {\n          pos++;\n          if (text.charCodeAt(pos) === 43\n          /* plus */\n          || text.charCodeAt(pos) === 45\n          /* minus */\n          ) pos++;\n\n          if (isDigit(text.charCodeAt(pos))) {\n            pos++;\n\n            while (isDigit(text.charCodeAt(pos))) {\n              pos++;\n            }\n\n            end = pos;\n          } else {\n            error(ts.Diagnostics.Digit_expected);\n          }\n        }\n\n      return \"\" + +text.substring(start, end);\n    }\n\n    function scanOctalDigits() {\n      var start = pos;\n\n      while (isOctalDigit(text.charCodeAt(pos))) {\n        pos++;\n      }\n\n      return +text.substring(start, pos);\n    }\n    /**\n     * Scans the given number of hexadecimal digits in the text,\n     * returning -1 if the given number is unavailable.\n     */\n\n\n    function scanExactNumberOfHexDigits(count) {\n      return scanHexDigits(\n      /*minCount*/\n      count,\n      /*scanAsManyAsPossible*/\n      false);\n    }\n    /**\n     * Scans as many hexadecimal digits as are available in the text,\n     * returning -1 if the given number of digits was unavailable.\n     */\n\n\n    function scanMinimumNumberOfHexDigits(count) {\n      return scanHexDigits(\n      /*minCount*/\n      count,\n      /*scanAsManyAsPossible*/\n      true);\n    }\n\n    function scanHexDigits(minCount, scanAsManyAsPossible) {\n      var digits = 0;\n      var value = 0;\n\n      while (digits < minCount || scanAsManyAsPossible) {\n        var ch = text.charCodeAt(pos);\n\n        if (ch >= 48\n        /* _0 */\n        && ch <= 57\n        /* _9 */\n        ) {\n            value = value * 16 + ch - 48\n            /* _0 */\n            ;\n          } else if (ch >= 65\n        /* A */\n        && ch <= 70\n        /* F */\n        ) {\n            value = value * 16 + ch - 65\n            /* A */\n            + 10;\n          } else if (ch >= 97\n        /* a */\n        && ch <= 102\n        /* f */\n        ) {\n            value = value * 16 + ch - 97\n            /* a */\n            + 10;\n          } else {\n          break;\n        }\n\n        pos++;\n        digits++;\n      }\n\n      if (digits < minCount) {\n        value = -1;\n      }\n\n      return value;\n    }\n\n    function scanString() {\n      var quote = text.charCodeAt(pos);\n      pos++;\n      var result = \"\";\n      var start = pos;\n\n      while (true) {\n        if (pos >= end) {\n          result += text.substring(start, pos);\n          tokenIsUnterminated = true;\n          error(ts.Diagnostics.Unterminated_string_literal);\n          break;\n        }\n\n        var ch = text.charCodeAt(pos);\n\n        if (ch === quote) {\n          result += text.substring(start, pos);\n          pos++;\n          break;\n        }\n\n        if (ch === 92\n        /* backslash */\n        ) {\n            result += text.substring(start, pos);\n            result += scanEscapeSequence();\n            start = pos;\n            continue;\n          }\n\n        if (isLineBreak(ch)) {\n          result += text.substring(start, pos);\n          tokenIsUnterminated = true;\n          error(ts.Diagnostics.Unterminated_string_literal);\n          break;\n        }\n\n        pos++;\n      }\n\n      return result;\n    }\n    /**\n     * Sets the current 'tokenValue' and returns a NoSubstitutionTemplateLiteral or\n     * a literal component of a TemplateExpression.\n     */\n\n\n    function scanTemplateAndSetTokenValue() {\n      var startedWithBacktick = text.charCodeAt(pos) === 96\n      /* backtick */\n      ;\n      pos++;\n      var start = pos;\n      var contents = \"\";\n      var resultingToken;\n\n      while (true) {\n        if (pos >= end) {\n          contents += text.substring(start, pos);\n          tokenIsUnterminated = true;\n          error(ts.Diagnostics.Unterminated_template_literal);\n          resultingToken = startedWithBacktick ? 11\n          /* NoSubstitutionTemplateLiteral */\n          : 14\n          /* TemplateTail */\n          ;\n          break;\n        }\n\n        var currChar = text.charCodeAt(pos); // '`'\n\n        if (currChar === 96\n        /* backtick */\n        ) {\n            contents += text.substring(start, pos);\n            pos++;\n            resultingToken = startedWithBacktick ? 11\n            /* NoSubstitutionTemplateLiteral */\n            : 14\n            /* TemplateTail */\n            ;\n            break;\n          } // '${'\n\n\n        if (currChar === 36\n        /* $ */\n        && pos + 1 < end && text.charCodeAt(pos + 1) === 123\n        /* openBrace */\n        ) {\n            contents += text.substring(start, pos);\n            pos += 2;\n            resultingToken = startedWithBacktick ? 12\n            /* TemplateHead */\n            : 13\n            /* TemplateMiddle */\n            ;\n            break;\n          } // Escape character\n\n\n        if (currChar === 92\n        /* backslash */\n        ) {\n            contents += text.substring(start, pos);\n            contents += scanEscapeSequence();\n            start = pos;\n            continue;\n          } // Speculated ECMAScript 6 Spec 11.8.6.1:\n        // <CR><LF> and <CR> LineTerminatorSequences are normalized to <LF> for Template Values\n\n\n        if (currChar === 13\n        /* carriageReturn */\n        ) {\n            contents += text.substring(start, pos);\n            pos++;\n\n            if (pos < end && text.charCodeAt(pos) === 10\n            /* lineFeed */\n            ) {\n                pos++;\n              }\n\n            contents += \"\\n\";\n            start = pos;\n            continue;\n          }\n\n        pos++;\n      }\n\n      ts.Debug.assert(resultingToken !== undefined);\n      tokenValue = contents;\n      return resultingToken;\n    }\n\n    function scanEscapeSequence() {\n      pos++;\n\n      if (pos >= end) {\n        error(ts.Diagnostics.Unexpected_end_of_text);\n        return \"\";\n      }\n\n      var ch = text.charCodeAt(pos);\n      pos++;\n\n      switch (ch) {\n        case 48\n        /* _0 */\n        :\n          return \"\\0\";\n\n        case 98\n        /* b */\n        :\n          return \"\\b\";\n\n        case 116\n        /* t */\n        :\n          return \"\\t\";\n\n        case 110\n        /* n */\n        :\n          return \"\\n\";\n\n        case 118\n        /* v */\n        :\n          return \"\\v\";\n\n        case 102\n        /* f */\n        :\n          return \"\\f\";\n\n        case 114\n        /* r */\n        :\n          return \"\\r\";\n\n        case 39\n        /* singleQuote */\n        :\n          return \"\\'\";\n\n        case 34\n        /* doubleQuote */\n        :\n          return \"\\\"\";\n\n        case 117\n        /* u */\n        :\n          // '\\u{DDDDDDDD}'\n          if (pos < end && text.charCodeAt(pos) === 123\n          /* openBrace */\n          ) {\n              _hasExtendedUnicodeEscape = true;\n              pos++;\n              return scanExtendedUnicodeEscape();\n            } // '\\uDDDD'\n\n\n          return scanHexadecimalEscape(\n          /*numDigits*/\n          4);\n\n        case 120\n        /* x */\n        :\n          // '\\xDD'\n          return scanHexadecimalEscape(\n          /*numDigits*/\n          2);\n        // when encountering a LineContinuation (i.e. a backslash and a line terminator sequence),\n        // the line terminator is interpreted to be \"the empty code unit sequence\".\n\n        case 13\n        /* carriageReturn */\n        :\n          if (pos < end && text.charCodeAt(pos) === 10\n          /* lineFeed */\n          ) {\n              pos++;\n            }\n\n        // fall through\n\n        case 10\n        /* lineFeed */\n        :\n        case 8232\n        /* lineSeparator */\n        :\n        case 8233\n        /* paragraphSeparator */\n        :\n          return \"\";\n\n        default:\n          return String.fromCharCode(ch);\n      }\n    }\n\n    function scanHexadecimalEscape(numDigits) {\n      var escapedValue = scanExactNumberOfHexDigits(numDigits);\n\n      if (escapedValue >= 0) {\n        return String.fromCharCode(escapedValue);\n      } else {\n        error(ts.Diagnostics.Hexadecimal_digit_expected);\n        return \"\";\n      }\n    }\n\n    function scanExtendedUnicodeEscape() {\n      var escapedValue = scanMinimumNumberOfHexDigits(1);\n      var isInvalidExtendedEscape = false; // Validate the value of the digit\n\n      if (escapedValue < 0) {\n        error(ts.Diagnostics.Hexadecimal_digit_expected);\n        isInvalidExtendedEscape = true;\n      } else if (escapedValue > 0x10FFFF) {\n        error(ts.Diagnostics.An_extended_Unicode_escape_value_must_be_between_0x0_and_0x10FFFF_inclusive);\n        isInvalidExtendedEscape = true;\n      }\n\n      if (pos >= end) {\n        error(ts.Diagnostics.Unexpected_end_of_text);\n        isInvalidExtendedEscape = true;\n      } else if (text.charCodeAt(pos) === 125\n      /* closeBrace */\n      ) {\n          // Only swallow the following character up if it's a '}'.\n          pos++;\n        } else {\n        error(ts.Diagnostics.Unterminated_Unicode_escape_sequence);\n        isInvalidExtendedEscape = true;\n      }\n\n      if (isInvalidExtendedEscape) {\n        return \"\";\n      }\n\n      return utf16EncodeAsString(escapedValue);\n    } // Derived from the 10.1.1 UTF16Encoding of the ES6 Spec.\n\n\n    function utf16EncodeAsString(codePoint) {\n      ts.Debug.assert(0x0 <= codePoint && codePoint <= 0x10FFFF);\n\n      if (codePoint <= 65535) {\n        return String.fromCharCode(codePoint);\n      }\n\n      var codeUnit1 = Math.floor((codePoint - 65536) / 1024) + 0xD800;\n      var codeUnit2 = (codePoint - 65536) % 1024 + 0xDC00;\n      return String.fromCharCode(codeUnit1, codeUnit2);\n    } // Current character is known to be a backslash. Check for Unicode escape of the form '\\uXXXX'\n    // and return code point value if valid Unicode escape is found. Otherwise return -1.\n\n\n    function peekUnicodeEscape() {\n      if (pos + 5 < end && text.charCodeAt(pos + 1) === 117\n      /* u */\n      ) {\n          var start_1 = pos;\n          pos += 2;\n          var value = scanExactNumberOfHexDigits(4);\n          pos = start_1;\n          return value;\n        }\n\n      return -1;\n    }\n\n    function scanIdentifierParts() {\n      var result = \"\";\n      var start = pos;\n\n      while (pos < end) {\n        var ch = text.charCodeAt(pos);\n\n        if (isIdentifierPart(ch, languageVersion)) {\n          pos++;\n        } else if (ch === 92\n        /* backslash */\n        ) {\n            ch = peekUnicodeEscape();\n\n            if (!(ch >= 0 && isIdentifierPart(ch, languageVersion))) {\n              break;\n            }\n\n            result += text.substring(start, pos);\n            result += String.fromCharCode(ch); // Valid Unicode escape is always six characters\n\n            pos += 6;\n            start = pos;\n          } else {\n          break;\n        }\n      }\n\n      result += text.substring(start, pos);\n      return result;\n    }\n\n    function getIdentifierToken() {\n      // Reserved words are between 2 and 11 characters long and start with a lowercase letter\n      var len = tokenValue.length;\n\n      if (len >= 2 && len <= 11) {\n        var ch = tokenValue.charCodeAt(0);\n\n        if (ch >= 97\n        /* a */\n        && ch <= 122\n        /* z */\n        && hasOwnProperty.call(textToToken, tokenValue)) {\n          return token = textToToken[tokenValue];\n        }\n      }\n\n      return token = 69\n      /* Identifier */\n      ;\n    }\n\n    function scanBinaryOrOctalDigits(base) {\n      ts.Debug.assert(base !== 2 || base !== 8, \"Expected either base 2 or base 8\");\n      var value = 0; // For counting number of digits; Valid binaryIntegerLiteral must have at least one binary digit following B or b.\n      // Similarly valid octalIntegerLiteral must have at least one octal digit following o or O.\n\n      var numberOfDigits = 0;\n\n      while (true) {\n        var ch = text.charCodeAt(pos);\n        var valueOfCh = ch - 48\n        /* _0 */\n        ;\n\n        if (!isDigit(ch) || valueOfCh >= base) {\n          break;\n        }\n\n        value = value * base + valueOfCh;\n        pos++;\n        numberOfDigits++;\n      } // Invalid binaryIntegerLiteral or octalIntegerLiteral\n\n\n      if (numberOfDigits === 0) {\n        return -1;\n      }\n\n      return value;\n    }\n\n    function scan() {\n      startPos = pos;\n      _hasExtendedUnicodeEscape = false;\n      precedingLineBreak = false;\n      tokenIsUnterminated = false;\n\n      while (true) {\n        tokenPos = pos;\n\n        if (pos >= end) {\n          return token = 1\n          /* EndOfFileToken */\n          ;\n        }\n\n        var ch = text.charCodeAt(pos); // Special handling for shebang\n\n        if (ch === 35\n        /* hash */\n        && pos === 0 && isShebangTrivia(text, pos)) {\n          pos = scanShebangTrivia(text, pos);\n\n          if (skipTrivia) {\n            continue;\n          } else {\n            return token = 6\n            /* ShebangTrivia */\n            ;\n          }\n        }\n\n        switch (ch) {\n          case 10\n          /* lineFeed */\n          :\n          case 13\n          /* carriageReturn */\n          :\n            precedingLineBreak = true;\n\n            if (skipTrivia) {\n              pos++;\n              continue;\n            } else {\n              if (ch === 13\n              /* carriageReturn */\n              && pos + 1 < end && text.charCodeAt(pos + 1) === 10\n              /* lineFeed */\n              ) {\n                  // consume both CR and LF\n                  pos += 2;\n                } else {\n                pos++;\n              }\n\n              return token = 4\n              /* NewLineTrivia */\n              ;\n            }\n\n          case 9\n          /* tab */\n          :\n          case 11\n          /* verticalTab */\n          :\n          case 12\n          /* formFeed */\n          :\n          case 32\n          /* space */\n          :\n            if (skipTrivia) {\n              pos++;\n              continue;\n            } else {\n              while (pos < end && isWhiteSpace(text.charCodeAt(pos))) {\n                pos++;\n              }\n\n              return token = 5\n              /* WhitespaceTrivia */\n              ;\n            }\n\n          case 33\n          /* exclamation */\n          :\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                if (text.charCodeAt(pos + 2) === 61\n                /* equals */\n                ) {\n                    return pos += 3, token = 33\n                    /* ExclamationEqualsEqualsToken */\n                    ;\n                  }\n\n                return pos += 2, token = 31\n                /* ExclamationEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 49\n            /* ExclamationToken */\n            ;\n\n          case 34\n          /* doubleQuote */\n          :\n          case 39\n          /* singleQuote */\n          :\n            tokenValue = scanString();\n            return token = 9\n            /* StringLiteral */\n            ;\n\n          case 96\n          /* backtick */\n          :\n            return token = scanTemplateAndSetTokenValue();\n\n          case 37\n          /* percent */\n          :\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 62\n                /* PercentEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 40\n            /* PercentToken */\n            ;\n\n          case 38\n          /* ampersand */\n          :\n            if (text.charCodeAt(pos + 1) === 38\n            /* ampersand */\n            ) {\n                return pos += 2, token = 51\n                /* AmpersandAmpersandToken */\n                ;\n              }\n\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 66\n                /* AmpersandEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 46\n            /* AmpersandToken */\n            ;\n\n          case 40\n          /* openParen */\n          :\n            pos++;\n            return token = 17\n            /* OpenParenToken */\n            ;\n\n          case 41\n          /* closeParen */\n          :\n            pos++;\n            return token = 18\n            /* CloseParenToken */\n            ;\n\n          case 42\n          /* asterisk */\n          :\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 59\n                /* AsteriskEqualsToken */\n                ;\n              }\n\n            if (text.charCodeAt(pos + 1) === 42\n            /* asterisk */\n            ) {\n                if (text.charCodeAt(pos + 2) === 61\n                /* equals */\n                ) {\n                    return pos += 3, token = 60\n                    /* AsteriskAsteriskEqualsToken */\n                    ;\n                  }\n\n                return pos += 2, token = 38\n                /* AsteriskAsteriskToken */\n                ;\n              }\n\n            pos++;\n            return token = 37\n            /* AsteriskToken */\n            ;\n\n          case 43\n          /* plus */\n          :\n            if (text.charCodeAt(pos + 1) === 43\n            /* plus */\n            ) {\n                return pos += 2, token = 41\n                /* PlusPlusToken */\n                ;\n              }\n\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 57\n                /* PlusEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 35\n            /* PlusToken */\n            ;\n\n          case 44\n          /* comma */\n          :\n            pos++;\n            return token = 24\n            /* CommaToken */\n            ;\n\n          case 45\n          /* minus */\n          :\n            if (text.charCodeAt(pos + 1) === 45\n            /* minus */\n            ) {\n                return pos += 2, token = 42\n                /* MinusMinusToken */\n                ;\n              }\n\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 58\n                /* MinusEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 36\n            /* MinusToken */\n            ;\n\n          case 46\n          /* dot */\n          :\n            if (isDigit(text.charCodeAt(pos + 1))) {\n              tokenValue = scanNumber();\n              return token = 8\n              /* NumericLiteral */\n              ;\n            }\n\n            if (text.charCodeAt(pos + 1) === 46\n            /* dot */\n            && text.charCodeAt(pos + 2) === 46\n            /* dot */\n            ) {\n                return pos += 3, token = 22\n                /* DotDotDotToken */\n                ;\n              }\n\n            pos++;\n            return token = 21\n            /* DotToken */\n            ;\n\n          case 47\n          /* slash */\n          :\n            // Single-line comment\n            if (text.charCodeAt(pos + 1) === 47\n            /* slash */\n            ) {\n                pos += 2;\n\n                while (pos < end) {\n                  if (isLineBreak(text.charCodeAt(pos))) {\n                    break;\n                  }\n\n                  pos++;\n                }\n\n                if (skipTrivia) {\n                  continue;\n                } else {\n                  return token = 2\n                  /* SingleLineCommentTrivia */\n                  ;\n                }\n              } // Multi-line comment\n\n\n            if (text.charCodeAt(pos + 1) === 42\n            /* asterisk */\n            ) {\n                pos += 2;\n                var commentClosed = false;\n\n                while (pos < end) {\n                  var ch_2 = text.charCodeAt(pos);\n\n                  if (ch_2 === 42\n                  /* asterisk */\n                  && text.charCodeAt(pos + 1) === 47\n                  /* slash */\n                  ) {\n                      pos += 2;\n                      commentClosed = true;\n                      break;\n                    }\n\n                  if (isLineBreak(ch_2)) {\n                    precedingLineBreak = true;\n                  }\n\n                  pos++;\n                }\n\n                if (!commentClosed) {\n                  error(ts.Diagnostics.Asterisk_Slash_expected);\n                }\n\n                if (skipTrivia) {\n                  continue;\n                } else {\n                  tokenIsUnterminated = !commentClosed;\n                  return token = 3\n                  /* MultiLineCommentTrivia */\n                  ;\n                }\n              }\n\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 61\n                /* SlashEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 39\n            /* SlashToken */\n            ;\n\n          case 48\n          /* _0 */\n          :\n            if (pos + 2 < end && (text.charCodeAt(pos + 1) === 88\n            /* X */\n            || text.charCodeAt(pos + 1) === 120\n            /* x */\n            )) {\n              pos += 2;\n              var value = scanMinimumNumberOfHexDigits(1);\n\n              if (value < 0) {\n                error(ts.Diagnostics.Hexadecimal_digit_expected);\n                value = 0;\n              }\n\n              tokenValue = \"\" + value;\n              return token = 8\n              /* NumericLiteral */\n              ;\n            } else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 66\n            /* B */\n            || text.charCodeAt(pos + 1) === 98\n            /* b */\n            )) {\n              pos += 2;\n              var value = scanBinaryOrOctalDigits(\n              /* base */\n              2);\n\n              if (value < 0) {\n                error(ts.Diagnostics.Binary_digit_expected);\n                value = 0;\n              }\n\n              tokenValue = \"\" + value;\n              return token = 8\n              /* NumericLiteral */\n              ;\n            } else if (pos + 2 < end && (text.charCodeAt(pos + 1) === 79\n            /* O */\n            || text.charCodeAt(pos + 1) === 111\n            /* o */\n            )) {\n              pos += 2;\n              var value = scanBinaryOrOctalDigits(\n              /* base */\n              8);\n\n              if (value < 0) {\n                error(ts.Diagnostics.Octal_digit_expected);\n                value = 0;\n              }\n\n              tokenValue = \"\" + value;\n              return token = 8\n              /* NumericLiteral */\n              ;\n            } // Try to parse as an octal\n\n\n            if (pos + 1 < end && isOctalDigit(text.charCodeAt(pos + 1))) {\n              tokenValue = \"\" + scanOctalDigits();\n              return token = 8\n              /* NumericLiteral */\n              ;\n            }\n\n          // This fall-through is a deviation from the EcmaScript grammar. The grammar says that a leading zero\n          // can only be followed by an octal digit, a dot, or the end of the number literal. However, we are being\n          // permissive and allowing decimal digits of the form 08* and 09* (which many browsers also do).\n\n          case 49\n          /* _1 */\n          :\n          case 50\n          /* _2 */\n          :\n          case 51\n          /* _3 */\n          :\n          case 52\n          /* _4 */\n          :\n          case 53\n          /* _5 */\n          :\n          case 54\n          /* _6 */\n          :\n          case 55\n          /* _7 */\n          :\n          case 56\n          /* _8 */\n          :\n          case 57\n          /* _9 */\n          :\n            tokenValue = scanNumber();\n            return token = 8\n            /* NumericLiteral */\n            ;\n\n          case 58\n          /* colon */\n          :\n            pos++;\n            return token = 54\n            /* ColonToken */\n            ;\n\n          case 59\n          /* semicolon */\n          :\n            pos++;\n            return token = 23\n            /* SemicolonToken */\n            ;\n\n          case 60\n          /* lessThan */\n          :\n            if (isConflictMarkerTrivia(text, pos)) {\n              pos = scanConflictMarkerTrivia(text, pos, error);\n\n              if (skipTrivia) {\n                continue;\n              } else {\n                return token = 7\n                /* ConflictMarkerTrivia */\n                ;\n              }\n            }\n\n            if (text.charCodeAt(pos + 1) === 60\n            /* lessThan */\n            ) {\n                if (text.charCodeAt(pos + 2) === 61\n                /* equals */\n                ) {\n                    return pos += 3, token = 63\n                    /* LessThanLessThanEqualsToken */\n                    ;\n                  }\n\n                return pos += 2, token = 43\n                /* LessThanLessThanToken */\n                ;\n              }\n\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 28\n                /* LessThanEqualsToken */\n                ;\n              }\n\n            if (languageVariant === 1\n            /* JSX */\n            && text.charCodeAt(pos + 1) === 47\n            /* slash */\n            && text.charCodeAt(pos + 2) !== 42\n            /* asterisk */\n            ) {\n                return pos += 2, token = 26\n                /* LessThanSlashToken */\n                ;\n              }\n\n            pos++;\n            return token = 25\n            /* LessThanToken */\n            ;\n\n          case 61\n          /* equals */\n          :\n            if (isConflictMarkerTrivia(text, pos)) {\n              pos = scanConflictMarkerTrivia(text, pos, error);\n\n              if (skipTrivia) {\n                continue;\n              } else {\n                return token = 7\n                /* ConflictMarkerTrivia */\n                ;\n              }\n            }\n\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                if (text.charCodeAt(pos + 2) === 61\n                /* equals */\n                ) {\n                    return pos += 3, token = 32\n                    /* EqualsEqualsEqualsToken */\n                    ;\n                  }\n\n                return pos += 2, token = 30\n                /* EqualsEqualsToken */\n                ;\n              }\n\n            if (text.charCodeAt(pos + 1) === 62\n            /* greaterThan */\n            ) {\n                return pos += 2, token = 34\n                /* EqualsGreaterThanToken */\n                ;\n              }\n\n            pos++;\n            return token = 56\n            /* EqualsToken */\n            ;\n\n          case 62\n          /* greaterThan */\n          :\n            if (isConflictMarkerTrivia(text, pos)) {\n              pos = scanConflictMarkerTrivia(text, pos, error);\n\n              if (skipTrivia) {\n                continue;\n              } else {\n                return token = 7\n                /* ConflictMarkerTrivia */\n                ;\n              }\n            }\n\n            pos++;\n            return token = 27\n            /* GreaterThanToken */\n            ;\n\n          case 63\n          /* question */\n          :\n            pos++;\n            return token = 53\n            /* QuestionToken */\n            ;\n\n          case 91\n          /* openBracket */\n          :\n            pos++;\n            return token = 19\n            /* OpenBracketToken */\n            ;\n\n          case 93\n          /* closeBracket */\n          :\n            pos++;\n            return token = 20\n            /* CloseBracketToken */\n            ;\n\n          case 94\n          /* caret */\n          :\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 68\n                /* CaretEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 48\n            /* CaretToken */\n            ;\n\n          case 123\n          /* openBrace */\n          :\n            pos++;\n            return token = 15\n            /* OpenBraceToken */\n            ;\n\n          case 124\n          /* bar */\n          :\n            if (text.charCodeAt(pos + 1) === 124\n            /* bar */\n            ) {\n                return pos += 2, token = 52\n                /* BarBarToken */\n                ;\n              }\n\n            if (text.charCodeAt(pos + 1) === 61\n            /* equals */\n            ) {\n                return pos += 2, token = 67\n                /* BarEqualsToken */\n                ;\n              }\n\n            pos++;\n            return token = 47\n            /* BarToken */\n            ;\n\n          case 125\n          /* closeBrace */\n          :\n            pos++;\n            return token = 16\n            /* CloseBraceToken */\n            ;\n\n          case 126\n          /* tilde */\n          :\n            pos++;\n            return token = 50\n            /* TildeToken */\n            ;\n\n          case 64\n          /* at */\n          :\n            pos++;\n            return token = 55\n            /* AtToken */\n            ;\n\n          case 92\n          /* backslash */\n          :\n            var cookedChar = peekUnicodeEscape();\n\n            if (cookedChar >= 0 && isIdentifierStart(cookedChar, languageVersion)) {\n              pos += 6;\n              tokenValue = String.fromCharCode(cookedChar) + scanIdentifierParts();\n              return token = getIdentifierToken();\n            }\n\n            error(ts.Diagnostics.Invalid_character);\n            pos++;\n            return token = 0\n            /* Unknown */\n            ;\n\n          default:\n            if (isIdentifierStart(ch, languageVersion)) {\n              pos++;\n\n              while (pos < end && isIdentifierPart(ch = text.charCodeAt(pos), languageVersion)) {\n                pos++;\n              }\n\n              tokenValue = text.substring(tokenPos, pos);\n\n              if (ch === 92\n              /* backslash */\n              ) {\n                  tokenValue += scanIdentifierParts();\n                }\n\n              return token = getIdentifierToken();\n            } else if (isWhiteSpace(ch)) {\n              pos++;\n              continue;\n            } else if (isLineBreak(ch)) {\n              precedingLineBreak = true;\n              pos++;\n              continue;\n            }\n\n            error(ts.Diagnostics.Invalid_character);\n            pos++;\n            return token = 0\n            /* Unknown */\n            ;\n        }\n      }\n    }\n\n    function reScanGreaterToken() {\n      if (token === 27\n      /* GreaterThanToken */\n      ) {\n          if (text.charCodeAt(pos) === 62\n          /* greaterThan */\n          ) {\n              if (text.charCodeAt(pos + 1) === 62\n              /* greaterThan */\n              ) {\n                  if (text.charCodeAt(pos + 2) === 61\n                  /* equals */\n                  ) {\n                      return pos += 3, token = 65\n                      /* GreaterThanGreaterThanGreaterThanEqualsToken */\n                      ;\n                    }\n\n                  return pos += 2, token = 45\n                  /* GreaterThanGreaterThanGreaterThanToken */\n                  ;\n                }\n\n              if (text.charCodeAt(pos + 1) === 61\n              /* equals */\n              ) {\n                  return pos += 2, token = 64\n                  /* GreaterThanGreaterThanEqualsToken */\n                  ;\n                }\n\n              pos++;\n              return token = 44\n              /* GreaterThanGreaterThanToken */\n              ;\n            }\n\n          if (text.charCodeAt(pos) === 61\n          /* equals */\n          ) {\n              pos++;\n              return token = 29\n              /* GreaterThanEqualsToken */\n              ;\n            }\n        }\n\n      return token;\n    }\n\n    function reScanSlashToken() {\n      if (token === 39\n      /* SlashToken */\n      || token === 61\n      /* SlashEqualsToken */\n      ) {\n          var p = tokenPos + 1;\n          var inEscape = false;\n          var inCharacterClass = false;\n\n          while (true) {\n            // If we reach the end of a file, or hit a newline, then this is an unterminated\n            // regex.  Report error and return what we have so far.\n            if (p >= end) {\n              tokenIsUnterminated = true;\n              error(ts.Diagnostics.Unterminated_regular_expression_literal);\n              break;\n            }\n\n            var ch = text.charCodeAt(p);\n\n            if (isLineBreak(ch)) {\n              tokenIsUnterminated = true;\n              error(ts.Diagnostics.Unterminated_regular_expression_literal);\n              break;\n            }\n\n            if (inEscape) {\n              // Parsing an escape character;\n              // reset the flag and just advance to the next char.\n              inEscape = false;\n            } else if (ch === 47\n            /* slash */\n            && !inCharacterClass) {\n              // A slash within a character class is permissible,\n              // but in general it signals the end of the regexp literal.\n              p++;\n              break;\n            } else if (ch === 91\n            /* openBracket */\n            ) {\n                inCharacterClass = true;\n              } else if (ch === 92\n            /* backslash */\n            ) {\n                inEscape = true;\n              } else if (ch === 93\n            /* closeBracket */\n            ) {\n                inCharacterClass = false;\n              }\n\n            p++;\n          }\n\n          while (p < end && isIdentifierPart(text.charCodeAt(p), languageVersion)) {\n            p++;\n          }\n\n          pos = p;\n          tokenValue = text.substring(tokenPos, pos);\n          token = 10\n          /* RegularExpressionLiteral */\n          ;\n        }\n\n      return token;\n    }\n    /**\n     * Unconditionally back up and scan a template expression portion.\n     */\n\n\n    function reScanTemplateToken() {\n      ts.Debug.assert(token === 16\n      /* CloseBraceToken */\n      , \"'reScanTemplateToken' should only be called on a '}'\");\n      pos = tokenPos;\n      return token = scanTemplateAndSetTokenValue();\n    }\n\n    function reScanJsxToken() {\n      pos = tokenPos = startPos;\n      return token = scanJsxToken();\n    }\n\n    function scanJsxToken() {\n      startPos = tokenPos = pos;\n\n      if (pos >= end) {\n        return token = 1\n        /* EndOfFileToken */\n        ;\n      }\n\n      var char = text.charCodeAt(pos);\n\n      if (char === 60\n      /* lessThan */\n      ) {\n          if (text.charCodeAt(pos + 1) === 47\n          /* slash */\n          ) {\n              pos += 2;\n              return token = 26\n              /* LessThanSlashToken */\n              ;\n            }\n\n          pos++;\n          return token = 25\n          /* LessThanToken */\n          ;\n        }\n\n      if (char === 123\n      /* openBrace */\n      ) {\n          pos++;\n          return token = 15\n          /* OpenBraceToken */\n          ;\n        }\n\n      while (pos < end) {\n        pos++;\n        char = text.charCodeAt(pos);\n\n        if (char === 123\n        /* openBrace */\n        || char === 60\n        /* lessThan */\n        ) {\n          break;\n        }\n      }\n\n      return token = 239\n      /* JsxText */\n      ;\n    } // Scans a JSX identifier; these differ from normal identifiers in that\n    // they allow dashes\n\n\n    function scanJsxIdentifier() {\n      if (tokenIsIdentifierOrKeyword(token)) {\n        var firstCharPosition = pos;\n\n        while (pos < end) {\n          var ch = text.charCodeAt(pos);\n\n          if (ch === 45\n          /* minus */\n          || (firstCharPosition === pos ? isIdentifierStart(ch, languageVersion) : isIdentifierPart(ch, languageVersion))) {\n            pos++;\n          } else {\n            break;\n          }\n        }\n\n        tokenValue += text.substr(firstCharPosition, pos - firstCharPosition);\n      }\n\n      return token;\n    }\n\n    function scanJSDocToken() {\n      if (pos >= end) {\n        return token = 1\n        /* EndOfFileToken */\n        ;\n      }\n\n      startPos = pos; // Eat leading whitespace\n\n      var ch = text.charCodeAt(pos);\n\n      while (pos < end) {\n        ch = text.charCodeAt(pos);\n\n        if (isWhiteSpace(ch)) {\n          pos++;\n        } else {\n          break;\n        }\n      }\n\n      tokenPos = pos;\n\n      switch (ch) {\n        case 64\n        /* at */\n        :\n          return pos += 1, token = 55\n          /* AtToken */\n          ;\n\n        case 10\n        /* lineFeed */\n        :\n        case 13\n        /* carriageReturn */\n        :\n          return pos += 1, token = 4\n          /* NewLineTrivia */\n          ;\n\n        case 42\n        /* asterisk */\n        :\n          return pos += 1, token = 37\n          /* AsteriskToken */\n          ;\n\n        case 123\n        /* openBrace */\n        :\n          return pos += 1, token = 15\n          /* OpenBraceToken */\n          ;\n\n        case 125\n        /* closeBrace */\n        :\n          return pos += 1, token = 16\n          /* CloseBraceToken */\n          ;\n\n        case 91\n        /* openBracket */\n        :\n          return pos += 1, token = 19\n          /* OpenBracketToken */\n          ;\n\n        case 93\n        /* closeBracket */\n        :\n          return pos += 1, token = 20\n          /* CloseBracketToken */\n          ;\n\n        case 61\n        /* equals */\n        :\n          return pos += 1, token = 56\n          /* EqualsToken */\n          ;\n\n        case 44\n        /* comma */\n        :\n          return pos += 1, token = 24\n          /* CommaToken */\n          ;\n      }\n\n      if (isIdentifierStart(ch, 2\n      /* Latest */\n      )) {\n        pos++;\n\n        while (isIdentifierPart(text.charCodeAt(pos), 2\n        /* Latest */\n        ) && pos < end) {\n          pos++;\n        }\n\n        return token = 69\n        /* Identifier */\n        ;\n      } else {\n        return pos += 1, token = 0\n        /* Unknown */\n        ;\n      }\n    }\n\n    function speculationHelper(callback, isLookahead) {\n      var savePos = pos;\n      var saveStartPos = startPos;\n      var saveTokenPos = tokenPos;\n      var saveToken = token;\n      var saveTokenValue = tokenValue;\n      var savePrecedingLineBreak = precedingLineBreak;\n      var result = callback(); // If our callback returned something 'falsy' or we're just looking ahead,\n      // then unconditionally restore us to where we were.\n\n      if (!result || isLookahead) {\n        pos = savePos;\n        startPos = saveStartPos;\n        tokenPos = saveTokenPos;\n        token = saveToken;\n        tokenValue = saveTokenValue;\n        precedingLineBreak = savePrecedingLineBreak;\n      }\n\n      return result;\n    }\n\n    function scanRange(start, length, callback) {\n      var saveEnd = end;\n      var savePos = pos;\n      var saveStartPos = startPos;\n      var saveTokenPos = tokenPos;\n      var saveToken = token;\n      var savePrecedingLineBreak = precedingLineBreak;\n      var saveTokenValue = tokenValue;\n      var saveHasExtendedUnicodeEscape = _hasExtendedUnicodeEscape;\n      var saveTokenIsUnterminated = tokenIsUnterminated;\n      setText(text, start, length);\n      var result = callback();\n      end = saveEnd;\n      pos = savePos;\n      startPos = saveStartPos;\n      tokenPos = saveTokenPos;\n      token = saveToken;\n      precedingLineBreak = savePrecedingLineBreak;\n      tokenValue = saveTokenValue;\n      _hasExtendedUnicodeEscape = saveHasExtendedUnicodeEscape;\n      tokenIsUnterminated = saveTokenIsUnterminated;\n      return result;\n    }\n\n    function lookAhead(callback) {\n      return speculationHelper(callback,\n      /*isLookahead*/\n      true);\n    }\n\n    function tryScan(callback) {\n      return speculationHelper(callback,\n      /*isLookahead*/\n      false);\n    }\n\n    function setText(newText, start, length) {\n      text = newText || \"\";\n      end = length === undefined ? text.length : start + length;\n      setTextPos(start || 0);\n    }\n\n    function setOnError(errorCallback) {\n      onError = errorCallback;\n    }\n\n    function setScriptTarget(scriptTarget) {\n      languageVersion = scriptTarget;\n    }\n\n    function setLanguageVariant(variant) {\n      languageVariant = variant;\n    }\n\n    function setTextPos(textPos) {\n      ts.Debug.assert(textPos >= 0);\n      pos = textPos;\n      startPos = textPos;\n      tokenPos = textPos;\n      token = 0\n      /* Unknown */\n      ;\n      precedingLineBreak = false;\n      tokenValue = undefined;\n      _hasExtendedUnicodeEscape = false;\n      tokenIsUnterminated = false;\n    }\n  }\n\n  ts.createScanner = createScanner;\n})(ts || (ts = {})); /// <reference path=\"sys.ts\" />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  function getDeclarationOfKind(symbol, kind) {\n    var declarations = symbol.declarations;\n\n    if (declarations) {\n      for (var _i = 0, declarations_1 = declarations; _i < declarations_1.length; _i++) {\n        var declaration = declarations_1[_i];\n\n        if (declaration.kind === kind) {\n          return declaration;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ts.getDeclarationOfKind = getDeclarationOfKind; // Pool writers to avoid needing to allocate them for every symbol we write.\n\n  var stringWriters = [];\n\n  function getSingleLineStringWriter() {\n    if (stringWriters.length === 0) {\n      var str_1 = \"\";\n\n      var writeText = function writeText(text) {\n        return str_1 += text;\n      };\n\n      return {\n        string: function string() {\n          return str_1;\n        },\n        writeKeyword: writeText,\n        writeOperator: writeText,\n        writePunctuation: writeText,\n        writeSpace: writeText,\n        writeStringLiteral: writeText,\n        writeParameter: writeText,\n        writeSymbol: writeText,\n        // Completely ignore indentation for string writers.  And map newlines to\n        // a single space.\n        writeLine: function writeLine() {\n          return str_1 += \" \";\n        },\n        increaseIndent: function increaseIndent() {},\n        decreaseIndent: function decreaseIndent() {},\n        clear: function clear() {\n          return str_1 = \"\";\n        },\n        trackSymbol: function trackSymbol() {},\n        reportInaccessibleThisError: function reportInaccessibleThisError() {}\n      };\n    }\n\n    return stringWriters.pop();\n  }\n\n  ts.getSingleLineStringWriter = getSingleLineStringWriter;\n\n  function releaseStringWriter(writer) {\n    writer.clear();\n    stringWriters.push(writer);\n  }\n\n  ts.releaseStringWriter = releaseStringWriter;\n\n  function getFullWidth(node) {\n    return node.end - node.pos;\n  }\n\n  ts.getFullWidth = getFullWidth;\n\n  function arrayIsEqualTo(array1, array2, equaler) {\n    if (!array1 || !array2) {\n      return array1 === array2;\n    }\n\n    if (array1.length !== array2.length) {\n      return false;\n    }\n\n    for (var i = 0; i < array1.length; i++) {\n      var equals = equaler ? equaler(array1[i], array2[i]) : array1[i] === array2[i];\n\n      if (!equals) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  ts.arrayIsEqualTo = arrayIsEqualTo;\n\n  function hasResolvedModule(sourceFile, moduleNameText) {\n    return sourceFile.resolvedModules && ts.hasProperty(sourceFile.resolvedModules, moduleNameText);\n  }\n\n  ts.hasResolvedModule = hasResolvedModule;\n\n  function getResolvedModule(sourceFile, moduleNameText) {\n    return hasResolvedModule(sourceFile, moduleNameText) ? sourceFile.resolvedModules[moduleNameText] : undefined;\n  }\n\n  ts.getResolvedModule = getResolvedModule;\n\n  function setResolvedModule(sourceFile, moduleNameText, resolvedModule) {\n    if (!sourceFile.resolvedModules) {\n      sourceFile.resolvedModules = {};\n    }\n\n    sourceFile.resolvedModules[moduleNameText] = resolvedModule;\n  }\n\n  ts.setResolvedModule = setResolvedModule; // Returns true if this node contains a parse error anywhere underneath it.\n\n  function containsParseError(node) {\n    aggregateChildData(node);\n    return (node.parserContextFlags & 64\n    /* ThisNodeOrAnySubNodesHasError */\n    ) !== 0;\n  }\n\n  ts.containsParseError = containsParseError;\n\n  function aggregateChildData(node) {\n    if (!(node.parserContextFlags & 128\n    /* HasAggregatedChildData */\n    )) {\n      // A node is considered to contain a parse error if:\n      //  a) the parser explicitly marked that it had an error\n      //  b) any of it's children reported that it had an error.\n      var thisNodeOrAnySubNodesHasError = (node.parserContextFlags & 16\n      /* ThisNodeHasError */\n      ) !== 0 || ts.forEachChild(node, containsParseError); // If so, mark ourselves accordingly.\n\n      if (thisNodeOrAnySubNodesHasError) {\n        node.parserContextFlags |= 64\n        /* ThisNodeOrAnySubNodesHasError */\n        ;\n      } // Also mark that we've propogated the child information to this node.  This way we can\n      // always consult the bit directly on this node without needing to check its children\n      // again.\n\n\n      node.parserContextFlags |= 128\n      /* HasAggregatedChildData */\n      ;\n    }\n  }\n\n  function getSourceFileOfNode(node) {\n    while (node && node.kind !== 251\n    /* SourceFile */\n    ) {\n      node = node.parent;\n    }\n\n    return node;\n  }\n\n  ts.getSourceFileOfNode = getSourceFileOfNode;\n\n  function isStatementWithLocals(node) {\n    switch (node.kind) {\n      case 195\n      /* Block */\n      :\n      case 223\n      /* CaseBlock */\n      :\n      case 202\n      /* ForStatement */\n      :\n      case 203\n      /* ForInStatement */\n      :\n      case 204\n      /* ForOfStatement */\n      :\n        return true;\n    }\n\n    return false;\n  }\n\n  ts.isStatementWithLocals = isStatementWithLocals;\n\n  function getStartPositionOfLine(line, sourceFile) {\n    ts.Debug.assert(line >= 0);\n    return ts.getLineStarts(sourceFile)[line];\n  }\n\n  ts.getStartPositionOfLine = getStartPositionOfLine; // This is a useful function for debugging purposes.\n\n  function nodePosToString(node) {\n    var file = getSourceFileOfNode(node);\n    var loc = ts.getLineAndCharacterOfPosition(file, node.pos);\n    return file.fileName + \"(\" + (loc.line + 1) + \",\" + (loc.character + 1) + \")\";\n  }\n\n  ts.nodePosToString = nodePosToString;\n\n  function getStartPosOfNode(node) {\n    return node.pos;\n  }\n\n  ts.getStartPosOfNode = getStartPosOfNode; // Returns true if this node is missing from the actual source code. A 'missing' node is different\n  // from 'undefined/defined'. When a node is undefined (which can happen for optional nodes\n  // in the tree), it is definitely missing. However, a node may be defined, but still be\n  // missing.  This happens whenever the parser knows it needs to parse something, but can't\n  // get anything in the source code that it expects at that location. For example:\n  //\n  //          let a: ;\n  //\n  // Here, the Type in the Type-Annotation is not-optional (as there is a colon in the source\n  // code). So the parser will attempt to parse out a type, and will create an actual node.\n  // However, this node will be 'missing' in the sense that no actual source-code/tokens are\n  // contained within it.\n\n  function nodeIsMissing(node) {\n    if (!node) {\n      return true;\n    }\n\n    return node.pos === node.end && node.pos >= 0 && node.kind !== 1\n    /* EndOfFileToken */\n    ;\n  }\n\n  ts.nodeIsMissing = nodeIsMissing;\n\n  function nodeIsPresent(node) {\n    return !nodeIsMissing(node);\n  }\n\n  ts.nodeIsPresent = nodeIsPresent;\n\n  function getTokenPosOfNode(node, sourceFile) {\n    // With nodes that have no width (i.e. 'Missing' nodes), we actually *don't*\n    // want to skip trivia because this will launch us forward to the next token.\n    if (nodeIsMissing(node)) {\n      return node.pos;\n    }\n\n    return ts.skipTrivia((sourceFile || getSourceFileOfNode(node)).text, node.pos);\n  }\n\n  ts.getTokenPosOfNode = getTokenPosOfNode;\n\n  function getNonDecoratorTokenPosOfNode(node, sourceFile) {\n    if (nodeIsMissing(node) || !node.decorators) {\n      return getTokenPosOfNode(node, sourceFile);\n    }\n\n    return ts.skipTrivia((sourceFile || getSourceFileOfNode(node)).text, node.decorators.end);\n  }\n\n  ts.getNonDecoratorTokenPosOfNode = getNonDecoratorTokenPosOfNode;\n\n  function getSourceTextOfNodeFromSourceFile(sourceFile, node, includeTrivia) {\n    if (includeTrivia === void 0) {\n      includeTrivia = false;\n    }\n\n    if (nodeIsMissing(node)) {\n      return \"\";\n    }\n\n    var text = sourceFile.text;\n    return text.substring(includeTrivia ? node.pos : ts.skipTrivia(text, node.pos), node.end);\n  }\n\n  ts.getSourceTextOfNodeFromSourceFile = getSourceTextOfNodeFromSourceFile;\n\n  function getTextOfNodeFromSourceText(sourceText, node) {\n    if (nodeIsMissing(node)) {\n      return \"\";\n    }\n\n    return sourceText.substring(ts.skipTrivia(sourceText, node.pos), node.end);\n  }\n\n  ts.getTextOfNodeFromSourceText = getTextOfNodeFromSourceText;\n\n  function getTextOfNode(node, includeTrivia) {\n    if (includeTrivia === void 0) {\n      includeTrivia = false;\n    }\n\n    return getSourceTextOfNodeFromSourceFile(getSourceFileOfNode(node), node, includeTrivia);\n  }\n\n  ts.getTextOfNode = getTextOfNode; // Add an extra underscore to identifiers that start with two underscores to avoid issues with magic names like '__proto__'\n\n  function escapeIdentifier(identifier) {\n    return identifier.length >= 2 && identifier.charCodeAt(0) === 95\n    /* _ */\n    && identifier.charCodeAt(1) === 95\n    /* _ */\n    ? \"_\" + identifier : identifier;\n  }\n\n  ts.escapeIdentifier = escapeIdentifier; // Remove extra underscore from escaped identifier\n\n  function unescapeIdentifier(identifier) {\n    return identifier.length >= 3 && identifier.charCodeAt(0) === 95\n    /* _ */\n    && identifier.charCodeAt(1) === 95\n    /* _ */\n    && identifier.charCodeAt(2) === 95\n    /* _ */\n    ? identifier.substr(1) : identifier;\n  }\n\n  ts.unescapeIdentifier = unescapeIdentifier; // Make an identifier from an external module name by extracting the string after the last \"/\" and replacing\n  // all non-alphanumeric characters with underscores\n\n  function makeIdentifierFromModuleName(moduleName) {\n    return ts.getBaseFileName(moduleName).replace(/^(\\d)/, \"_$1\").replace(/\\W/g, \"_\");\n  }\n\n  ts.makeIdentifierFromModuleName = makeIdentifierFromModuleName;\n\n  function isBlockOrCatchScoped(declaration) {\n    return (getCombinedNodeFlags(declaration) & 24576\n    /* BlockScoped */\n    ) !== 0 || isCatchClauseVariableDeclaration(declaration);\n  }\n\n  ts.isBlockOrCatchScoped = isBlockOrCatchScoped;\n\n  function isAmbientModule(node) {\n    return node && node.kind === 221\n    /* ModuleDeclaration */\n    && (node.name.kind === 9\n    /* StringLiteral */\n    || isGlobalScopeAugmentation(node));\n  }\n\n  ts.isAmbientModule = isAmbientModule;\n\n  function isBlockScopedContainerTopLevel(node) {\n    return node.kind === 251\n    /* SourceFile */\n    || node.kind === 221\n    /* ModuleDeclaration */\n    || isFunctionLike(node) || isFunctionBlock(node);\n  }\n\n  ts.isBlockScopedContainerTopLevel = isBlockScopedContainerTopLevel;\n\n  function isGlobalScopeAugmentation(module) {\n    return !!(module.flags & 2097152\n    /* GlobalAugmentation */\n    );\n  }\n\n  ts.isGlobalScopeAugmentation = isGlobalScopeAugmentation;\n\n  function isExternalModuleAugmentation(node) {\n    // external module augmentation is a ambient module declaration that is either:\n    // - defined in the top level scope and source file is an external module\n    // - defined inside ambient module declaration located in the top level scope and source file not an external module\n    if (!node || !isAmbientModule(node)) {\n      return false;\n    }\n\n    switch (node.parent.kind) {\n      case 251\n      /* SourceFile */\n      :\n        return isExternalModule(node.parent);\n\n      case 222\n      /* ModuleBlock */\n      :\n        return isAmbientModule(node.parent.parent) && !isExternalModule(node.parent.parent.parent);\n    }\n\n    return false;\n  }\n\n  ts.isExternalModuleAugmentation = isExternalModuleAugmentation; // Gets the nearest enclosing block scope container that has the provided node\n  // as a descendant, that is not the provided node.\n\n  function getEnclosingBlockScopeContainer(node) {\n    var current = node.parent;\n\n    while (current) {\n      if (isFunctionLike(current)) {\n        return current;\n      }\n\n      switch (current.kind) {\n        case 251\n        /* SourceFile */\n        :\n        case 223\n        /* CaseBlock */\n        :\n        case 247\n        /* CatchClause */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 202\n        /* ForStatement */\n        :\n        case 203\n        /* ForInStatement */\n        :\n        case 204\n        /* ForOfStatement */\n        :\n          return current;\n\n        case 195\n        /* Block */\n        :\n          // function block is not considered block-scope container\n          // see comment in binder.ts: bind(...), case for SyntaxKind.Block\n          if (!isFunctionLike(current.parent)) {\n            return current;\n          }\n\n      }\n\n      current = current.parent;\n    }\n  }\n\n  ts.getEnclosingBlockScopeContainer = getEnclosingBlockScopeContainer;\n\n  function isCatchClauseVariableDeclaration(declaration) {\n    return declaration && declaration.kind === 214\n    /* VariableDeclaration */\n    && declaration.parent && declaration.parent.kind === 247\n    /* CatchClause */\n    ;\n  }\n\n  ts.isCatchClauseVariableDeclaration = isCatchClauseVariableDeclaration; // Return display name of an identifier\n  // Computed property names will just be emitted as \"[<expr>]\", where <expr> is the source\n  // text of the expression in the computed property.\n\n  function declarationNameToString(name) {\n    return getFullWidth(name) === 0 ? \"(Missing)\" : getTextOfNode(name);\n  }\n\n  ts.declarationNameToString = declarationNameToString;\n\n  function createDiagnosticForNode(node, message, arg0, arg1, arg2) {\n    var sourceFile = getSourceFileOfNode(node);\n    var span = getErrorSpanForNode(sourceFile, node);\n    return ts.createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2);\n  }\n\n  ts.createDiagnosticForNode = createDiagnosticForNode;\n\n  function createDiagnosticForNodeFromMessageChain(node, messageChain) {\n    var sourceFile = getSourceFileOfNode(node);\n    var span = getErrorSpanForNode(sourceFile, node);\n    return {\n      file: sourceFile,\n      start: span.start,\n      length: span.length,\n      code: messageChain.code,\n      category: messageChain.category,\n      messageText: messageChain.next ? messageChain : messageChain.messageText\n    };\n  }\n\n  ts.createDiagnosticForNodeFromMessageChain = createDiagnosticForNodeFromMessageChain;\n\n  function getSpanOfTokenAtPosition(sourceFile, pos) {\n    var scanner = ts.createScanner(sourceFile.languageVersion,\n    /*skipTrivia*/\n    true, sourceFile.languageVariant, sourceFile.text,\n    /*onError:*/\n    undefined, pos);\n    scanner.scan();\n    var start = scanner.getTokenPos();\n    return ts.createTextSpanFromBounds(start, scanner.getTextPos());\n  }\n\n  ts.getSpanOfTokenAtPosition = getSpanOfTokenAtPosition;\n\n  function getErrorSpanForNode(sourceFile, node) {\n    var errorNode = node;\n\n    switch (node.kind) {\n      case 251\n      /* SourceFile */\n      :\n        var pos_1 = ts.skipTrivia(sourceFile.text, 0,\n        /*stopAfterLineBreak*/\n        false);\n\n        if (pos_1 === sourceFile.text.length) {\n          // file is empty - return span for the beginning of the file\n          return ts.createTextSpan(0, 0);\n        }\n\n        return getSpanOfTokenAtPosition(sourceFile, pos_1);\n      // This list is a work in progress. Add missing node kinds to improve their error\n      // spans.\n\n      case 214\n      /* VariableDeclaration */\n      :\n      case 166\n      /* BindingElement */\n      :\n      case 217\n      /* ClassDeclaration */\n      :\n      case 189\n      /* ClassExpression */\n      :\n      case 218\n      /* InterfaceDeclaration */\n      :\n      case 221\n      /* ModuleDeclaration */\n      :\n      case 220\n      /* EnumDeclaration */\n      :\n      case 250\n      /* EnumMember */\n      :\n      case 216\n      /* FunctionDeclaration */\n      :\n      case 176\n      /* FunctionExpression */\n      :\n      case 144\n      /* MethodDeclaration */\n      :\n      case 219\n      /* TypeAliasDeclaration */\n      :\n        errorNode = node.name;\n        break;\n    }\n\n    if (errorNode === undefined) {\n      // If we don't have a better node, then just set the error on the first token of\n      // construct.\n      return getSpanOfTokenAtPosition(sourceFile, node.pos);\n    }\n\n    var pos = nodeIsMissing(errorNode) ? errorNode.pos : ts.skipTrivia(sourceFile.text, errorNode.pos);\n    return ts.createTextSpanFromBounds(pos, errorNode.end);\n  }\n\n  ts.getErrorSpanForNode = getErrorSpanForNode;\n\n  function isExternalModule(file) {\n    return file.externalModuleIndicator !== undefined;\n  }\n\n  ts.isExternalModule = isExternalModule;\n\n  function isExternalOrCommonJsModule(file) {\n    return (file.externalModuleIndicator || file.commonJsModuleIndicator) !== undefined;\n  }\n\n  ts.isExternalOrCommonJsModule = isExternalOrCommonJsModule;\n\n  function isDeclarationFile(file) {\n    return (file.flags & 4096\n    /* DeclarationFile */\n    ) !== 0;\n  }\n\n  ts.isDeclarationFile = isDeclarationFile;\n\n  function isConstEnumDeclaration(node) {\n    return node.kind === 220\n    /* EnumDeclaration */\n    && isConst(node);\n  }\n\n  ts.isConstEnumDeclaration = isConstEnumDeclaration;\n\n  function walkUpBindingElementsAndPatterns(node) {\n    while (node && (node.kind === 166\n    /* BindingElement */\n    || isBindingPattern(node))) {\n      node = node.parent;\n    }\n\n    return node;\n  } // Returns the node flags for this node and all relevant parent nodes.  This is done so that\n  // nodes like variable declarations and binding elements can returned a view of their flags\n  // that includes the modifiers from their container.  i.e. flags like export/declare aren't\n  // stored on the variable declaration directly, but on the containing variable statement\n  // (if it has one).  Similarly, flags for let/const are store on the variable declaration\n  // list.  By calling this function, all those flags are combined so that the client can treat\n  // the node as if it actually had those flags.\n\n\n  function getCombinedNodeFlags(node) {\n    node = walkUpBindingElementsAndPatterns(node);\n    var flags = node.flags;\n\n    if (node.kind === 214\n    /* VariableDeclaration */\n    ) {\n        node = node.parent;\n      }\n\n    if (node && node.kind === 215\n    /* VariableDeclarationList */\n    ) {\n        flags |= node.flags;\n        node = node.parent;\n      }\n\n    if (node && node.kind === 196\n    /* VariableStatement */\n    ) {\n        flags |= node.flags;\n      }\n\n    return flags;\n  }\n\n  ts.getCombinedNodeFlags = getCombinedNodeFlags;\n\n  function isConst(node) {\n    return !!(getCombinedNodeFlags(node) & 16384\n    /* Const */\n    );\n  }\n\n  ts.isConst = isConst;\n\n  function isLet(node) {\n    return !!(getCombinedNodeFlags(node) & 8192\n    /* Let */\n    );\n  }\n\n  ts.isLet = isLet;\n\n  function isSuperCallExpression(n) {\n    return n.kind === 171\n    /* CallExpression */\n    && n.expression.kind === 95\n    /* SuperKeyword */\n    ;\n  }\n\n  ts.isSuperCallExpression = isSuperCallExpression;\n\n  function isPrologueDirective(node) {\n    return node.kind === 198\n    /* ExpressionStatement */\n    && node.expression.kind === 9\n    /* StringLiteral */\n    ;\n  }\n\n  ts.isPrologueDirective = isPrologueDirective;\n\n  function getLeadingCommentRangesOfNode(node, sourceFileOfNode) {\n    return ts.getLeadingCommentRanges(sourceFileOfNode.text, node.pos);\n  }\n\n  ts.getLeadingCommentRangesOfNode = getLeadingCommentRangesOfNode;\n\n  function getLeadingCommentRangesOfNodeFromText(node, text) {\n    return ts.getLeadingCommentRanges(text, node.pos);\n  }\n\n  ts.getLeadingCommentRangesOfNodeFromText = getLeadingCommentRangesOfNodeFromText;\n\n  function getJsDocComments(node, sourceFileOfNode) {\n    return getJsDocCommentsFromText(node, sourceFileOfNode.text);\n  }\n\n  ts.getJsDocComments = getJsDocComments;\n\n  function getJsDocCommentsFromText(node, text) {\n    var commentRanges = node.kind === 139\n    /* Parameter */\n    || node.kind === 138\n    /* TypeParameter */\n    ? ts.concatenate(ts.getTrailingCommentRanges(text, node.pos), ts.getLeadingCommentRanges(text, node.pos)) : getLeadingCommentRangesOfNodeFromText(node, text);\n    return ts.filter(commentRanges, isJsDocComment);\n\n    function isJsDocComment(comment) {\n      // True if the comment starts with '/**' but not if it is '/**/'\n      return text.charCodeAt(comment.pos + 1) === 42\n      /* asterisk */\n      && text.charCodeAt(comment.pos + 2) === 42\n      /* asterisk */\n      && text.charCodeAt(comment.pos + 3) !== 47\n      /* slash */\n      ;\n    }\n  }\n\n  ts.getJsDocCommentsFromText = getJsDocCommentsFromText;\n  ts.fullTripleSlashReferencePathRegEx = /^(\\/\\/\\/\\s*<reference\\s+path\\s*=\\s*)('|\")(.+?)\\2.*?\\/>/;\n  ts.fullTripleSlashAMDReferencePathRegEx = /^(\\/\\/\\/\\s*<amd-dependency\\s+path\\s*=\\s*)('|\")(.+?)\\2.*?\\/>/;\n\n  function isTypeNode(node) {\n    if (151\n    /* FirstTypeNode */\n    <= node.kind && node.kind <= 163\n    /* LastTypeNode */\n    ) {\n        return true;\n      }\n\n    switch (node.kind) {\n      case 117\n      /* AnyKeyword */\n      :\n      case 128\n      /* NumberKeyword */\n      :\n      case 130\n      /* StringKeyword */\n      :\n      case 120\n      /* BooleanKeyword */\n      :\n      case 131\n      /* SymbolKeyword */\n      :\n        return true;\n\n      case 103\n      /* VoidKeyword */\n      :\n        return node.parent.kind !== 180\n        /* VoidExpression */\n        ;\n\n      case 191\n      /* ExpressionWithTypeArguments */\n      :\n        return !isExpressionWithTypeArgumentsInClassExtendsClause(node);\n      // Identifiers and qualified names may be type nodes, depending on their context. Climb\n      // above them to find the lowest container\n\n      case 69\n      /* Identifier */\n      :\n        // If the identifier is the RHS of a qualified name, then it's a type iff its parent is.\n        if (node.parent.kind === 136\n        /* QualifiedName */\n        && node.parent.right === node) {\n          node = node.parent;\n        } else if (node.parent.kind === 169\n        /* PropertyAccessExpression */\n        && node.parent.name === node) {\n          node = node.parent;\n        } // At this point, node is either a qualified name or an identifier\n\n\n        ts.Debug.assert(node.kind === 69\n        /* Identifier */\n        || node.kind === 136\n        /* QualifiedName */\n        || node.kind === 169\n        /* PropertyAccessExpression */\n        , \"'node' was expected to be a qualified name, identifier or property access in 'isTypeNode'.\");\n\n      case 136\n      /* QualifiedName */\n      :\n      case 169\n      /* PropertyAccessExpression */\n      :\n      case 97\n      /* ThisKeyword */\n      :\n        var parent_1 = node.parent;\n\n        if (parent_1.kind === 155\n        /* TypeQuery */\n        ) {\n            return false;\n          } // Do not recursively call isTypeNode on the parent. In the example:\n        //\n        //     let a: A.B.C;\n        //\n        // Calling isTypeNode would consider the qualified name A.B a type node. Only C or\n        // A.B.C is a type node.\n\n\n        if (151\n        /* FirstTypeNode */\n        <= parent_1.kind && parent_1.kind <= 163\n        /* LastTypeNode */\n        ) {\n            return true;\n          }\n\n        switch (parent_1.kind) {\n          case 191\n          /* ExpressionWithTypeArguments */\n          :\n            return !isExpressionWithTypeArgumentsInClassExtendsClause(parent_1);\n\n          case 138\n          /* TypeParameter */\n          :\n            return node === parent_1.constraint;\n\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n          case 139\n          /* Parameter */\n          :\n          case 214\n          /* VariableDeclaration */\n          :\n            return node === parent_1.type;\n\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            return node === parent_1.type;\n\n          case 148\n          /* CallSignature */\n          :\n          case 149\n          /* ConstructSignature */\n          :\n          case 150\n          /* IndexSignature */\n          :\n            return node === parent_1.type;\n\n          case 174\n          /* TypeAssertionExpression */\n          :\n            return node === parent_1.type;\n\n          case 171\n          /* CallExpression */\n          :\n          case 172\n          /* NewExpression */\n          :\n            return parent_1.typeArguments && ts.indexOf(parent_1.typeArguments, node) >= 0;\n\n          case 173\n          /* TaggedTemplateExpression */\n          :\n            // TODO (drosen): TaggedTemplateExpressions may eventually support type arguments.\n            return false;\n        }\n\n    }\n\n    return false;\n  }\n\n  ts.isTypeNode = isTypeNode; // Warning: This has the same semantics as the forEach family of functions,\n  //          in that traversal terminates in the event that 'visitor' supplies a truthy value.\n\n  function forEachReturnStatement(body, visitor) {\n    return traverse(body);\n\n    function traverse(node) {\n      switch (node.kind) {\n        case 207\n        /* ReturnStatement */\n        :\n          return visitor(node);\n\n        case 223\n        /* CaseBlock */\n        :\n        case 195\n        /* Block */\n        :\n        case 199\n        /* IfStatement */\n        :\n        case 200\n        /* DoStatement */\n        :\n        case 201\n        /* WhileStatement */\n        :\n        case 202\n        /* ForStatement */\n        :\n        case 203\n        /* ForInStatement */\n        :\n        case 204\n        /* ForOfStatement */\n        :\n        case 208\n        /* WithStatement */\n        :\n        case 209\n        /* SwitchStatement */\n        :\n        case 244\n        /* CaseClause */\n        :\n        case 245\n        /* DefaultClause */\n        :\n        case 210\n        /* LabeledStatement */\n        :\n        case 212\n        /* TryStatement */\n        :\n        case 247\n        /* CatchClause */\n        :\n          return ts.forEachChild(node, traverse);\n      }\n    }\n  }\n\n  ts.forEachReturnStatement = forEachReturnStatement;\n\n  function forEachYieldExpression(body, visitor) {\n    return traverse(body);\n\n    function traverse(node) {\n      switch (node.kind) {\n        case 187\n        /* YieldExpression */\n        :\n          visitor(node);\n          var operand = node.expression;\n\n          if (operand) {\n            traverse(operand);\n          }\n\n        case 220\n        /* EnumDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n        case 189\n        /* ClassExpression */\n        :\n          // These are not allowed inside a generator now, but eventually they may be allowed\n          // as local types. Regardless, any yield statements contained within them should be\n          // skipped in this traversal.\n          return;\n\n        default:\n          if (isFunctionLike(node)) {\n            var name_5 = node.name;\n\n            if (name_5 && name_5.kind === 137\n            /* ComputedPropertyName */\n            ) {\n                // Note that we will not include methods/accessors of a class because they would require\n                // first descending into the class. This is by design.\n                traverse(name_5.expression);\n                return;\n              }\n          } else if (!isTypeNode(node)) {\n            // This is the general case, which should include mostly expressions and statements.\n            // Also includes NodeArrays.\n            ts.forEachChild(node, traverse);\n          }\n\n      }\n    }\n  }\n\n  ts.forEachYieldExpression = forEachYieldExpression;\n\n  function isVariableLike(node) {\n    if (node) {\n      switch (node.kind) {\n        case 166\n        /* BindingElement */\n        :\n        case 250\n        /* EnumMember */\n        :\n        case 139\n        /* Parameter */\n        :\n        case 248\n        /* PropertyAssignment */\n        :\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n        case 249\n        /* ShorthandPropertyAssignment */\n        :\n        case 214\n        /* VariableDeclaration */\n        :\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  ts.isVariableLike = isVariableLike;\n\n  function isAccessor(node) {\n    return node && (node.kind === 146\n    /* GetAccessor */\n    || node.kind === 147\n    /* SetAccessor */\n    );\n  }\n\n  ts.isAccessor = isAccessor;\n\n  function isClassLike(node) {\n    return node && (node.kind === 217\n    /* ClassDeclaration */\n    || node.kind === 189\n    /* ClassExpression */\n    );\n  }\n\n  ts.isClassLike = isClassLike;\n\n  function isFunctionLike(node) {\n    return node && isFunctionLikeKind(node.kind);\n  }\n\n  ts.isFunctionLike = isFunctionLike;\n\n  function isFunctionLikeKind(kind) {\n    switch (kind) {\n      case 145\n      /* Constructor */\n      :\n      case 176\n      /* FunctionExpression */\n      :\n      case 216\n      /* FunctionDeclaration */\n      :\n      case 177\n      /* ArrowFunction */\n      :\n      case 144\n      /* MethodDeclaration */\n      :\n      case 143\n      /* MethodSignature */\n      :\n      case 146\n      /* GetAccessor */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 148\n      /* CallSignature */\n      :\n      case 149\n      /* ConstructSignature */\n      :\n      case 150\n      /* IndexSignature */\n      :\n      case 153\n      /* FunctionType */\n      :\n      case 154\n      /* ConstructorType */\n      :\n        return true;\n    }\n  }\n\n  ts.isFunctionLikeKind = isFunctionLikeKind;\n\n  function introducesArgumentsExoticObject(node) {\n    switch (node.kind) {\n      case 144\n      /* MethodDeclaration */\n      :\n      case 143\n      /* MethodSignature */\n      :\n      case 145\n      /* Constructor */\n      :\n      case 146\n      /* GetAccessor */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 216\n      /* FunctionDeclaration */\n      :\n      case 176\n      /* FunctionExpression */\n      :\n        return true;\n    }\n\n    return false;\n  }\n\n  ts.introducesArgumentsExoticObject = introducesArgumentsExoticObject;\n\n  function isIterationStatement(node, lookInLabeledStatements) {\n    switch (node.kind) {\n      case 202\n      /* ForStatement */\n      :\n      case 203\n      /* ForInStatement */\n      :\n      case 204\n      /* ForOfStatement */\n      :\n      case 200\n      /* DoStatement */\n      :\n      case 201\n      /* WhileStatement */\n      :\n        return true;\n\n      case 210\n      /* LabeledStatement */\n      :\n        return lookInLabeledStatements && isIterationStatement(node.statement, lookInLabeledStatements);\n    }\n\n    return false;\n  }\n\n  ts.isIterationStatement = isIterationStatement;\n\n  function isFunctionBlock(node) {\n    return node && node.kind === 195\n    /* Block */\n    && isFunctionLike(node.parent);\n  }\n\n  ts.isFunctionBlock = isFunctionBlock;\n\n  function isObjectLiteralMethod(node) {\n    return node && node.kind === 144\n    /* MethodDeclaration */\n    && node.parent.kind === 168\n    /* ObjectLiteralExpression */\n    ;\n  }\n\n  ts.isObjectLiteralMethod = isObjectLiteralMethod;\n\n  function isIdentifierTypePredicate(predicate) {\n    return predicate && predicate.kind === 1\n    /* Identifier */\n    ;\n  }\n\n  ts.isIdentifierTypePredicate = isIdentifierTypePredicate;\n\n  function isThisTypePredicate(predicate) {\n    return predicate && predicate.kind === 0\n    /* This */\n    ;\n  }\n\n  ts.isThisTypePredicate = isThisTypePredicate;\n\n  function getContainingFunction(node) {\n    while (true) {\n      node = node.parent;\n\n      if (!node || isFunctionLike(node)) {\n        return node;\n      }\n    }\n  }\n\n  ts.getContainingFunction = getContainingFunction;\n\n  function getContainingClass(node) {\n    while (true) {\n      node = node.parent;\n\n      if (!node || isClassLike(node)) {\n        return node;\n      }\n    }\n  }\n\n  ts.getContainingClass = getContainingClass;\n\n  function getThisContainer(node, includeArrowFunctions) {\n    while (true) {\n      node = node.parent;\n\n      if (!node) {\n        return undefined;\n      }\n\n      switch (node.kind) {\n        case 137\n        /* ComputedPropertyName */\n        :\n          // If the grandparent node is an object literal (as opposed to a class),\n          // then the computed property is not a 'this' container.\n          // A computed property name in a class needs to be a this container\n          // so that we can error on it.\n          if (isClassLike(node.parent.parent)) {\n            return node;\n          } // If this is a computed property, then the parent should not\n          // make it a this container. The parent might be a property\n          // in an object literal, like a method or accessor. But in order for\n          // such a parent to be a this container, the reference must be in\n          // the *body* of the container.\n\n\n          node = node.parent;\n          break;\n\n        case 140\n        /* Decorator */\n        :\n          // Decorators are always applied outside of the body of a class or method.\n          if (node.parent.kind === 139\n          /* Parameter */\n          && isClassElement(node.parent.parent)) {\n            // If the decorator's parent is a Parameter, we resolve the this container from\n            // the grandparent class declaration.\n            node = node.parent.parent;\n          } else if (isClassElement(node.parent)) {\n            // If the decorator's parent is a class element, we resolve the 'this' container\n            // from the parent class declaration.\n            node = node.parent;\n          }\n\n          break;\n\n        case 177\n        /* ArrowFunction */\n        :\n          if (!includeArrowFunctions) {\n            continue;\n          }\n\n        // Fall through\n\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 145\n        /* Constructor */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n        case 148\n        /* CallSignature */\n        :\n        case 149\n        /* ConstructSignature */\n        :\n        case 150\n        /* IndexSignature */\n        :\n        case 220\n        /* EnumDeclaration */\n        :\n        case 251\n        /* SourceFile */\n        :\n          return node;\n      }\n    }\n  }\n\n  ts.getThisContainer = getThisContainer;\n  /**\n    * Given an super call\\property node returns a closest node where either\n    * - super call\\property is legal in the node and not legal in the parent node the node.\n    *   i.e. super call is legal in constructor but not legal in the class body.\n    * - node is arrow function (so caller might need to call getSuperContainer in case it needs to climb higher)\n    * - super call\\property is definitely illegal in the node (but might be legal in some subnode)\n    *   i.e. super property access is illegal in function declaration but can be legal in the statement list\n    */\n\n  function getSuperContainer(node, stopOnFunctions) {\n    while (true) {\n      node = node.parent;\n\n      if (!node) {\n        return node;\n      }\n\n      switch (node.kind) {\n        case 137\n        /* ComputedPropertyName */\n        :\n          node = node.parent;\n          break;\n\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          if (!stopOnFunctions) {\n            continue;\n          }\n\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 145\n        /* Constructor */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n          return node;\n\n        case 140\n        /* Decorator */\n        :\n          // Decorators are always applied outside of the body of a class or method.\n          if (node.parent.kind === 139\n          /* Parameter */\n          && isClassElement(node.parent.parent)) {\n            // If the decorator's parent is a Parameter, we resolve the this container from\n            // the grandparent class declaration.\n            node = node.parent.parent;\n          } else if (isClassElement(node.parent)) {\n            // If the decorator's parent is a class element, we resolve the 'this' container\n            // from the parent class declaration.\n            node = node.parent;\n          }\n\n          break;\n      }\n    }\n  }\n\n  ts.getSuperContainer = getSuperContainer;\n  /**\n   * Determines whether a node is a property or element access expression for super.\n   */\n\n  function isSuperPropertyOrElementAccess(node) {\n    return (node.kind === 169\n    /* PropertyAccessExpression */\n    || node.kind === 170\n    /* ElementAccessExpression */\n    ) && node.expression.kind === 95\n    /* SuperKeyword */\n    ;\n  }\n\n  ts.isSuperPropertyOrElementAccess = isSuperPropertyOrElementAccess;\n\n  function getEntityNameFromTypeNode(node) {\n    if (node) {\n      switch (node.kind) {\n        case 152\n        /* TypeReference */\n        :\n          return node.typeName;\n\n        case 191\n        /* ExpressionWithTypeArguments */\n        :\n          return node.expression;\n\n        case 69\n        /* Identifier */\n        :\n        case 136\n        /* QualifiedName */\n        :\n          return node;\n      }\n    }\n\n    return undefined;\n  }\n\n  ts.getEntityNameFromTypeNode = getEntityNameFromTypeNode;\n\n  function getInvokedExpression(node) {\n    if (node.kind === 173\n    /* TaggedTemplateExpression */\n    ) {\n        return node.tag;\n      } // Will either be a CallExpression, NewExpression, or Decorator.\n\n\n    return node.expression;\n  }\n\n  ts.getInvokedExpression = getInvokedExpression;\n\n  function nodeCanBeDecorated(node) {\n    switch (node.kind) {\n      case 217\n      /* ClassDeclaration */\n      :\n        // classes are valid targets\n        return true;\n\n      case 142\n      /* PropertyDeclaration */\n      :\n        // property declarations are valid if their parent is a class declaration.\n        return node.parent.kind === 217\n        /* ClassDeclaration */\n        ;\n\n      case 146\n      /* GetAccessor */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 144\n      /* MethodDeclaration */\n      :\n        // if this method has a body and its parent is a class declaration, this is a valid target.\n        return node.body !== undefined && node.parent.kind === 217\n        /* ClassDeclaration */\n        ;\n\n      case 139\n      /* Parameter */\n      :\n        // if the parameter's parent has a body and its grandparent is a class declaration, this is a valid target;\n        return node.parent.body !== undefined && (node.parent.kind === 145\n        /* Constructor */\n        || node.parent.kind === 144\n        /* MethodDeclaration */\n        || node.parent.kind === 147\n        /* SetAccessor */\n        ) && node.parent.parent.kind === 217\n        /* ClassDeclaration */\n        ;\n    }\n\n    return false;\n  }\n\n  ts.nodeCanBeDecorated = nodeCanBeDecorated;\n\n  function nodeIsDecorated(node) {\n    return node.decorators !== undefined && nodeCanBeDecorated(node);\n  }\n\n  ts.nodeIsDecorated = nodeIsDecorated;\n\n  function isPropertyAccessExpression(node) {\n    return node.kind === 169\n    /* PropertyAccessExpression */\n    ;\n  }\n\n  ts.isPropertyAccessExpression = isPropertyAccessExpression;\n\n  function isElementAccessExpression(node) {\n    return node.kind === 170\n    /* ElementAccessExpression */\n    ;\n  }\n\n  ts.isElementAccessExpression = isElementAccessExpression;\n\n  function isExpression(node) {\n    switch (node.kind) {\n      case 95\n      /* SuperKeyword */\n      :\n      case 93\n      /* NullKeyword */\n      :\n      case 99\n      /* TrueKeyword */\n      :\n      case 84\n      /* FalseKeyword */\n      :\n      case 10\n      /* RegularExpressionLiteral */\n      :\n      case 167\n      /* ArrayLiteralExpression */\n      :\n      case 168\n      /* ObjectLiteralExpression */\n      :\n      case 169\n      /* PropertyAccessExpression */\n      :\n      case 170\n      /* ElementAccessExpression */\n      :\n      case 171\n      /* CallExpression */\n      :\n      case 172\n      /* NewExpression */\n      :\n      case 173\n      /* TaggedTemplateExpression */\n      :\n      case 192\n      /* AsExpression */\n      :\n      case 174\n      /* TypeAssertionExpression */\n      :\n      case 175\n      /* ParenthesizedExpression */\n      :\n      case 176\n      /* FunctionExpression */\n      :\n      case 189\n      /* ClassExpression */\n      :\n      case 177\n      /* ArrowFunction */\n      :\n      case 180\n      /* VoidExpression */\n      :\n      case 178\n      /* DeleteExpression */\n      :\n      case 179\n      /* TypeOfExpression */\n      :\n      case 182\n      /* PrefixUnaryExpression */\n      :\n      case 183\n      /* PostfixUnaryExpression */\n      :\n      case 184\n      /* BinaryExpression */\n      :\n      case 185\n      /* ConditionalExpression */\n      :\n      case 188\n      /* SpreadElementExpression */\n      :\n      case 186\n      /* TemplateExpression */\n      :\n      case 11\n      /* NoSubstitutionTemplateLiteral */\n      :\n      case 190\n      /* OmittedExpression */\n      :\n      case 236\n      /* JsxElement */\n      :\n      case 237\n      /* JsxSelfClosingElement */\n      :\n      case 187\n      /* YieldExpression */\n      :\n      case 181\n      /* AwaitExpression */\n      :\n        return true;\n\n      case 136\n      /* QualifiedName */\n      :\n        while (node.parent.kind === 136\n        /* QualifiedName */\n        ) {\n          node = node.parent;\n        }\n\n        return node.parent.kind === 155\n        /* TypeQuery */\n        ;\n\n      case 69\n      /* Identifier */\n      :\n        if (node.parent.kind === 155\n        /* TypeQuery */\n        ) {\n            return true;\n          }\n\n      // fall through\n\n      case 8\n      /* NumericLiteral */\n      :\n      case 9\n      /* StringLiteral */\n      :\n      case 97\n      /* ThisKeyword */\n      :\n        var parent_2 = node.parent;\n\n        switch (parent_2.kind) {\n          case 214\n          /* VariableDeclaration */\n          :\n          case 139\n          /* Parameter */\n          :\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n          case 250\n          /* EnumMember */\n          :\n          case 248\n          /* PropertyAssignment */\n          :\n          case 166\n          /* BindingElement */\n          :\n            return parent_2.initializer === node;\n\n          case 198\n          /* ExpressionStatement */\n          :\n          case 199\n          /* IfStatement */\n          :\n          case 200\n          /* DoStatement */\n          :\n          case 201\n          /* WhileStatement */\n          :\n          case 207\n          /* ReturnStatement */\n          :\n          case 208\n          /* WithStatement */\n          :\n          case 209\n          /* SwitchStatement */\n          :\n          case 244\n          /* CaseClause */\n          :\n          case 211\n          /* ThrowStatement */\n          :\n          case 209\n          /* SwitchStatement */\n          :\n            return parent_2.expression === node;\n\n          case 202\n          /* ForStatement */\n          :\n            var forStatement = parent_2;\n            return forStatement.initializer === node && forStatement.initializer.kind !== 215\n            /* VariableDeclarationList */\n            || forStatement.condition === node || forStatement.incrementor === node;\n\n          case 203\n          /* ForInStatement */\n          :\n          case 204\n          /* ForOfStatement */\n          :\n            var forInStatement = parent_2;\n            return forInStatement.initializer === node && forInStatement.initializer.kind !== 215\n            /* VariableDeclarationList */\n            || forInStatement.expression === node;\n\n          case 174\n          /* TypeAssertionExpression */\n          :\n          case 192\n          /* AsExpression */\n          :\n            return node === parent_2.expression;\n\n          case 193\n          /* TemplateSpan */\n          :\n            return node === parent_2.expression;\n\n          case 137\n          /* ComputedPropertyName */\n          :\n            return node === parent_2.expression;\n\n          case 140\n          /* Decorator */\n          :\n          case 243\n          /* JsxExpression */\n          :\n          case 242\n          /* JsxSpreadAttribute */\n          :\n            return true;\n\n          case 191\n          /* ExpressionWithTypeArguments */\n          :\n            return parent_2.expression === node && isExpressionWithTypeArgumentsInClassExtendsClause(parent_2);\n\n          default:\n            if (isExpression(parent_2)) {\n              return true;\n            }\n\n        }\n\n    }\n\n    return false;\n  }\n\n  ts.isExpression = isExpression;\n\n  function isExternalModuleNameRelative(moduleName) {\n    // TypeScript 1.0 spec (April 2014): 11.2.1\n    // An external module name is \"relative\" if the first term is \".\" or \"..\".\n    return moduleName.substr(0, 2) === \"./\" || moduleName.substr(0, 3) === \"../\" || moduleName.substr(0, 2) === \".\\\\\" || moduleName.substr(0, 3) === \"..\\\\\";\n  }\n\n  ts.isExternalModuleNameRelative = isExternalModuleNameRelative;\n\n  function isInstantiatedModule(node, preserveConstEnums) {\n    var moduleState = ts.getModuleInstanceState(node);\n    return moduleState === 1\n    /* Instantiated */\n    || preserveConstEnums && moduleState === 2\n    /* ConstEnumOnly */\n    ;\n  }\n\n  ts.isInstantiatedModule = isInstantiatedModule;\n\n  function isExternalModuleImportEqualsDeclaration(node) {\n    return node.kind === 224\n    /* ImportEqualsDeclaration */\n    && node.moduleReference.kind === 235\n    /* ExternalModuleReference */\n    ;\n  }\n\n  ts.isExternalModuleImportEqualsDeclaration = isExternalModuleImportEqualsDeclaration;\n\n  function getExternalModuleImportEqualsDeclarationExpression(node) {\n    ts.Debug.assert(isExternalModuleImportEqualsDeclaration(node));\n    return node.moduleReference.expression;\n  }\n\n  ts.getExternalModuleImportEqualsDeclarationExpression = getExternalModuleImportEqualsDeclarationExpression;\n\n  function isInternalModuleImportEqualsDeclaration(node) {\n    return node.kind === 224\n    /* ImportEqualsDeclaration */\n    && node.moduleReference.kind !== 235\n    /* ExternalModuleReference */\n    ;\n  }\n\n  ts.isInternalModuleImportEqualsDeclaration = isInternalModuleImportEqualsDeclaration;\n\n  function isSourceFileJavaScript(file) {\n    return isInJavaScriptFile(file);\n  }\n\n  ts.isSourceFileJavaScript = isSourceFileJavaScript;\n\n  function isInJavaScriptFile(node) {\n    return node && !!(node.parserContextFlags & 32\n    /* JavaScriptFile */\n    );\n  }\n\n  ts.isInJavaScriptFile = isInJavaScriptFile;\n  /**\n   * Returns true if the node is a CallExpression to the identifier 'require' with\n   * exactly one argument.\n   * This function does not test if the node is in a JavaScript file or not.\n  */\n\n  function isRequireCall(expression, checkArgumentIsStringLiteral) {\n    // of the form 'require(\"name\")'\n    var isRequire = expression.kind === 171\n    /* CallExpression */\n    && expression.expression.kind === 69\n    /* Identifier */\n    && expression.expression.text === \"require\" && expression.arguments.length === 1;\n    return isRequire && (!checkArgumentIsStringLiteral || expression.arguments[0].kind === 9\n    /* StringLiteral */\n    );\n  }\n\n  ts.isRequireCall = isRequireCall; /// Given a BinaryExpression, returns SpecialPropertyAssignmentKind for the various kinds of property\n  /// assignments we treat as special in the binder\n\n  function getSpecialPropertyAssignmentKind(expression) {\n    if (!isInJavaScriptFile(expression)) {\n      return 0\n      /* None */\n      ;\n    }\n\n    if (expression.kind !== 184\n    /* BinaryExpression */\n    ) {\n        return 0\n        /* None */\n        ;\n      }\n\n    var expr = expression;\n\n    if (expr.operatorToken.kind !== 56\n    /* EqualsToken */\n    || expr.left.kind !== 169\n    /* PropertyAccessExpression */\n    ) {\n        return 0\n        /* None */\n        ;\n      }\n\n    var lhs = expr.left;\n\n    if (lhs.expression.kind === 69\n    /* Identifier */\n    ) {\n        var lhsId = lhs.expression;\n\n        if (lhsId.text === \"exports\") {\n          // exports.name = expr\n          return 1\n          /* ExportsProperty */\n          ;\n        } else if (lhsId.text === \"module\" && lhs.name.text === \"exports\") {\n          // module.exports = expr\n          return 2\n          /* ModuleExports */\n          ;\n        }\n      } else if (lhs.expression.kind === 97\n    /* ThisKeyword */\n    ) {\n        return 4\n        /* ThisProperty */\n        ;\n      } else if (lhs.expression.kind === 169\n    /* PropertyAccessExpression */\n    ) {\n        // chained dot, e.g. x.y.z = expr; this var is the 'x.y' part\n        var innerPropertyAccess = lhs.expression;\n\n        if (innerPropertyAccess.expression.kind === 69\n        /* Identifier */\n        && innerPropertyAccess.name.text === \"prototype\") {\n          return 3\n          /* PrototypeProperty */\n          ;\n        }\n      }\n\n    return 0\n    /* None */\n    ;\n  }\n\n  ts.getSpecialPropertyAssignmentKind = getSpecialPropertyAssignmentKind;\n\n  function getExternalModuleName(node) {\n    if (node.kind === 225\n    /* ImportDeclaration */\n    ) {\n        return node.moduleSpecifier;\n      }\n\n    if (node.kind === 224\n    /* ImportEqualsDeclaration */\n    ) {\n        var reference = node.moduleReference;\n\n        if (reference.kind === 235\n        /* ExternalModuleReference */\n        ) {\n            return reference.expression;\n          }\n      }\n\n    if (node.kind === 231\n    /* ExportDeclaration */\n    ) {\n        return node.moduleSpecifier;\n      }\n\n    if (node.kind === 221\n    /* ModuleDeclaration */\n    && node.name.kind === 9\n    /* StringLiteral */\n    ) {\n        return node.name;\n      }\n  }\n\n  ts.getExternalModuleName = getExternalModuleName;\n\n  function hasQuestionToken(node) {\n    if (node) {\n      switch (node.kind) {\n        case 139\n        /* Parameter */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 249\n        /* ShorthandPropertyAssignment */\n        :\n        case 248\n        /* PropertyAssignment */\n        :\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n          return node.questionToken !== undefined;\n      }\n    }\n\n    return false;\n  }\n\n  ts.hasQuestionToken = hasQuestionToken;\n\n  function isJSDocConstructSignature(node) {\n    return node.kind === 264\n    /* JSDocFunctionType */\n    && node.parameters.length > 0 && node.parameters[0].type.kind === 266\n    /* JSDocConstructorType */\n    ;\n  }\n\n  ts.isJSDocConstructSignature = isJSDocConstructSignature;\n\n  function getJSDocTag(node, kind, checkParentVariableStatement) {\n    if (!node) {\n      return undefined;\n    }\n\n    var jsDocComment = getJSDocComment(node, checkParentVariableStatement);\n\n    if (!jsDocComment) {\n      return undefined;\n    }\n\n    for (var _i = 0, _a = jsDocComment.tags; _i < _a.length; _i++) {\n      var tag = _a[_i];\n\n      if (tag.kind === kind) {\n        return tag;\n      }\n    }\n  }\n\n  function getJSDocComment(node, checkParentVariableStatement) {\n    if (node.jsDocComment) {\n      return node.jsDocComment;\n    } // Try to recognize this pattern when node is initializer of variable declaration and JSDoc comments are on containing variable statement. \n    // /** \n    //   * @param {number} name\n    //   * @returns {number} \n    //   */\n    // var x = function(name) { return name.length; }\n\n\n    if (checkParentVariableStatement) {\n      var isInitializerOfVariableDeclarationInStatement = node.parent.kind === 214\n      /* VariableDeclaration */\n      && node.parent.initializer === node && node.parent.parent.parent.kind === 196\n      /* VariableStatement */\n      ;\n      var variableStatementNode = isInitializerOfVariableDeclarationInStatement ? node.parent.parent.parent : undefined;\n\n      if (variableStatementNode) {\n        return variableStatementNode.jsDocComment;\n      } // Also recognize when the node is the RHS of an assignment expression\n\n\n      var parent_3 = node.parent;\n      var isSourceOfAssignmentExpressionStatement = parent_3 && parent_3.parent && parent_3.kind === 184\n      /* BinaryExpression */\n      && parent_3.operatorToken.kind === 56\n      /* EqualsToken */\n      && parent_3.parent.kind === 198\n      /* ExpressionStatement */\n      ;\n\n      if (isSourceOfAssignmentExpressionStatement) {\n        return parent_3.parent.jsDocComment;\n      }\n\n      var isPropertyAssignmentExpression = parent_3 && parent_3.kind === 248\n      /* PropertyAssignment */\n      ;\n\n      if (isPropertyAssignmentExpression) {\n        return parent_3.jsDocComment;\n      }\n    }\n\n    return undefined;\n  }\n\n  function getJSDocTypeTag(node) {\n    return getJSDocTag(node, 272\n    /* JSDocTypeTag */\n    ,\n    /*checkParentVariableStatement*/\n    false);\n  }\n\n  ts.getJSDocTypeTag = getJSDocTypeTag;\n\n  function getJSDocReturnTag(node) {\n    return getJSDocTag(node, 271\n    /* JSDocReturnTag */\n    ,\n    /*checkParentVariableStatement*/\n    true);\n  }\n\n  ts.getJSDocReturnTag = getJSDocReturnTag;\n\n  function getJSDocTemplateTag(node) {\n    return getJSDocTag(node, 273\n    /* JSDocTemplateTag */\n    ,\n    /*checkParentVariableStatement*/\n    false);\n  }\n\n  ts.getJSDocTemplateTag = getJSDocTemplateTag;\n\n  function getCorrespondingJSDocParameterTag(parameter) {\n    if (parameter.name && parameter.name.kind === 69\n    /* Identifier */\n    ) {\n        // If it's a parameter, see if the parent has a jsdoc comment with an @param\n        // annotation.\n        var parameterName = parameter.name.text;\n        var jsDocComment = getJSDocComment(parameter.parent,\n        /*checkParentVariableStatement*/\n        true);\n\n        if (jsDocComment) {\n          for (var _i = 0, _a = jsDocComment.tags; _i < _a.length; _i++) {\n            var tag = _a[_i];\n\n            if (tag.kind === 270\n            /* JSDocParameterTag */\n            ) {\n                var parameterTag = tag;\n                var name_6 = parameterTag.preParameterName || parameterTag.postParameterName;\n\n                if (name_6.text === parameterName) {\n                  return parameterTag;\n                }\n              }\n          }\n        }\n      }\n\n    return undefined;\n  }\n\n  ts.getCorrespondingJSDocParameterTag = getCorrespondingJSDocParameterTag;\n\n  function hasRestParameter(s) {\n    return isRestParameter(ts.lastOrUndefined(s.parameters));\n  }\n\n  ts.hasRestParameter = hasRestParameter;\n\n  function isRestParameter(node) {\n    if (node) {\n      if (node.parserContextFlags & 32\n      /* JavaScriptFile */\n      ) {\n          if (node.type && node.type.kind === 265\n          /* JSDocVariadicType */\n          ) {\n              return true;\n            }\n\n          var paramTag = getCorrespondingJSDocParameterTag(node);\n\n          if (paramTag && paramTag.typeExpression) {\n            return paramTag.typeExpression.type.kind === 265\n            /* JSDocVariadicType */\n            ;\n          }\n        }\n\n      return node.dotDotDotToken !== undefined;\n    }\n\n    return false;\n  }\n\n  ts.isRestParameter = isRestParameter;\n\n  function isLiteralKind(kind) {\n    return 8\n    /* FirstLiteralToken */\n    <= kind && kind <= 11\n    /* LastLiteralToken */\n    ;\n  }\n\n  ts.isLiteralKind = isLiteralKind;\n\n  function isTextualLiteralKind(kind) {\n    return kind === 9\n    /* StringLiteral */\n    || kind === 11\n    /* NoSubstitutionTemplateLiteral */\n    ;\n  }\n\n  ts.isTextualLiteralKind = isTextualLiteralKind;\n\n  function isTemplateLiteralKind(kind) {\n    return 11\n    /* FirstTemplateToken */\n    <= kind && kind <= 14\n    /* LastTemplateToken */\n    ;\n  }\n\n  ts.isTemplateLiteralKind = isTemplateLiteralKind;\n\n  function isBindingPattern(node) {\n    return !!node && (node.kind === 165\n    /* ArrayBindingPattern */\n    || node.kind === 164\n    /* ObjectBindingPattern */\n    );\n  }\n\n  ts.isBindingPattern = isBindingPattern;\n\n  function isNodeDescendentOf(node, ancestor) {\n    while (node) {\n      if (node === ancestor) return true;\n      node = node.parent;\n    }\n\n    return false;\n  }\n\n  ts.isNodeDescendentOf = isNodeDescendentOf;\n\n  function isInAmbientContext(node) {\n    while (node) {\n      if (node.flags & (4\n      /* Ambient */\n      | 4096\n      /* DeclarationFile */\n      )) {\n        return true;\n      }\n\n      node = node.parent;\n    }\n\n    return false;\n  }\n\n  ts.isInAmbientContext = isInAmbientContext;\n\n  function isDeclaration(node) {\n    switch (node.kind) {\n      case 177\n      /* ArrowFunction */\n      :\n      case 166\n      /* BindingElement */\n      :\n      case 217\n      /* ClassDeclaration */\n      :\n      case 189\n      /* ClassExpression */\n      :\n      case 145\n      /* Constructor */\n      :\n      case 220\n      /* EnumDeclaration */\n      :\n      case 250\n      /* EnumMember */\n      :\n      case 233\n      /* ExportSpecifier */\n      :\n      case 216\n      /* FunctionDeclaration */\n      :\n      case 176\n      /* FunctionExpression */\n      :\n      case 146\n      /* GetAccessor */\n      :\n      case 226\n      /* ImportClause */\n      :\n      case 224\n      /* ImportEqualsDeclaration */\n      :\n      case 229\n      /* ImportSpecifier */\n      :\n      case 218\n      /* InterfaceDeclaration */\n      :\n      case 144\n      /* MethodDeclaration */\n      :\n      case 143\n      /* MethodSignature */\n      :\n      case 221\n      /* ModuleDeclaration */\n      :\n      case 227\n      /* NamespaceImport */\n      :\n      case 139\n      /* Parameter */\n      :\n      case 248\n      /* PropertyAssignment */\n      :\n      case 142\n      /* PropertyDeclaration */\n      :\n      case 141\n      /* PropertySignature */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 249\n      /* ShorthandPropertyAssignment */\n      :\n      case 219\n      /* TypeAliasDeclaration */\n      :\n      case 138\n      /* TypeParameter */\n      :\n      case 214\n      /* VariableDeclaration */\n      :\n        return true;\n    }\n\n    return false;\n  }\n\n  ts.isDeclaration = isDeclaration;\n\n  function isStatement(n) {\n    switch (n.kind) {\n      case 206\n      /* BreakStatement */\n      :\n      case 205\n      /* ContinueStatement */\n      :\n      case 213\n      /* DebuggerStatement */\n      :\n      case 200\n      /* DoStatement */\n      :\n      case 198\n      /* ExpressionStatement */\n      :\n      case 197\n      /* EmptyStatement */\n      :\n      case 203\n      /* ForInStatement */\n      :\n      case 204\n      /* ForOfStatement */\n      :\n      case 202\n      /* ForStatement */\n      :\n      case 199\n      /* IfStatement */\n      :\n      case 210\n      /* LabeledStatement */\n      :\n      case 207\n      /* ReturnStatement */\n      :\n      case 209\n      /* SwitchStatement */\n      :\n      case 211\n      /* ThrowStatement */\n      :\n      case 212\n      /* TryStatement */\n      :\n      case 196\n      /* VariableStatement */\n      :\n      case 201\n      /* WhileStatement */\n      :\n      case 208\n      /* WithStatement */\n      :\n      case 230\n      /* ExportAssignment */\n      :\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  ts.isStatement = isStatement;\n\n  function isClassElement(n) {\n    switch (n.kind) {\n      case 145\n      /* Constructor */\n      :\n      case 142\n      /* PropertyDeclaration */\n      :\n      case 144\n      /* MethodDeclaration */\n      :\n      case 146\n      /* GetAccessor */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 143\n      /* MethodSignature */\n      :\n      case 150\n      /* IndexSignature */\n      :\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  ts.isClassElement = isClassElement; // True if the given identifier, string literal, or number literal is the name of a declaration node\n\n  function isDeclarationName(name) {\n    if (name.kind !== 69\n    /* Identifier */\n    && name.kind !== 9\n    /* StringLiteral */\n    && name.kind !== 8\n    /* NumericLiteral */\n    ) {\n        return false;\n      }\n\n    var parent = name.parent;\n\n    if (parent.kind === 229\n    /* ImportSpecifier */\n    || parent.kind === 233\n    /* ExportSpecifier */\n    ) {\n        if (parent.propertyName) {\n          return true;\n        }\n      }\n\n    if (isDeclaration(parent)) {\n      return parent.name === name;\n    }\n\n    return false;\n  }\n\n  ts.isDeclarationName = isDeclarationName; // Return true if the given identifier is classified as an IdentifierName\n\n  function isIdentifierName(node) {\n    var parent = node.parent;\n\n    switch (parent.kind) {\n      case 142\n      /* PropertyDeclaration */\n      :\n      case 141\n      /* PropertySignature */\n      :\n      case 144\n      /* MethodDeclaration */\n      :\n      case 143\n      /* MethodSignature */\n      :\n      case 146\n      /* GetAccessor */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 250\n      /* EnumMember */\n      :\n      case 248\n      /* PropertyAssignment */\n      :\n      case 169\n      /* PropertyAccessExpression */\n      :\n        // Name in member declaration or property name in property access\n        return parent.name === node;\n\n      case 136\n      /* QualifiedName */\n      :\n        // Name on right hand side of dot in a type query\n        if (parent.right === node) {\n          while (parent.kind === 136\n          /* QualifiedName */\n          ) {\n            parent = parent.parent;\n          }\n\n          return parent.kind === 155\n          /* TypeQuery */\n          ;\n        }\n\n        return false;\n\n      case 166\n      /* BindingElement */\n      :\n      case 229\n      /* ImportSpecifier */\n      :\n        // Property name in binding element or import specifier\n        return parent.propertyName === node;\n\n      case 233\n      /* ExportSpecifier */\n      :\n        // Any name in an export specifier\n        return true;\n    }\n\n    return false;\n  }\n\n  ts.isIdentifierName = isIdentifierName; // An alias symbol is created by one of the following declarations:\n  // import <symbol> = ...\n  // import <symbol> from ...\n  // import * as <symbol> from ...\n  // import { x as <symbol> } from ...\n  // export { x as <symbol> } from ...\n  // export = ...\n  // export default ...\n\n  function isAliasSymbolDeclaration(node) {\n    return node.kind === 224\n    /* ImportEqualsDeclaration */\n    || node.kind === 226\n    /* ImportClause */\n    && !!node.name || node.kind === 227\n    /* NamespaceImport */\n    || node.kind === 229\n    /* ImportSpecifier */\n    || node.kind === 233\n    /* ExportSpecifier */\n    || node.kind === 230\n    /* ExportAssignment */\n    && node.expression.kind === 69\n    /* Identifier */\n    ;\n  }\n\n  ts.isAliasSymbolDeclaration = isAliasSymbolDeclaration;\n\n  function getClassExtendsHeritageClauseElement(node) {\n    var heritageClause = getHeritageClause(node.heritageClauses, 83\n    /* ExtendsKeyword */\n    );\n    return heritageClause && heritageClause.types.length > 0 ? heritageClause.types[0] : undefined;\n  }\n\n  ts.getClassExtendsHeritageClauseElement = getClassExtendsHeritageClauseElement;\n\n  function getClassImplementsHeritageClauseElements(node) {\n    var heritageClause = getHeritageClause(node.heritageClauses, 106\n    /* ImplementsKeyword */\n    );\n    return heritageClause ? heritageClause.types : undefined;\n  }\n\n  ts.getClassImplementsHeritageClauseElements = getClassImplementsHeritageClauseElements;\n\n  function getInterfaceBaseTypeNodes(node) {\n    var heritageClause = getHeritageClause(node.heritageClauses, 83\n    /* ExtendsKeyword */\n    );\n    return heritageClause ? heritageClause.types : undefined;\n  }\n\n  ts.getInterfaceBaseTypeNodes = getInterfaceBaseTypeNodes;\n\n  function getHeritageClause(clauses, kind) {\n    if (clauses) {\n      for (var _i = 0, clauses_1 = clauses; _i < clauses_1.length; _i++) {\n        var clause = clauses_1[_i];\n\n        if (clause.token === kind) {\n          return clause;\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ts.getHeritageClause = getHeritageClause;\n\n  function tryResolveScriptReference(host, sourceFile, reference) {\n    if (!host.getCompilerOptions().noResolve) {\n      var referenceFileName = ts.isRootedDiskPath(reference.fileName) ? reference.fileName : ts.combinePaths(ts.getDirectoryPath(sourceFile.fileName), reference.fileName);\n      return host.getSourceFile(referenceFileName);\n    }\n  }\n\n  ts.tryResolveScriptReference = tryResolveScriptReference;\n\n  function getAncestor(node, kind) {\n    while (node) {\n      if (node.kind === kind) {\n        return node;\n      }\n\n      node = node.parent;\n    }\n\n    return undefined;\n  }\n\n  ts.getAncestor = getAncestor;\n\n  function getFileReferenceFromReferencePath(comment, commentRange) {\n    var simpleReferenceRegEx = /^\\/\\/\\/\\s*<reference\\s+/gim;\n    var isNoDefaultLibRegEx = /^(\\/\\/\\/\\s*<reference\\s+no-default-lib\\s*=\\s*)('|\")(.+?)\\2\\s*\\/>/gim;\n\n    if (simpleReferenceRegEx.test(comment)) {\n      if (isNoDefaultLibRegEx.test(comment)) {\n        return {\n          isNoDefaultLib: true\n        };\n      } else {\n        var matchResult = ts.fullTripleSlashReferencePathRegEx.exec(comment);\n\n        if (matchResult) {\n          var start = commentRange.pos;\n          var end = commentRange.end;\n          return {\n            fileReference: {\n              pos: start,\n              end: end,\n              fileName: matchResult[3]\n            },\n            isNoDefaultLib: false\n          };\n        } else {\n          return {\n            diagnosticMessage: ts.Diagnostics.Invalid_reference_directive_syntax,\n            isNoDefaultLib: false\n          };\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ts.getFileReferenceFromReferencePath = getFileReferenceFromReferencePath;\n\n  function isKeyword(token) {\n    return 70\n    /* FirstKeyword */\n    <= token && token <= 135\n    /* LastKeyword */\n    ;\n  }\n\n  ts.isKeyword = isKeyword;\n\n  function isTrivia(token) {\n    return 2\n    /* FirstTriviaToken */\n    <= token && token <= 7\n    /* LastTriviaToken */\n    ;\n  }\n\n  ts.isTrivia = isTrivia;\n\n  function isAsyncFunctionLike(node) {\n    return isFunctionLike(node) && (node.flags & 256\n    /* Async */\n    ) !== 0 && !isAccessor(node);\n  }\n\n  ts.isAsyncFunctionLike = isAsyncFunctionLike;\n\n  function isStringOrNumericLiteral(kind) {\n    return kind === 9\n    /* StringLiteral */\n    || kind === 8\n    /* NumericLiteral */\n    ;\n  }\n\n  ts.isStringOrNumericLiteral = isStringOrNumericLiteral;\n  /**\n   * A declaration has a dynamic name if both of the following are true:\n   *   1. The declaration has a computed property name\n   *   2. The computed name is *not* expressed as Symbol.<name>, where name\n   *      is a property of the Symbol constructor that denotes a built in\n   *      Symbol.\n   */\n\n  function hasDynamicName(declaration) {\n    return declaration.name && isDynamicName(declaration.name);\n  }\n\n  ts.hasDynamicName = hasDynamicName;\n\n  function isDynamicName(name) {\n    return name.kind === 137\n    /* ComputedPropertyName */\n    && !isStringOrNumericLiteral(name.expression.kind) && !isWellKnownSymbolSyntactically(name.expression);\n  }\n\n  ts.isDynamicName = isDynamicName;\n  /**\n   * Checks if the expression is of the form:\n   *    Symbol.name\n   * where Symbol is literally the word \"Symbol\", and name is any identifierName\n   */\n\n  function isWellKnownSymbolSyntactically(node) {\n    return isPropertyAccessExpression(node) && isESSymbolIdentifier(node.expression);\n  }\n\n  ts.isWellKnownSymbolSyntactically = isWellKnownSymbolSyntactically;\n\n  function getPropertyNameForPropertyNameNode(name) {\n    if (name.kind === 69\n    /* Identifier */\n    || name.kind === 9\n    /* StringLiteral */\n    || name.kind === 8\n    /* NumericLiteral */\n    ) {\n        return name.text;\n      }\n\n    if (name.kind === 137\n    /* ComputedPropertyName */\n    ) {\n        var nameExpression = name.expression;\n\n        if (isWellKnownSymbolSyntactically(nameExpression)) {\n          var rightHandSideName = nameExpression.name.text;\n          return getPropertyNameForKnownSymbolName(rightHandSideName);\n        }\n      }\n\n    return undefined;\n  }\n\n  ts.getPropertyNameForPropertyNameNode = getPropertyNameForPropertyNameNode;\n\n  function getPropertyNameForKnownSymbolName(symbolName) {\n    return \"__@\" + symbolName;\n  }\n\n  ts.getPropertyNameForKnownSymbolName = getPropertyNameForKnownSymbolName;\n  /**\n   * Includes the word \"Symbol\" with unicode escapes\n   */\n\n  function isESSymbolIdentifier(node) {\n    return node.kind === 69\n    /* Identifier */\n    && node.text === \"Symbol\";\n  }\n\n  ts.isESSymbolIdentifier = isESSymbolIdentifier;\n\n  function isModifierKind(token) {\n    switch (token) {\n      case 115\n      /* AbstractKeyword */\n      :\n      case 118\n      /* AsyncKeyword */\n      :\n      case 74\n      /* ConstKeyword */\n      :\n      case 122\n      /* DeclareKeyword */\n      :\n      case 77\n      /* DefaultKeyword */\n      :\n      case 82\n      /* ExportKeyword */\n      :\n      case 112\n      /* PublicKeyword */\n      :\n      case 110\n      /* PrivateKeyword */\n      :\n      case 111\n      /* ProtectedKeyword */\n      :\n      case 113\n      /* StaticKeyword */\n      :\n        return true;\n    }\n\n    return false;\n  }\n\n  ts.isModifierKind = isModifierKind;\n\n  function isParameterDeclaration(node) {\n    var root = getRootDeclaration(node);\n    return root.kind === 139\n    /* Parameter */\n    ;\n  }\n\n  ts.isParameterDeclaration = isParameterDeclaration;\n\n  function getRootDeclaration(node) {\n    while (node.kind === 166\n    /* BindingElement */\n    ) {\n      node = node.parent.parent;\n    }\n\n    return node;\n  }\n\n  ts.getRootDeclaration = getRootDeclaration;\n\n  function nodeStartsNewLexicalEnvironment(n) {\n    return isFunctionLike(n) || n.kind === 221\n    /* ModuleDeclaration */\n    || n.kind === 251\n    /* SourceFile */\n    ;\n  }\n\n  ts.nodeStartsNewLexicalEnvironment = nodeStartsNewLexicalEnvironment;\n  /**\n   * Creates a shallow, memberwise clone of a node. The \"kind\", \"pos\", \"end\", \"flags\", and \"parent\"\n   * properties are excluded by default, and can be provided via the \"location\", \"flags\", and\n   * \"parent\" parameters.\n   * @param node The node to clone.\n   * @param location An optional TextRange to use to supply the new position.\n   * @param flags The NodeFlags to use for the cloned node.\n   * @param parent The parent for the new node.\n   */\n\n  function cloneNode(node, location, flags, parent) {\n    // We don't use \"clone\" from core.ts here, as we need to preserve the prototype chain of\n    // the original node. We also need to exclude specific properties and only include own-\n    // properties (to skip members already defined on the shared prototype).\n    var clone = location !== undefined ? ts.createNode(node.kind, location.pos, location.end) : createSynthesizedNode(node.kind);\n\n    for (var key in node) {\n      if (clone.hasOwnProperty(key) || !node.hasOwnProperty(key)) {\n        continue;\n      }\n\n      clone[key] = node[key];\n    }\n\n    if (flags !== undefined) {\n      clone.flags = flags;\n    }\n\n    if (parent !== undefined) {\n      clone.parent = parent;\n    }\n\n    return clone;\n  }\n\n  ts.cloneNode = cloneNode;\n  /**\n   * Creates a deep clone of an EntityName, with new parent pointers.\n   * @param node The EntityName to clone.\n   * @param parent The parent for the cloned node.\n   */\n\n  function cloneEntityName(node, parent) {\n    var clone = cloneNode(node, node, node.flags, parent);\n\n    if (isQualifiedName(clone)) {\n      var left = clone.left,\n          right = clone.right;\n      clone.left = cloneEntityName(left, clone);\n      clone.right = cloneNode(right, right, right.flags, parent);\n    }\n\n    return clone;\n  }\n\n  ts.cloneEntityName = cloneEntityName;\n\n  function isQualifiedName(node) {\n    return node.kind === 136\n    /* QualifiedName */\n    ;\n  }\n\n  ts.isQualifiedName = isQualifiedName;\n\n  function nodeIsSynthesized(node) {\n    return node.pos === -1;\n  }\n\n  ts.nodeIsSynthesized = nodeIsSynthesized;\n\n  function createSynthesizedNode(kind, startsOnNewLine) {\n    var node = ts.createNode(kind,\n    /* pos */\n    -1,\n    /* end */\n    -1);\n    node.startsOnNewLine = startsOnNewLine;\n    return node;\n  }\n\n  ts.createSynthesizedNode = createSynthesizedNode;\n\n  function createSynthesizedNodeArray() {\n    var array = [];\n    array.pos = -1;\n    array.end = -1;\n    return array;\n  }\n\n  ts.createSynthesizedNodeArray = createSynthesizedNodeArray;\n\n  function createDiagnosticCollection() {\n    var nonFileDiagnostics = [];\n    var fileDiagnostics = {};\n    var diagnosticsModified = false;\n    var modificationCount = 0;\n    return {\n      add: add,\n      getGlobalDiagnostics: getGlobalDiagnostics,\n      getDiagnostics: getDiagnostics,\n      getModificationCount: getModificationCount,\n      reattachFileDiagnostics: reattachFileDiagnostics\n    };\n\n    function getModificationCount() {\n      return modificationCount;\n    }\n\n    function reattachFileDiagnostics(newFile) {\n      if (!ts.hasProperty(fileDiagnostics, newFile.fileName)) {\n        return;\n      }\n\n      for (var _i = 0, _a = fileDiagnostics[newFile.fileName]; _i < _a.length; _i++) {\n        var diagnostic = _a[_i];\n        diagnostic.file = newFile;\n      }\n    }\n\n    function add(diagnostic) {\n      var diagnostics;\n\n      if (diagnostic.file) {\n        diagnostics = fileDiagnostics[diagnostic.file.fileName];\n\n        if (!diagnostics) {\n          diagnostics = [];\n          fileDiagnostics[diagnostic.file.fileName] = diagnostics;\n        }\n      } else {\n        diagnostics = nonFileDiagnostics;\n      }\n\n      diagnostics.push(diagnostic);\n      diagnosticsModified = true;\n      modificationCount++;\n    }\n\n    function getGlobalDiagnostics() {\n      sortAndDeduplicate();\n      return nonFileDiagnostics;\n    }\n\n    function getDiagnostics(fileName) {\n      sortAndDeduplicate();\n\n      if (fileName) {\n        return fileDiagnostics[fileName] || [];\n      }\n\n      var allDiagnostics = [];\n\n      function pushDiagnostic(d) {\n        allDiagnostics.push(d);\n      }\n\n      ts.forEach(nonFileDiagnostics, pushDiagnostic);\n\n      for (var key in fileDiagnostics) {\n        if (ts.hasProperty(fileDiagnostics, key)) {\n          ts.forEach(fileDiagnostics[key], pushDiagnostic);\n        }\n      }\n\n      return ts.sortAndDeduplicateDiagnostics(allDiagnostics);\n    }\n\n    function sortAndDeduplicate() {\n      if (!diagnosticsModified) {\n        return;\n      }\n\n      diagnosticsModified = false;\n      nonFileDiagnostics = ts.sortAndDeduplicateDiagnostics(nonFileDiagnostics);\n\n      for (var key in fileDiagnostics) {\n        if (ts.hasProperty(fileDiagnostics, key)) {\n          fileDiagnostics[key] = ts.sortAndDeduplicateDiagnostics(fileDiagnostics[key]);\n        }\n      }\n    }\n  }\n\n  ts.createDiagnosticCollection = createDiagnosticCollection; // This consists of the first 19 unprintable ASCII characters, canonical escapes, lineSeparator,\n  // paragraphSeparator, and nextLine. The latter three are just desirable to suppress new lines in\n  // the language service. These characters should be escaped when printing, and if any characters are added,\n  // the map below must be updated. Note that this regexp *does not* include the 'delete' character.\n  // There is no reason for this other than that JSON.stringify does not handle it either.\n\n  var escapedCharsRegExp = /[\\\\\\\"\\u0000-\\u001f\\t\\v\\f\\b\\r\\n\\u2028\\u2029\\u0085]/g;\n  var escapedCharsMap = {\n    \"\\0\": \"\\\\0\",\n    \"\\t\": \"\\\\t\",\n    \"\\v\": \"\\\\v\",\n    \"\\f\": \"\\\\f\",\n    \"\\b\": \"\\\\b\",\n    \"\\r\": \"\\\\r\",\n    \"\\n\": \"\\\\n\",\n    \"\\\\\": \"\\\\\\\\\",\n    \"\\\"\": \"\\\\\\\"\",\n    \"\\u2028\": \"\\\\u2028\",\n    \"\\u2029\": \"\\\\u2029\",\n    \"\\x85\": \"\\\\u0085\" // nextLine\n\n  };\n  /**\n   * Based heavily on the abstract 'Quote'/'QuoteJSONString' operation from ECMA-262 (24.3.2.2),\n   * but augmented for a few select characters (e.g. lineSeparator, paragraphSeparator, nextLine)\n   * Note that this doesn't actually wrap the input in double quotes.\n   */\n\n  function escapeString(s) {\n    s = escapedCharsRegExp.test(s) ? s.replace(escapedCharsRegExp, getReplacement) : s;\n    return s;\n\n    function getReplacement(c) {\n      return escapedCharsMap[c] || get16BitUnicodeEscapeSequence(c.charCodeAt(0));\n    }\n  }\n\n  ts.escapeString = escapeString;\n\n  function isIntrinsicJsxName(name) {\n    var ch = name.substr(0, 1);\n    return ch.toLowerCase() === ch;\n  }\n\n  ts.isIntrinsicJsxName = isIntrinsicJsxName;\n\n  function get16BitUnicodeEscapeSequence(charCode) {\n    var hexCharCode = charCode.toString(16).toUpperCase();\n    var paddedHexCode = (\"0000\" + hexCharCode).slice(-4);\n    return \"\\\\u\" + paddedHexCode;\n  }\n\n  var nonAsciiCharacters = /[^\\u0000-\\u007F]/g;\n\n  function escapeNonAsciiCharacters(s) {\n    // Replace non-ASCII characters with '\\uNNNN' escapes if any exist.\n    // Otherwise just return the original string.\n    return nonAsciiCharacters.test(s) ? s.replace(nonAsciiCharacters, function (c) {\n      return get16BitUnicodeEscapeSequence(c.charCodeAt(0));\n    }) : s;\n  }\n\n  ts.escapeNonAsciiCharacters = escapeNonAsciiCharacters;\n  var indentStrings = [\"\", \"    \"];\n\n  function getIndentString(level) {\n    if (indentStrings[level] === undefined) {\n      indentStrings[level] = getIndentString(level - 1) + indentStrings[1];\n    }\n\n    return indentStrings[level];\n  }\n\n  ts.getIndentString = getIndentString;\n\n  function getIndentSize() {\n    return indentStrings[1].length;\n  }\n\n  ts.getIndentSize = getIndentSize;\n\n  function createTextWriter(newLine) {\n    var output;\n    var indent;\n    var lineStart;\n    var lineCount;\n    var linePos;\n\n    function write(s) {\n      if (s && s.length) {\n        if (lineStart) {\n          output += getIndentString(indent);\n          lineStart = false;\n        }\n\n        output += s;\n      }\n    }\n\n    function reset() {\n      output = \"\";\n      indent = 0;\n      lineStart = true;\n      lineCount = 0;\n      linePos = 0;\n    }\n\n    function rawWrite(s) {\n      if (s !== undefined) {\n        if (lineStart) {\n          lineStart = false;\n        }\n\n        output += s;\n      }\n    }\n\n    function writeLiteral(s) {\n      if (s && s.length) {\n        write(s);\n        var lineStartsOfS = ts.computeLineStarts(s);\n\n        if (lineStartsOfS.length > 1) {\n          lineCount = lineCount + lineStartsOfS.length - 1;\n          linePos = output.length - s.length + ts.lastOrUndefined(lineStartsOfS);\n        }\n      }\n    }\n\n    function writeLine() {\n      if (!lineStart) {\n        output += newLine;\n        lineCount++;\n        linePos = output.length;\n        lineStart = true;\n      }\n    }\n\n    function writeTextOfNode(text, node) {\n      write(getTextOfNodeFromSourceText(text, node));\n    }\n\n    reset();\n    return {\n      write: write,\n      rawWrite: rawWrite,\n      writeTextOfNode: writeTextOfNode,\n      writeLiteral: writeLiteral,\n      writeLine: writeLine,\n      increaseIndent: function increaseIndent() {\n        indent++;\n      },\n      decreaseIndent: function decreaseIndent() {\n        indent--;\n      },\n      getIndent: function getIndent() {\n        return indent;\n      },\n      getTextPos: function getTextPos() {\n        return output.length;\n      },\n      getLine: function getLine() {\n        return lineCount + 1;\n      },\n      getColumn: function getColumn() {\n        return lineStart ? indent * getIndentSize() + 1 : output.length - linePos + 1;\n      },\n      getText: function getText() {\n        return output;\n      },\n      reset: reset\n    };\n  }\n\n  ts.createTextWriter = createTextWriter;\n  /**\n   * Resolves a local path to a path which is absolute to the base of the emit\n   */\n\n  function getExternalModuleNameFromPath(host, fileName) {\n    var getCanonicalFileName = function getCanonicalFileName(f) {\n      return host.getCanonicalFileName(f);\n    };\n\n    var dir = ts.toPath(host.getCommonSourceDirectory(), host.getCurrentDirectory(), getCanonicalFileName);\n    var filePath = ts.getNormalizedAbsolutePath(fileName, host.getCurrentDirectory());\n    var relativePath = ts.getRelativePathToDirectoryOrUrl(dir, filePath, dir, getCanonicalFileName,\n    /*isAbsolutePathAnUrl*/\n    false);\n    return ts.removeFileExtension(relativePath);\n  }\n\n  ts.getExternalModuleNameFromPath = getExternalModuleNameFromPath;\n\n  function getOwnEmitOutputFilePath(sourceFile, host, extension) {\n    var compilerOptions = host.getCompilerOptions();\n    var emitOutputFilePathWithoutExtension;\n\n    if (compilerOptions.outDir) {\n      emitOutputFilePathWithoutExtension = ts.removeFileExtension(getSourceFilePathInNewDir(sourceFile, host, compilerOptions.outDir));\n    } else {\n      emitOutputFilePathWithoutExtension = ts.removeFileExtension(sourceFile.fileName);\n    }\n\n    return emitOutputFilePathWithoutExtension + extension;\n  }\n\n  ts.getOwnEmitOutputFilePath = getOwnEmitOutputFilePath;\n\n  function getEmitScriptTarget(compilerOptions) {\n    return compilerOptions.target || 0\n    /* ES3 */\n    ;\n  }\n\n  ts.getEmitScriptTarget = getEmitScriptTarget;\n\n  function getEmitModuleKind(compilerOptions) {\n    return typeof compilerOptions.module === \"number\" ? compilerOptions.module : getEmitScriptTarget(compilerOptions) === 2\n    /* ES6 */\n    ? 5\n    /* ES6 */\n    : 1\n    /* CommonJS */\n    ;\n  }\n\n  ts.getEmitModuleKind = getEmitModuleKind;\n\n  function forEachExpectedEmitFile(host, action, targetSourceFile) {\n    var options = host.getCompilerOptions(); // Emit on each source file\n\n    if (options.outFile || options.out) {\n      onBundledEmit(host);\n    } else {\n      var sourceFiles = targetSourceFile === undefined ? host.getSourceFiles() : [targetSourceFile];\n\n      for (var _i = 0, sourceFiles_1 = sourceFiles; _i < sourceFiles_1.length; _i++) {\n        var sourceFile = sourceFiles_1[_i];\n\n        if (!isDeclarationFile(sourceFile)) {\n          onSingleFileEmit(host, sourceFile);\n        }\n      }\n    }\n\n    function onSingleFileEmit(host, sourceFile) {\n      // JavaScript files are always LanguageVariant.JSX, as JSX syntax is allowed in .js files also.\n      // So for JavaScript files, '.jsx' is only emitted if the input was '.jsx', and JsxEmit.Preserve.\n      // For TypeScript, the only time to emit with a '.jsx' extension, is on JSX input, and JsxEmit.Preserve\n      var extension = \".js\";\n\n      if (options.jsx === 1\n      /* Preserve */\n      ) {\n          if (isSourceFileJavaScript(sourceFile)) {\n            if (ts.fileExtensionIs(sourceFile.fileName, \".jsx\")) {\n              extension = \".jsx\";\n            }\n          } else if (sourceFile.languageVariant === 1\n          /* JSX */\n          ) {\n              // TypeScript source file preserving JSX syntax\n              extension = \".jsx\";\n            }\n        }\n\n      var jsFilePath = getOwnEmitOutputFilePath(sourceFile, host, extension);\n      var emitFileNames = {\n        jsFilePath: jsFilePath,\n        sourceMapFilePath: getSourceMapFilePath(jsFilePath, options),\n        declarationFilePath: !isSourceFileJavaScript(sourceFile) ? getDeclarationEmitFilePath(jsFilePath, options) : undefined\n      };\n      action(emitFileNames, [sourceFile],\n      /*isBundledEmit*/\n      false);\n    }\n\n    function onBundledEmit(host) {\n      // Can emit only sources that are not declaration file and are either non module code or module with --module or --target es6 specified\n      var bundledSources = ts.filter(host.getSourceFiles(), function (sourceFile) {\n        return !isDeclarationFile(sourceFile) && (!isExternalModule(sourceFile) || getEmitModuleKind(options) && isExternalModule(sourceFile));\n      }); // module that can emit - note falsy value from getEmitModuleKind means the module kind that shouldn't be emitted\n\n      if (bundledSources.length) {\n        var jsFilePath = options.outFile || options.out;\n        var emitFileNames = {\n          jsFilePath: jsFilePath,\n          sourceMapFilePath: getSourceMapFilePath(jsFilePath, options),\n          declarationFilePath: getDeclarationEmitFilePath(jsFilePath, options)\n        };\n        action(emitFileNames, bundledSources,\n        /*isBundledEmit*/\n        true);\n      }\n    }\n\n    function getSourceMapFilePath(jsFilePath, options) {\n      return options.sourceMap ? jsFilePath + \".map\" : undefined;\n    }\n\n    function getDeclarationEmitFilePath(jsFilePath, options) {\n      return options.declaration ? ts.removeFileExtension(jsFilePath) + \".d.ts\" : undefined;\n    }\n  }\n\n  ts.forEachExpectedEmitFile = forEachExpectedEmitFile;\n\n  function getSourceFilePathInNewDir(sourceFile, host, newDirPath) {\n    var sourceFilePath = ts.getNormalizedAbsolutePath(sourceFile.fileName, host.getCurrentDirectory());\n    sourceFilePath = sourceFilePath.replace(host.getCommonSourceDirectory(), \"\");\n    return ts.combinePaths(newDirPath, sourceFilePath);\n  }\n\n  ts.getSourceFilePathInNewDir = getSourceFilePathInNewDir;\n\n  function writeFile(host, diagnostics, fileName, data, writeByteOrderMark) {\n    host.writeFile(fileName, data, writeByteOrderMark, function (hostErrorMessage) {\n      diagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Could_not_write_file_0_Colon_1, fileName, hostErrorMessage));\n    });\n  }\n\n  ts.writeFile = writeFile;\n\n  function getLineOfLocalPosition(currentSourceFile, pos) {\n    return ts.getLineAndCharacterOfPosition(currentSourceFile, pos).line;\n  }\n\n  ts.getLineOfLocalPosition = getLineOfLocalPosition;\n\n  function getLineOfLocalPositionFromLineMap(lineMap, pos) {\n    return ts.computeLineAndCharacterOfPosition(lineMap, pos).line;\n  }\n\n  ts.getLineOfLocalPositionFromLineMap = getLineOfLocalPositionFromLineMap;\n\n  function getFirstConstructorWithBody(node) {\n    return ts.forEach(node.members, function (member) {\n      if (member.kind === 145\n      /* Constructor */\n      && nodeIsPresent(member.body)) {\n        return member;\n      }\n    });\n  }\n\n  ts.getFirstConstructorWithBody = getFirstConstructorWithBody;\n\n  function getSetAccessorTypeAnnotationNode(accessor) {\n    return accessor && accessor.parameters.length > 0 && accessor.parameters[0].type;\n  }\n\n  ts.getSetAccessorTypeAnnotationNode = getSetAccessorTypeAnnotationNode;\n\n  function getAllAccessorDeclarations(declarations, accessor) {\n    var firstAccessor;\n    var secondAccessor;\n    var getAccessor;\n    var setAccessor;\n\n    if (hasDynamicName(accessor)) {\n      firstAccessor = accessor;\n\n      if (accessor.kind === 146\n      /* GetAccessor */\n      ) {\n          getAccessor = accessor;\n        } else if (accessor.kind === 147\n      /* SetAccessor */\n      ) {\n          setAccessor = accessor;\n        } else {\n        ts.Debug.fail(\"Accessor has wrong kind\");\n      }\n    } else {\n      ts.forEach(declarations, function (member) {\n        if ((member.kind === 146\n        /* GetAccessor */\n        || member.kind === 147\n        /* SetAccessor */\n        ) && (member.flags & 64\n        /* Static */\n        ) === (accessor.flags & 64\n        /* Static */\n        )) {\n          var memberName = getPropertyNameForPropertyNameNode(member.name);\n          var accessorName = getPropertyNameForPropertyNameNode(accessor.name);\n\n          if (memberName === accessorName) {\n            if (!firstAccessor) {\n              firstAccessor = member;\n            } else if (!secondAccessor) {\n              secondAccessor = member;\n            }\n\n            if (member.kind === 146\n            /* GetAccessor */\n            && !getAccessor) {\n              getAccessor = member;\n            }\n\n            if (member.kind === 147\n            /* SetAccessor */\n            && !setAccessor) {\n              setAccessor = member;\n            }\n          }\n        }\n      });\n    }\n\n    return {\n      firstAccessor: firstAccessor,\n      secondAccessor: secondAccessor,\n      getAccessor: getAccessor,\n      setAccessor: setAccessor\n    };\n  }\n\n  ts.getAllAccessorDeclarations = getAllAccessorDeclarations;\n\n  function emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments) {\n    // If the leading comments start on different line than the start of node, write new line\n    if (leadingComments && leadingComments.length && node.pos !== leadingComments[0].pos && getLineOfLocalPositionFromLineMap(lineMap, node.pos) !== getLineOfLocalPositionFromLineMap(lineMap, leadingComments[0].pos)) {\n      writer.writeLine();\n    }\n  }\n\n  ts.emitNewLineBeforeLeadingComments = emitNewLineBeforeLeadingComments;\n\n  function emitComments(text, lineMap, writer, comments, trailingSeparator, newLine, writeComment) {\n    var emitLeadingSpace = !trailingSeparator;\n    ts.forEach(comments, function (comment) {\n      if (emitLeadingSpace) {\n        writer.write(\" \");\n        emitLeadingSpace = false;\n      }\n\n      writeComment(text, lineMap, writer, comment, newLine);\n\n      if (comment.hasTrailingNewLine) {\n        writer.writeLine();\n      } else if (trailingSeparator) {\n        writer.write(\" \");\n      } else {\n        // Emit leading space to separate comment during next comment emit\n        emitLeadingSpace = true;\n      }\n    });\n  }\n\n  ts.emitComments = emitComments;\n  /**\n   * Detached comment is a comment at the top of file or function body that is separated from\n   * the next statement by space.\n   */\n\n  function emitDetachedComments(text, lineMap, writer, writeComment, node, newLine, removeComments) {\n    var leadingComments;\n    var currentDetachedCommentInfo;\n\n    if (removeComments) {\n      // removeComments is true, only reserve pinned comment at the top of file\n      // For example:\n      //      /*! Pinned Comment */\n      //\n      //      var x = 10;\n      if (node.pos === 0) {\n        leadingComments = ts.filter(ts.getLeadingCommentRanges(text, node.pos), isPinnedComment);\n      }\n    } else {\n      // removeComments is false, just get detached as normal and bypass the process to filter comment\n      leadingComments = ts.getLeadingCommentRanges(text, node.pos);\n    }\n\n    if (leadingComments) {\n      var detachedComments = [];\n      var lastComment = void 0;\n\n      for (var _i = 0, leadingComments_1 = leadingComments; _i < leadingComments_1.length; _i++) {\n        var comment = leadingComments_1[_i];\n\n        if (lastComment) {\n          var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, lastComment.end);\n          var commentLine = getLineOfLocalPositionFromLineMap(lineMap, comment.pos);\n\n          if (commentLine >= lastCommentLine + 2) {\n            // There was a blank line between the last comment and this comment.  This\n            // comment is not part of the copyright comments.  Return what we have so\n            // far.\n            break;\n          }\n        }\n\n        detachedComments.push(comment);\n        lastComment = comment;\n      }\n\n      if (detachedComments.length) {\n        // All comments look like they could have been part of the copyright header.  Make\n        // sure there is at least one blank line between it and the node.  If not, it's not\n        // a copyright header.\n        var lastCommentLine = getLineOfLocalPositionFromLineMap(lineMap, ts.lastOrUndefined(detachedComments).end);\n        var nodeLine = getLineOfLocalPositionFromLineMap(lineMap, ts.skipTrivia(text, node.pos));\n\n        if (nodeLine >= lastCommentLine + 2) {\n          // Valid detachedComments\n          emitNewLineBeforeLeadingComments(lineMap, writer, node, leadingComments);\n          emitComments(text, lineMap, writer, detachedComments,\n          /*trailingSeparator*/\n          true, newLine, writeComment);\n          currentDetachedCommentInfo = {\n            nodePos: node.pos,\n            detachedCommentEndPos: ts.lastOrUndefined(detachedComments).end\n          };\n        }\n      }\n    }\n\n    return currentDetachedCommentInfo;\n\n    function isPinnedComment(comment) {\n      return text.charCodeAt(comment.pos + 1) === 42\n      /* asterisk */\n      && text.charCodeAt(comment.pos + 2) === 33\n      /* exclamation */\n      ;\n    }\n  }\n\n  ts.emitDetachedComments = emitDetachedComments;\n\n  function writeCommentRange(text, lineMap, writer, comment, newLine) {\n    if (text.charCodeAt(comment.pos + 1) === 42\n    /* asterisk */\n    ) {\n        var firstCommentLineAndCharacter = ts.computeLineAndCharacterOfPosition(lineMap, comment.pos);\n        var lineCount = lineMap.length;\n        var firstCommentLineIndent = void 0;\n\n        for (var pos = comment.pos, currentLine = firstCommentLineAndCharacter.line; pos < comment.end; currentLine++) {\n          var nextLineStart = currentLine + 1 === lineCount ? text.length + 1 : lineMap[currentLine + 1];\n\n          if (pos !== comment.pos) {\n            // If we are not emitting first line, we need to write the spaces to adjust the alignment\n            if (firstCommentLineIndent === undefined) {\n              firstCommentLineIndent = calculateIndent(text, lineMap[firstCommentLineAndCharacter.line], comment.pos);\n            } // These are number of spaces writer is going to write at current indent\n\n\n            var currentWriterIndentSpacing = writer.getIndent() * getIndentSize(); // Number of spaces we want to be writing\n            // eg: Assume writer indent\n            // module m {\n            //         /* starts at character 9 this is line 1\n            //    * starts at character pos 4 line                        --1  = 8 - 8 + 3\n            //   More left indented comment */                            --2  = 8 - 8 + 2\n            //     class c { }\n            // }\n            // module m {\n            //     /* this is line 1 -- Assume current writer indent 8\n            //      * line                                                --3 = 8 - 4 + 5\n            //            More right indented comment */                  --4 = 8 - 4 + 11\n            //     class c { }\n            // }\n\n            var spacesToEmit = currentWriterIndentSpacing - firstCommentLineIndent + calculateIndent(text, pos, nextLineStart);\n\n            if (spacesToEmit > 0) {\n              var numberOfSingleSpacesToEmit = spacesToEmit % getIndentSize();\n              var indentSizeSpaceString = getIndentString((spacesToEmit - numberOfSingleSpacesToEmit) / getIndentSize()); // Write indent size string ( in eg 1: = \"\", 2: \"\" , 3: string with 8 spaces 4: string with 12 spaces\n\n              writer.rawWrite(indentSizeSpaceString); // Emit the single spaces (in eg: 1: 3 spaces, 2: 2 spaces, 3: 1 space, 4: 3 spaces)\n\n              while (numberOfSingleSpacesToEmit) {\n                writer.rawWrite(\" \");\n                numberOfSingleSpacesToEmit--;\n              }\n            } else {\n              // No spaces to emit write empty string\n              writer.rawWrite(\"\");\n            }\n          } // Write the comment line text\n\n\n          writeTrimmedCurrentLine(text, comment, writer, newLine, pos, nextLineStart);\n          pos = nextLineStart;\n        }\n      } else {\n      // Single line comment of style //....\n      writer.write(text.substring(comment.pos, comment.end));\n    }\n  }\n\n  ts.writeCommentRange = writeCommentRange;\n\n  function writeTrimmedCurrentLine(text, comment, writer, newLine, pos, nextLineStart) {\n    var end = Math.min(comment.end, nextLineStart - 1);\n    var currentLineText = text.substring(pos, end).replace(/^\\s+|\\s+$/g, \"\");\n\n    if (currentLineText) {\n      // trimmed forward and ending spaces text\n      writer.write(currentLineText);\n\n      if (end !== comment.end) {\n        writer.writeLine();\n      }\n    } else {\n      // Empty string - make sure we write empty line\n      writer.writeLiteral(newLine);\n    }\n  }\n\n  function calculateIndent(text, pos, end) {\n    var currentLineIndent = 0;\n\n    for (; pos < end && ts.isWhiteSpace(text.charCodeAt(pos)); pos++) {\n      if (text.charCodeAt(pos) === 9\n      /* tab */\n      ) {\n          // Tabs = TabSize = indent size and go to next tabStop\n          currentLineIndent += getIndentSize() - currentLineIndent % getIndentSize();\n        } else {\n        // Single space\n        currentLineIndent++;\n      }\n    }\n\n    return currentLineIndent;\n  }\n\n  function modifierToFlag(token) {\n    switch (token) {\n      case 113\n      /* StaticKeyword */\n      :\n        return 64\n        /* Static */\n        ;\n\n      case 112\n      /* PublicKeyword */\n      :\n        return 8\n        /* Public */\n        ;\n\n      case 111\n      /* ProtectedKeyword */\n      :\n        return 32\n        /* Protected */\n        ;\n\n      case 110\n      /* PrivateKeyword */\n      :\n        return 16\n        /* Private */\n        ;\n\n      case 115\n      /* AbstractKeyword */\n      :\n        return 128\n        /* Abstract */\n        ;\n\n      case 82\n      /* ExportKeyword */\n      :\n        return 2\n        /* Export */\n        ;\n\n      case 122\n      /* DeclareKeyword */\n      :\n        return 4\n        /* Ambient */\n        ;\n\n      case 74\n      /* ConstKeyword */\n      :\n        return 16384\n        /* Const */\n        ;\n\n      case 77\n      /* DefaultKeyword */\n      :\n        return 512\n        /* Default */\n        ;\n\n      case 118\n      /* AsyncKeyword */\n      :\n        return 256\n        /* Async */\n        ;\n    }\n\n    return 0;\n  }\n\n  ts.modifierToFlag = modifierToFlag;\n\n  function isLeftHandSideExpression(expr) {\n    if (expr) {\n      switch (expr.kind) {\n        case 169\n        /* PropertyAccessExpression */\n        :\n        case 170\n        /* ElementAccessExpression */\n        :\n        case 172\n        /* NewExpression */\n        :\n        case 171\n        /* CallExpression */\n        :\n        case 236\n        /* JsxElement */\n        :\n        case 237\n        /* JsxSelfClosingElement */\n        :\n        case 173\n        /* TaggedTemplateExpression */\n        :\n        case 167\n        /* ArrayLiteralExpression */\n        :\n        case 175\n        /* ParenthesizedExpression */\n        :\n        case 168\n        /* ObjectLiteralExpression */\n        :\n        case 189\n        /* ClassExpression */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 69\n        /* Identifier */\n        :\n        case 10\n        /* RegularExpressionLiteral */\n        :\n        case 8\n        /* NumericLiteral */\n        :\n        case 9\n        /* StringLiteral */\n        :\n        case 11\n        /* NoSubstitutionTemplateLiteral */\n        :\n        case 186\n        /* TemplateExpression */\n        :\n        case 84\n        /* FalseKeyword */\n        :\n        case 93\n        /* NullKeyword */\n        :\n        case 97\n        /* ThisKeyword */\n        :\n        case 99\n        /* TrueKeyword */\n        :\n        case 95\n        /* SuperKeyword */\n        :\n          return true;\n      }\n    }\n\n    return false;\n  }\n\n  ts.isLeftHandSideExpression = isLeftHandSideExpression;\n\n  function isAssignmentOperator(token) {\n    return token >= 56\n    /* FirstAssignment */\n    && token <= 68\n    /* LastAssignment */\n    ;\n  }\n\n  ts.isAssignmentOperator = isAssignmentOperator;\n\n  function isExpressionWithTypeArgumentsInClassExtendsClause(node) {\n    return node.kind === 191\n    /* ExpressionWithTypeArguments */\n    && node.parent.token === 83\n    /* ExtendsKeyword */\n    && isClassLike(node.parent.parent);\n  }\n\n  ts.isExpressionWithTypeArgumentsInClassExtendsClause = isExpressionWithTypeArgumentsInClassExtendsClause; // Returns false if this heritage clause element's expression contains something unsupported\n  // (i.e. not a name or dotted name).\n\n  function isSupportedExpressionWithTypeArguments(node) {\n    return isSupportedExpressionWithTypeArgumentsRest(node.expression);\n  }\n\n  ts.isSupportedExpressionWithTypeArguments = isSupportedExpressionWithTypeArguments;\n\n  function isSupportedExpressionWithTypeArgumentsRest(node) {\n    if (node.kind === 69\n    /* Identifier */\n    ) {\n        return true;\n      } else if (isPropertyAccessExpression(node)) {\n      return isSupportedExpressionWithTypeArgumentsRest(node.expression);\n    } else {\n      return false;\n    }\n  }\n\n  function isRightSideOfQualifiedNameOrPropertyAccess(node) {\n    return node.parent.kind === 136\n    /* QualifiedName */\n    && node.parent.right === node || node.parent.kind === 169\n    /* PropertyAccessExpression */\n    && node.parent.name === node;\n  }\n\n  ts.isRightSideOfQualifiedNameOrPropertyAccess = isRightSideOfQualifiedNameOrPropertyAccess;\n\n  function isEmptyObjectLiteralOrArrayLiteral(expression) {\n    var kind = expression.kind;\n\n    if (kind === 168\n    /* ObjectLiteralExpression */\n    ) {\n        return expression.properties.length === 0;\n      }\n\n    if (kind === 167\n    /* ArrayLiteralExpression */\n    ) {\n        return expression.elements.length === 0;\n      }\n\n    return false;\n  }\n\n  ts.isEmptyObjectLiteralOrArrayLiteral = isEmptyObjectLiteralOrArrayLiteral;\n\n  function getLocalSymbolForExportDefault(symbol) {\n    return symbol && symbol.valueDeclaration && symbol.valueDeclaration.flags & 512\n    /* Default */\n    ? symbol.valueDeclaration.localSymbol : undefined;\n  }\n\n  ts.getLocalSymbolForExportDefault = getLocalSymbolForExportDefault;\n\n  function hasJavaScriptFileExtension(fileName) {\n    return ts.forEach(ts.supportedJavascriptExtensions, function (extension) {\n      return ts.fileExtensionIs(fileName, extension);\n    });\n  }\n\n  ts.hasJavaScriptFileExtension = hasJavaScriptFileExtension;\n\n  function hasTypeScriptFileExtension(fileName) {\n    return ts.forEach(ts.supportedTypeScriptExtensions, function (extension) {\n      return ts.fileExtensionIs(fileName, extension);\n    });\n  }\n\n  ts.hasTypeScriptFileExtension = hasTypeScriptFileExtension;\n  /**\n   * Replace each instance of non-ascii characters by one, two, three, or four escape sequences\n   * representing the UTF-8 encoding of the character, and return the expanded char code list.\n   */\n\n  function getExpandedCharCodes(input) {\n    var output = [];\n    var length = input.length;\n\n    for (var i = 0; i < length; i++) {\n      var charCode = input.charCodeAt(i); // handel utf8\n\n      if (charCode < 0x80) {\n        output.push(charCode);\n      } else if (charCode < 0x800) {\n        output.push(charCode >> 6 | 192);\n        output.push(charCode & 63 | 128);\n      } else if (charCode < 0x10000) {\n        output.push(charCode >> 12 | 224);\n        output.push(charCode >> 6 & 63 | 128);\n        output.push(charCode & 63 | 128);\n      } else if (charCode < 0x20000) {\n        output.push(charCode >> 18 | 240);\n        output.push(charCode >> 12 & 63 | 128);\n        output.push(charCode >> 6 & 63 | 128);\n        output.push(charCode & 63 | 128);\n      } else {\n        ts.Debug.assert(false, \"Unexpected code point\");\n      }\n    }\n\n    return output;\n  }\n  /**\n   * Serialize an object graph into a JSON string. This is intended only for use on an acyclic graph\n   * as the fallback implementation does not check for circular references by default.\n   */\n\n\n  ts.stringify = typeof JSON !== \"undefined\" && JSON.stringify ? JSON.stringify : stringifyFallback;\n  /**\n   * Serialize an object graph into a JSON string.\n   */\n\n  function stringifyFallback(value) {\n    // JSON.stringify returns `undefined` here, instead of the string \"undefined\".\n    return value === undefined ? undefined : stringifyValue(value);\n  }\n\n  function stringifyValue(value) {\n    return typeof value === \"string\" ? \"\\\"\" + escapeString(value) + \"\\\"\" : typeof value === \"number\" ? isFinite(value) ? String(value) : \"null\" : typeof value === \"boolean\" ? value ? \"true\" : \"false\" : typeof value === \"object\" && value ? ts.isArray(value) ? cycleCheck(stringifyArray, value) : cycleCheck(stringifyObject, value) : \"null\";\n  }\n\n  function cycleCheck(cb, value) {\n    ts.Debug.assert(!value.hasOwnProperty(\"__cycle\"), \"Converting circular structure to JSON\");\n    value.__cycle = true;\n    var result = cb(value);\n    delete value.__cycle;\n    return result;\n  }\n\n  function stringifyArray(value) {\n    return \"[\" + ts.reduceLeft(value, stringifyElement, \"\") + \"]\";\n  }\n\n  function stringifyElement(memo, value) {\n    return (memo ? memo + \",\" : memo) + stringifyValue(value);\n  }\n\n  function stringifyObject(value) {\n    return \"{\" + ts.reduceProperties(value, stringifyProperty, \"\") + \"}\";\n  }\n\n  function stringifyProperty(memo, value, key) {\n    return value === undefined || typeof value === \"function\" || key === \"__cycle\" ? memo : (memo ? memo + \",\" : memo) + (\"\\\"\" + escapeString(key) + \"\\\":\" + stringifyValue(value));\n  }\n\n  var base64Digits = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n  /**\n   * Converts a string to a base-64 encoded ASCII string.\n   */\n\n  function convertToBase64(input) {\n    var result = \"\";\n    var charCodes = getExpandedCharCodes(input);\n    var i = 0;\n    var length = charCodes.length;\n    var byte1, byte2, byte3, byte4;\n\n    while (i < length) {\n      // Convert every 6-bits in the input 3 character points\n      // into a base64 digit\n      byte1 = charCodes[i] >> 2;\n      byte2 = (charCodes[i] & 3) << 4 | charCodes[i + 1] >> 4;\n      byte3 = (charCodes[i + 1] & 15) << 2 | charCodes[i + 2] >> 6;\n      byte4 = charCodes[i + 2] & 63; // We are out of characters in the input, set the extra\n      // digits to 64 (padding character).\n\n      if (i + 1 >= length) {\n        byte3 = byte4 = 64;\n      } else if (i + 2 >= length) {\n        byte4 = 64;\n      } // Write to the ouput\n\n\n      result += base64Digits.charAt(byte1) + base64Digits.charAt(byte2) + base64Digits.charAt(byte3) + base64Digits.charAt(byte4);\n      i += 3;\n    }\n\n    return result;\n  }\n\n  ts.convertToBase64 = convertToBase64;\n\n  function convertToRelativePath(absoluteOrRelativePath, basePath, getCanonicalFileName) {\n    return !ts.isRootedDiskPath(absoluteOrRelativePath) ? absoluteOrRelativePath : ts.getRelativePathToDirectoryOrUrl(basePath, absoluteOrRelativePath, basePath, getCanonicalFileName,\n    /* isAbsolutePathAnUrl */\n    false);\n  }\n\n  ts.convertToRelativePath = convertToRelativePath;\n  var carriageReturnLineFeed = \"\\r\\n\";\n  var lineFeed = \"\\n\";\n\n  function getNewLineCharacter(options) {\n    if (options.newLine === 0\n    /* CarriageReturnLineFeed */\n    ) {\n        return carriageReturnLineFeed;\n      } else if (options.newLine === 1\n    /* LineFeed */\n    ) {\n        return lineFeed;\n      } else if (ts.sys) {\n      return ts.sys.newLine;\n    }\n\n    return carriageReturnLineFeed;\n  }\n\n  ts.getNewLineCharacter = getNewLineCharacter;\n})(ts || (ts = {}));\n\nvar ts;\n\n(function (ts) {\n  function getDefaultLibFileName(options) {\n    return options.target === 2\n    /* ES6 */\n    ? \"lib.es6.d.ts\" : \"lib.d.ts\";\n  }\n\n  ts.getDefaultLibFileName = getDefaultLibFileName;\n\n  function textSpanEnd(span) {\n    return span.start + span.length;\n  }\n\n  ts.textSpanEnd = textSpanEnd;\n\n  function textSpanIsEmpty(span) {\n    return span.length === 0;\n  }\n\n  ts.textSpanIsEmpty = textSpanIsEmpty;\n\n  function textSpanContainsPosition(span, position) {\n    return position >= span.start && position < textSpanEnd(span);\n  }\n\n  ts.textSpanContainsPosition = textSpanContainsPosition; // Returns true if 'span' contains 'other'.\n\n  function textSpanContainsTextSpan(span, other) {\n    return other.start >= span.start && textSpanEnd(other) <= textSpanEnd(span);\n  }\n\n  ts.textSpanContainsTextSpan = textSpanContainsTextSpan;\n\n  function textSpanOverlapsWith(span, other) {\n    var overlapStart = Math.max(span.start, other.start);\n    var overlapEnd = Math.min(textSpanEnd(span), textSpanEnd(other));\n    return overlapStart < overlapEnd;\n  }\n\n  ts.textSpanOverlapsWith = textSpanOverlapsWith;\n\n  function textSpanOverlap(span1, span2) {\n    var overlapStart = Math.max(span1.start, span2.start);\n    var overlapEnd = Math.min(textSpanEnd(span1), textSpanEnd(span2));\n\n    if (overlapStart < overlapEnd) {\n      return createTextSpanFromBounds(overlapStart, overlapEnd);\n    }\n\n    return undefined;\n  }\n\n  ts.textSpanOverlap = textSpanOverlap;\n\n  function textSpanIntersectsWithTextSpan(span, other) {\n    return other.start <= textSpanEnd(span) && textSpanEnd(other) >= span.start;\n  }\n\n  ts.textSpanIntersectsWithTextSpan = textSpanIntersectsWithTextSpan;\n\n  function textSpanIntersectsWith(span, start, length) {\n    var end = start + length;\n    return start <= textSpanEnd(span) && end >= span.start;\n  }\n\n  ts.textSpanIntersectsWith = textSpanIntersectsWith;\n\n  function decodedTextSpanIntersectsWith(start1, length1, start2, length2) {\n    var end1 = start1 + length1;\n    var end2 = start2 + length2;\n    return start2 <= end1 && end2 >= start1;\n  }\n\n  ts.decodedTextSpanIntersectsWith = decodedTextSpanIntersectsWith;\n\n  function textSpanIntersectsWithPosition(span, position) {\n    return position <= textSpanEnd(span) && position >= span.start;\n  }\n\n  ts.textSpanIntersectsWithPosition = textSpanIntersectsWithPosition;\n\n  function textSpanIntersection(span1, span2) {\n    var intersectStart = Math.max(span1.start, span2.start);\n    var intersectEnd = Math.min(textSpanEnd(span1), textSpanEnd(span2));\n\n    if (intersectStart <= intersectEnd) {\n      return createTextSpanFromBounds(intersectStart, intersectEnd);\n    }\n\n    return undefined;\n  }\n\n  ts.textSpanIntersection = textSpanIntersection;\n\n  function createTextSpan(start, length) {\n    if (start < 0) {\n      throw new Error(\"start < 0\");\n    }\n\n    if (length < 0) {\n      throw new Error(\"length < 0\");\n    }\n\n    return {\n      start: start,\n      length: length\n    };\n  }\n\n  ts.createTextSpan = createTextSpan;\n\n  function createTextSpanFromBounds(start, end) {\n    return createTextSpan(start, end - start);\n  }\n\n  ts.createTextSpanFromBounds = createTextSpanFromBounds;\n\n  function textChangeRangeNewSpan(range) {\n    return createTextSpan(range.span.start, range.newLength);\n  }\n\n  ts.textChangeRangeNewSpan = textChangeRangeNewSpan;\n\n  function textChangeRangeIsUnchanged(range) {\n    return textSpanIsEmpty(range.span) && range.newLength === 0;\n  }\n\n  ts.textChangeRangeIsUnchanged = textChangeRangeIsUnchanged;\n\n  function createTextChangeRange(span, newLength) {\n    if (newLength < 0) {\n      throw new Error(\"newLength < 0\");\n    }\n\n    return {\n      span: span,\n      newLength: newLength\n    };\n  }\n\n  ts.createTextChangeRange = createTextChangeRange;\n  ts.unchangedTextChangeRange = createTextChangeRange(createTextSpan(0, 0), 0);\n  /**\n   * Called to merge all the changes that occurred across several versions of a script snapshot\n   * into a single change.  i.e. if a user keeps making successive edits to a script we will\n   * have a text change from V1 to V2, V2 to V3, ..., Vn.\n   *\n   * This function will then merge those changes into a single change range valid between V1 and\n   * Vn.\n   */\n\n  function collapseTextChangeRangesAcrossMultipleVersions(changes) {\n    if (changes.length === 0) {\n      return ts.unchangedTextChangeRange;\n    }\n\n    if (changes.length === 1) {\n      return changes[0];\n    } // We change from talking about { { oldStart, oldLength }, newLength } to { oldStart, oldEnd, newEnd }\n    // as it makes things much easier to reason about.\n\n\n    var change0 = changes[0];\n    var oldStartN = change0.span.start;\n    var oldEndN = textSpanEnd(change0.span);\n    var newEndN = oldStartN + change0.newLength;\n\n    for (var i = 1; i < changes.length; i++) {\n      var nextChange = changes[i]; // Consider the following case:\n      // i.e. two edits.  The first represents the text change range { { 10, 50 }, 30 }.  i.e. The span starting\n      // at 10, with length 50 is reduced to length 30.  The second represents the text change range { { 30, 30 }, 40 }.\n      // i.e. the span starting at 30 with length 30 is increased to length 40.\n      //\n      //      0         10        20        30        40        50        60        70        80        90        100\n      //      -------------------------------------------------------------------------------------------------------\n      //                |                                                 /\n      //                |                                            /----\n      //  T1            |                                       /----\n      //                |                                  /----\n      //                |                             /----\n      //      -------------------------------------------------------------------------------------------------------\n      //                                     |                            \\\n      //                                     |                               \\\n      //   T2                                |                                 \\\n      //                                     |                                   \\\n      //                                     |                                      \\\n      //      -------------------------------------------------------------------------------------------------------\n      //\n      // Merging these turns out to not be too difficult.  First, determining the new start of the change is trivial\n      // it's just the min of the old and new starts.  i.e.:\n      //\n      //      0         10        20        30        40        50        60        70        80        90        100\n      //      ------------------------------------------------------------*------------------------------------------\n      //                |                                                 /\n      //                |                                            /----\n      //  T1            |                                       /----\n      //                |                                  /----\n      //                |                             /----\n      //      ----------------------------------------$-------------------$------------------------------------------\n      //                .                    |                            \\\n      //                .                    |                               \\\n      //   T2           .                    |                                 \\\n      //                .                    |                                   \\\n      //                .                    |                                      \\\n      //      ----------------------------------------------------------------------*--------------------------------\n      //\n      // (Note the dots represent the newly inferrred start.\n      // Determining the new and old end is also pretty simple.  Basically it boils down to paying attention to the\n      // absolute positions at the asterixes, and the relative change between the dollar signs. Basically, we see\n      // which if the two $'s precedes the other, and we move that one forward until they line up.  in this case that\n      // means:\n      //\n      //      0         10        20        30        40        50        60        70        80        90        100\n      //      --------------------------------------------------------------------------------*----------------------\n      //                |                                                                     /\n      //                |                                                                /----\n      //  T1            |                                                           /----\n      //                |                                                      /----\n      //                |                                                 /----\n      //      ------------------------------------------------------------$------------------------------------------\n      //                .                    |                            \\\n      //                .                    |                               \\\n      //   T2           .                    |                                 \\\n      //                .                    |                                   \\\n      //                .                    |                                      \\\n      //      ----------------------------------------------------------------------*--------------------------------\n      //\n      // In other words (in this case), we're recognizing that the second edit happened after where the first edit\n      // ended with a delta of 20 characters (60 - 40).  Thus, if we go back in time to where the first edit started\n      // that's the same as if we started at char 80 instead of 60.\n      //\n      // As it so happens, the same logic applies if the second edit precedes the first edit.  In that case rahter\n      // than pusing the first edit forward to match the second, we'll push the second edit forward to match the\n      // first.\n      //\n      // In this case that means we have { oldStart: 10, oldEnd: 80, newEnd: 70 } or, in TextChangeRange\n      // semantics: { { start: 10, length: 70 }, newLength: 60 }\n      //\n      // The math then works out as follows.\n      // If we have { oldStart1, oldEnd1, newEnd1 } and { oldStart2, oldEnd2, newEnd2 } then we can compute the\n      // final result like so:\n      //\n      // {\n      //      oldStart3: Min(oldStart1, oldStart2),\n      //      oldEnd3  : Max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1)),\n      //      newEnd3  : Max(newEnd2, newEnd2 + (newEnd1 - oldEnd2))\n      // }\n\n      var oldStart1 = oldStartN;\n      var oldEnd1 = oldEndN;\n      var newEnd1 = newEndN;\n      var oldStart2 = nextChange.span.start;\n      var oldEnd2 = textSpanEnd(nextChange.span);\n      var newEnd2 = oldStart2 + nextChange.newLength;\n      oldStartN = Math.min(oldStart1, oldStart2);\n      oldEndN = Math.max(oldEnd1, oldEnd1 + (oldEnd2 - newEnd1));\n      newEndN = Math.max(newEnd2, newEnd2 + (newEnd1 - oldEnd2));\n    }\n\n    return createTextChangeRange(createTextSpanFromBounds(oldStartN, oldEndN),\n    /*newLength:*/\n    newEndN - oldStartN);\n  }\n\n  ts.collapseTextChangeRangesAcrossMultipleVersions = collapseTextChangeRangesAcrossMultipleVersions;\n\n  function getTypeParameterOwner(d) {\n    if (d && d.kind === 138\n    /* TypeParameter */\n    ) {\n        for (var current = d; current; current = current.parent) {\n          if (ts.isFunctionLike(current) || ts.isClassLike(current) || current.kind === 218\n          /* InterfaceDeclaration */\n          ) {\n              return current;\n            }\n        }\n      }\n  }\n\n  ts.getTypeParameterOwner = getTypeParameterOwner;\n\n  function isParameterPropertyDeclaration(node) {\n    return node.flags & 56\n    /* AccessibilityModifier */\n    && node.parent.kind === 145\n    /* Constructor */\n    && ts.isClassLike(node.parent.parent);\n  }\n\n  ts.isParameterPropertyDeclaration = isParameterPropertyDeclaration;\n})(ts || (ts = {})); /// <reference path=\"utilities.ts\"/>\n/// <reference path=\"scanner.ts\"/>\n\n\nvar ts;\n\n(function (ts) {\n  /* @internal */\n  ts.parseTime = 0;\n  var NodeConstructor;\n  var SourceFileConstructor;\n\n  function createNode(kind, pos, end) {\n    if (kind === 251\n    /* SourceFile */\n    ) {\n        return new (SourceFileConstructor || (SourceFileConstructor = ts.objectAllocator.getSourceFileConstructor()))(kind, pos, end);\n      } else {\n      return new (NodeConstructor || (NodeConstructor = ts.objectAllocator.getNodeConstructor()))(kind, pos, end);\n    }\n  }\n\n  ts.createNode = createNode;\n\n  function visitNode(cbNode, node) {\n    if (node) {\n      return cbNode(node);\n    }\n  }\n\n  function visitNodeArray(cbNodes, nodes) {\n    if (nodes) {\n      return cbNodes(nodes);\n    }\n  }\n\n  function visitEachNode(cbNode, nodes) {\n    if (nodes) {\n      for (var _i = 0, nodes_1 = nodes; _i < nodes_1.length; _i++) {\n        var node = nodes_1[_i];\n        var result = cbNode(node);\n\n        if (result) {\n          return result;\n        }\n      }\n    }\n  } // Invokes a callback for each child of the given node. The 'cbNode' callback is invoked for all child nodes\n  // stored in properties. If a 'cbNodes' callback is specified, it is invoked for embedded arrays; otherwise,\n  // embedded arrays are flattened and the 'cbNode' callback is invoked for each element. If a callback returns\n  // a truthy value, iteration stops and that value is returned. Otherwise, undefined is returned.\n\n\n  function forEachChild(node, cbNode, cbNodeArray) {\n    if (!node) {\n      return;\n    } // The visitXXX functions could be written as local functions that close over the cbNode and cbNodeArray\n    // callback parameters, but that causes a closure allocation for each invocation with noticeable effects\n    // on performance.\n\n\n    var visitNodes = cbNodeArray ? visitNodeArray : visitEachNode;\n    var cbNodes = cbNodeArray || cbNode;\n\n    switch (node.kind) {\n      case 136\n      /* QualifiedName */\n      :\n        return visitNode(cbNode, node.left) || visitNode(cbNode, node.right);\n\n      case 138\n      /* TypeParameter */\n      :\n        return visitNode(cbNode, node.name) || visitNode(cbNode, node.constraint) || visitNode(cbNode, node.expression);\n\n      case 249\n      /* ShorthandPropertyAssignment */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.name) || visitNode(cbNode, node.questionToken) || visitNode(cbNode, node.equalsToken) || visitNode(cbNode, node.objectAssignmentInitializer);\n\n      case 139\n      /* Parameter */\n      :\n      case 142\n      /* PropertyDeclaration */\n      :\n      case 141\n      /* PropertySignature */\n      :\n      case 248\n      /* PropertyAssignment */\n      :\n      case 214\n      /* VariableDeclaration */\n      :\n      case 166\n      /* BindingElement */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.propertyName) || visitNode(cbNode, node.dotDotDotToken) || visitNode(cbNode, node.name) || visitNode(cbNode, node.questionToken) || visitNode(cbNode, node.type) || visitNode(cbNode, node.initializer);\n\n      case 153\n      /* FunctionType */\n      :\n      case 154\n      /* ConstructorType */\n      :\n      case 148\n      /* CallSignature */\n      :\n      case 149\n      /* ConstructSignature */\n      :\n      case 150\n      /* IndexSignature */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNodes(cbNodes, node.typeParameters) || visitNodes(cbNodes, node.parameters) || visitNode(cbNode, node.type);\n\n      case 144\n      /* MethodDeclaration */\n      :\n      case 143\n      /* MethodSignature */\n      :\n      case 145\n      /* Constructor */\n      :\n      case 146\n      /* GetAccessor */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 176\n      /* FunctionExpression */\n      :\n      case 216\n      /* FunctionDeclaration */\n      :\n      case 177\n      /* ArrowFunction */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.asteriskToken) || visitNode(cbNode, node.name) || visitNode(cbNode, node.questionToken) || visitNodes(cbNodes, node.typeParameters) || visitNodes(cbNodes, node.parameters) || visitNode(cbNode, node.type) || visitNode(cbNode, node.equalsGreaterThanToken) || visitNode(cbNode, node.body);\n\n      case 152\n      /* TypeReference */\n      :\n        return visitNode(cbNode, node.typeName) || visitNodes(cbNodes, node.typeArguments);\n\n      case 151\n      /* TypePredicate */\n      :\n        return visitNode(cbNode, node.parameterName) || visitNode(cbNode, node.type);\n\n      case 155\n      /* TypeQuery */\n      :\n        return visitNode(cbNode, node.exprName);\n\n      case 156\n      /* TypeLiteral */\n      :\n        return visitNodes(cbNodes, node.members);\n\n      case 157\n      /* ArrayType */\n      :\n        return visitNode(cbNode, node.elementType);\n\n      case 158\n      /* TupleType */\n      :\n        return visitNodes(cbNodes, node.elementTypes);\n\n      case 159\n      /* UnionType */\n      :\n      case 160\n      /* IntersectionType */\n      :\n        return visitNodes(cbNodes, node.types);\n\n      case 161\n      /* ParenthesizedType */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 164\n      /* ObjectBindingPattern */\n      :\n      case 165\n      /* ArrayBindingPattern */\n      :\n        return visitNodes(cbNodes, node.elements);\n\n      case 167\n      /* ArrayLiteralExpression */\n      :\n        return visitNodes(cbNodes, node.elements);\n\n      case 168\n      /* ObjectLiteralExpression */\n      :\n        return visitNodes(cbNodes, node.properties);\n\n      case 169\n      /* PropertyAccessExpression */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.dotToken) || visitNode(cbNode, node.name);\n\n      case 170\n      /* ElementAccessExpression */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.argumentExpression);\n\n      case 171\n      /* CallExpression */\n      :\n      case 172\n      /* NewExpression */\n      :\n        return visitNode(cbNode, node.expression) || visitNodes(cbNodes, node.typeArguments) || visitNodes(cbNodes, node.arguments);\n\n      case 173\n      /* TaggedTemplateExpression */\n      :\n        return visitNode(cbNode, node.tag) || visitNode(cbNode, node.template);\n\n      case 174\n      /* TypeAssertionExpression */\n      :\n        return visitNode(cbNode, node.type) || visitNode(cbNode, node.expression);\n\n      case 175\n      /* ParenthesizedExpression */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 178\n      /* DeleteExpression */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 179\n      /* TypeOfExpression */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 180\n      /* VoidExpression */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 182\n      /* PrefixUnaryExpression */\n      :\n        return visitNode(cbNode, node.operand);\n\n      case 187\n      /* YieldExpression */\n      :\n        return visitNode(cbNode, node.asteriskToken) || visitNode(cbNode, node.expression);\n\n      case 181\n      /* AwaitExpression */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 183\n      /* PostfixUnaryExpression */\n      :\n        return visitNode(cbNode, node.operand);\n\n      case 184\n      /* BinaryExpression */\n      :\n        return visitNode(cbNode, node.left) || visitNode(cbNode, node.operatorToken) || visitNode(cbNode, node.right);\n\n      case 192\n      /* AsExpression */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.type);\n\n      case 185\n      /* ConditionalExpression */\n      :\n        return visitNode(cbNode, node.condition) || visitNode(cbNode, node.questionToken) || visitNode(cbNode, node.whenTrue) || visitNode(cbNode, node.colonToken) || visitNode(cbNode, node.whenFalse);\n\n      case 188\n      /* SpreadElementExpression */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 195\n      /* Block */\n      :\n      case 222\n      /* ModuleBlock */\n      :\n        return visitNodes(cbNodes, node.statements);\n\n      case 251\n      /* SourceFile */\n      :\n        return visitNodes(cbNodes, node.statements) || visitNode(cbNode, node.endOfFileToken);\n\n      case 196\n      /* VariableStatement */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.declarationList);\n\n      case 215\n      /* VariableDeclarationList */\n      :\n        return visitNodes(cbNodes, node.declarations);\n\n      case 198\n      /* ExpressionStatement */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 199\n      /* IfStatement */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.thenStatement) || visitNode(cbNode, node.elseStatement);\n\n      case 200\n      /* DoStatement */\n      :\n        return visitNode(cbNode, node.statement) || visitNode(cbNode, node.expression);\n\n      case 201\n      /* WhileStatement */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.statement);\n\n      case 202\n      /* ForStatement */\n      :\n        return visitNode(cbNode, node.initializer) || visitNode(cbNode, node.condition) || visitNode(cbNode, node.incrementor) || visitNode(cbNode, node.statement);\n\n      case 203\n      /* ForInStatement */\n      :\n        return visitNode(cbNode, node.initializer) || visitNode(cbNode, node.expression) || visitNode(cbNode, node.statement);\n\n      case 204\n      /* ForOfStatement */\n      :\n        return visitNode(cbNode, node.initializer) || visitNode(cbNode, node.expression) || visitNode(cbNode, node.statement);\n\n      case 205\n      /* ContinueStatement */\n      :\n      case 206\n      /* BreakStatement */\n      :\n        return visitNode(cbNode, node.label);\n\n      case 207\n      /* ReturnStatement */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 208\n      /* WithStatement */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.statement);\n\n      case 209\n      /* SwitchStatement */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.caseBlock);\n\n      case 223\n      /* CaseBlock */\n      :\n        return visitNodes(cbNodes, node.clauses);\n\n      case 244\n      /* CaseClause */\n      :\n        return visitNode(cbNode, node.expression) || visitNodes(cbNodes, node.statements);\n\n      case 245\n      /* DefaultClause */\n      :\n        return visitNodes(cbNodes, node.statements);\n\n      case 210\n      /* LabeledStatement */\n      :\n        return visitNode(cbNode, node.label) || visitNode(cbNode, node.statement);\n\n      case 211\n      /* ThrowStatement */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 212\n      /* TryStatement */\n      :\n        return visitNode(cbNode, node.tryBlock) || visitNode(cbNode, node.catchClause) || visitNode(cbNode, node.finallyBlock);\n\n      case 247\n      /* CatchClause */\n      :\n        return visitNode(cbNode, node.variableDeclaration) || visitNode(cbNode, node.block);\n\n      case 140\n      /* Decorator */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 217\n      /* ClassDeclaration */\n      :\n      case 189\n      /* ClassExpression */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.name) || visitNodes(cbNodes, node.typeParameters) || visitNodes(cbNodes, node.heritageClauses) || visitNodes(cbNodes, node.members);\n\n      case 218\n      /* InterfaceDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.name) || visitNodes(cbNodes, node.typeParameters) || visitNodes(cbNodes, node.heritageClauses) || visitNodes(cbNodes, node.members);\n\n      case 219\n      /* TypeAliasDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.name) || visitNodes(cbNodes, node.typeParameters) || visitNode(cbNode, node.type);\n\n      case 220\n      /* EnumDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.name) || visitNodes(cbNodes, node.members);\n\n      case 250\n      /* EnumMember */\n      :\n        return visitNode(cbNode, node.name) || visitNode(cbNode, node.initializer);\n\n      case 221\n      /* ModuleDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.name) || visitNode(cbNode, node.body);\n\n      case 224\n      /* ImportEqualsDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.name) || visitNode(cbNode, node.moduleReference);\n\n      case 225\n      /* ImportDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.importClause) || visitNode(cbNode, node.moduleSpecifier);\n\n      case 226\n      /* ImportClause */\n      :\n        return visitNode(cbNode, node.name) || visitNode(cbNode, node.namedBindings);\n\n      case 227\n      /* NamespaceImport */\n      :\n        return visitNode(cbNode, node.name);\n\n      case 228\n      /* NamedImports */\n      :\n      case 232\n      /* NamedExports */\n      :\n        return visitNodes(cbNodes, node.elements);\n\n      case 231\n      /* ExportDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.exportClause) || visitNode(cbNode, node.moduleSpecifier);\n\n      case 229\n      /* ImportSpecifier */\n      :\n      case 233\n      /* ExportSpecifier */\n      :\n        return visitNode(cbNode, node.propertyName) || visitNode(cbNode, node.name);\n\n      case 230\n      /* ExportAssignment */\n      :\n        return visitNodes(cbNodes, node.decorators) || visitNodes(cbNodes, node.modifiers) || visitNode(cbNode, node.expression);\n\n      case 186\n      /* TemplateExpression */\n      :\n        return visitNode(cbNode, node.head) || visitNodes(cbNodes, node.templateSpans);\n\n      case 193\n      /* TemplateSpan */\n      :\n        return visitNode(cbNode, node.expression) || visitNode(cbNode, node.literal);\n\n      case 137\n      /* ComputedPropertyName */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 246\n      /* HeritageClause */\n      :\n        return visitNodes(cbNodes, node.types);\n\n      case 191\n      /* ExpressionWithTypeArguments */\n      :\n        return visitNode(cbNode, node.expression) || visitNodes(cbNodes, node.typeArguments);\n\n      case 235\n      /* ExternalModuleReference */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 234\n      /* MissingDeclaration */\n      :\n        return visitNodes(cbNodes, node.decorators);\n\n      case 236\n      /* JsxElement */\n      :\n        return visitNode(cbNode, node.openingElement) || visitNodes(cbNodes, node.children) || visitNode(cbNode, node.closingElement);\n\n      case 237\n      /* JsxSelfClosingElement */\n      :\n      case 238\n      /* JsxOpeningElement */\n      :\n        return visitNode(cbNode, node.tagName) || visitNodes(cbNodes, node.attributes);\n\n      case 241\n      /* JsxAttribute */\n      :\n        return visitNode(cbNode, node.name) || visitNode(cbNode, node.initializer);\n\n      case 242\n      /* JsxSpreadAttribute */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 243\n      /* JsxExpression */\n      :\n        return visitNode(cbNode, node.expression);\n\n      case 240\n      /* JsxClosingElement */\n      :\n        return visitNode(cbNode, node.tagName);\n\n      case 252\n      /* JSDocTypeExpression */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 256\n      /* JSDocUnionType */\n      :\n        return visitNodes(cbNodes, node.types);\n\n      case 257\n      /* JSDocTupleType */\n      :\n        return visitNodes(cbNodes, node.types);\n\n      case 255\n      /* JSDocArrayType */\n      :\n        return visitNode(cbNode, node.elementType);\n\n      case 259\n      /* JSDocNonNullableType */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 258\n      /* JSDocNullableType */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 260\n      /* JSDocRecordType */\n      :\n        return visitNodes(cbNodes, node.members);\n\n      case 262\n      /* JSDocTypeReference */\n      :\n        return visitNode(cbNode, node.name) || visitNodes(cbNodes, node.typeArguments);\n\n      case 263\n      /* JSDocOptionalType */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 264\n      /* JSDocFunctionType */\n      :\n        return visitNodes(cbNodes, node.parameters) || visitNode(cbNode, node.type);\n\n      case 265\n      /* JSDocVariadicType */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 266\n      /* JSDocConstructorType */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 267\n      /* JSDocThisType */\n      :\n        return visitNode(cbNode, node.type);\n\n      case 261\n      /* JSDocRecordMember */\n      :\n        return visitNode(cbNode, node.name) || visitNode(cbNode, node.type);\n\n      case 268\n      /* JSDocComment */\n      :\n        return visitNodes(cbNodes, node.tags);\n\n      case 270\n      /* JSDocParameterTag */\n      :\n        return visitNode(cbNode, node.preParameterName) || visitNode(cbNode, node.typeExpression) || visitNode(cbNode, node.postParameterName);\n\n      case 271\n      /* JSDocReturnTag */\n      :\n        return visitNode(cbNode, node.typeExpression);\n\n      case 272\n      /* JSDocTypeTag */\n      :\n        return visitNode(cbNode, node.typeExpression);\n\n      case 273\n      /* JSDocTemplateTag */\n      :\n        return visitNodes(cbNodes, node.typeParameters);\n    }\n  }\n\n  ts.forEachChild = forEachChild;\n\n  function createSourceFile(fileName, sourceText, languageVersion, setParentNodes, scriptKind) {\n    if (setParentNodes === void 0) {\n      setParentNodes = false;\n    }\n\n    var start = new Date().getTime();\n    var result = Parser.parseSourceFile(fileName, sourceText, languageVersion,\n    /*syntaxCursor*/\n    undefined, setParentNodes, scriptKind);\n    ts.parseTime += new Date().getTime() - start;\n    return result;\n  }\n\n  ts.createSourceFile = createSourceFile; // Produces a new SourceFile for the 'newText' provided. The 'textChangeRange' parameter\n  // indicates what changed between the 'text' that this SourceFile has and the 'newText'.\n  // The SourceFile will be created with the compiler attempting to reuse as many nodes from\n  // this file as possible.\n  //\n  // Note: this function mutates nodes from this SourceFile. That means any existing nodes\n  // from this SourceFile that are being held onto may change as a result (including\n  // becoming detached from any SourceFile).  It is recommended that this SourceFile not\n  // be used once 'update' is called on it.\n\n  function updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks) {\n    return IncrementalParser.updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks);\n  }\n\n  ts.updateSourceFile = updateSourceFile;\n  /* @internal */\n\n  function parseIsolatedJSDocComment(content, start, length) {\n    return Parser.JSDocParser.parseIsolatedJSDocComment(content, start, length);\n  }\n\n  ts.parseIsolatedJSDocComment = parseIsolatedJSDocComment;\n  /* @internal */\n  // Exposed only for testing.\n\n  function parseJSDocTypeExpressionForTests(content, start, length) {\n    return Parser.JSDocParser.parseJSDocTypeExpressionForTests(content, start, length);\n  }\n\n  ts.parseJSDocTypeExpressionForTests = parseJSDocTypeExpressionForTests; // Implement the parser as a singleton module.  We do this for perf reasons because creating\n  // parser instances can actually be expensive enough to impact us on projects with many source\n  // files.\n\n  var Parser;\n\n  (function (Parser) {\n    // Share a single scanner across all calls to parse a source file.  This helps speed things\n    // up by avoiding the cost of creating/compiling scanners over and over again.\n    var scanner = ts.createScanner(2\n    /* Latest */\n    ,\n    /*skipTrivia*/\n    true);\n    var disallowInAndDecoratorContext = 1\n    /* DisallowIn */\n    | 4\n    /* Decorator */\n    ; // capture constructors in 'initializeState' to avoid null checks\n\n    var NodeConstructor;\n    var SourceFileConstructor;\n    var sourceFile;\n    var parseDiagnostics;\n    var syntaxCursor;\n    var token;\n    var sourceText;\n    var nodeCount;\n    var identifiers;\n    var identifierCount;\n    var parsingContext; // Flags that dictate what parsing context we're in.  For example:\n    // Whether or not we are in strict parsing mode.  All that changes in strict parsing mode is\n    // that some tokens that would be considered identifiers may be considered keywords.\n    //\n    // When adding more parser context flags, consider which is the more common case that the\n    // flag will be in.  This should be the 'false' state for that flag.  The reason for this is\n    // that we don't store data in our nodes unless the value is in the *non-default* state.  So,\n    // for example, more often than code 'allows-in' (or doesn't 'disallow-in').  We opt for\n    // 'disallow-in' set to 'false'.  Otherwise, if we had 'allowsIn' set to 'true', then almost\n    // all nodes would need extra state on them to store this info.\n    //\n    // Note:  'allowIn' and 'allowYield' track 1:1 with the [in] and [yield] concepts in the ES6\n    // grammar specification.\n    //\n    // An important thing about these context concepts.  By default they are effectively inherited\n    // while parsing through every grammar production.  i.e. if you don't change them, then when\n    // you parse a sub-production, it will have the same context values as the parent production.\n    // This is great most of the time.  After all, consider all the 'expression' grammar productions\n    // and how nearly all of them pass along the 'in' and 'yield' context values:\n    //\n    // EqualityExpression[In, Yield] :\n    //      RelationalExpression[?In, ?Yield]\n    //      EqualityExpression[?In, ?Yield] == RelationalExpression[?In, ?Yield]\n    //      EqualityExpression[?In, ?Yield] != RelationalExpression[?In, ?Yield]\n    //      EqualityExpression[?In, ?Yield] === RelationalExpression[?In, ?Yield]\n    //      EqualityExpression[?In, ?Yield] !== RelationalExpression[?In, ?Yield]\n    //\n    // Where you have to be careful is then understanding what the points are in the grammar\n    // where the values are *not* passed along.  For example:\n    //\n    // SingleNameBinding[Yield,GeneratorParameter]\n    //      [+GeneratorParameter]BindingIdentifier[Yield] Initializer[In]opt\n    //      [~GeneratorParameter]BindingIdentifier[?Yield]Initializer[In, ?Yield]opt\n    //\n    // Here this is saying that if the GeneratorParameter context flag is set, that we should\n    // explicitly set the 'yield' context flag to false before calling into the BindingIdentifier\n    // and we should explicitly unset the 'yield' context flag before calling into the Initializer.\n    // production.  Conversely, if the GeneratorParameter context flag is not set, then we\n    // should leave the 'yield' context flag alone.\n    //\n    // Getting this all correct is tricky and requires careful reading of the grammar to\n    // understand when these values should be changed versus when they should be inherited.\n    //\n    // Note: it should not be necessary to save/restore these flags during speculative/lookahead\n    // parsing.  These context flags are naturally stored and restored through normal recursive\n    // descent parsing and unwinding.\n\n    var contextFlags; // Whether or not we've had a parse error since creating the last AST node.  If we have\n    // encountered an error, it will be stored on the next AST node we create.  Parse errors\n    // can be broken down into three categories:\n    //\n    // 1) An error that occurred during scanning.  For example, an unterminated literal, or a\n    //    character that was completely not understood.\n    //\n    // 2) A token was expected, but was not present.  This type of error is commonly produced\n    //    by the 'parseExpected' function.\n    //\n    // 3) A token was present that no parsing function was able to consume.  This type of error\n    //    only occurs in the 'abortParsingListOrMoveToNextToken' function when the parser\n    //    decides to skip the token.\n    //\n    // In all of these cases, we want to mark the next node as having had an error before it.\n    // With this mark, we can know in incremental settings if this node can be reused, or if\n    // we have to reparse it.  If we don't keep this information around, we may just reuse the\n    // node.  in that event we would then not produce the same errors as we did before, causing\n    // significant confusion problems.\n    //\n    // Note: it is necessary that this value be saved/restored during speculative/lookahead\n    // parsing.  During lookahead parsing, we will often create a node.  That node will have\n    // this value attached, and then this value will be set back to 'false'.  If we decide to\n    // rewind, we must get back to the same value we had prior to the lookahead.\n    //\n    // Note: any errors at the end of the file that do not precede a regular node, should get\n    // attached to the EOF token.\n\n    var parseErrorBeforeNextFinishedNode = false;\n\n    function parseSourceFile(fileName, _sourceText, languageVersion, _syntaxCursor, setParentNodes, scriptKind) {\n      scriptKind = ts.ensureScriptKind(fileName, scriptKind);\n      initializeState(fileName, _sourceText, languageVersion, _syntaxCursor, scriptKind);\n      var result = parseSourceFileWorker(fileName, languageVersion, setParentNodes, scriptKind);\n      clearState();\n      return result;\n    }\n\n    Parser.parseSourceFile = parseSourceFile;\n\n    function getLanguageVariant(scriptKind) {\n      // .tsx and .jsx files are treated as jsx language variant.\n      return scriptKind === 4\n      /* TSX */\n      || scriptKind === 2\n      /* JSX */\n      || scriptKind === 1\n      /* JS */\n      ? 1\n      /* JSX */\n      : 0\n      /* Standard */\n      ;\n    }\n\n    function initializeState(fileName, _sourceText, languageVersion, _syntaxCursor, scriptKind) {\n      NodeConstructor = ts.objectAllocator.getNodeConstructor();\n      SourceFileConstructor = ts.objectAllocator.getSourceFileConstructor();\n      sourceText = _sourceText;\n      syntaxCursor = _syntaxCursor;\n      parseDiagnostics = [];\n      parsingContext = 0;\n      identifiers = {};\n      identifierCount = 0;\n      nodeCount = 0;\n      contextFlags = scriptKind === 1\n      /* JS */\n      || scriptKind === 2\n      /* JSX */\n      ? 32\n      /* JavaScriptFile */\n      : 0\n      /* None */\n      ;\n      parseErrorBeforeNextFinishedNode = false; // Initialize and prime the scanner before parsing the source elements.\n\n      scanner.setText(sourceText);\n      scanner.setOnError(scanError);\n      scanner.setScriptTarget(languageVersion);\n      scanner.setLanguageVariant(getLanguageVariant(scriptKind));\n    }\n\n    function clearState() {\n      // Clear out the text the scanner is pointing at, so it doesn't keep anything alive unnecessarily.\n      scanner.setText(\"\");\n      scanner.setOnError(undefined); // Clear any data.  We don't want to accidently hold onto it for too long.\n\n      parseDiagnostics = undefined;\n      sourceFile = undefined;\n      identifiers = undefined;\n      syntaxCursor = undefined;\n      sourceText = undefined;\n    }\n\n    function parseSourceFileWorker(fileName, languageVersion, setParentNodes, scriptKind) {\n      sourceFile = createSourceFile(fileName, languageVersion, scriptKind);\n\n      if (contextFlags & 32\n      /* JavaScriptFile */\n      ) {\n          sourceFile.parserContextFlags = 32\n          /* JavaScriptFile */\n          ;\n        } // Prime the scanner.\n\n\n      token = nextToken();\n      processReferenceComments(sourceFile);\n      sourceFile.statements = parseList(0\n      /* SourceElements */\n      , parseStatement);\n      ts.Debug.assert(token === 1\n      /* EndOfFileToken */\n      );\n      sourceFile.endOfFileToken = parseTokenNode();\n      setExternalModuleIndicator(sourceFile);\n      sourceFile.nodeCount = nodeCount;\n      sourceFile.identifierCount = identifierCount;\n      sourceFile.identifiers = identifiers;\n      sourceFile.parseDiagnostics = parseDiagnostics;\n\n      if (setParentNodes) {\n        fixupParentReferences(sourceFile);\n      }\n\n      return sourceFile;\n    }\n\n    function addJSDocComment(node) {\n      if (contextFlags & 32\n      /* JavaScriptFile */\n      ) {\n          var comments = ts.getLeadingCommentRangesOfNode(node, sourceFile);\n\n          if (comments) {\n            for (var _i = 0, comments_1 = comments; _i < comments_1.length; _i++) {\n              var comment = comments_1[_i];\n              var jsDocComment = JSDocParser.parseJSDocComment(node, comment.pos, comment.end - comment.pos);\n\n              if (jsDocComment) {\n                node.jsDocComment = jsDocComment;\n              }\n            }\n          }\n        }\n\n      return node;\n    }\n\n    function fixupParentReferences(sourceFile) {\n      // normally parent references are set during binding. However, for clients that only need\n      // a syntax tree, and no semantic features, then the binding process is an unnecessary\n      // overhead.  This functions allows us to set all the parents, without all the expense of\n      // binding.\n      var parent = sourceFile;\n      forEachChild(sourceFile, visitNode);\n      return;\n\n      function visitNode(n) {\n        // walk down setting parents that differ from the parent we think it should be.  This\n        // allows us to quickly bail out of setting parents for subtrees during incremental\n        // parsing\n        if (n.parent !== parent) {\n          n.parent = parent;\n          var saveParent = parent;\n          parent = n;\n          forEachChild(n, visitNode);\n          parent = saveParent;\n        }\n      }\n    }\n\n    Parser.fixupParentReferences = fixupParentReferences;\n\n    function createSourceFile(fileName, languageVersion, scriptKind) {\n      // code from createNode is inlined here so createNode won't have to deal with special case of creating source files\n      // this is quite rare comparing to other nodes and createNode should be as fast as possible\n      var sourceFile = new SourceFileConstructor(251\n      /* SourceFile */\n      ,\n      /*pos*/\n      0,\n      /* end */\n      sourceText.length);\n      nodeCount++;\n      sourceFile.text = sourceText;\n      sourceFile.bindDiagnostics = [];\n      sourceFile.languageVersion = languageVersion;\n      sourceFile.fileName = ts.normalizePath(fileName);\n      sourceFile.flags = ts.fileExtensionIs(sourceFile.fileName, \".d.ts\") ? 4096\n      /* DeclarationFile */\n      : 0;\n      sourceFile.languageVariant = getLanguageVariant(scriptKind);\n      sourceFile.scriptKind = scriptKind;\n      return sourceFile;\n    }\n\n    function setContextFlag(val, flag) {\n      if (val) {\n        contextFlags |= flag;\n      } else {\n        contextFlags &= ~flag;\n      }\n    }\n\n    function setDisallowInContext(val) {\n      setContextFlag(val, 1\n      /* DisallowIn */\n      );\n    }\n\n    function setYieldContext(val) {\n      setContextFlag(val, 2\n      /* Yield */\n      );\n    }\n\n    function setDecoratorContext(val) {\n      setContextFlag(val, 4\n      /* Decorator */\n      );\n    }\n\n    function setAwaitContext(val) {\n      setContextFlag(val, 8\n      /* Await */\n      );\n    }\n\n    function doOutsideOfContext(context, func) {\n      // contextFlagsToClear will contain only the context flags that are\n      // currently set that we need to temporarily clear\n      // We don't just blindly reset to the previous flags to ensure\n      // that we do not mutate cached flags for the incremental\n      // parser (ThisNodeHasError, ThisNodeOrAnySubNodesHasError, and\n      // HasAggregatedChildData).\n      var contextFlagsToClear = context & contextFlags;\n\n      if (contextFlagsToClear) {\n        // clear the requested context flags\n        setContextFlag(\n        /*val*/\n        false, contextFlagsToClear);\n        var result = func(); // restore the context flags we just cleared\n\n        setContextFlag(\n        /*val*/\n        true, contextFlagsToClear);\n        return result;\n      } // no need to do anything special as we are not in any of the requested contexts\n\n\n      return func();\n    }\n\n    function doInsideOfContext(context, func) {\n      // contextFlagsToSet will contain only the context flags that\n      // are not currently set that we need to temporarily enable.\n      // We don't just blindly reset to the previous flags to ensure\n      // that we do not mutate cached flags for the incremental\n      // parser (ThisNodeHasError, ThisNodeOrAnySubNodesHasError, and\n      // HasAggregatedChildData).\n      var contextFlagsToSet = context & ~contextFlags;\n\n      if (contextFlagsToSet) {\n        // set the requested context flags\n        setContextFlag(\n        /*val*/\n        true, contextFlagsToSet);\n        var result = func(); // reset the context flags we just set\n\n        setContextFlag(\n        /*val*/\n        false, contextFlagsToSet);\n        return result;\n      } // no need to do anything special as we are already in all of the requested contexts\n\n\n      return func();\n    }\n\n    function allowInAnd(func) {\n      return doOutsideOfContext(1\n      /* DisallowIn */\n      , func);\n    }\n\n    function disallowInAnd(func) {\n      return doInsideOfContext(1\n      /* DisallowIn */\n      , func);\n    }\n\n    function doInYieldContext(func) {\n      return doInsideOfContext(2\n      /* Yield */\n      , func);\n    }\n\n    function doInDecoratorContext(func) {\n      return doInsideOfContext(4\n      /* Decorator */\n      , func);\n    }\n\n    function doInAwaitContext(func) {\n      return doInsideOfContext(8\n      /* Await */\n      , func);\n    }\n\n    function doOutsideOfAwaitContext(func) {\n      return doOutsideOfContext(8\n      /* Await */\n      , func);\n    }\n\n    function doInYieldAndAwaitContext(func) {\n      return doInsideOfContext(2\n      /* Yield */\n      | 8\n      /* Await */\n      , func);\n    }\n\n    function inContext(flags) {\n      return (contextFlags & flags) !== 0;\n    }\n\n    function inYieldContext() {\n      return inContext(2\n      /* Yield */\n      );\n    }\n\n    function inDisallowInContext() {\n      return inContext(1\n      /* DisallowIn */\n      );\n    }\n\n    function inDecoratorContext() {\n      return inContext(4\n      /* Decorator */\n      );\n    }\n\n    function inAwaitContext() {\n      return inContext(8\n      /* Await */\n      );\n    }\n\n    function parseErrorAtCurrentToken(message, arg0) {\n      var start = scanner.getTokenPos();\n      var length = scanner.getTextPos() - start;\n      parseErrorAtPosition(start, length, message, arg0);\n    }\n\n    function parseErrorAtPosition(start, length, message, arg0) {\n      // Don't report another error if it would just be at the same position as the last error.\n      var lastError = ts.lastOrUndefined(parseDiagnostics);\n\n      if (!lastError || start !== lastError.start) {\n        parseDiagnostics.push(ts.createFileDiagnostic(sourceFile, start, length, message, arg0));\n      } // Mark that we've encountered an error.  We'll set an appropriate bit on the next\n      // node we finish so that it can't be reused incrementally.\n\n\n      parseErrorBeforeNextFinishedNode = true;\n    }\n\n    function scanError(message, length) {\n      var pos = scanner.getTextPos();\n      parseErrorAtPosition(pos, length || 0, message);\n    }\n\n    function getNodePos() {\n      return scanner.getStartPos();\n    }\n\n    function getNodeEnd() {\n      return scanner.getStartPos();\n    }\n\n    function nextToken() {\n      return token = scanner.scan();\n    }\n\n    function reScanGreaterToken() {\n      return token = scanner.reScanGreaterToken();\n    }\n\n    function reScanSlashToken() {\n      return token = scanner.reScanSlashToken();\n    }\n\n    function reScanTemplateToken() {\n      return token = scanner.reScanTemplateToken();\n    }\n\n    function scanJsxIdentifier() {\n      return token = scanner.scanJsxIdentifier();\n    }\n\n    function scanJsxText() {\n      return token = scanner.scanJsxToken();\n    }\n\n    function speculationHelper(callback, isLookAhead) {\n      // Keep track of the state we'll need to rollback to if lookahead fails (or if the\n      // caller asked us to always reset our state).\n      var saveToken = token;\n      var saveParseDiagnosticsLength = parseDiagnostics.length;\n      var saveParseErrorBeforeNextFinishedNode = parseErrorBeforeNextFinishedNode; // Note: it is not actually necessary to save/restore the context flags here.  That's\n      // because the saving/restoring of these flags happens naturally through the recursive\n      // descent nature of our parser.  However, we still store this here just so we can\n      // assert that that invariant holds.\n\n      var saveContextFlags = contextFlags; // If we're only looking ahead, then tell the scanner to only lookahead as well.\n      // Otherwise, if we're actually speculatively parsing, then tell the scanner to do the\n      // same.\n\n      var result = isLookAhead ? scanner.lookAhead(callback) : scanner.tryScan(callback);\n      ts.Debug.assert(saveContextFlags === contextFlags); // If our callback returned something 'falsy' or we're just looking ahead,\n      // then unconditionally restore us to where we were.\n\n      if (!result || isLookAhead) {\n        token = saveToken;\n        parseDiagnostics.length = saveParseDiagnosticsLength;\n        parseErrorBeforeNextFinishedNode = saveParseErrorBeforeNextFinishedNode;\n      }\n\n      return result;\n    }\n    /** Invokes the provided callback then unconditionally restores the parser to the state it\n     * was in immediately prior to invoking the callback.  The result of invoking the callback\n     * is returned from this function.\n     */\n\n\n    function lookAhead(callback) {\n      return speculationHelper(callback,\n      /*isLookAhead*/\n      true);\n    }\n    /** Invokes the provided callback.  If the callback returns something falsy, then it restores\n     * the parser to the state it was in immediately prior to invoking the callback.  If the\n     * callback returns something truthy, then the parser state is not rolled back.  The result\n     * of invoking the callback is returned from this function.\n     */\n\n\n    function tryParse(callback) {\n      return speculationHelper(callback,\n      /*isLookAhead*/\n      false);\n    } // Ignore strict mode flag because we will report an error in type checker instead.\n\n\n    function isIdentifier() {\n      if (token === 69\n      /* Identifier */\n      ) {\n          return true;\n        } // If we have a 'yield' keyword, and we're in the [yield] context, then 'yield' is\n      // considered a keyword and is not an identifier.\n\n\n      if (token === 114\n      /* YieldKeyword */\n      && inYieldContext()) {\n        return false;\n      } // If we have a 'await' keyword, and we're in the [Await] context, then 'await' is\n      // considered a keyword and is not an identifier.\n\n\n      if (token === 119\n      /* AwaitKeyword */\n      && inAwaitContext()) {\n        return false;\n      }\n\n      return token > 105\n      /* LastReservedWord */\n      ;\n    }\n\n    function parseExpected(kind, diagnosticMessage, shouldAdvance) {\n      if (shouldAdvance === void 0) {\n        shouldAdvance = true;\n      }\n\n      if (token === kind) {\n        if (shouldAdvance) {\n          nextToken();\n        }\n\n        return true;\n      } // Report specific message if provided with one.  Otherwise, report generic fallback message.\n\n\n      if (diagnosticMessage) {\n        parseErrorAtCurrentToken(diagnosticMessage);\n      } else {\n        parseErrorAtCurrentToken(ts.Diagnostics._0_expected, ts.tokenToString(kind));\n      }\n\n      return false;\n    }\n\n    function parseOptional(t) {\n      if (token === t) {\n        nextToken();\n        return true;\n      }\n\n      return false;\n    }\n\n    function parseOptionalToken(t) {\n      if (token === t) {\n        return parseTokenNode();\n      }\n\n      return undefined;\n    }\n\n    function parseExpectedToken(t, reportAtCurrentPosition, diagnosticMessage, arg0) {\n      return parseOptionalToken(t) || createMissingNode(t, reportAtCurrentPosition, diagnosticMessage, arg0);\n    }\n\n    function parseTokenNode() {\n      var node = createNode(token);\n      nextToken();\n      return finishNode(node);\n    }\n\n    function canParseSemicolon() {\n      // If there's a real semicolon, then we can always parse it out.\n      if (token === 23\n      /* SemicolonToken */\n      ) {\n          return true;\n        } // We can parse out an optional semicolon in ASI cases in the following cases.\n\n\n      return token === 16\n      /* CloseBraceToken */\n      || token === 1\n      /* EndOfFileToken */\n      || scanner.hasPrecedingLineBreak();\n    }\n\n    function parseSemicolon() {\n      if (canParseSemicolon()) {\n        if (token === 23\n        /* SemicolonToken */\n        ) {\n            // consume the semicolon if it was explicitly provided.\n            nextToken();\n          }\n\n        return true;\n      } else {\n        return parseExpected(23\n        /* SemicolonToken */\n        );\n      }\n    } // note: this function creates only node\n\n\n    function createNode(kind, pos) {\n      nodeCount++;\n\n      if (!(pos >= 0)) {\n        pos = scanner.getStartPos();\n      }\n\n      return new NodeConstructor(kind, pos, pos);\n    }\n\n    function finishNode(node, end) {\n      node.end = end === undefined ? scanner.getStartPos() : end;\n\n      if (contextFlags) {\n        node.parserContextFlags = contextFlags;\n      } // Keep track on the node if we encountered an error while parsing it.  If we did, then\n      // we cannot reuse the node incrementally.  Once we've marked this node, clear out the\n      // flag so that we don't mark any subsequent nodes.\n\n\n      if (parseErrorBeforeNextFinishedNode) {\n        parseErrorBeforeNextFinishedNode = false;\n        node.parserContextFlags |= 16\n        /* ThisNodeHasError */\n        ;\n      }\n\n      return node;\n    }\n\n    function createMissingNode(kind, reportAtCurrentPosition, diagnosticMessage, arg0) {\n      if (reportAtCurrentPosition) {\n        parseErrorAtPosition(scanner.getStartPos(), 0, diagnosticMessage, arg0);\n      } else {\n        parseErrorAtCurrentToken(diagnosticMessage, arg0);\n      }\n\n      var result = createNode(kind, scanner.getStartPos());\n      result.text = \"\";\n      return finishNode(result);\n    }\n\n    function internIdentifier(text) {\n      text = ts.escapeIdentifier(text);\n      return ts.hasProperty(identifiers, text) ? identifiers[text] : identifiers[text] = text;\n    } // An identifier that starts with two underscores has an extra underscore character prepended to it to avoid issues\n    // with magic property names like '__proto__'. The 'identifiers' object is used to share a single string instance for\n    // each identifier in order to reduce memory consumption.\n\n\n    function createIdentifier(isIdentifier, diagnosticMessage) {\n      identifierCount++;\n\n      if (isIdentifier) {\n        var node = createNode(69\n        /* Identifier */\n        ); // Store original token kind if it is not just an Identifier so we can report appropriate error later in type checker\n\n        if (token !== 69\n        /* Identifier */\n        ) {\n            node.originalKeywordKind = token;\n          }\n\n        node.text = internIdentifier(scanner.getTokenValue());\n        nextToken();\n        return finishNode(node);\n      }\n\n      return createMissingNode(69\n      /* Identifier */\n      ,\n      /*reportAtCurrentPosition*/\n      false, diagnosticMessage || ts.Diagnostics.Identifier_expected);\n    }\n\n    function parseIdentifier(diagnosticMessage) {\n      return createIdentifier(isIdentifier(), diagnosticMessage);\n    }\n\n    function parseIdentifierName() {\n      return createIdentifier(ts.tokenIsIdentifierOrKeyword(token));\n    }\n\n    function isLiteralPropertyName() {\n      return ts.tokenIsIdentifierOrKeyword(token) || token === 9\n      /* StringLiteral */\n      || token === 8\n      /* NumericLiteral */\n      ;\n    }\n\n    function parsePropertyNameWorker(allowComputedPropertyNames) {\n      if (token === 9\n      /* StringLiteral */\n      || token === 8\n      /* NumericLiteral */\n      ) {\n          return parseLiteralNode(\n          /*internName*/\n          true);\n        }\n\n      if (allowComputedPropertyNames && token === 19\n      /* OpenBracketToken */\n      ) {\n          return parseComputedPropertyName();\n        }\n\n      return parseIdentifierName();\n    }\n\n    function parsePropertyName() {\n      return parsePropertyNameWorker(\n      /*allowComputedPropertyNames*/\n      true);\n    }\n\n    function parseSimplePropertyName() {\n      return parsePropertyNameWorker(\n      /*allowComputedPropertyNames*/\n      false);\n    }\n\n    function isSimplePropertyName() {\n      return token === 9\n      /* StringLiteral */\n      || token === 8\n      /* NumericLiteral */\n      || ts.tokenIsIdentifierOrKeyword(token);\n    }\n\n    function parseComputedPropertyName() {\n      // PropertyName [Yield]:\n      //      LiteralPropertyName\n      //      ComputedPropertyName[?Yield]\n      var node = createNode(137\n      /* ComputedPropertyName */\n      );\n      parseExpected(19\n      /* OpenBracketToken */\n      ); // We parse any expression (including a comma expression). But the grammar\n      // says that only an assignment expression is allowed, so the grammar checker\n      // will error if it sees a comma expression.\n\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(20\n      /* CloseBracketToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseContextualModifier(t) {\n      return token === t && tryParse(nextTokenCanFollowModifier);\n    }\n\n    function nextTokenIsOnSameLineAndCanFollowModifier() {\n      nextToken();\n\n      if (scanner.hasPrecedingLineBreak()) {\n        return false;\n      }\n\n      return canFollowModifier();\n    }\n\n    function nextTokenCanFollowModifier() {\n      if (token === 74\n      /* ConstKeyword */\n      ) {\n          // 'const' is only a modifier if followed by 'enum'.\n          return nextToken() === 81\n          /* EnumKeyword */\n          ;\n        }\n\n      if (token === 82\n      /* ExportKeyword */\n      ) {\n          nextToken();\n\n          if (token === 77\n          /* DefaultKeyword */\n          ) {\n              return lookAhead(nextTokenIsClassOrFunction);\n            }\n\n          return token !== 37\n          /* AsteriskToken */\n          && token !== 15\n          /* OpenBraceToken */\n          && canFollowModifier();\n        }\n\n      if (token === 77\n      /* DefaultKeyword */\n      ) {\n          return nextTokenIsClassOrFunction();\n        }\n\n      if (token === 113\n      /* StaticKeyword */\n      ) {\n          nextToken();\n          return canFollowModifier();\n        }\n\n      return nextTokenIsOnSameLineAndCanFollowModifier();\n    }\n\n    function parseAnyContextualModifier() {\n      return ts.isModifierKind(token) && tryParse(nextTokenCanFollowModifier);\n    }\n\n    function canFollowModifier() {\n      return token === 19\n      /* OpenBracketToken */\n      || token === 15\n      /* OpenBraceToken */\n      || token === 37\n      /* AsteriskToken */\n      || isLiteralPropertyName();\n    }\n\n    function nextTokenIsClassOrFunction() {\n      nextToken();\n      return token === 73\n      /* ClassKeyword */\n      || token === 87\n      /* FunctionKeyword */\n      ;\n    } // True if positioned at the start of a list element\n\n\n    function isListElement(parsingContext, inErrorRecovery) {\n      var node = currentNode(parsingContext);\n\n      if (node) {\n        return true;\n      }\n\n      switch (parsingContext) {\n        case 0\n        /* SourceElements */\n        :\n        case 1\n        /* BlockStatements */\n        :\n        case 3\n        /* SwitchClauseStatements */\n        :\n          // If we're in error recovery, then we don't want to treat ';' as an empty statement.\n          // The problem is that ';' can show up in far too many contexts, and if we see one\n          // and assume it's a statement, then we may bail out inappropriately from whatever\n          // we're parsing.  For example, if we have a semicolon in the middle of a class, then\n          // we really don't want to assume the class is over and we're on a statement in the\n          // outer module.  We just want to consume and move on.\n          return !(token === 23\n          /* SemicolonToken */\n          && inErrorRecovery) && isStartOfStatement();\n\n        case 2\n        /* SwitchClauses */\n        :\n          return token === 71\n          /* CaseKeyword */\n          || token === 77\n          /* DefaultKeyword */\n          ;\n\n        case 4\n        /* TypeMembers */\n        :\n          return isStartOfTypeMember();\n\n        case 5\n        /* ClassMembers */\n        :\n          // We allow semicolons as class elements (as specified by ES6) as long as we're\n          // not in error recovery.  If we're in error recovery, we don't want an errant\n          // semicolon to be treated as a class member (since they're almost always used\n          // for statements.\n          return lookAhead(isClassMemberStart) || token === 23\n          /* SemicolonToken */\n          && !inErrorRecovery;\n\n        case 6\n        /* EnumMembers */\n        :\n          // Include open bracket computed properties. This technically also lets in indexers,\n          // which would be a candidate for improved error reporting.\n          return token === 19\n          /* OpenBracketToken */\n          || isLiteralPropertyName();\n\n        case 12\n        /* ObjectLiteralMembers */\n        :\n          return token === 19\n          /* OpenBracketToken */\n          || token === 37\n          /* AsteriskToken */\n          || isLiteralPropertyName();\n\n        case 9\n        /* ObjectBindingElements */\n        :\n          return token === 19\n          /* OpenBracketToken */\n          || isLiteralPropertyName();\n\n        case 7\n        /* HeritageClauseElement */\n        :\n          // If we see { } then only consume it as an expression if it is followed by , or {\n          // That way we won't consume the body of a class in its heritage clause.\n          if (token === 15\n          /* OpenBraceToken */\n          ) {\n              return lookAhead(isValidHeritageClauseObjectLiteral);\n            }\n\n          if (!inErrorRecovery) {\n            return isStartOfLeftHandSideExpression() && !isHeritageClauseExtendsOrImplementsKeyword();\n          } else {\n            // If we're in error recovery we tighten up what we're willing to match.\n            // That way we don't treat something like \"this\" as a valid heritage clause\n            // element during recovery.\n            return isIdentifier() && !isHeritageClauseExtendsOrImplementsKeyword();\n          }\n\n        case 8\n        /* VariableDeclarations */\n        :\n          return isIdentifierOrPattern();\n\n        case 10\n        /* ArrayBindingElements */\n        :\n          return token === 24\n          /* CommaToken */\n          || token === 22\n          /* DotDotDotToken */\n          || isIdentifierOrPattern();\n\n        case 17\n        /* TypeParameters */\n        :\n          return isIdentifier();\n\n        case 11\n        /* ArgumentExpressions */\n        :\n        case 15\n        /* ArrayLiteralMembers */\n        :\n          return token === 24\n          /* CommaToken */\n          || token === 22\n          /* DotDotDotToken */\n          || isStartOfExpression();\n\n        case 16\n        /* Parameters */\n        :\n          return isStartOfParameter();\n\n        case 18\n        /* TypeArguments */\n        :\n        case 19\n        /* TupleElementTypes */\n        :\n          return token === 24\n          /* CommaToken */\n          || isStartOfType();\n\n        case 20\n        /* HeritageClauses */\n        :\n          return isHeritageClause();\n\n        case 21\n        /* ImportOrExportSpecifiers */\n        :\n          return ts.tokenIsIdentifierOrKeyword(token);\n\n        case 13\n        /* JsxAttributes */\n        :\n          return ts.tokenIsIdentifierOrKeyword(token) || token === 15\n          /* OpenBraceToken */\n          ;\n\n        case 14\n        /* JsxChildren */\n        :\n          return true;\n\n        case 22\n        /* JSDocFunctionParameters */\n        :\n        case 23\n        /* JSDocTypeArguments */\n        :\n        case 25\n        /* JSDocTupleTypes */\n        :\n          return JSDocParser.isJSDocType();\n\n        case 24\n        /* JSDocRecordMembers */\n        :\n          return isSimplePropertyName();\n      }\n\n      ts.Debug.fail(\"Non-exhaustive case in 'isListElement'.\");\n    }\n\n    function isValidHeritageClauseObjectLiteral() {\n      ts.Debug.assert(token === 15\n      /* OpenBraceToken */\n      );\n\n      if (nextToken() === 16\n      /* CloseBraceToken */\n      ) {\n          // if we see  \"extends {}\" then only treat the {} as what we're extending (and not\n          // the class body) if we have:\n          //\n          //      extends {} {\n          //      extends {},\n          //      extends {} extends\n          //      extends {} implements\n          var next = nextToken();\n          return next === 24\n          /* CommaToken */\n          || next === 15\n          /* OpenBraceToken */\n          || next === 83\n          /* ExtendsKeyword */\n          || next === 106\n          /* ImplementsKeyword */\n          ;\n        }\n\n      return true;\n    }\n\n    function nextTokenIsIdentifier() {\n      nextToken();\n      return isIdentifier();\n    }\n\n    function nextTokenIsIdentifierOrKeyword() {\n      nextToken();\n      return ts.tokenIsIdentifierOrKeyword(token);\n    }\n\n    function isHeritageClauseExtendsOrImplementsKeyword() {\n      if (token === 106\n      /* ImplementsKeyword */\n      || token === 83\n      /* ExtendsKeyword */\n      ) {\n          return lookAhead(nextTokenIsStartOfExpression);\n        }\n\n      return false;\n    }\n\n    function nextTokenIsStartOfExpression() {\n      nextToken();\n      return isStartOfExpression();\n    } // True if positioned at a list terminator\n\n\n    function isListTerminator(kind) {\n      if (token === 1\n      /* EndOfFileToken */\n      ) {\n          // Being at the end of the file ends all lists.\n          return true;\n        }\n\n      switch (kind) {\n        case 1\n        /* BlockStatements */\n        :\n        case 2\n        /* SwitchClauses */\n        :\n        case 4\n        /* TypeMembers */\n        :\n        case 5\n        /* ClassMembers */\n        :\n        case 6\n        /* EnumMembers */\n        :\n        case 12\n        /* ObjectLiteralMembers */\n        :\n        case 9\n        /* ObjectBindingElements */\n        :\n        case 21\n        /* ImportOrExportSpecifiers */\n        :\n          return token === 16\n          /* CloseBraceToken */\n          ;\n\n        case 3\n        /* SwitchClauseStatements */\n        :\n          return token === 16\n          /* CloseBraceToken */\n          || token === 71\n          /* CaseKeyword */\n          || token === 77\n          /* DefaultKeyword */\n          ;\n\n        case 7\n        /* HeritageClauseElement */\n        :\n          return token === 15\n          /* OpenBraceToken */\n          || token === 83\n          /* ExtendsKeyword */\n          || token === 106\n          /* ImplementsKeyword */\n          ;\n\n        case 8\n        /* VariableDeclarations */\n        :\n          return isVariableDeclaratorListTerminator();\n\n        case 17\n        /* TypeParameters */\n        :\n          // Tokens other than '>' are here for better error recovery\n          return token === 27\n          /* GreaterThanToken */\n          || token === 17\n          /* OpenParenToken */\n          || token === 15\n          /* OpenBraceToken */\n          || token === 83\n          /* ExtendsKeyword */\n          || token === 106\n          /* ImplementsKeyword */\n          ;\n\n        case 11\n        /* ArgumentExpressions */\n        :\n          // Tokens other than ')' are here for better error recovery\n          return token === 18\n          /* CloseParenToken */\n          || token === 23\n          /* SemicolonToken */\n          ;\n\n        case 15\n        /* ArrayLiteralMembers */\n        :\n        case 19\n        /* TupleElementTypes */\n        :\n        case 10\n        /* ArrayBindingElements */\n        :\n          return token === 20\n          /* CloseBracketToken */\n          ;\n\n        case 16\n        /* Parameters */\n        :\n          // Tokens other than ')' and ']' (the latter for index signatures) are here for better error recovery\n          return token === 18\n          /* CloseParenToken */\n          || token === 20\n          /* CloseBracketToken */\n\n          /*|| token === SyntaxKind.OpenBraceToken*/\n          ;\n\n        case 18\n        /* TypeArguments */\n        :\n          // Tokens other than '>' are here for better error recovery\n          return token === 27\n          /* GreaterThanToken */\n          || token === 17\n          /* OpenParenToken */\n          ;\n\n        case 20\n        /* HeritageClauses */\n        :\n          return token === 15\n          /* OpenBraceToken */\n          || token === 16\n          /* CloseBraceToken */\n          ;\n\n        case 13\n        /* JsxAttributes */\n        :\n          return token === 27\n          /* GreaterThanToken */\n          || token === 39\n          /* SlashToken */\n          ;\n\n        case 14\n        /* JsxChildren */\n        :\n          return token === 25\n          /* LessThanToken */\n          && lookAhead(nextTokenIsSlash);\n\n        case 22\n        /* JSDocFunctionParameters */\n        :\n          return token === 18\n          /* CloseParenToken */\n          || token === 54\n          /* ColonToken */\n          || token === 16\n          /* CloseBraceToken */\n          ;\n\n        case 23\n        /* JSDocTypeArguments */\n        :\n          return token === 27\n          /* GreaterThanToken */\n          || token === 16\n          /* CloseBraceToken */\n          ;\n\n        case 25\n        /* JSDocTupleTypes */\n        :\n          return token === 20\n          /* CloseBracketToken */\n          || token === 16\n          /* CloseBraceToken */\n          ;\n\n        case 24\n        /* JSDocRecordMembers */\n        :\n          return token === 16\n          /* CloseBraceToken */\n          ;\n      }\n    }\n\n    function isVariableDeclaratorListTerminator() {\n      // If we can consume a semicolon (either explicitly, or with ASI), then consider us done\n      // with parsing the list of  variable declarators.\n      if (canParseSemicolon()) {\n        return true;\n      } // in the case where we're parsing the variable declarator of a 'for-in' statement, we\n      // are done if we see an 'in' keyword in front of us. Same with for-of\n\n\n      if (isInOrOfKeyword(token)) {\n        return true;\n      } // ERROR RECOVERY TWEAK:\n      // For better error recovery, if we see an '=>' then we just stop immediately.  We've got an\n      // arrow function here and it's going to be very unlikely that we'll resynchronize and get\n      // another variable declaration.\n\n\n      if (token === 34\n      /* EqualsGreaterThanToken */\n      ) {\n          return true;\n        } // Keep trying to parse out variable declarators.\n\n\n      return false;\n    } // True if positioned at element or terminator of the current list or any enclosing list\n\n\n    function isInSomeParsingContext() {\n      for (var kind = 0; kind < 26\n      /* Count */\n      ; kind++) {\n        if (parsingContext & 1 << kind) {\n          if (isListElement(kind,\n          /*inErrorRecovery*/\n          true) || isListTerminator(kind)) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    } // Parses a list of elements\n\n\n    function parseList(kind, parseElement) {\n      var saveParsingContext = parsingContext;\n      parsingContext |= 1 << kind;\n      var result = [];\n      result.pos = getNodePos();\n\n      while (!isListTerminator(kind)) {\n        if (isListElement(kind,\n        /*inErrorRecovery*/\n        false)) {\n          var element = parseListElement(kind, parseElement);\n          result.push(element);\n          continue;\n        }\n\n        if (abortParsingListOrMoveToNextToken(kind)) {\n          break;\n        }\n      }\n\n      result.end = getNodeEnd();\n      parsingContext = saveParsingContext;\n      return result;\n    }\n\n    function parseListElement(parsingContext, parseElement) {\n      var node = currentNode(parsingContext);\n\n      if (node) {\n        return consumeNode(node);\n      }\n\n      return parseElement();\n    }\n\n    function currentNode(parsingContext) {\n      // If there is an outstanding parse error that we've encountered, but not attached to\n      // some node, then we cannot get a node from the old source tree.  This is because we\n      // want to mark the next node we encounter as being unusable.\n      //\n      // Note: This may be too conservative.  Perhaps we could reuse the node and set the bit\n      // on it (or its leftmost child) as having the error.  For now though, being conservative\n      // is nice and likely won't ever affect perf.\n      if (parseErrorBeforeNextFinishedNode) {\n        return undefined;\n      }\n\n      if (!syntaxCursor) {\n        // if we don't have a cursor, we could never return a node from the old tree.\n        return undefined;\n      }\n\n      var node = syntaxCursor.currentNode(scanner.getStartPos()); // Can't reuse a missing node.\n\n      if (ts.nodeIsMissing(node)) {\n        return undefined;\n      } // Can't reuse a node that intersected the change range.\n\n\n      if (node.intersectsChange) {\n        return undefined;\n      } // Can't reuse a node that contains a parse error.  This is necessary so that we\n      // produce the same set of errors again.\n\n\n      if (ts.containsParseError(node)) {\n        return undefined;\n      } // We can only reuse a node if it was parsed under the same strict mode that we're\n      // currently in.  i.e. if we originally parsed a node in non-strict mode, but then\n      // the user added 'using strict' at the top of the file, then we can't use that node\n      // again as the presense of strict mode may cause us to parse the tokens in the file\n      // differetly.\n      //\n      // Note: we *can* reuse tokens when the strict mode changes.  That's because tokens\n      // are unaffected by strict mode.  It's just the parser will decide what to do with it\n      // differently depending on what mode it is in.\n      //\n      // This also applies to all our other context flags as well.\n\n\n      var nodeContextFlags = node.parserContextFlags & 63\n      /* ParserGeneratedFlags */\n      ;\n\n      if (nodeContextFlags !== contextFlags) {\n        return undefined;\n      } // Ok, we have a node that looks like it could be reused.  Now verify that it is valid\n      // in the currest list parsing context that we're currently at.\n\n\n      if (!canReuseNode(node, parsingContext)) {\n        return undefined;\n      }\n\n      return node;\n    }\n\n    function consumeNode(node) {\n      // Move the scanner so it is after the node we just consumed.\n      scanner.setTextPos(node.end);\n      nextToken();\n      return node;\n    }\n\n    function canReuseNode(node, parsingContext) {\n      switch (parsingContext) {\n        case 5\n        /* ClassMembers */\n        :\n          return isReusableClassMember(node);\n\n        case 2\n        /* SwitchClauses */\n        :\n          return isReusableSwitchClause(node);\n\n        case 0\n        /* SourceElements */\n        :\n        case 1\n        /* BlockStatements */\n        :\n        case 3\n        /* SwitchClauseStatements */\n        :\n          return isReusableStatement(node);\n\n        case 6\n        /* EnumMembers */\n        :\n          return isReusableEnumMember(node);\n\n        case 4\n        /* TypeMembers */\n        :\n          return isReusableTypeMember(node);\n\n        case 8\n        /* VariableDeclarations */\n        :\n          return isReusableVariableDeclaration(node);\n\n        case 16\n        /* Parameters */\n        :\n          return isReusableParameter(node);\n        // Any other lists we do not care about reusing nodes in.  But feel free to add if\n        // you can do so safely.  Danger areas involve nodes that may involve speculative\n        // parsing.  If speculative parsing is involved with the node, then the range the\n        // parser reached while looking ahead might be in the edited range (see the example\n        // in canReuseVariableDeclaratorNode for a good case of this).\n\n        case 20\n        /* HeritageClauses */\n        : // This would probably be safe to reuse.  There is no speculative parsing with\n        // heritage clauses.\n\n        case 17\n        /* TypeParameters */\n        : // This would probably be safe to reuse.  There is no speculative parsing with\n        // type parameters.  Note that that's because type *parameters* only occur in\n        // unambiguous *type* contexts.  While type *arguments* occur in very ambiguous\n        // *expression* contexts.\n\n        case 19\n        /* TupleElementTypes */\n        : // This would probably be safe to reuse.  There is no speculative parsing with\n        // tuple types.\n        // Technically, type argument list types are probably safe to reuse.  While\n        // speculative parsing is involved with them (since type argument lists are only\n        // produced from speculative parsing a < as a type argument list), we only have\n        // the types because speculative parsing succeeded.  Thus, the lookahead never\n        // went past the end of the list and rewound.\n\n        case 18\n        /* TypeArguments */\n        : // Note: these are almost certainly not safe to ever reuse.  Expressions commonly\n        // need a large amount of lookahead, and we should not reuse them as they may\n        // have actually intersected the edit.\n\n        case 11\n        /* ArgumentExpressions */\n        : // This is not safe to reuse for the same reason as the 'AssignmentExpression'\n        // cases.  i.e. a property assignment may end with an expression, and thus might\n        // have lookahead far beyond it's old node.\n\n        case 12\n        /* ObjectLiteralMembers */\n        : // This is probably not safe to reuse.  There can be speculative parsing with\n        // type names in a heritage clause.  There can be generic names in the type\n        // name list, and there can be left hand side expressions (which can have type\n        // arguments.)\n\n        case 7\n        /* HeritageClauseElement */\n        : // Perhaps safe to reuse, but it's unlikely we'd see more than a dozen attributes\n        // on any given element. Same for children.\n\n        case 13\n        /* JsxAttributes */\n        :\n        case 14\n        /* JsxChildren */\n        :\n      }\n\n      return false;\n    }\n\n    function isReusableClassMember(node) {\n      if (node) {\n        switch (node.kind) {\n          case 145\n          /* Constructor */\n          :\n          case 150\n          /* IndexSignature */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 194\n          /* SemicolonClassElement */\n          :\n            return true;\n\n          case 144\n          /* MethodDeclaration */\n          :\n            // Method declarations are not necessarily reusable.  An object-literal\n            // may have a method calls \"constructor(...)\" and we must reparse that\n            // into an actual .ConstructorDeclaration.\n            var methodDeclaration = node;\n            var nameIsConstructor = methodDeclaration.name.kind === 69\n            /* Identifier */\n            && methodDeclaration.name.originalKeywordKind === 121\n            /* ConstructorKeyword */\n            ;\n            return !nameIsConstructor;\n        }\n      }\n\n      return false;\n    }\n\n    function isReusableSwitchClause(node) {\n      if (node) {\n        switch (node.kind) {\n          case 244\n          /* CaseClause */\n          :\n          case 245\n          /* DefaultClause */\n          :\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isReusableStatement(node) {\n      if (node) {\n        switch (node.kind) {\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 196\n          /* VariableStatement */\n          :\n          case 195\n          /* Block */\n          :\n          case 199\n          /* IfStatement */\n          :\n          case 198\n          /* ExpressionStatement */\n          :\n          case 211\n          /* ThrowStatement */\n          :\n          case 207\n          /* ReturnStatement */\n          :\n          case 209\n          /* SwitchStatement */\n          :\n          case 206\n          /* BreakStatement */\n          :\n          case 205\n          /* ContinueStatement */\n          :\n          case 203\n          /* ForInStatement */\n          :\n          case 204\n          /* ForOfStatement */\n          :\n          case 202\n          /* ForStatement */\n          :\n          case 201\n          /* WhileStatement */\n          :\n          case 208\n          /* WithStatement */\n          :\n          case 197\n          /* EmptyStatement */\n          :\n          case 212\n          /* TryStatement */\n          :\n          case 210\n          /* LabeledStatement */\n          :\n          case 200\n          /* DoStatement */\n          :\n          case 213\n          /* DebuggerStatement */\n          :\n          case 225\n          /* ImportDeclaration */\n          :\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n          case 231\n          /* ExportDeclaration */\n          :\n          case 230\n          /* ExportAssignment */\n          :\n          case 221\n          /* ModuleDeclaration */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n          case 219\n          /* TypeAliasDeclaration */\n          :\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isReusableEnumMember(node) {\n      return node.kind === 250\n      /* EnumMember */\n      ;\n    }\n\n    function isReusableTypeMember(node) {\n      if (node) {\n        switch (node.kind) {\n          case 149\n          /* ConstructSignature */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 150\n          /* IndexSignature */\n          :\n          case 141\n          /* PropertySignature */\n          :\n          case 148\n          /* CallSignature */\n          :\n            return true;\n        }\n      }\n\n      return false;\n    }\n\n    function isReusableVariableDeclaration(node) {\n      if (node.kind !== 214\n      /* VariableDeclaration */\n      ) {\n          return false;\n        } // Very subtle incremental parsing bug.  Consider the following code:\n      //\n      //      let v = new List < A, B\n      //\n      // This is actually legal code.  It's a list of variable declarators \"v = new List<A\"\n      // on one side and \"B\" on the other. If you then change that to:\n      //\n      //      let v = new List < A, B >()\n      //\n      // then we have a problem.  \"v = new List<A\" doesn't intersect the change range, so we\n      // start reparsing at \"B\" and we completely fail to handle this properly.\n      //\n      // In order to prevent this, we do not allow a variable declarator to be reused if it\n      // has an initializer.\n\n\n      var variableDeclarator = node;\n      return variableDeclarator.initializer === undefined;\n    }\n\n    function isReusableParameter(node) {\n      if (node.kind !== 139\n      /* Parameter */\n      ) {\n          return false;\n        } // See the comment in isReusableVariableDeclaration for why we do this.\n\n\n      var parameter = node;\n      return parameter.initializer === undefined;\n    } // Returns true if we should abort parsing.\n\n\n    function abortParsingListOrMoveToNextToken(kind) {\n      parseErrorAtCurrentToken(parsingContextErrors(kind));\n\n      if (isInSomeParsingContext()) {\n        return true;\n      }\n\n      nextToken();\n      return false;\n    }\n\n    function parsingContextErrors(context) {\n      switch (context) {\n        case 0\n        /* SourceElements */\n        :\n          return ts.Diagnostics.Declaration_or_statement_expected;\n\n        case 1\n        /* BlockStatements */\n        :\n          return ts.Diagnostics.Declaration_or_statement_expected;\n\n        case 2\n        /* SwitchClauses */\n        :\n          return ts.Diagnostics.case_or_default_expected;\n\n        case 3\n        /* SwitchClauseStatements */\n        :\n          return ts.Diagnostics.Statement_expected;\n\n        case 4\n        /* TypeMembers */\n        :\n          return ts.Diagnostics.Property_or_signature_expected;\n\n        case 5\n        /* ClassMembers */\n        :\n          return ts.Diagnostics.Unexpected_token_A_constructor_method_accessor_or_property_was_expected;\n\n        case 6\n        /* EnumMembers */\n        :\n          return ts.Diagnostics.Enum_member_expected;\n\n        case 7\n        /* HeritageClauseElement */\n        :\n          return ts.Diagnostics.Expression_expected;\n\n        case 8\n        /* VariableDeclarations */\n        :\n          return ts.Diagnostics.Variable_declaration_expected;\n\n        case 9\n        /* ObjectBindingElements */\n        :\n          return ts.Diagnostics.Property_destructuring_pattern_expected;\n\n        case 10\n        /* ArrayBindingElements */\n        :\n          return ts.Diagnostics.Array_element_destructuring_pattern_expected;\n\n        case 11\n        /* ArgumentExpressions */\n        :\n          return ts.Diagnostics.Argument_expression_expected;\n\n        case 12\n        /* ObjectLiteralMembers */\n        :\n          return ts.Diagnostics.Property_assignment_expected;\n\n        case 15\n        /* ArrayLiteralMembers */\n        :\n          return ts.Diagnostics.Expression_or_comma_expected;\n\n        case 16\n        /* Parameters */\n        :\n          return ts.Diagnostics.Parameter_declaration_expected;\n\n        case 17\n        /* TypeParameters */\n        :\n          return ts.Diagnostics.Type_parameter_declaration_expected;\n\n        case 18\n        /* TypeArguments */\n        :\n          return ts.Diagnostics.Type_argument_expected;\n\n        case 19\n        /* TupleElementTypes */\n        :\n          return ts.Diagnostics.Type_expected;\n\n        case 20\n        /* HeritageClauses */\n        :\n          return ts.Diagnostics.Unexpected_token_expected;\n\n        case 21\n        /* ImportOrExportSpecifiers */\n        :\n          return ts.Diagnostics.Identifier_expected;\n\n        case 13\n        /* JsxAttributes */\n        :\n          return ts.Diagnostics.Identifier_expected;\n\n        case 14\n        /* JsxChildren */\n        :\n          return ts.Diagnostics.Identifier_expected;\n\n        case 22\n        /* JSDocFunctionParameters */\n        :\n          return ts.Diagnostics.Parameter_declaration_expected;\n\n        case 23\n        /* JSDocTypeArguments */\n        :\n          return ts.Diagnostics.Type_argument_expected;\n\n        case 25\n        /* JSDocTupleTypes */\n        :\n          return ts.Diagnostics.Type_expected;\n\n        case 24\n        /* JSDocRecordMembers */\n        :\n          return ts.Diagnostics.Property_assignment_expected;\n      }\n    }\n\n    ; // Parses a comma-delimited list of elements\n\n    function parseDelimitedList(kind, parseElement, considerSemicolonAsDelimeter) {\n      var saveParsingContext = parsingContext;\n      parsingContext |= 1 << kind;\n      var result = [];\n      result.pos = getNodePos();\n      var commaStart = -1; // Meaning the previous token was not a comma\n\n      while (true) {\n        if (isListElement(kind,\n        /*inErrorRecovery*/\n        false)) {\n          result.push(parseListElement(kind, parseElement));\n          commaStart = scanner.getTokenPos();\n\n          if (parseOptional(24\n          /* CommaToken */\n          )) {\n            continue;\n          }\n\n          commaStart = -1; // Back to the state where the last token was not a comma\n\n          if (isListTerminator(kind)) {\n            break;\n          } // We didn't get a comma, and the list wasn't terminated, explicitly parse\n          // out a comma so we give a good error message.\n\n\n          parseExpected(24\n          /* CommaToken */\n          ); // If the token was a semicolon, and the caller allows that, then skip it and\n          // continue.  This ensures we get back on track and don't result in tons of\n          // parse errors.  For example, this can happen when people do things like use\n          // a semicolon to delimit object literal members.   Note: we'll have already\n          // reported an error when we called parseExpected above.\n\n          if (considerSemicolonAsDelimeter && token === 23\n          /* SemicolonToken */\n          && !scanner.hasPrecedingLineBreak()) {\n            nextToken();\n          }\n\n          continue;\n        }\n\n        if (isListTerminator(kind)) {\n          break;\n        }\n\n        if (abortParsingListOrMoveToNextToken(kind)) {\n          break;\n        }\n      } // Recording the trailing comma is deliberately done after the previous\n      // loop, and not just if we see a list terminator. This is because the list\n      // may have ended incorrectly, but it is still important to know if there\n      // was a trailing comma.\n      // Check if the last token was a comma.\n\n\n      if (commaStart >= 0) {\n        // Always preserve a trailing comma by marking it on the NodeArray\n        result.hasTrailingComma = true;\n      }\n\n      result.end = getNodeEnd();\n      parsingContext = saveParsingContext;\n      return result;\n    }\n\n    function createMissingList() {\n      var pos = getNodePos();\n      var result = [];\n      result.pos = pos;\n      result.end = pos;\n      return result;\n    }\n\n    function parseBracketedList(kind, parseElement, open, close) {\n      if (parseExpected(open)) {\n        var result = parseDelimitedList(kind, parseElement);\n        parseExpected(close);\n        return result;\n      }\n\n      return createMissingList();\n    } // The allowReservedWords parameter controls whether reserved words are permitted after the first dot\n\n\n    function parseEntityName(allowReservedWords, diagnosticMessage) {\n      var entity = parseIdentifier(diagnosticMessage);\n\n      while (parseOptional(21\n      /* DotToken */\n      )) {\n        var node = createNode(136\n        /* QualifiedName */\n        , entity.pos);\n        node.left = entity;\n        node.right = parseRightSideOfDot(allowReservedWords);\n        entity = finishNode(node);\n      }\n\n      return entity;\n    }\n\n    function parseRightSideOfDot(allowIdentifierNames) {\n      // Technically a keyword is valid here as all identifiers and keywords are identifier names.\n      // However, often we'll encounter this in error situations when the identifier or keyword\n      // is actually starting another valid construct.\n      //\n      // So, we check for the following specific case:\n      //\n      //      name.\n      //      identifierOrKeyword identifierNameOrKeyword\n      //\n      // Note: the newlines are important here.  For example, if that above code\n      // were rewritten into:\n      //\n      //      name.identifierOrKeyword\n      //      identifierNameOrKeyword\n      //\n      // Then we would consider it valid.  That's because ASI would take effect and\n      // the code would be implicitly: \"name.identifierOrKeyword; identifierNameOrKeyword\".\n      // In the first case though, ASI will not take effect because there is not a\n      // line terminator after the identifier or keyword.\n      if (scanner.hasPrecedingLineBreak() && ts.tokenIsIdentifierOrKeyword(token)) {\n        var matchesPattern = lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);\n\n        if (matchesPattern) {\n          // Report that we need an identifier.  However, report it right after the dot,\n          // and not on the next token.  This is because the next token might actually\n          // be an identifier and the error would be quite confusing.\n          return createMissingNode(69\n          /* Identifier */\n          ,\n          /*reportAtCurrentPosition*/\n          true, ts.Diagnostics.Identifier_expected);\n        }\n      }\n\n      return allowIdentifierNames ? parseIdentifierName() : parseIdentifier();\n    }\n\n    function parseTemplateExpression() {\n      var template = createNode(186\n      /* TemplateExpression */\n      );\n      template.head = parseTemplateLiteralFragment();\n      ts.Debug.assert(template.head.kind === 12\n      /* TemplateHead */\n      , \"Template head has wrong token kind\");\n      var templateSpans = [];\n      templateSpans.pos = getNodePos();\n\n      do {\n        templateSpans.push(parseTemplateSpan());\n      } while (ts.lastOrUndefined(templateSpans).literal.kind === 13\n      /* TemplateMiddle */\n      );\n\n      templateSpans.end = getNodeEnd();\n      template.templateSpans = templateSpans;\n      return finishNode(template);\n    }\n\n    function parseTemplateSpan() {\n      var span = createNode(193\n      /* TemplateSpan */\n      );\n      span.expression = allowInAnd(parseExpression);\n      var literal;\n\n      if (token === 16\n      /* CloseBraceToken */\n      ) {\n          reScanTemplateToken();\n          literal = parseTemplateLiteralFragment();\n        } else {\n        literal = parseExpectedToken(14\n        /* TemplateTail */\n        ,\n        /*reportAtCurrentPosition*/\n        false, ts.Diagnostics._0_expected, ts.tokenToString(16\n        /* CloseBraceToken */\n        ));\n      }\n\n      span.literal = literal;\n      return finishNode(span);\n    }\n\n    function parseStringLiteralTypeNode() {\n      return parseLiteralLikeNode(163\n      /* StringLiteralType */\n      ,\n      /*internName*/\n      true);\n    }\n\n    function parseLiteralNode(internName) {\n      return parseLiteralLikeNode(token, internName);\n    }\n\n    function parseTemplateLiteralFragment() {\n      return parseLiteralLikeNode(token,\n      /*internName*/\n      false);\n    }\n\n    function parseLiteralLikeNode(kind, internName) {\n      var node = createNode(kind);\n      var text = scanner.getTokenValue();\n      node.text = internName ? internIdentifier(text) : text;\n\n      if (scanner.hasExtendedUnicodeEscape()) {\n        node.hasExtendedUnicodeEscape = true;\n      }\n\n      if (scanner.isUnterminated()) {\n        node.isUnterminated = true;\n      }\n\n      var tokenPos = scanner.getTokenPos();\n      nextToken();\n      finishNode(node); // Octal literals are not allowed in strict mode or ES5\n      // Note that theoretically the following condition would hold true literals like 009,\n      // which is not octal.But because of how the scanner separates the tokens, we would\n      // never get a token like this. Instead, we would get 00 and 9 as two separate tokens.\n      // We also do not need to check for negatives because any prefix operator would be part of a\n      // parent unary expression.\n\n      if (node.kind === 8\n      /* NumericLiteral */\n      && sourceText.charCodeAt(tokenPos) === 48\n      /* _0 */\n      && ts.isOctalDigit(sourceText.charCodeAt(tokenPos + 1))) {\n        node.flags |= 32768\n        /* OctalLiteral */\n        ;\n      }\n\n      return node;\n    } // TYPES\n\n\n    function parseTypeReference() {\n      var typeName = parseEntityName(\n      /*allowReservedWords*/\n      false, ts.Diagnostics.Type_expected);\n      var node = createNode(152\n      /* TypeReference */\n      , typeName.pos);\n      node.typeName = typeName;\n\n      if (!scanner.hasPrecedingLineBreak() && token === 25\n      /* LessThanToken */\n      ) {\n          node.typeArguments = parseBracketedList(18\n          /* TypeArguments */\n          , parseType, 25\n          /* LessThanToken */\n          , 27\n          /* GreaterThanToken */\n          );\n        }\n\n      return finishNode(node);\n    }\n\n    function parseThisTypePredicate(lhs) {\n      nextToken();\n      var node = createNode(151\n      /* TypePredicate */\n      , lhs.pos);\n      node.parameterName = lhs;\n      node.type = parseType();\n      return finishNode(node);\n    }\n\n    function parseThisTypeNode() {\n      var node = createNode(162\n      /* ThisType */\n      );\n      nextToken();\n      return finishNode(node);\n    }\n\n    function parseTypeQuery() {\n      var node = createNode(155\n      /* TypeQuery */\n      );\n      parseExpected(101\n      /* TypeOfKeyword */\n      );\n      node.exprName = parseEntityName(\n      /*allowReservedWords*/\n      true);\n      return finishNode(node);\n    }\n\n    function parseTypeParameter() {\n      var node = createNode(138\n      /* TypeParameter */\n      );\n      node.name = parseIdentifier();\n\n      if (parseOptional(83\n      /* ExtendsKeyword */\n      )) {\n        // It's not uncommon for people to write improper constraints to a generic.  If the\n        // user writes a constraint that is an expression and not an actual type, then parse\n        // it out as an expression (so we can recover well), but report that a type is needed\n        // instead.\n        if (isStartOfType() || !isStartOfExpression()) {\n          node.constraint = parseType();\n        } else {\n          // It was not a type, and it looked like an expression.  Parse out an expression\n          // here so we recover well.  Note: it is important that we call parseUnaryExpression\n          // and not parseExpression here.  If the user has:\n          //\n          //      <T extends \"\">\n          //\n          // We do *not* want to consume the  >  as we're consuming the expression for \"\".\n          node.expression = parseUnaryExpressionOrHigher();\n        }\n      }\n\n      return finishNode(node);\n    }\n\n    function parseTypeParameters() {\n      if (token === 25\n      /* LessThanToken */\n      ) {\n          return parseBracketedList(17\n          /* TypeParameters */\n          , parseTypeParameter, 25\n          /* LessThanToken */\n          , 27\n          /* GreaterThanToken */\n          );\n        }\n    }\n\n    function parseParameterType() {\n      if (parseOptional(54\n      /* ColonToken */\n      )) {\n        return parseType();\n      }\n\n      return undefined;\n    }\n\n    function isStartOfParameter() {\n      return token === 22\n      /* DotDotDotToken */\n      || isIdentifierOrPattern() || ts.isModifierKind(token) || token === 55\n      /* AtToken */\n      ;\n    }\n\n    function setModifiers(node, modifiers) {\n      if (modifiers) {\n        node.flags |= modifiers.flags;\n        node.modifiers = modifiers;\n      }\n    }\n\n    function parseParameter() {\n      var node = createNode(139\n      /* Parameter */\n      );\n      node.decorators = parseDecorators();\n      setModifiers(node, parseModifiers());\n      node.dotDotDotToken = parseOptionalToken(22\n      /* DotDotDotToken */\n      ); // FormalParameter [Yield,Await]:\n      //      BindingElement[?Yield,?Await]\n\n      node.name = parseIdentifierOrPattern();\n\n      if (ts.getFullWidth(node.name) === 0 && node.flags === 0 && ts.isModifierKind(token)) {\n        // in cases like\n        // 'use strict'\n        // function foo(static)\n        // isParameter('static') === true, because of isModifier('static')\n        // however 'static' is not a legal identifier in a strict mode.\n        // so result of this function will be ParameterDeclaration (flags = 0, name = missing, type = undefined, initializer = undefined)\n        // and current token will not change => parsing of the enclosing parameter list will last till the end of time (or OOM)\n        // to avoid this we'll advance cursor to the next token.\n        nextToken();\n      }\n\n      node.questionToken = parseOptionalToken(53\n      /* QuestionToken */\n      );\n      node.type = parseParameterType();\n      node.initializer = parseBindingElementInitializer(\n      /*inParameter*/\n      true); // Do not check for initializers in an ambient context for parameters. This is not\n      // a grammar error because the grammar allows arbitrary call signatures in\n      // an ambient context.\n      // It is actually not necessary for this to be an error at all. The reason is that\n      // function/constructor implementations are syntactically disallowed in ambient\n      // contexts. In addition, parameter initializers are semantically disallowed in\n      // overload signatures. So parameter initializers are transitively disallowed in\n      // ambient contexts.\n\n      return addJSDocComment(finishNode(node));\n    }\n\n    function parseBindingElementInitializer(inParameter) {\n      return inParameter ? parseParameterInitializer() : parseNonParameterInitializer();\n    }\n\n    function parseParameterInitializer() {\n      return parseInitializer(\n      /*inParameter*/\n      true);\n    }\n\n    function fillSignature(returnToken, yieldContext, awaitContext, requireCompleteParameterList, signature) {\n      var returnTokenRequired = returnToken === 34\n      /* EqualsGreaterThanToken */\n      ;\n      signature.typeParameters = parseTypeParameters();\n      signature.parameters = parseParameterList(yieldContext, awaitContext, requireCompleteParameterList);\n\n      if (returnTokenRequired) {\n        parseExpected(returnToken);\n        signature.type = parseTypeOrTypePredicate();\n      } else if (parseOptional(returnToken)) {\n        signature.type = parseTypeOrTypePredicate();\n      }\n    }\n\n    function parseParameterList(yieldContext, awaitContext, requireCompleteParameterList) {\n      // FormalParameters [Yield,Await]: (modified)\n      //      [empty]\n      //      FormalParameterList[?Yield,Await]\n      //\n      // FormalParameter[Yield,Await]: (modified)\n      //      BindingElement[?Yield,Await]\n      //\n      // BindingElement [Yield,Await]: (modified)\n      //      SingleNameBinding[?Yield,?Await]\n      //      BindingPattern[?Yield,?Await]Initializer [In, ?Yield,?Await] opt\n      //\n      // SingleNameBinding [Yield,Await]:\n      //      BindingIdentifier[?Yield,?Await]Initializer [In, ?Yield,?Await] opt\n      if (parseExpected(17\n      /* OpenParenToken */\n      )) {\n        var savedYieldContext = inYieldContext();\n        var savedAwaitContext = inAwaitContext();\n        setYieldContext(yieldContext);\n        setAwaitContext(awaitContext);\n        var result = parseDelimitedList(16\n        /* Parameters */\n        , parseParameter);\n        setYieldContext(savedYieldContext);\n        setAwaitContext(savedAwaitContext);\n\n        if (!parseExpected(18\n        /* CloseParenToken */\n        ) && requireCompleteParameterList) {\n          // Caller insisted that we had to end with a )   We didn't.  So just return\n          // undefined here.\n          return undefined;\n        }\n\n        return result;\n      } // We didn't even have an open paren.  If the caller requires a complete parameter list,\n      // we definitely can't provide that.  However, if they're ok with an incomplete one,\n      // then just return an empty set of parameters.\n\n\n      return requireCompleteParameterList ? undefined : createMissingList();\n    }\n\n    function parseTypeMemberSemicolon() {\n      // We allow type members to be separated by commas or (possibly ASI) semicolons.\n      // First check if it was a comma.  If so, we're done with the member.\n      if (parseOptional(24\n      /* CommaToken */\n      )) {\n        return;\n      } // Didn't have a comma.  We must have a (possible ASI) semicolon.\n\n\n      parseSemicolon();\n    }\n\n    function parseSignatureMember(kind) {\n      var node = createNode(kind);\n\n      if (kind === 149\n      /* ConstructSignature */\n      ) {\n          parseExpected(92\n          /* NewKeyword */\n          );\n        }\n\n      fillSignature(54\n      /* ColonToken */\n      ,\n      /*yieldContext*/\n      false,\n      /*awaitContext*/\n      false,\n      /*requireCompleteParameterList*/\n      false, node);\n      parseTypeMemberSemicolon();\n      return finishNode(node);\n    }\n\n    function isIndexSignature() {\n      if (token !== 19\n      /* OpenBracketToken */\n      ) {\n          return false;\n        }\n\n      return lookAhead(isUnambiguouslyIndexSignature);\n    }\n\n    function isUnambiguouslyIndexSignature() {\n      // The only allowed sequence is:\n      //\n      //   [id:\n      //\n      // However, for error recovery, we also check the following cases:\n      //\n      //   [...\n      //   [id,\n      //   [id?,\n      //   [id?:\n      //   [id?]\n      //   [public id\n      //   [private id\n      //   [protected id\n      //   []\n      //\n      nextToken();\n\n      if (token === 22\n      /* DotDotDotToken */\n      || token === 20\n      /* CloseBracketToken */\n      ) {\n          return true;\n        }\n\n      if (ts.isModifierKind(token)) {\n        nextToken();\n\n        if (isIdentifier()) {\n          return true;\n        }\n      } else if (!isIdentifier()) {\n        return false;\n      } else {\n        // Skip the identifier\n        nextToken();\n      } // A colon signifies a well formed indexer\n      // A comma should be a badly formed indexer because comma expressions are not allowed\n      // in computed properties.\n\n\n      if (token === 54\n      /* ColonToken */\n      || token === 24\n      /* CommaToken */\n      ) {\n          return true;\n        } // Question mark could be an indexer with an optional property,\n      // or it could be a conditional expression in a computed property.\n\n\n      if (token !== 53\n      /* QuestionToken */\n      ) {\n          return false;\n        } // If any of the following tokens are after the question mark, it cannot\n      // be a conditional expression, so treat it as an indexer.\n\n\n      nextToken();\n      return token === 54\n      /* ColonToken */\n      || token === 24\n      /* CommaToken */\n      || token === 20\n      /* CloseBracketToken */\n      ;\n    }\n\n    function parseIndexSignatureDeclaration(fullStart, decorators, modifiers) {\n      var node = createNode(150\n      /* IndexSignature */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      node.parameters = parseBracketedList(16\n      /* Parameters */\n      , parseParameter, 19\n      /* OpenBracketToken */\n      , 20\n      /* CloseBracketToken */\n      );\n      node.type = parseTypeAnnotation();\n      parseTypeMemberSemicolon();\n      return finishNode(node);\n    }\n\n    function parsePropertyOrMethodSignature() {\n      var fullStart = scanner.getStartPos();\n      var name = parsePropertyName();\n      var questionToken = parseOptionalToken(53\n      /* QuestionToken */\n      );\n\n      if (token === 17\n      /* OpenParenToken */\n      || token === 25\n      /* LessThanToken */\n      ) {\n          var method = createNode(143\n          /* MethodSignature */\n          , fullStart);\n          method.name = name;\n          method.questionToken = questionToken; // Method signatues don't exist in expression contexts.  So they have neither\n          // [Yield] nor [Await]\n\n          fillSignature(54\n          /* ColonToken */\n          ,\n          /*yieldContext*/\n          false,\n          /*awaitContext*/\n          false,\n          /*requireCompleteParameterList*/\n          false, method);\n          parseTypeMemberSemicolon();\n          return finishNode(method);\n        } else {\n        var property = createNode(141\n        /* PropertySignature */\n        , fullStart);\n        property.name = name;\n        property.questionToken = questionToken;\n        property.type = parseTypeAnnotation();\n\n        if (token === 56\n        /* EqualsToken */\n        ) {\n            // Although type literal properties cannot not have initializers, we attempt\n            // to parse an initializer so we can report in the checker that an interface\n            // property or type literal property cannot have an initializer.\n            property.initializer = parseNonParameterInitializer();\n          }\n\n        parseTypeMemberSemicolon();\n        return finishNode(property);\n      }\n    }\n\n    function isStartOfTypeMember() {\n      switch (token) {\n        case 17\n        /* OpenParenToken */\n        :\n        case 25\n        /* LessThanToken */\n        :\n        case 19\n        /* OpenBracketToken */\n        :\n          return true;\n\n        default:\n          if (ts.isModifierKind(token)) {\n            var result = lookAhead(isStartOfIndexSignatureDeclaration);\n\n            if (result) {\n              return result;\n            }\n          }\n\n          return isLiteralPropertyName() && lookAhead(isTypeMemberWithLiteralPropertyName);\n      }\n    }\n\n    function isStartOfIndexSignatureDeclaration() {\n      while (ts.isModifierKind(token)) {\n        nextToken();\n      }\n\n      return isIndexSignature();\n    }\n\n    function isTypeMemberWithLiteralPropertyName() {\n      nextToken();\n      return token === 17\n      /* OpenParenToken */\n      || token === 25\n      /* LessThanToken */\n      || token === 53\n      /* QuestionToken */\n      || token === 54\n      /* ColonToken */\n      || canParseSemicolon();\n    }\n\n    function parseTypeMember() {\n      switch (token) {\n        case 17\n        /* OpenParenToken */\n        :\n        case 25\n        /* LessThanToken */\n        :\n          return parseSignatureMember(148\n          /* CallSignature */\n          );\n\n        case 19\n        /* OpenBracketToken */\n        :\n          // Indexer or computed property\n          return isIndexSignature() ? parseIndexSignatureDeclaration(scanner.getStartPos(),\n          /*decorators*/\n          undefined,\n          /*modifiers*/\n          undefined) : parsePropertyOrMethodSignature();\n\n        case 92\n        /* NewKeyword */\n        :\n          if (lookAhead(isStartOfConstructSignature)) {\n            return parseSignatureMember(149\n            /* ConstructSignature */\n            );\n          }\n\n        // fall through.\n\n        case 9\n        /* StringLiteral */\n        :\n        case 8\n        /* NumericLiteral */\n        :\n          return parsePropertyOrMethodSignature();\n\n        default:\n          // Index declaration as allowed as a type member.  But as per the grammar,\n          // they also allow modifiers. So we have to check for an index declaration\n          // that might be following modifiers. This ensures that things work properly\n          // when incrementally parsing as the parser will produce the Index declaration\n          // if it has the same text regardless of whether it is inside a class or an\n          // object type.\n          if (ts.isModifierKind(token)) {\n            var result = tryParse(parseIndexSignatureWithModifiers);\n\n            if (result) {\n              return result;\n            }\n          }\n\n          if (ts.tokenIsIdentifierOrKeyword(token)) {\n            return parsePropertyOrMethodSignature();\n          }\n\n      }\n    }\n\n    function parseIndexSignatureWithModifiers() {\n      var fullStart = scanner.getStartPos();\n      var decorators = parseDecorators();\n      var modifiers = parseModifiers();\n      return isIndexSignature() ? parseIndexSignatureDeclaration(fullStart, decorators, modifiers) : undefined;\n    }\n\n    function isStartOfConstructSignature() {\n      nextToken();\n      return token === 17\n      /* OpenParenToken */\n      || token === 25\n      /* LessThanToken */\n      ;\n    }\n\n    function parseTypeLiteral() {\n      var node = createNode(156\n      /* TypeLiteral */\n      );\n      node.members = parseObjectTypeMembers();\n      return finishNode(node);\n    }\n\n    function parseObjectTypeMembers() {\n      var members;\n\n      if (parseExpected(15\n      /* OpenBraceToken */\n      )) {\n        members = parseList(4\n        /* TypeMembers */\n        , parseTypeMember);\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n      } else {\n        members = createMissingList();\n      }\n\n      return members;\n    }\n\n    function parseTupleType() {\n      var node = createNode(158\n      /* TupleType */\n      );\n      node.elementTypes = parseBracketedList(19\n      /* TupleElementTypes */\n      , parseType, 19\n      /* OpenBracketToken */\n      , 20\n      /* CloseBracketToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseParenthesizedType() {\n      var node = createNode(161\n      /* ParenthesizedType */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.type = parseType();\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseFunctionOrConstructorType(kind) {\n      var node = createNode(kind);\n\n      if (kind === 154\n      /* ConstructorType */\n      ) {\n          parseExpected(92\n          /* NewKeyword */\n          );\n        }\n\n      fillSignature(34\n      /* EqualsGreaterThanToken */\n      ,\n      /*yieldContext*/\n      false,\n      /*awaitContext*/\n      false,\n      /*requireCompleteParameterList*/\n      false, node);\n      return finishNode(node);\n    }\n\n    function parseKeywordAndNoDot() {\n      var node = parseTokenNode();\n      return token === 21\n      /* DotToken */\n      ? undefined : node;\n    }\n\n    function parseNonArrayType() {\n      switch (token) {\n        case 117\n        /* AnyKeyword */\n        :\n        case 130\n        /* StringKeyword */\n        :\n        case 128\n        /* NumberKeyword */\n        :\n        case 120\n        /* BooleanKeyword */\n        :\n        case 131\n        /* SymbolKeyword */\n        :\n          // If these are followed by a dot, then parse these out as a dotted type reference instead.\n          var node = tryParse(parseKeywordAndNoDot);\n          return node || parseTypeReference();\n\n        case 9\n        /* StringLiteral */\n        :\n          return parseStringLiteralTypeNode();\n\n        case 103\n        /* VoidKeyword */\n        :\n          return parseTokenNode();\n\n        case 97\n        /* ThisKeyword */\n        :\n          {\n            var thisKeyword = parseThisTypeNode();\n\n            if (token === 124\n            /* IsKeyword */\n            && !scanner.hasPrecedingLineBreak()) {\n              return parseThisTypePredicate(thisKeyword);\n            } else {\n              return thisKeyword;\n            }\n          }\n\n        case 101\n        /* TypeOfKeyword */\n        :\n          return parseTypeQuery();\n\n        case 15\n        /* OpenBraceToken */\n        :\n          return parseTypeLiteral();\n\n        case 19\n        /* OpenBracketToken */\n        :\n          return parseTupleType();\n\n        case 17\n        /* OpenParenToken */\n        :\n          return parseParenthesizedType();\n\n        default:\n          return parseTypeReference();\n      }\n    }\n\n    function isStartOfType() {\n      switch (token) {\n        case 117\n        /* AnyKeyword */\n        :\n        case 130\n        /* StringKeyword */\n        :\n        case 128\n        /* NumberKeyword */\n        :\n        case 120\n        /* BooleanKeyword */\n        :\n        case 131\n        /* SymbolKeyword */\n        :\n        case 103\n        /* VoidKeyword */\n        :\n        case 97\n        /* ThisKeyword */\n        :\n        case 101\n        /* TypeOfKeyword */\n        :\n        case 15\n        /* OpenBraceToken */\n        :\n        case 19\n        /* OpenBracketToken */\n        :\n        case 25\n        /* LessThanToken */\n        :\n        case 92\n        /* NewKeyword */\n        :\n        case 9\n        /* StringLiteral */\n        :\n          return true;\n\n        case 17\n        /* OpenParenToken */\n        :\n          // Only consider '(' the start of a type if followed by ')', '...', an identifier, a modifier,\n          // or something that starts a type. We don't want to consider things like '(1)' a type.\n          return lookAhead(isStartOfParenthesizedOrFunctionType);\n\n        default:\n          return isIdentifier();\n      }\n    }\n\n    function isStartOfParenthesizedOrFunctionType() {\n      nextToken();\n      return token === 18\n      /* CloseParenToken */\n      || isStartOfParameter() || isStartOfType();\n    }\n\n    function parseArrayTypeOrHigher() {\n      var type = parseNonArrayType();\n\n      while (!scanner.hasPrecedingLineBreak() && parseOptional(19\n      /* OpenBracketToken */\n      )) {\n        parseExpected(20\n        /* CloseBracketToken */\n        );\n        var node = createNode(157\n        /* ArrayType */\n        , type.pos);\n        node.elementType = type;\n        type = finishNode(node);\n      }\n\n      return type;\n    }\n\n    function parseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n      var type = parseConstituentType();\n\n      if (token === operator) {\n        var types = [type];\n        types.pos = type.pos;\n\n        while (parseOptional(operator)) {\n          types.push(parseConstituentType());\n        }\n\n        types.end = getNodeEnd();\n        var node = createNode(kind, type.pos);\n        node.types = types;\n        type = finishNode(node);\n      }\n\n      return type;\n    }\n\n    function parseIntersectionTypeOrHigher() {\n      return parseUnionOrIntersectionType(160\n      /* IntersectionType */\n      , parseArrayTypeOrHigher, 46\n      /* AmpersandToken */\n      );\n    }\n\n    function parseUnionTypeOrHigher() {\n      return parseUnionOrIntersectionType(159\n      /* UnionType */\n      , parseIntersectionTypeOrHigher, 47\n      /* BarToken */\n      );\n    }\n\n    function isStartOfFunctionType() {\n      if (token === 25\n      /* LessThanToken */\n      ) {\n          return true;\n        }\n\n      return token === 17\n      /* OpenParenToken */\n      && lookAhead(isUnambiguouslyStartOfFunctionType);\n    }\n\n    function isUnambiguouslyStartOfFunctionType() {\n      nextToken();\n\n      if (token === 18\n      /* CloseParenToken */\n      || token === 22\n      /* DotDotDotToken */\n      ) {\n          // ( )\n          // ( ...\n          return true;\n        }\n\n      if (isIdentifier() || ts.isModifierKind(token)) {\n        nextToken();\n\n        if (token === 54\n        /* ColonToken */\n        || token === 24\n        /* CommaToken */\n        || token === 53\n        /* QuestionToken */\n        || token === 56\n        /* EqualsToken */\n        || isIdentifier() || ts.isModifierKind(token)) {\n          // ( id :\n          // ( id ,\n          // ( id ?\n          // ( id =\n          // ( modifier id\n          return true;\n        }\n\n        if (token === 18\n        /* CloseParenToken */\n        ) {\n            nextToken();\n\n            if (token === 34\n            /* EqualsGreaterThanToken */\n            ) {\n                // ( id ) =>\n                return true;\n              }\n          }\n      }\n\n      return false;\n    }\n\n    function parseTypeOrTypePredicate() {\n      var typePredicateVariable = isIdentifier() && tryParse(parseTypePredicatePrefix);\n      var type = parseType();\n\n      if (typePredicateVariable) {\n        var node = createNode(151\n        /* TypePredicate */\n        , typePredicateVariable.pos);\n        node.parameterName = typePredicateVariable;\n        node.type = type;\n        return finishNode(node);\n      } else {\n        return type;\n      }\n    }\n\n    function parseTypePredicatePrefix() {\n      var id = parseIdentifier();\n\n      if (token === 124\n      /* IsKeyword */\n      && !scanner.hasPrecedingLineBreak()) {\n        nextToken();\n        return id;\n      }\n    }\n\n    function parseType() {\n      // The rules about 'yield' only apply to actual code/expression contexts.  They don't\n      // apply to 'type' contexts.  So we disable these parameters here before moving on.\n      return doOutsideOfContext(10\n      /* TypeExcludesFlags */\n      , parseTypeWorker);\n    }\n\n    function parseTypeWorker() {\n      if (isStartOfFunctionType()) {\n        return parseFunctionOrConstructorType(153\n        /* FunctionType */\n        );\n      }\n\n      if (token === 92\n      /* NewKeyword */\n      ) {\n          return parseFunctionOrConstructorType(154\n          /* ConstructorType */\n          );\n        }\n\n      return parseUnionTypeOrHigher();\n    }\n\n    function parseTypeAnnotation() {\n      return parseOptional(54\n      /* ColonToken */\n      ) ? parseType() : undefined;\n    } // EXPRESSIONS\n\n\n    function isStartOfLeftHandSideExpression() {\n      switch (token) {\n        case 97\n        /* ThisKeyword */\n        :\n        case 95\n        /* SuperKeyword */\n        :\n        case 93\n        /* NullKeyword */\n        :\n        case 99\n        /* TrueKeyword */\n        :\n        case 84\n        /* FalseKeyword */\n        :\n        case 8\n        /* NumericLiteral */\n        :\n        case 9\n        /* StringLiteral */\n        :\n        case 11\n        /* NoSubstitutionTemplateLiteral */\n        :\n        case 12\n        /* TemplateHead */\n        :\n        case 17\n        /* OpenParenToken */\n        :\n        case 19\n        /* OpenBracketToken */\n        :\n        case 15\n        /* OpenBraceToken */\n        :\n        case 87\n        /* FunctionKeyword */\n        :\n        case 73\n        /* ClassKeyword */\n        :\n        case 92\n        /* NewKeyword */\n        :\n        case 39\n        /* SlashToken */\n        :\n        case 61\n        /* SlashEqualsToken */\n        :\n        case 69\n        /* Identifier */\n        :\n          return true;\n\n        default:\n          return isIdentifier();\n      }\n    }\n\n    function isStartOfExpression() {\n      if (isStartOfLeftHandSideExpression()) {\n        return true;\n      }\n\n      switch (token) {\n        case 35\n        /* PlusToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n        case 50\n        /* TildeToken */\n        :\n        case 49\n        /* ExclamationToken */\n        :\n        case 78\n        /* DeleteKeyword */\n        :\n        case 101\n        /* TypeOfKeyword */\n        :\n        case 103\n        /* VoidKeyword */\n        :\n        case 41\n        /* PlusPlusToken */\n        :\n        case 42\n        /* MinusMinusToken */\n        :\n        case 25\n        /* LessThanToken */\n        :\n        case 119\n        /* AwaitKeyword */\n        :\n        case 114\n        /* YieldKeyword */\n        :\n          // Yield/await always starts an expression.  Either it is an identifier (in which case\n          // it is definitely an expression).  Or it's a keyword (either because we're in\n          // a generator or async function, or in strict mode (or both)) and it started a yield or await expression.\n          return true;\n\n        default:\n          // Error tolerance.  If we see the start of some binary operator, we consider\n          // that the start of an expression.  That way we'll parse out a missing identifier,\n          // give a good message about an identifier being missing, and then consume the\n          // rest of the binary expression.\n          if (isBinaryOperator()) {\n            return true;\n          }\n\n          return isIdentifier();\n      }\n    }\n\n    function isStartOfExpressionStatement() {\n      // As per the grammar, none of '{' or 'function' or 'class' can start an expression statement.\n      return token !== 15\n      /* OpenBraceToken */\n      && token !== 87\n      /* FunctionKeyword */\n      && token !== 73\n      /* ClassKeyword */\n      && token !== 55\n      /* AtToken */\n      && isStartOfExpression();\n    }\n\n    function parseExpression() {\n      // Expression[in]:\n      //      AssignmentExpression[in]\n      //      Expression[in] , AssignmentExpression[in]\n      // clear the decorator context when parsing Expression, as it should be unambiguous when parsing a decorator\n      var saveDecoratorContext = inDecoratorContext();\n\n      if (saveDecoratorContext) {\n        setDecoratorContext(\n        /*val*/\n        false);\n      }\n\n      var expr = parseAssignmentExpressionOrHigher();\n      var operatorToken;\n\n      while (operatorToken = parseOptionalToken(24\n      /* CommaToken */\n      )) {\n        expr = makeBinaryExpression(expr, operatorToken, parseAssignmentExpressionOrHigher());\n      }\n\n      if (saveDecoratorContext) {\n        setDecoratorContext(\n        /*val*/\n        true);\n      }\n\n      return expr;\n    }\n\n    function parseInitializer(inParameter) {\n      if (token !== 56\n      /* EqualsToken */\n      ) {\n          // It's not uncommon during typing for the user to miss writing the '=' token.  Check if\n          // there is no newline after the last token and if we're on an expression.  If so, parse\n          // this as an equals-value clause with a missing equals.\n          // NOTE: There are two places where we allow equals-value clauses.  The first is in a\n          // variable declarator.  The second is with a parameter.  For variable declarators\n          // it's more likely that a { would be a allowed (as an object literal).  While this\n          // is also allowed for parameters, the risk is that we consume the { as an object\n          // literal when it really will be for the block following the parameter.\n          if (scanner.hasPrecedingLineBreak() || inParameter && token === 15\n          /* OpenBraceToken */\n          || !isStartOfExpression()) {\n            // preceding line break, open brace in a parameter (likely a function body) or current token is not an expression -\n            // do not try to parse initializer\n            return undefined;\n          }\n        } // Initializer[In, Yield] :\n      //     = AssignmentExpression[?In, ?Yield]\n\n\n      parseExpected(56\n      /* EqualsToken */\n      );\n      return parseAssignmentExpressionOrHigher();\n    }\n\n    function parseAssignmentExpressionOrHigher() {\n      //  AssignmentExpression[in,yield]:\n      //      1) ConditionalExpression[?in,?yield]\n      //      2) LeftHandSideExpression = AssignmentExpression[?in,?yield]\n      //      3) LeftHandSideExpression AssignmentOperator AssignmentExpression[?in,?yield]\n      //      4) ArrowFunctionExpression[?in,?yield]\n      //      5) [+Yield] YieldExpression[?In]\n      //\n      // Note: for ease of implementation we treat productions '2' and '3' as the same thing.\n      // (i.e. they're both BinaryExpressions with an assignment operator in it).\n      // First, do the simple check if we have a YieldExpression (production '5').\n      if (isYieldExpression()) {\n        return parseYieldExpression();\n      } // Then, check if we have an arrow function (production '4') that starts with a parenthesized\n      // parameter list. If we do, we must *not* recurse for productions 1, 2 or 3. An ArrowFunction is\n      // not a  LeftHandSideExpression, nor does it start a ConditionalExpression.  So we are done\n      // with AssignmentExpression if we see one.\n\n\n      var arrowExpression = tryParseParenthesizedArrowFunctionExpression();\n\n      if (arrowExpression) {\n        return arrowExpression;\n      } // Now try to see if we're in production '1', '2' or '3'.  A conditional expression can\n      // start with a LogicalOrExpression, while the assignment productions can only start with\n      // LeftHandSideExpressions.\n      //\n      // So, first, we try to just parse out a BinaryExpression.  If we get something that is a\n      // LeftHandSide or higher, then we can try to parse out the assignment expression part.\n      // Otherwise, we try to parse out the conditional expression bit.  We want to allow any\n      // binary expression here, so we pass in the 'lowest' precedence here so that it matches\n      // and consumes anything.\n\n\n      var expr = parseBinaryExpressionOrHigher(\n      /*precedence*/\n      0); // To avoid a look-ahead, we did not handle the case of an arrow function with a single un-parenthesized\n      // parameter ('x => ...') above. We handle it here by checking if the parsed expression was a single\n      // identifier and the current token is an arrow.\n\n      if (expr.kind === 69\n      /* Identifier */\n      && token === 34\n      /* EqualsGreaterThanToken */\n      ) {\n          return parseSimpleArrowFunctionExpression(expr);\n        } // Now see if we might be in cases '2' or '3'.\n      // If the expression was a LHS expression, and we have an assignment operator, then\n      // we're in '2' or '3'. Consume the assignment and return.\n      //\n      // Note: we call reScanGreaterToken so that we get an appropriately merged token\n      // for cases like > > =  becoming >>=\n\n\n      if (ts.isLeftHandSideExpression(expr) && ts.isAssignmentOperator(reScanGreaterToken())) {\n        return makeBinaryExpression(expr, parseTokenNode(), parseAssignmentExpressionOrHigher());\n      } // It wasn't an assignment or a lambda.  This is a conditional expression:\n\n\n      return parseConditionalExpressionRest(expr);\n    }\n\n    function isYieldExpression() {\n      if (token === 114\n      /* YieldKeyword */\n      ) {\n          // If we have a 'yield' keyword, and htis is a context where yield expressions are\n          // allowed, then definitely parse out a yield expression.\n          if (inYieldContext()) {\n            return true;\n          } // We're in a context where 'yield expr' is not allowed.  However, if we can\n          // definitely tell that the user was trying to parse a 'yield expr' and not\n          // just a normal expr that start with a 'yield' identifier, then parse out\n          // a 'yield expr'.  We can then report an error later that they are only\n          // allowed in generator expressions.\n          //\n          // for example, if we see 'yield(foo)', then we'll have to treat that as an\n          // invocation expression of something called 'yield'.  However, if we have\n          // 'yield foo' then that is not legal as a normal expression, so we can\n          // definitely recognize this as a yield expression.\n          //\n          // for now we just check if the next token is an identifier.  More heuristics\n          // can be added here later as necessary.  We just need to make sure that we\n          // don't accidently consume something legal.\n\n\n          return lookAhead(nextTokenIsIdentifierOrKeywordOrNumberOnSameLine);\n        }\n\n      return false;\n    }\n\n    function nextTokenIsIdentifierOnSameLine() {\n      nextToken();\n      return !scanner.hasPrecedingLineBreak() && isIdentifier();\n    }\n\n    function parseYieldExpression() {\n      var node = createNode(187\n      /* YieldExpression */\n      ); // YieldExpression[In] :\n      //      yield\n      //      yield [no LineTerminator here] [Lexical goal InputElementRegExp]AssignmentExpression[?In, Yield]\n      //      yield [no LineTerminator here] * [Lexical goal InputElementRegExp]AssignmentExpression[?In, Yield]\n\n      nextToken();\n\n      if (!scanner.hasPrecedingLineBreak() && (token === 37\n      /* AsteriskToken */\n      || isStartOfExpression())) {\n        node.asteriskToken = parseOptionalToken(37\n        /* AsteriskToken */\n        );\n        node.expression = parseAssignmentExpressionOrHigher();\n        return finishNode(node);\n      } else {\n        // if the next token is not on the same line as yield.  or we don't have an '*' or\n        // the start of an expressin, then this is just a simple \"yield\" expression.\n        return finishNode(node);\n      }\n    }\n\n    function parseSimpleArrowFunctionExpression(identifier) {\n      ts.Debug.assert(token === 34\n      /* EqualsGreaterThanToken */\n      , \"parseSimpleArrowFunctionExpression should only have been called if we had a =>\");\n      var node = createNode(177\n      /* ArrowFunction */\n      , identifier.pos);\n      var parameter = createNode(139\n      /* Parameter */\n      , identifier.pos);\n      parameter.name = identifier;\n      finishNode(parameter);\n      node.parameters = [parameter];\n      node.parameters.pos = parameter.pos;\n      node.parameters.end = parameter.end;\n      node.equalsGreaterThanToken = parseExpectedToken(34\n      /* EqualsGreaterThanToken */\n      ,\n      /*reportAtCurrentPosition*/\n      false, ts.Diagnostics._0_expected, \"=>\");\n      node.body = parseArrowFunctionExpressionBody(\n      /*isAsync*/\n      false);\n      return finishNode(node);\n    }\n\n    function tryParseParenthesizedArrowFunctionExpression() {\n      var triState = isParenthesizedArrowFunctionExpression();\n\n      if (triState === 0\n      /* False */\n      ) {\n          // It's definitely not a parenthesized arrow function expression.\n          return undefined;\n        } // If we definitely have an arrow function, then we can just parse one, not requiring a\n      // following => or { token. Otherwise, we *might* have an arrow function.  Try to parse\n      // it out, but don't allow any ambiguity, and return 'undefined' if this could be an\n      // expression instead.\n\n\n      var arrowFunction = triState === 1\n      /* True */\n      ? parseParenthesizedArrowFunctionExpressionHead(\n      /*allowAmbiguity*/\n      true) : tryParse(parsePossibleParenthesizedArrowFunctionExpressionHead);\n\n      if (!arrowFunction) {\n        // Didn't appear to actually be a parenthesized arrow function.  Just bail out.\n        return undefined;\n      }\n\n      var isAsync = !!(arrowFunction.flags & 256\n      /* Async */\n      ); // If we have an arrow, then try to parse the body. Even if not, try to parse if we\n      // have an opening brace, just in case we're in an error state.\n\n      var lastToken = token;\n      arrowFunction.equalsGreaterThanToken = parseExpectedToken(34\n      /* EqualsGreaterThanToken */\n      ,\n      /*reportAtCurrentPosition*/\n      false, ts.Diagnostics._0_expected, \"=>\");\n      arrowFunction.body = lastToken === 34\n      /* EqualsGreaterThanToken */\n      || lastToken === 15\n      /* OpenBraceToken */\n      ? parseArrowFunctionExpressionBody(isAsync) : parseIdentifier();\n      return finishNode(arrowFunction);\n    } //  True        -> We definitely expect a parenthesized arrow function here.\n    //  False       -> There *cannot* be a parenthesized arrow function here.\n    //  Unknown     -> There *might* be a parenthesized arrow function here.\n    //                 Speculatively look ahead to be sure, and rollback if not.\n\n\n    function isParenthesizedArrowFunctionExpression() {\n      if (token === 17\n      /* OpenParenToken */\n      || token === 25\n      /* LessThanToken */\n      || token === 118\n      /* AsyncKeyword */\n      ) {\n          return lookAhead(isParenthesizedArrowFunctionExpressionWorker);\n        }\n\n      if (token === 34\n      /* EqualsGreaterThanToken */\n      ) {\n          // ERROR RECOVERY TWEAK:\n          // If we see a standalone => try to parse it as an arrow function expression as that's\n          // likely what the user intended to write.\n          return 1\n          /* True */\n          ;\n        } // Definitely not a parenthesized arrow function.\n\n\n      return 0\n      /* False */\n      ;\n    }\n\n    function isParenthesizedArrowFunctionExpressionWorker() {\n      if (token === 118\n      /* AsyncKeyword */\n      ) {\n          nextToken();\n\n          if (scanner.hasPrecedingLineBreak()) {\n            return 0\n            /* False */\n            ;\n          }\n\n          if (token !== 17\n          /* OpenParenToken */\n          && token !== 25\n          /* LessThanToken */\n          ) {\n              return 0\n              /* False */\n              ;\n            }\n        }\n\n      var first = token;\n      var second = nextToken();\n\n      if (first === 17\n      /* OpenParenToken */\n      ) {\n          if (second === 18\n          /* CloseParenToken */\n          ) {\n              // Simple cases: \"() =>\", \"(): \", and  \"() {\".\n              // This is an arrow function with no parameters.\n              // The last one is not actually an arrow function,\n              // but this is probably what the user intended.\n              var third = nextToken();\n\n              switch (third) {\n                case 34\n                /* EqualsGreaterThanToken */\n                :\n                case 54\n                /* ColonToken */\n                :\n                case 15\n                /* OpenBraceToken */\n                :\n                  return 1\n                  /* True */\n                  ;\n\n                default:\n                  return 0\n                  /* False */\n                  ;\n              }\n            } // If encounter \"([\" or \"({\", this could be the start of a binding pattern.\n          // Examples:\n          //      ([ x ]) => { }\n          //      ({ x }) => { }\n          //      ([ x ])\n          //      ({ x })\n\n\n          if (second === 19\n          /* OpenBracketToken */\n          || second === 15\n          /* OpenBraceToken */\n          ) {\n              return 2\n              /* Unknown */\n              ;\n            } // Simple case: \"(...\"\n          // This is an arrow function with a rest parameter.\n\n\n          if (second === 22\n          /* DotDotDotToken */\n          ) {\n              return 1\n              /* True */\n              ;\n            } // If we had \"(\" followed by something that's not an identifier,\n          // then this definitely doesn't look like a lambda.\n          // Note: we could be a little more lenient and allow\n          // \"(public\" or \"(private\". These would not ever actually be allowed,\n          // but we could provide a good error message instead of bailing out.\n\n\n          if (!isIdentifier()) {\n            return 0\n            /* False */\n            ;\n          } // If we have something like \"(a:\", then we must have a\n          // type-annotated parameter in an arrow function expression.\n\n\n          if (nextToken() === 54\n          /* ColonToken */\n          ) {\n              return 1\n              /* True */\n              ;\n            } // This *could* be a parenthesized arrow function.\n          // Return Unknown to let the caller know.\n\n\n          return 2\n          /* Unknown */\n          ;\n        } else {\n        ts.Debug.assert(first === 25\n        /* LessThanToken */\n        ); // If we have \"<\" not followed by an identifier,\n        // then this definitely is not an arrow function.\n\n        if (!isIdentifier()) {\n          return 0\n          /* False */\n          ;\n        } // JSX overrides\n\n\n        if (sourceFile.languageVariant === 1\n        /* JSX */\n        ) {\n            var isArrowFunctionInJsx = lookAhead(function () {\n              var third = nextToken();\n\n              if (third === 83\n              /* ExtendsKeyword */\n              ) {\n                  var fourth = nextToken();\n\n                  switch (fourth) {\n                    case 56\n                    /* EqualsToken */\n                    :\n                    case 27\n                    /* GreaterThanToken */\n                    :\n                      return false;\n\n                    default:\n                      return true;\n                  }\n                } else if (third === 24\n              /* CommaToken */\n              ) {\n                  return true;\n                }\n\n              return false;\n            });\n\n            if (isArrowFunctionInJsx) {\n              return 1\n              /* True */\n              ;\n            }\n\n            return 0\n            /* False */\n            ;\n          } // This *could* be a parenthesized arrow function.\n\n\n        return 2\n        /* Unknown */\n        ;\n      }\n    }\n\n    function parsePossibleParenthesizedArrowFunctionExpressionHead() {\n      return parseParenthesizedArrowFunctionExpressionHead(\n      /*allowAmbiguity*/\n      false);\n    }\n\n    function parseParenthesizedArrowFunctionExpressionHead(allowAmbiguity) {\n      var node = createNode(177\n      /* ArrowFunction */\n      );\n      setModifiers(node, parseModifiersForArrowFunction());\n      var isAsync = !!(node.flags & 256\n      /* Async */\n      ); // Arrow functions are never generators.\n      //\n      // If we're speculatively parsing a signature for a parenthesized arrow function, then\n      // we have to have a complete parameter list.  Otherwise we might see something like\n      // a => (b => c)\n      // And think that \"(b =>\" was actually a parenthesized arrow function with a missing\n      // close paren.\n\n      fillSignature(54\n      /* ColonToken */\n      ,\n      /*yieldContext*/\n      false,\n      /*awaitContext*/\n      isAsync,\n      /*requireCompleteParameterList*/\n      !allowAmbiguity, node); // If we couldn't get parameters, we definitely could not parse out an arrow function.\n\n      if (!node.parameters) {\n        return undefined;\n      } // Parsing a signature isn't enough.\n      // Parenthesized arrow signatures often look like other valid expressions.\n      // For instance:\n      //  - \"(x = 10)\" is an assignment expression parsed as a signature with a default parameter value.\n      //  - \"(x,y)\" is a comma expression parsed as a signature with two parameters.\n      //  - \"a ? (b): c\" will have \"(b):\" parsed as a signature with a return type annotation.\n      //\n      // So we need just a bit of lookahead to ensure that it can only be a signature.\n\n\n      if (!allowAmbiguity && token !== 34\n      /* EqualsGreaterThanToken */\n      && token !== 15\n      /* OpenBraceToken */\n      ) {\n          // Returning undefined here will cause our caller to rewind to where we started from.\n          return undefined;\n        }\n\n      return node;\n    }\n\n    function parseArrowFunctionExpressionBody(isAsync) {\n      if (token === 15\n      /* OpenBraceToken */\n      ) {\n          return parseFunctionBlock(\n          /*allowYield*/\n          false,\n          /*allowAwait*/\n          isAsync,\n          /*ignoreMissingOpenBrace*/\n          false);\n        }\n\n      if (token !== 23\n      /* SemicolonToken */\n      && token !== 87\n      /* FunctionKeyword */\n      && token !== 73\n      /* ClassKeyword */\n      && isStartOfStatement() && !isStartOfExpressionStatement()) {\n        // Check if we got a plain statement (i.e. no expression-statements, no function/class expressions/declarations)\n        //\n        // Here we try to recover from a potential error situation in the case where the\n        // user meant to supply a block. For example, if the user wrote:\n        //\n        //  a =>\n        //      let v = 0;\n        //  }\n        //\n        // they may be missing an open brace.  Check to see if that's the case so we can\n        // try to recover better.  If we don't do this, then the next close curly we see may end\n        // up preemptively closing the containing construct.\n        //\n        // Note: even when 'ignoreMissingOpenBrace' is passed as true, parseBody will still error.\n        return parseFunctionBlock(\n        /*allowYield*/\n        false,\n        /*allowAwait*/\n        isAsync,\n        /*ignoreMissingOpenBrace*/\n        true);\n      }\n\n      return isAsync ? doInAwaitContext(parseAssignmentExpressionOrHigher) : doOutsideOfAwaitContext(parseAssignmentExpressionOrHigher);\n    }\n\n    function parseConditionalExpressionRest(leftOperand) {\n      // Note: we are passed in an expression which was produced from parseBinaryExpressionOrHigher.\n      var questionToken = parseOptionalToken(53\n      /* QuestionToken */\n      );\n\n      if (!questionToken) {\n        return leftOperand;\n      } // Note: we explicitly 'allowIn' in the whenTrue part of the condition expression, and\n      // we do not that for the 'whenFalse' part.\n\n\n      var node = createNode(185\n      /* ConditionalExpression */\n      , leftOperand.pos);\n      node.condition = leftOperand;\n      node.questionToken = questionToken;\n      node.whenTrue = doOutsideOfContext(disallowInAndDecoratorContext, parseAssignmentExpressionOrHigher);\n      node.colonToken = parseExpectedToken(54\n      /* ColonToken */\n      ,\n      /*reportAtCurrentPosition*/\n      false, ts.Diagnostics._0_expected, ts.tokenToString(54\n      /* ColonToken */\n      ));\n      node.whenFalse = parseAssignmentExpressionOrHigher();\n      return finishNode(node);\n    }\n\n    function parseBinaryExpressionOrHigher(precedence) {\n      var leftOperand = parseUnaryExpressionOrHigher();\n      return parseBinaryExpressionRest(precedence, leftOperand);\n    }\n\n    function isInOrOfKeyword(t) {\n      return t === 90\n      /* InKeyword */\n      || t === 135\n      /* OfKeyword */\n      ;\n    }\n\n    function parseBinaryExpressionRest(precedence, leftOperand) {\n      while (true) {\n        // We either have a binary operator here, or we're finished.  We call\n        // reScanGreaterToken so that we merge token sequences like > and = into >=\n        reScanGreaterToken();\n        var newPrecedence = getBinaryOperatorPrecedence(); // Check the precedence to see if we should \"take\" this operator\n        // - For left associative operator (all operator but **), consume the operator,\n        //   recursively call the function below, and parse binaryExpression as a rightOperand\n        //   of the caller if the new precendence of the operator is greater then or equal to the current precendence.\n        //   For example:\n        //      a - b - c;\n        //            ^token; leftOperand = b. Return b to the caller as a rightOperand\n        //      a * b - c\n        //            ^token; leftOperand = b. Return b to the caller as a rightOperand\n        //      a - b * c;\n        //            ^token; leftOperand = b. Return b * c to the caller as a rightOperand\n        // - For right associative operator (**), consume the operator, recursively call the function\n        //   and parse binaryExpression as a rightOperand of the caller if the new precendence of\n        //   the operator is strictly grater than the current precendence\n        //   For example:\n        //      a ** b ** c;\n        //             ^^token; leftOperand = b. Return b ** c to the caller as a rightOperand\n        //      a - b ** c;\n        //            ^^token; leftOperand = b. Return b ** c to the caller as a rightOperand\n        //      a ** b - c\n        //             ^token; leftOperand = b. Return b to the caller as a rightOperand\n\n        var consumeCurrentOperator = token === 38\n        /* AsteriskAsteriskToken */\n        ? newPrecedence >= precedence : newPrecedence > precedence;\n\n        if (!consumeCurrentOperator) {\n          break;\n        }\n\n        if (token === 90\n        /* InKeyword */\n        && inDisallowInContext()) {\n          break;\n        }\n\n        if (token === 116\n        /* AsKeyword */\n        ) {\n            // Make sure we *do* perform ASI for constructs like this:\n            //    var x = foo\n            //    as (Bar)\n            // This should be parsed as an initialized variable, followed\n            // by a function call to 'as' with the argument 'Bar'\n            if (scanner.hasPrecedingLineBreak()) {\n              break;\n            } else {\n              nextToken();\n              leftOperand = makeAsExpression(leftOperand, parseType());\n            }\n          } else {\n          leftOperand = makeBinaryExpression(leftOperand, parseTokenNode(), parseBinaryExpressionOrHigher(newPrecedence));\n        }\n      }\n\n      return leftOperand;\n    }\n\n    function isBinaryOperator() {\n      if (inDisallowInContext() && token === 90\n      /* InKeyword */\n      ) {\n          return false;\n        }\n\n      return getBinaryOperatorPrecedence() > 0;\n    }\n\n    function getBinaryOperatorPrecedence() {\n      switch (token) {\n        case 52\n        /* BarBarToken */\n        :\n          return 1;\n\n        case 51\n        /* AmpersandAmpersandToken */\n        :\n          return 2;\n\n        case 47\n        /* BarToken */\n        :\n          return 3;\n\n        case 48\n        /* CaretToken */\n        :\n          return 4;\n\n        case 46\n        /* AmpersandToken */\n        :\n          return 5;\n\n        case 30\n        /* EqualsEqualsToken */\n        :\n        case 31\n        /* ExclamationEqualsToken */\n        :\n        case 32\n        /* EqualsEqualsEqualsToken */\n        :\n        case 33\n        /* ExclamationEqualsEqualsToken */\n        :\n          return 6;\n\n        case 25\n        /* LessThanToken */\n        :\n        case 27\n        /* GreaterThanToken */\n        :\n        case 28\n        /* LessThanEqualsToken */\n        :\n        case 29\n        /* GreaterThanEqualsToken */\n        :\n        case 91\n        /* InstanceOfKeyword */\n        :\n        case 90\n        /* InKeyword */\n        :\n        case 116\n        /* AsKeyword */\n        :\n          return 7;\n\n        case 43\n        /* LessThanLessThanToken */\n        :\n        case 44\n        /* GreaterThanGreaterThanToken */\n        :\n        case 45\n        /* GreaterThanGreaterThanGreaterThanToken */\n        :\n          return 8;\n\n        case 35\n        /* PlusToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n          return 9;\n\n        case 37\n        /* AsteriskToken */\n        :\n        case 39\n        /* SlashToken */\n        :\n        case 40\n        /* PercentToken */\n        :\n          return 10;\n\n        case 38\n        /* AsteriskAsteriskToken */\n        :\n          return 11;\n      } // -1 is lower than all other precedences.  Returning it will cause binary expression\n      // parsing to stop.\n\n\n      return -1;\n    }\n\n    function makeBinaryExpression(left, operatorToken, right) {\n      var node = createNode(184\n      /* BinaryExpression */\n      , left.pos);\n      node.left = left;\n      node.operatorToken = operatorToken;\n      node.right = right;\n      return finishNode(node);\n    }\n\n    function makeAsExpression(left, right) {\n      var node = createNode(192\n      /* AsExpression */\n      , left.pos);\n      node.expression = left;\n      node.type = right;\n      return finishNode(node);\n    }\n\n    function parsePrefixUnaryExpression() {\n      var node = createNode(182\n      /* PrefixUnaryExpression */\n      );\n      node.operator = token;\n      nextToken();\n      node.operand = parseSimpleUnaryExpression();\n      return finishNode(node);\n    }\n\n    function parseDeleteExpression() {\n      var node = createNode(178\n      /* DeleteExpression */\n      );\n      nextToken();\n      node.expression = parseSimpleUnaryExpression();\n      return finishNode(node);\n    }\n\n    function parseTypeOfExpression() {\n      var node = createNode(179\n      /* TypeOfExpression */\n      );\n      nextToken();\n      node.expression = parseSimpleUnaryExpression();\n      return finishNode(node);\n    }\n\n    function parseVoidExpression() {\n      var node = createNode(180\n      /* VoidExpression */\n      );\n      nextToken();\n      node.expression = parseSimpleUnaryExpression();\n      return finishNode(node);\n    }\n\n    function isAwaitExpression() {\n      if (token === 119\n      /* AwaitKeyword */\n      ) {\n          if (inAwaitContext()) {\n            return true;\n          } // here we are using similar heuristics as 'isYieldExpression'\n\n\n          return lookAhead(nextTokenIsIdentifierOnSameLine);\n        }\n\n      return false;\n    }\n\n    function parseAwaitExpression() {\n      var node = createNode(181\n      /* AwaitExpression */\n      );\n      nextToken();\n      node.expression = parseSimpleUnaryExpression();\n      return finishNode(node);\n    }\n    /**\n     * Parse ES7 unary expression and await expression\n     *\n     * ES7 UnaryExpression:\n     *      1) SimpleUnaryExpression[?yield]\n     *      2) IncrementExpression[?yield] ** UnaryExpression[?yield]\n     */\n\n\n    function parseUnaryExpressionOrHigher() {\n      if (isAwaitExpression()) {\n        return parseAwaitExpression();\n      }\n\n      if (isIncrementExpression()) {\n        var incrementExpression = parseIncrementExpression();\n        return token === 38\n        /* AsteriskAsteriskToken */\n        ? parseBinaryExpressionRest(getBinaryOperatorPrecedence(), incrementExpression) : incrementExpression;\n      }\n\n      var unaryOperator = token;\n      var simpleUnaryExpression = parseSimpleUnaryExpression();\n\n      if (token === 38\n      /* AsteriskAsteriskToken */\n      ) {\n          var start = ts.skipTrivia(sourceText, simpleUnaryExpression.pos);\n\n          if (simpleUnaryExpression.kind === 174\n          /* TypeAssertionExpression */\n          ) {\n              parseErrorAtPosition(start, simpleUnaryExpression.end - start, ts.Diagnostics.A_type_assertion_expression_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses);\n            } else {\n            parseErrorAtPosition(start, simpleUnaryExpression.end - start, ts.Diagnostics.An_unary_expression_with_the_0_operator_is_not_allowed_in_the_left_hand_side_of_an_exponentiation_expression_Consider_enclosing_the_expression_in_parentheses, ts.tokenToString(unaryOperator));\n          }\n        }\n\n      return simpleUnaryExpression;\n    }\n    /**\n     * Parse ES7 simple-unary expression or higher:\n     *\n     * ES7 SimpleUnaryExpression:\n     *      1) IncrementExpression[?yield]\n     *      2) delete UnaryExpression[?yield]\n     *      3) void UnaryExpression[?yield]\n     *      4) typeof UnaryExpression[?yield]\n     *      5) + UnaryExpression[?yield]\n     *      6) - UnaryExpression[?yield]\n     *      7) ~ UnaryExpression[?yield]\n     *      8) ! UnaryExpression[?yield]\n     */\n\n\n    function parseSimpleUnaryExpression() {\n      switch (token) {\n        case 35\n        /* PlusToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n        case 50\n        /* TildeToken */\n        :\n        case 49\n        /* ExclamationToken */\n        :\n          return parsePrefixUnaryExpression();\n\n        case 78\n        /* DeleteKeyword */\n        :\n          return parseDeleteExpression();\n\n        case 101\n        /* TypeOfKeyword */\n        :\n          return parseTypeOfExpression();\n\n        case 103\n        /* VoidKeyword */\n        :\n          return parseVoidExpression();\n\n        case 25\n        /* LessThanToken */\n        :\n          // This is modified UnaryExpression grammar in TypeScript\n          //  UnaryExpression (modified):\n          //      < type > UnaryExpression\n          return parseTypeAssertion();\n\n        default:\n          return parseIncrementExpression();\n      }\n    }\n    /**\n     * Check if the current token can possibly be an ES7 increment expression.\n     *\n     * ES7 IncrementExpression:\n     *      LeftHandSideExpression[?Yield]\n     *      LeftHandSideExpression[?Yield][no LineTerminator here]++\n     *      LeftHandSideExpression[?Yield][no LineTerminator here]--\n     *      ++LeftHandSideExpression[?Yield]\n     *      --LeftHandSideExpression[?Yield]\n     */\n\n\n    function isIncrementExpression() {\n      // This function is called inside parseUnaryExpression to decide\n      // whether to call parseSimpleUnaryExpression or call parseIncrmentExpression directly\n      switch (token) {\n        case 35\n        /* PlusToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n        case 50\n        /* TildeToken */\n        :\n        case 49\n        /* ExclamationToken */\n        :\n        case 78\n        /* DeleteKeyword */\n        :\n        case 101\n        /* TypeOfKeyword */\n        :\n        case 103\n        /* VoidKeyword */\n        :\n          return false;\n\n        case 25\n        /* LessThanToken */\n        :\n          // If we are not in JSX context, we are parsing TypeAssertion which is an UnaryExpression\n          if (sourceFile.languageVariant !== 1\n          /* JSX */\n          ) {\n              return false;\n            }\n\n        // We are in JSX context and the token is part of JSXElement.\n        // Fall through\n\n        default:\n          return true;\n      }\n    }\n    /**\n     * Parse ES7 IncrementExpression. IncrementExpression is used instead of ES6's PostFixExpression.\n     *\n     * ES7 IncrementExpression[yield]:\n     *      1) LeftHandSideExpression[?yield]\n     *      2) LeftHandSideExpression[?yield] [[no LineTerminator here]]++\n     *      3) LeftHandSideExpression[?yield] [[no LineTerminator here]]--\n     *      4) ++LeftHandSideExpression[?yield]\n     *      5) --LeftHandSideExpression[?yield]\n     * In TypeScript (2), (3) are parsed as PostfixUnaryExpression. (4), (5) are parsed as PrefixUnaryExpression\n     */\n\n\n    function parseIncrementExpression() {\n      if (token === 41\n      /* PlusPlusToken */\n      || token === 42\n      /* MinusMinusToken */\n      ) {\n          var node = createNode(182\n          /* PrefixUnaryExpression */\n          );\n          node.operator = token;\n          nextToken();\n          node.operand = parseLeftHandSideExpressionOrHigher();\n          return finishNode(node);\n        } else if (sourceFile.languageVariant === 1\n      /* JSX */\n      && token === 25\n      /* LessThanToken */\n      && lookAhead(nextTokenIsIdentifierOrKeyword)) {\n        // JSXElement is part of primaryExpression\n        return parseJsxElementOrSelfClosingElement(\n        /*inExpressionContext*/\n        true);\n      }\n\n      var expression = parseLeftHandSideExpressionOrHigher();\n      ts.Debug.assert(ts.isLeftHandSideExpression(expression));\n\n      if ((token === 41\n      /* PlusPlusToken */\n      || token === 42\n      /* MinusMinusToken */\n      ) && !scanner.hasPrecedingLineBreak()) {\n        var node = createNode(183\n        /* PostfixUnaryExpression */\n        , expression.pos);\n        node.operand = expression;\n        node.operator = token;\n        nextToken();\n        return finishNode(node);\n      }\n\n      return expression;\n    }\n\n    function parseLeftHandSideExpressionOrHigher() {\n      // Original Ecma:\n      // LeftHandSideExpression: See 11.2\n      //      NewExpression\n      //      CallExpression\n      //\n      // Our simplification:\n      //\n      // LeftHandSideExpression: See 11.2\n      //      MemberExpression\n      //      CallExpression\n      //\n      // See comment in parseMemberExpressionOrHigher on how we replaced NewExpression with\n      // MemberExpression to make our lives easier.\n      //\n      // to best understand the below code, it's important to see how CallExpression expands\n      // out into its own productions:\n      //\n      // CallExpression:\n      //      MemberExpression Arguments\n      //      CallExpression Arguments\n      //      CallExpression[Expression]\n      //      CallExpression.IdentifierName\n      //      super   (   ArgumentListopt   )\n      //      super.IdentifierName\n      //\n      // Because of the recursion in these calls, we need to bottom out first.  There are two\n      // bottom out states we can run into.  Either we see 'super' which must start either of\n      // the last two CallExpression productions.  Or we have a MemberExpression which either\n      // completes the LeftHandSideExpression, or starts the beginning of the first four\n      // CallExpression productions.\n      var expression = token === 95\n      /* SuperKeyword */\n      ? parseSuperExpression() : parseMemberExpressionOrHigher(); // Now, we *may* be complete.  However, we might have consumed the start of a\n      // CallExpression.  As such, we need to consume the rest of it here to be complete.\n\n      return parseCallExpressionRest(expression);\n    }\n\n    function parseMemberExpressionOrHigher() {\n      // Note: to make our lives simpler, we decompose the the NewExpression productions and\n      // place ObjectCreationExpression and FunctionExpression into PrimaryExpression.\n      // like so:\n      //\n      //   PrimaryExpression : See 11.1\n      //      this\n      //      Identifier\n      //      Literal\n      //      ArrayLiteral\n      //      ObjectLiteral\n      //      (Expression)\n      //      FunctionExpression\n      //      new MemberExpression Arguments?\n      //\n      //   MemberExpression : See 11.2\n      //      PrimaryExpression\n      //      MemberExpression[Expression]\n      //      MemberExpression.IdentifierName\n      //\n      //   CallExpression : See 11.2\n      //      MemberExpression\n      //      CallExpression Arguments\n      //      CallExpression[Expression]\n      //      CallExpression.IdentifierName\n      //\n      // Technically this is ambiguous.  i.e. CallExpression defines:\n      //\n      //   CallExpression:\n      //      CallExpression Arguments\n      //\n      // If you see: \"new Foo()\"\n      //\n      // Then that could be treated as a single ObjectCreationExpression, or it could be\n      // treated as the invocation of \"new Foo\".  We disambiguate that in code (to match\n      // the original grammar) by making sure that if we see an ObjectCreationExpression\n      // we always consume arguments if they are there. So we treat \"new Foo()\" as an\n      // object creation only, and not at all as an invocation)  Another way to think\n      // about this is that for every \"new\" that we see, we will consume an argument list if\n      // it is there as part of the *associated* object creation node.  Any additional\n      // argument lists we see, will become invocation expressions.\n      //\n      // Because there are no other places in the grammar now that refer to FunctionExpression\n      // or ObjectCreationExpression, it is safe to push down into the PrimaryExpression\n      // production.\n      //\n      // Because CallExpression and MemberExpression are left recursive, we need to bottom out\n      // of the recursion immediately.  So we parse out a primary expression to start with.\n      var expression = parsePrimaryExpression();\n      return parseMemberExpressionRest(expression);\n    }\n\n    function parseSuperExpression() {\n      var expression = parseTokenNode();\n\n      if (token === 17\n      /* OpenParenToken */\n      || token === 21\n      /* DotToken */\n      || token === 19\n      /* OpenBracketToken */\n      ) {\n          return expression;\n        } // If we have seen \"super\" it must be followed by '(' or '.'.\n      // If it wasn't then just try to parse out a '.' and report an error.\n\n\n      var node = createNode(169\n      /* PropertyAccessExpression */\n      , expression.pos);\n      node.expression = expression;\n      node.dotToken = parseExpectedToken(21\n      /* DotToken */\n      ,\n      /*reportAtCurrentPosition*/\n      false, ts.Diagnostics.super_must_be_followed_by_an_argument_list_or_member_access);\n      node.name = parseRightSideOfDot(\n      /*allowIdentifierNames*/\n      true);\n      return finishNode(node);\n    }\n\n    function tagNamesAreEquivalent(lhs, rhs) {\n      if (lhs.kind !== rhs.kind) {\n        return false;\n      }\n\n      if (lhs.kind === 69\n      /* Identifier */\n      ) {\n          return lhs.text === rhs.text;\n        }\n\n      return lhs.right.text === rhs.right.text && tagNamesAreEquivalent(lhs.left, rhs.left);\n    }\n\n    function parseJsxElementOrSelfClosingElement(inExpressionContext) {\n      var opening = parseJsxOpeningOrSelfClosingElement(inExpressionContext);\n      var result;\n\n      if (opening.kind === 238\n      /* JsxOpeningElement */\n      ) {\n          var node = createNode(236\n          /* JsxElement */\n          , opening.pos);\n          node.openingElement = opening;\n          node.children = parseJsxChildren(node.openingElement.tagName);\n          node.closingElement = parseJsxClosingElement(inExpressionContext);\n\n          if (!tagNamesAreEquivalent(node.openingElement.tagName, node.closingElement.tagName)) {\n            parseErrorAtPosition(node.closingElement.pos, node.closingElement.end - node.closingElement.pos, ts.Diagnostics.Expected_corresponding_JSX_closing_tag_for_0, ts.getTextOfNodeFromSourceText(sourceText, node.openingElement.tagName));\n          }\n\n          result = finishNode(node);\n        } else {\n        ts.Debug.assert(opening.kind === 237\n        /* JsxSelfClosingElement */\n        ); // Nothing else to do for self-closing elements\n\n        result = opening;\n      } // If the user writes the invalid code '<div></div><div></div>' in an expression context (i.e. not wrapped in\n      // an enclosing tag), we'll naively try to parse   ^ this as a 'less than' operator and the remainder of the tag\n      // as garbage, which will cause the formatter to badly mangle the JSX. Perform a speculative parse of a JSX\n      // element if we see a < token so that we can wrap it in a synthetic binary expression so the formatter\n      // does less damage and we can report a better error.\n      // Since JSX elements are invalid < operands anyway, this lookahead parse will only occur in error scenarios\n      // of one sort or another.\n\n\n      if (inExpressionContext && token === 25\n      /* LessThanToken */\n      ) {\n          var invalidElement = tryParse(function () {\n            return parseJsxElementOrSelfClosingElement(\n            /*inExpressionContext*/\n            true);\n          });\n\n          if (invalidElement) {\n            parseErrorAtCurrentToken(ts.Diagnostics.JSX_expressions_must_have_one_parent_element);\n            var badNode = createNode(184\n            /* BinaryExpression */\n            , result.pos);\n            badNode.end = invalidElement.end;\n            badNode.left = result;\n            badNode.right = invalidElement;\n            badNode.operatorToken = createMissingNode(24\n            /* CommaToken */\n            ,\n            /*reportAtCurrentPosition*/\n            false,\n            /*diagnosticMessage*/\n            undefined);\n            badNode.operatorToken.pos = badNode.operatorToken.end = badNode.right.pos;\n            return badNode;\n          }\n        }\n\n      return result;\n    }\n\n    function parseJsxText() {\n      var node = createNode(239\n      /* JsxText */\n      , scanner.getStartPos());\n      token = scanner.scanJsxToken();\n      return finishNode(node);\n    }\n\n    function parseJsxChild() {\n      switch (token) {\n        case 239\n        /* JsxText */\n        :\n          return parseJsxText();\n\n        case 15\n        /* OpenBraceToken */\n        :\n          return parseJsxExpression(\n          /*inExpressionContext*/\n          false);\n\n        case 25\n        /* LessThanToken */\n        :\n          return parseJsxElementOrSelfClosingElement(\n          /*inExpressionContext*/\n          false);\n      }\n\n      ts.Debug.fail(\"Unknown JSX child kind \" + token);\n    }\n\n    function parseJsxChildren(openingTagName) {\n      var result = [];\n      result.pos = scanner.getStartPos();\n      var saveParsingContext = parsingContext;\n      parsingContext |= 1 << 14\n      /* JsxChildren */\n      ;\n\n      while (true) {\n        token = scanner.reScanJsxToken();\n\n        if (token === 26\n        /* LessThanSlashToken */\n        ) {\n            // Closing tag\n            break;\n          } else if (token === 1\n        /* EndOfFileToken */\n        ) {\n            // If we hit EOF, issue the error at the tag that lacks the closing element\n            // rather than at the end of the file (which is useless)\n            parseErrorAtPosition(openingTagName.pos, openingTagName.end - openingTagName.pos, ts.Diagnostics.JSX_element_0_has_no_corresponding_closing_tag, ts.getTextOfNodeFromSourceText(sourceText, openingTagName));\n            break;\n          }\n\n        result.push(parseJsxChild());\n      }\n\n      result.end = scanner.getTokenPos();\n      parsingContext = saveParsingContext;\n      return result;\n    }\n\n    function parseJsxOpeningOrSelfClosingElement(inExpressionContext) {\n      var fullStart = scanner.getStartPos();\n      parseExpected(25\n      /* LessThanToken */\n      );\n      var tagName = parseJsxElementName();\n      var attributes = parseList(13\n      /* JsxAttributes */\n      , parseJsxAttribute);\n      var node;\n\n      if (token === 27\n      /* GreaterThanToken */\n      ) {\n          // Closing tag, so scan the immediately-following text with the JSX scanning instead\n          // of regular scanning to avoid treating illegal characters (e.g. '#') as immediate\n          // scanning errors\n          node = createNode(238\n          /* JsxOpeningElement */\n          , fullStart);\n          scanJsxText();\n        } else {\n        parseExpected(39\n        /* SlashToken */\n        );\n\n        if (inExpressionContext) {\n          parseExpected(27\n          /* GreaterThanToken */\n          );\n        } else {\n          parseExpected(27\n          /* GreaterThanToken */\n          ,\n          /*diagnostic*/\n          undefined,\n          /*shouldAdvance*/\n          false);\n          scanJsxText();\n        }\n\n        node = createNode(237\n        /* JsxSelfClosingElement */\n        , fullStart);\n      }\n\n      node.tagName = tagName;\n      node.attributes = attributes;\n      return finishNode(node);\n    }\n\n    function parseJsxElementName() {\n      scanJsxIdentifier();\n      var elementName = parseIdentifierName();\n\n      while (parseOptional(21\n      /* DotToken */\n      )) {\n        scanJsxIdentifier();\n        var node = createNode(136\n        /* QualifiedName */\n        , elementName.pos);\n        node.left = elementName;\n        node.right = parseIdentifierName();\n        elementName = finishNode(node);\n      }\n\n      return elementName;\n    }\n\n    function parseJsxExpression(inExpressionContext) {\n      var node = createNode(243\n      /* JsxExpression */\n      );\n      parseExpected(15\n      /* OpenBraceToken */\n      );\n\n      if (token !== 16\n      /* CloseBraceToken */\n      ) {\n          node.expression = parseAssignmentExpressionOrHigher();\n        }\n\n      if (inExpressionContext) {\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n      } else {\n        parseExpected(16\n        /* CloseBraceToken */\n        ,\n        /*message*/\n        undefined,\n        /*shouldAdvance*/\n        false);\n        scanJsxText();\n      }\n\n      return finishNode(node);\n    }\n\n    function parseJsxAttribute() {\n      if (token === 15\n      /* OpenBraceToken */\n      ) {\n          return parseJsxSpreadAttribute();\n        }\n\n      scanJsxIdentifier();\n      var node = createNode(241\n      /* JsxAttribute */\n      );\n      node.name = parseIdentifierName();\n\n      if (parseOptional(56\n      /* EqualsToken */\n      )) {\n        switch (token) {\n          case 9\n          /* StringLiteral */\n          :\n            node.initializer = parseLiteralNode();\n            break;\n\n          default:\n            node.initializer = parseJsxExpression(\n            /*inExpressionContext*/\n            true);\n            break;\n        }\n      }\n\n      return finishNode(node);\n    }\n\n    function parseJsxSpreadAttribute() {\n      var node = createNode(242\n      /* JsxSpreadAttribute */\n      );\n      parseExpected(15\n      /* OpenBraceToken */\n      );\n      parseExpected(22\n      /* DotDotDotToken */\n      );\n      node.expression = parseExpression();\n      parseExpected(16\n      /* CloseBraceToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseJsxClosingElement(inExpressionContext) {\n      var node = createNode(240\n      /* JsxClosingElement */\n      );\n      parseExpected(26\n      /* LessThanSlashToken */\n      );\n      node.tagName = parseJsxElementName();\n\n      if (inExpressionContext) {\n        parseExpected(27\n        /* GreaterThanToken */\n        );\n      } else {\n        parseExpected(27\n        /* GreaterThanToken */\n        ,\n        /*diagnostic*/\n        undefined,\n        /*shouldAdvance*/\n        false);\n        scanJsxText();\n      }\n\n      return finishNode(node);\n    }\n\n    function parseTypeAssertion() {\n      var node = createNode(174\n      /* TypeAssertionExpression */\n      );\n      parseExpected(25\n      /* LessThanToken */\n      );\n      node.type = parseType();\n      parseExpected(27\n      /* GreaterThanToken */\n      );\n      node.expression = parseSimpleUnaryExpression();\n      return finishNode(node);\n    }\n\n    function parseMemberExpressionRest(expression) {\n      while (true) {\n        var dotToken = parseOptionalToken(21\n        /* DotToken */\n        );\n\n        if (dotToken) {\n          var propertyAccess = createNode(169\n          /* PropertyAccessExpression */\n          , expression.pos);\n          propertyAccess.expression = expression;\n          propertyAccess.dotToken = dotToken;\n          propertyAccess.name = parseRightSideOfDot(\n          /*allowIdentifierNames*/\n          true);\n          expression = finishNode(propertyAccess);\n          continue;\n        } // when in the [Decorator] context, we do not parse ElementAccess as it could be part of a ComputedPropertyName\n\n\n        if (!inDecoratorContext() && parseOptional(19\n        /* OpenBracketToken */\n        )) {\n          var indexedAccess = createNode(170\n          /* ElementAccessExpression */\n          , expression.pos);\n          indexedAccess.expression = expression; // It's not uncommon for a user to write: \"new Type[]\".\n          // Check for that common pattern and report a better error message.\n\n          if (token !== 20\n          /* CloseBracketToken */\n          ) {\n              indexedAccess.argumentExpression = allowInAnd(parseExpression);\n\n              if (indexedAccess.argumentExpression.kind === 9\n              /* StringLiteral */\n              || indexedAccess.argumentExpression.kind === 8\n              /* NumericLiteral */\n              ) {\n                  var literal = indexedAccess.argumentExpression;\n                  literal.text = internIdentifier(literal.text);\n                }\n            }\n\n          parseExpected(20\n          /* CloseBracketToken */\n          );\n          expression = finishNode(indexedAccess);\n          continue;\n        }\n\n        if (token === 11\n        /* NoSubstitutionTemplateLiteral */\n        || token === 12\n        /* TemplateHead */\n        ) {\n            var tagExpression = createNode(173\n            /* TaggedTemplateExpression */\n            , expression.pos);\n            tagExpression.tag = expression;\n            tagExpression.template = token === 11\n            /* NoSubstitutionTemplateLiteral */\n            ? parseLiteralNode() : parseTemplateExpression();\n            expression = finishNode(tagExpression);\n            continue;\n          }\n\n        return expression;\n      }\n    }\n\n    function parseCallExpressionRest(expression) {\n      while (true) {\n        expression = parseMemberExpressionRest(expression);\n\n        if (token === 25\n        /* LessThanToken */\n        ) {\n            // See if this is the start of a generic invocation.  If so, consume it and\n            // keep checking for postfix expressions.  Otherwise, it's just a '<' that's\n            // part of an arithmetic expression.  Break out so we consume it higher in the\n            // stack.\n            var typeArguments = tryParse(parseTypeArgumentsInExpression);\n\n            if (!typeArguments) {\n              return expression;\n            }\n\n            var callExpr = createNode(171\n            /* CallExpression */\n            , expression.pos);\n            callExpr.expression = expression;\n            callExpr.typeArguments = typeArguments;\n            callExpr.arguments = parseArgumentList();\n            expression = finishNode(callExpr);\n            continue;\n          } else if (token === 17\n        /* OpenParenToken */\n        ) {\n            var callExpr = createNode(171\n            /* CallExpression */\n            , expression.pos);\n            callExpr.expression = expression;\n            callExpr.arguments = parseArgumentList();\n            expression = finishNode(callExpr);\n            continue;\n          }\n\n        return expression;\n      }\n    }\n\n    function parseArgumentList() {\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      var result = parseDelimitedList(11\n      /* ArgumentExpressions */\n      , parseArgumentExpression);\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      return result;\n    }\n\n    function parseTypeArgumentsInExpression() {\n      if (!parseOptional(25\n      /* LessThanToken */\n      )) {\n        return undefined;\n      }\n\n      var typeArguments = parseDelimitedList(18\n      /* TypeArguments */\n      , parseType);\n\n      if (!parseExpected(27\n      /* GreaterThanToken */\n      )) {\n        // If it doesn't have the closing >  then it's definitely not an type argument list.\n        return undefined;\n      } // If we have a '<', then only parse this as a arugment list if the type arguments\n      // are complete and we have an open paren.  if we don't, rewind and return nothing.\n\n\n      return typeArguments && canFollowTypeArgumentsInExpression() ? typeArguments : undefined;\n    }\n\n    function canFollowTypeArgumentsInExpression() {\n      switch (token) {\n        case 17\n        /* OpenParenToken */\n        : // foo<x>(\n        // this case are the only case where this token can legally follow a type argument\n        // list.  So we definitely want to treat this as a type arg list.\n\n        case 21\n        /* DotToken */\n        : // foo<x>.\n\n        case 18\n        /* CloseParenToken */\n        : // foo<x>)\n\n        case 20\n        /* CloseBracketToken */\n        : // foo<x>]\n\n        case 54\n        /* ColonToken */\n        : // foo<x>:\n\n        case 23\n        /* SemicolonToken */\n        : // foo<x>;\n\n        case 53\n        /* QuestionToken */\n        : // foo<x>?\n\n        case 30\n        /* EqualsEqualsToken */\n        : // foo<x> ==\n\n        case 32\n        /* EqualsEqualsEqualsToken */\n        : // foo<x> ===\n\n        case 31\n        /* ExclamationEqualsToken */\n        : // foo<x> !=\n\n        case 33\n        /* ExclamationEqualsEqualsToken */\n        : // foo<x> !==\n\n        case 51\n        /* AmpersandAmpersandToken */\n        : // foo<x> &&\n\n        case 52\n        /* BarBarToken */\n        : // foo<x> ||\n\n        case 48\n        /* CaretToken */\n        : // foo<x> ^\n\n        case 46\n        /* AmpersandToken */\n        : // foo<x> &\n\n        case 47\n        /* BarToken */\n        : // foo<x> |\n\n        case 16\n        /* CloseBraceToken */\n        : // foo<x> }\n\n        case 1\n        /* EndOfFileToken */\n        :\n          // these cases can't legally follow a type arg list.  However, they're not legal\n          // expressions either.  The user is probably in the middle of a generic type. So\n          // treat it as such.\n          return true;\n\n        case 24\n        /* CommaToken */\n        : // foo<x>,\n\n        case 15\n        /* OpenBraceToken */\n        : // foo<x> {\n        // We don't want to treat these as type arguments.  Otherwise we'll parse this\n        // as an invocation expression.  Instead, we want to parse out the expression\n        // in isolation from the type arguments.\n\n        default:\n          // Anything else treat as an expression.\n          return false;\n      }\n    }\n\n    function parsePrimaryExpression() {\n      switch (token) {\n        case 8\n        /* NumericLiteral */\n        :\n        case 9\n        /* StringLiteral */\n        :\n        case 11\n        /* NoSubstitutionTemplateLiteral */\n        :\n          return parseLiteralNode();\n\n        case 97\n        /* ThisKeyword */\n        :\n        case 95\n        /* SuperKeyword */\n        :\n        case 93\n        /* NullKeyword */\n        :\n        case 99\n        /* TrueKeyword */\n        :\n        case 84\n        /* FalseKeyword */\n        :\n          return parseTokenNode();\n\n        case 17\n        /* OpenParenToken */\n        :\n          return parseParenthesizedExpression();\n\n        case 19\n        /* OpenBracketToken */\n        :\n          return parseArrayLiteralExpression();\n\n        case 15\n        /* OpenBraceToken */\n        :\n          return parseObjectLiteralExpression();\n\n        case 118\n        /* AsyncKeyword */\n        :\n          // Async arrow functions are parsed earlier in parseAssignmentExpressionOrHigher.\n          // If we encounter `async [no LineTerminator here] function` then this is an async\n          // function; otherwise, its an identifier.\n          if (!lookAhead(nextTokenIsFunctionKeywordOnSameLine)) {\n            break;\n          }\n\n          return parseFunctionExpression();\n\n        case 73\n        /* ClassKeyword */\n        :\n          return parseClassExpression();\n\n        case 87\n        /* FunctionKeyword */\n        :\n          return parseFunctionExpression();\n\n        case 92\n        /* NewKeyword */\n        :\n          return parseNewExpression();\n\n        case 39\n        /* SlashToken */\n        :\n        case 61\n        /* SlashEqualsToken */\n        :\n          if (reScanSlashToken() === 10\n          /* RegularExpressionLiteral */\n          ) {\n              return parseLiteralNode();\n            }\n\n          break;\n\n        case 12\n        /* TemplateHead */\n        :\n          return parseTemplateExpression();\n      }\n\n      return parseIdentifier(ts.Diagnostics.Expression_expected);\n    }\n\n    function parseParenthesizedExpression() {\n      var node = createNode(175\n      /* ParenthesizedExpression */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseSpreadElement() {\n      var node = createNode(188\n      /* SpreadElementExpression */\n      );\n      parseExpected(22\n      /* DotDotDotToken */\n      );\n      node.expression = parseAssignmentExpressionOrHigher();\n      return finishNode(node);\n    }\n\n    function parseArgumentOrArrayLiteralElement() {\n      return token === 22\n      /* DotDotDotToken */\n      ? parseSpreadElement() : token === 24\n      /* CommaToken */\n      ? createNode(190\n      /* OmittedExpression */\n      ) : parseAssignmentExpressionOrHigher();\n    }\n\n    function parseArgumentExpression() {\n      return doOutsideOfContext(disallowInAndDecoratorContext, parseArgumentOrArrayLiteralElement);\n    }\n\n    function parseArrayLiteralExpression() {\n      var node = createNode(167\n      /* ArrayLiteralExpression */\n      );\n      parseExpected(19\n      /* OpenBracketToken */\n      );\n      if (scanner.hasPrecedingLineBreak()) node.flags |= 1024\n      /* MultiLine */\n      ;\n      node.elements = parseDelimitedList(15\n      /* ArrayLiteralMembers */\n      , parseArgumentOrArrayLiteralElement);\n      parseExpected(20\n      /* CloseBracketToken */\n      );\n      return finishNode(node);\n    }\n\n    function tryParseAccessorDeclaration(fullStart, decorators, modifiers) {\n      if (parseContextualModifier(123\n      /* GetKeyword */\n      )) {\n        return parseAccessorDeclaration(146\n        /* GetAccessor */\n        , fullStart, decorators, modifiers);\n      } else if (parseContextualModifier(129\n      /* SetKeyword */\n      )) {\n        return parseAccessorDeclaration(147\n        /* SetAccessor */\n        , fullStart, decorators, modifiers);\n      }\n\n      return undefined;\n    }\n\n    function parseObjectLiteralElement() {\n      var fullStart = scanner.getStartPos();\n      var decorators = parseDecorators();\n      var modifiers = parseModifiers();\n      var accessor = tryParseAccessorDeclaration(fullStart, decorators, modifiers);\n\n      if (accessor) {\n        return accessor;\n      }\n\n      var asteriskToken = parseOptionalToken(37\n      /* AsteriskToken */\n      );\n      var tokenIsIdentifier = isIdentifier();\n      var propertyName = parsePropertyName(); // Disallowing of optional property assignments happens in the grammar checker.\n\n      var questionToken = parseOptionalToken(53\n      /* QuestionToken */\n      );\n\n      if (asteriskToken || token === 17\n      /* OpenParenToken */\n      || token === 25\n      /* LessThanToken */\n      ) {\n          return parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, propertyName, questionToken);\n        } // check if it is short-hand property assignment or normal property assignment\n      // NOTE: if token is EqualsToken it is interpreted as CoverInitializedName production\n      // CoverInitializedName[Yield] :\n      //     IdentifierReference[?Yield] Initializer[In, ?Yield]\n      // this is necessary because ObjectLiteral productions are also used to cover grammar for ObjectAssignmentPattern\n\n\n      var isShorthandPropertyAssignment = tokenIsIdentifier && (token === 24\n      /* CommaToken */\n      || token === 16\n      /* CloseBraceToken */\n      || token === 56\n      /* EqualsToken */\n      );\n\n      if (isShorthandPropertyAssignment) {\n        var shorthandDeclaration = createNode(249\n        /* ShorthandPropertyAssignment */\n        , fullStart);\n        shorthandDeclaration.name = propertyName;\n        shorthandDeclaration.questionToken = questionToken;\n        var equalsToken = parseOptionalToken(56\n        /* EqualsToken */\n        );\n\n        if (equalsToken) {\n          shorthandDeclaration.equalsToken = equalsToken;\n          shorthandDeclaration.objectAssignmentInitializer = allowInAnd(parseAssignmentExpressionOrHigher);\n        }\n\n        return addJSDocComment(finishNode(shorthandDeclaration));\n      } else {\n        var propertyAssignment = createNode(248\n        /* PropertyAssignment */\n        , fullStart);\n        propertyAssignment.modifiers = modifiers;\n        propertyAssignment.name = propertyName;\n        propertyAssignment.questionToken = questionToken;\n        parseExpected(54\n        /* ColonToken */\n        );\n        propertyAssignment.initializer = allowInAnd(parseAssignmentExpressionOrHigher);\n        return addJSDocComment(finishNode(propertyAssignment));\n      }\n    }\n\n    function parseObjectLiteralExpression() {\n      var node = createNode(168\n      /* ObjectLiteralExpression */\n      );\n      parseExpected(15\n      /* OpenBraceToken */\n      );\n\n      if (scanner.hasPrecedingLineBreak()) {\n        node.flags |= 1024\n        /* MultiLine */\n        ;\n      }\n\n      node.properties = parseDelimitedList(12\n      /* ObjectLiteralMembers */\n      , parseObjectLiteralElement,\n      /*considerSemicolonAsDelimeter*/\n      true);\n      parseExpected(16\n      /* CloseBraceToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseFunctionExpression() {\n      // GeneratorExpression:\n      //      function* BindingIdentifier [Yield][opt](FormalParameters[Yield]){ GeneratorBody }\n      //\n      // FunctionExpression:\n      //      function BindingIdentifier[opt](FormalParameters){ FunctionBody }\n      var saveDecoratorContext = inDecoratorContext();\n\n      if (saveDecoratorContext) {\n        setDecoratorContext(\n        /*val*/\n        false);\n      }\n\n      var node = createNode(176\n      /* FunctionExpression */\n      );\n      setModifiers(node, parseModifiers());\n      parseExpected(87\n      /* FunctionKeyword */\n      );\n      node.asteriskToken = parseOptionalToken(37\n      /* AsteriskToken */\n      );\n      var isGenerator = !!node.asteriskToken;\n      var isAsync = !!(node.flags & 256\n      /* Async */\n      );\n      node.name = isGenerator && isAsync ? doInYieldAndAwaitContext(parseOptionalIdentifier) : isGenerator ? doInYieldContext(parseOptionalIdentifier) : isAsync ? doInAwaitContext(parseOptionalIdentifier) : parseOptionalIdentifier();\n      fillSignature(54\n      /* ColonToken */\n      ,\n      /*yieldContext*/\n      isGenerator,\n      /*awaitContext*/\n      isAsync,\n      /*requireCompleteParameterList*/\n      false, node);\n      node.body = parseFunctionBlock(\n      /*allowYield*/\n      isGenerator,\n      /*allowAwait*/\n      isAsync,\n      /*ignoreMissingOpenBrace*/\n      false);\n\n      if (saveDecoratorContext) {\n        setDecoratorContext(\n        /*val*/\n        true);\n      }\n\n      return addJSDocComment(finishNode(node));\n    }\n\n    function parseOptionalIdentifier() {\n      return isIdentifier() ? parseIdentifier() : undefined;\n    }\n\n    function parseNewExpression() {\n      var node = createNode(172\n      /* NewExpression */\n      );\n      parseExpected(92\n      /* NewKeyword */\n      );\n      node.expression = parseMemberExpressionOrHigher();\n      node.typeArguments = tryParse(parseTypeArgumentsInExpression);\n\n      if (node.typeArguments || token === 17\n      /* OpenParenToken */\n      ) {\n          node.arguments = parseArgumentList();\n        }\n\n      return finishNode(node);\n    } // STATEMENTS\n\n\n    function parseBlock(ignoreMissingOpenBrace, diagnosticMessage) {\n      var node = createNode(195\n      /* Block */\n      );\n\n      if (parseExpected(15\n      /* OpenBraceToken */\n      , diagnosticMessage) || ignoreMissingOpenBrace) {\n        node.statements = parseList(1\n        /* BlockStatements */\n        , parseStatement);\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n      } else {\n        node.statements = createMissingList();\n      }\n\n      return finishNode(node);\n    }\n\n    function parseFunctionBlock(allowYield, allowAwait, ignoreMissingOpenBrace, diagnosticMessage) {\n      var savedYieldContext = inYieldContext();\n      setYieldContext(allowYield);\n      var savedAwaitContext = inAwaitContext();\n      setAwaitContext(allowAwait); // We may be in a [Decorator] context when parsing a function expression or\n      // arrow function. The body of the function is not in [Decorator] context.\n\n      var saveDecoratorContext = inDecoratorContext();\n\n      if (saveDecoratorContext) {\n        setDecoratorContext(\n        /*val*/\n        false);\n      }\n\n      var block = parseBlock(ignoreMissingOpenBrace, diagnosticMessage);\n\n      if (saveDecoratorContext) {\n        setDecoratorContext(\n        /*val*/\n        true);\n      }\n\n      setYieldContext(savedYieldContext);\n      setAwaitContext(savedAwaitContext);\n      return block;\n    }\n\n    function parseEmptyStatement() {\n      var node = createNode(197\n      /* EmptyStatement */\n      );\n      parseExpected(23\n      /* SemicolonToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseIfStatement() {\n      var node = createNode(199\n      /* IfStatement */\n      );\n      parseExpected(88\n      /* IfKeyword */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      node.thenStatement = parseStatement();\n      node.elseStatement = parseOptional(80\n      /* ElseKeyword */\n      ) ? parseStatement() : undefined;\n      return finishNode(node);\n    }\n\n    function parseDoStatement() {\n      var node = createNode(200\n      /* DoStatement */\n      );\n      parseExpected(79\n      /* DoKeyword */\n      );\n      node.statement = parseStatement();\n      parseExpected(104\n      /* WhileKeyword */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(18\n      /* CloseParenToken */\n      ); // From: https://mail.mozilla.org/pipermail/es-discuss/2011-August/016188.html\n      // 157 min --- All allen at wirfs-brock.com CONF --- \"do{;}while(false)false\" prohibited in\n      // spec but allowed in consensus reality. Approved -- this is the de-facto standard whereby\n      //  do;while(0)x will have a semicolon inserted before x.\n\n      parseOptional(23\n      /* SemicolonToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseWhileStatement() {\n      var node = createNode(201\n      /* WhileStatement */\n      );\n      parseExpected(104\n      /* WhileKeyword */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      node.statement = parseStatement();\n      return finishNode(node);\n    }\n\n    function parseForOrForInOrForOfStatement() {\n      var pos = getNodePos();\n      parseExpected(86\n      /* ForKeyword */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      var initializer = undefined;\n\n      if (token !== 23\n      /* SemicolonToken */\n      ) {\n          if (token === 102\n          /* VarKeyword */\n          || token === 108\n          /* LetKeyword */\n          || token === 74\n          /* ConstKeyword */\n          ) {\n              initializer = parseVariableDeclarationList(\n              /*inForStatementInitializer*/\n              true);\n            } else {\n            initializer = disallowInAnd(parseExpression);\n          }\n        }\n\n      var forOrForInOrForOfStatement;\n\n      if (parseOptional(90\n      /* InKeyword */\n      )) {\n        var forInStatement = createNode(203\n        /* ForInStatement */\n        , pos);\n        forInStatement.initializer = initializer;\n        forInStatement.expression = allowInAnd(parseExpression);\n        parseExpected(18\n        /* CloseParenToken */\n        );\n        forOrForInOrForOfStatement = forInStatement;\n      } else if (parseOptional(135\n      /* OfKeyword */\n      )) {\n        var forOfStatement = createNode(204\n        /* ForOfStatement */\n        , pos);\n        forOfStatement.initializer = initializer;\n        forOfStatement.expression = allowInAnd(parseAssignmentExpressionOrHigher);\n        parseExpected(18\n        /* CloseParenToken */\n        );\n        forOrForInOrForOfStatement = forOfStatement;\n      } else {\n        var forStatement = createNode(202\n        /* ForStatement */\n        , pos);\n        forStatement.initializer = initializer;\n        parseExpected(23\n        /* SemicolonToken */\n        );\n\n        if (token !== 23\n        /* SemicolonToken */\n        && token !== 18\n        /* CloseParenToken */\n        ) {\n            forStatement.condition = allowInAnd(parseExpression);\n          }\n\n        parseExpected(23\n        /* SemicolonToken */\n        );\n\n        if (token !== 18\n        /* CloseParenToken */\n        ) {\n            forStatement.incrementor = allowInAnd(parseExpression);\n          }\n\n        parseExpected(18\n        /* CloseParenToken */\n        );\n        forOrForInOrForOfStatement = forStatement;\n      }\n\n      forOrForInOrForOfStatement.statement = parseStatement();\n      return finishNode(forOrForInOrForOfStatement);\n    }\n\n    function parseBreakOrContinueStatement(kind) {\n      var node = createNode(kind);\n      parseExpected(kind === 206\n      /* BreakStatement */\n      ? 70\n      /* BreakKeyword */\n      : 75\n      /* ContinueKeyword */\n      );\n\n      if (!canParseSemicolon()) {\n        node.label = parseIdentifier();\n      }\n\n      parseSemicolon();\n      return finishNode(node);\n    }\n\n    function parseReturnStatement() {\n      var node = createNode(207\n      /* ReturnStatement */\n      );\n      parseExpected(94\n      /* ReturnKeyword */\n      );\n\n      if (!canParseSemicolon()) {\n        node.expression = allowInAnd(parseExpression);\n      }\n\n      parseSemicolon();\n      return finishNode(node);\n    }\n\n    function parseWithStatement() {\n      var node = createNode(208\n      /* WithStatement */\n      );\n      parseExpected(105\n      /* WithKeyword */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      node.statement = parseStatement();\n      return finishNode(node);\n    }\n\n    function parseCaseClause() {\n      var node = createNode(244\n      /* CaseClause */\n      );\n      parseExpected(71\n      /* CaseKeyword */\n      );\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(54\n      /* ColonToken */\n      );\n      node.statements = parseList(3\n      /* SwitchClauseStatements */\n      , parseStatement);\n      return finishNode(node);\n    }\n\n    function parseDefaultClause() {\n      var node = createNode(245\n      /* DefaultClause */\n      );\n      parseExpected(77\n      /* DefaultKeyword */\n      );\n      parseExpected(54\n      /* ColonToken */\n      );\n      node.statements = parseList(3\n      /* SwitchClauseStatements */\n      , parseStatement);\n      return finishNode(node);\n    }\n\n    function parseCaseOrDefaultClause() {\n      return token === 71\n      /* CaseKeyword */\n      ? parseCaseClause() : parseDefaultClause();\n    }\n\n    function parseSwitchStatement() {\n      var node = createNode(209\n      /* SwitchStatement */\n      );\n      parseExpected(96\n      /* SwitchKeyword */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.expression = allowInAnd(parseExpression);\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      var caseBlock = createNode(223\n      /* CaseBlock */\n      , scanner.getStartPos());\n      parseExpected(15\n      /* OpenBraceToken */\n      );\n      caseBlock.clauses = parseList(2\n      /* SwitchClauses */\n      , parseCaseOrDefaultClause);\n      parseExpected(16\n      /* CloseBraceToken */\n      );\n      node.caseBlock = finishNode(caseBlock);\n      return finishNode(node);\n    }\n\n    function parseThrowStatement() {\n      // ThrowStatement[Yield] :\n      //      throw [no LineTerminator here]Expression[In, ?Yield];\n      // Because of automatic semicolon insertion, we need to report error if this\n      // throw could be terminated with a semicolon.  Note: we can't call 'parseExpression'\n      // directly as that might consume an expression on the following line.\n      // We just return 'undefined' in that case.  The actual error will be reported in the\n      // grammar walker.\n      var node = createNode(211\n      /* ThrowStatement */\n      );\n      parseExpected(98\n      /* ThrowKeyword */\n      );\n      node.expression = scanner.hasPrecedingLineBreak() ? undefined : allowInAnd(parseExpression);\n      parseSemicolon();\n      return finishNode(node);\n    } // TODO: Review for error recovery\n\n\n    function parseTryStatement() {\n      var node = createNode(212\n      /* TryStatement */\n      );\n      parseExpected(100\n      /* TryKeyword */\n      );\n      node.tryBlock = parseBlock(\n      /*ignoreMissingOpenBrace*/\n      false);\n      node.catchClause = token === 72\n      /* CatchKeyword */\n      ? parseCatchClause() : undefined; // If we don't have a catch clause, then we must have a finally clause.  Try to parse\n      // one out no matter what.\n\n      if (!node.catchClause || token === 85\n      /* FinallyKeyword */\n      ) {\n          parseExpected(85\n          /* FinallyKeyword */\n          );\n          node.finallyBlock = parseBlock(\n          /*ignoreMissingOpenBrace*/\n          false);\n        }\n\n      return finishNode(node);\n    }\n\n    function parseCatchClause() {\n      var result = createNode(247\n      /* CatchClause */\n      );\n      parseExpected(72\n      /* CatchKeyword */\n      );\n\n      if (parseExpected(17\n      /* OpenParenToken */\n      )) {\n        result.variableDeclaration = parseVariableDeclaration();\n      }\n\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      result.block = parseBlock(\n      /*ignoreMissingOpenBrace*/\n      false);\n      return finishNode(result);\n    }\n\n    function parseDebuggerStatement() {\n      var node = createNode(213\n      /* DebuggerStatement */\n      );\n      parseExpected(76\n      /* DebuggerKeyword */\n      );\n      parseSemicolon();\n      return finishNode(node);\n    }\n\n    function parseExpressionOrLabeledStatement() {\n      // Avoiding having to do the lookahead for a labeled statement by just trying to parse\n      // out an expression, seeing if it is identifier and then seeing if it is followed by\n      // a colon.\n      var fullStart = scanner.getStartPos();\n      var expression = allowInAnd(parseExpression);\n\n      if (expression.kind === 69\n      /* Identifier */\n      && parseOptional(54\n      /* ColonToken */\n      )) {\n        var labeledStatement = createNode(210\n        /* LabeledStatement */\n        , fullStart);\n        labeledStatement.label = expression;\n        labeledStatement.statement = parseStatement();\n        return addJSDocComment(finishNode(labeledStatement));\n      } else {\n        var expressionStatement = createNode(198\n        /* ExpressionStatement */\n        , fullStart);\n        expressionStatement.expression = expression;\n        parseSemicolon();\n        return addJSDocComment(finishNode(expressionStatement));\n      }\n    }\n\n    function nextTokenIsIdentifierOrKeywordOnSameLine() {\n      nextToken();\n      return ts.tokenIsIdentifierOrKeyword(token) && !scanner.hasPrecedingLineBreak();\n    }\n\n    function nextTokenIsFunctionKeywordOnSameLine() {\n      nextToken();\n      return token === 87\n      /* FunctionKeyword */\n      && !scanner.hasPrecedingLineBreak();\n    }\n\n    function nextTokenIsIdentifierOrKeywordOrNumberOnSameLine() {\n      nextToken();\n      return (ts.tokenIsIdentifierOrKeyword(token) || token === 8\n      /* NumericLiteral */\n      ) && !scanner.hasPrecedingLineBreak();\n    }\n\n    function isDeclaration() {\n      while (true) {\n        switch (token) {\n          case 102\n          /* VarKeyword */\n          :\n          case 108\n          /* LetKeyword */\n          :\n          case 74\n          /* ConstKeyword */\n          :\n          case 87\n          /* FunctionKeyword */\n          :\n          case 73\n          /* ClassKeyword */\n          :\n          case 81\n          /* EnumKeyword */\n          :\n            return true;\n          // 'declare', 'module', 'namespace', 'interface'* and 'type' are all legal JavaScript identifiers;\n          // however, an identifier cannot be followed by another identifier on the same line. This is what we\n          // count on to parse out the respective declarations. For instance, we exploit this to say that\n          //\n          //    namespace n\n          //\n          // can be none other than the beginning of a namespace declaration, but need to respect that JavaScript sees\n          //\n          //    namespace\n          //    n\n          //\n          // as the identifier 'namespace' on one line followed by the identifier 'n' on another.\n          // We need to look one token ahead to see if it permissible to try parsing a declaration.\n          //\n          // *Note*: 'interface' is actually a strict mode reserved word. So while\n          //\n          //   \"use strict\"\n          //   interface\n          //   I {}\n          //\n          // could be legal, it would add complexity for very little gain.\n\n          case 107\n          /* InterfaceKeyword */\n          :\n          case 132\n          /* TypeKeyword */\n          :\n            return nextTokenIsIdentifierOnSameLine();\n\n          case 125\n          /* ModuleKeyword */\n          :\n          case 126\n          /* NamespaceKeyword */\n          :\n            return nextTokenIsIdentifierOrStringLiteralOnSameLine();\n\n          case 115\n          /* AbstractKeyword */\n          :\n          case 118\n          /* AsyncKeyword */\n          :\n          case 122\n          /* DeclareKeyword */\n          :\n          case 110\n          /* PrivateKeyword */\n          :\n          case 111\n          /* ProtectedKeyword */\n          :\n          case 112\n          /* PublicKeyword */\n          :\n            nextToken(); // ASI takes effect for this modifier.\n\n            if (scanner.hasPrecedingLineBreak()) {\n              return false;\n            }\n\n            continue;\n\n          case 134\n          /* GlobalKeyword */\n          :\n            return nextToken() === 15\n            /* OpenBraceToken */\n            ;\n\n          case 89\n          /* ImportKeyword */\n          :\n            nextToken();\n            return token === 9\n            /* StringLiteral */\n            || token === 37\n            /* AsteriskToken */\n            || token === 15\n            /* OpenBraceToken */\n            || ts.tokenIsIdentifierOrKeyword(token);\n\n          case 82\n          /* ExportKeyword */\n          :\n            nextToken();\n\n            if (token === 56\n            /* EqualsToken */\n            || token === 37\n            /* AsteriskToken */\n            || token === 15\n            /* OpenBraceToken */\n            || token === 77\n            /* DefaultKeyword */\n            ) {\n                return true;\n              }\n\n            continue;\n\n          case 113\n          /* StaticKeyword */\n          :\n            nextToken();\n            continue;\n\n          default:\n            return false;\n        }\n      }\n    }\n\n    function isStartOfDeclaration() {\n      return lookAhead(isDeclaration);\n    }\n\n    function isStartOfStatement() {\n      switch (token) {\n        case 55\n        /* AtToken */\n        :\n        case 23\n        /* SemicolonToken */\n        :\n        case 15\n        /* OpenBraceToken */\n        :\n        case 102\n        /* VarKeyword */\n        :\n        case 108\n        /* LetKeyword */\n        :\n        case 87\n        /* FunctionKeyword */\n        :\n        case 73\n        /* ClassKeyword */\n        :\n        case 81\n        /* EnumKeyword */\n        :\n        case 88\n        /* IfKeyword */\n        :\n        case 79\n        /* DoKeyword */\n        :\n        case 104\n        /* WhileKeyword */\n        :\n        case 86\n        /* ForKeyword */\n        :\n        case 75\n        /* ContinueKeyword */\n        :\n        case 70\n        /* BreakKeyword */\n        :\n        case 94\n        /* ReturnKeyword */\n        :\n        case 105\n        /* WithKeyword */\n        :\n        case 96\n        /* SwitchKeyword */\n        :\n        case 98\n        /* ThrowKeyword */\n        :\n        case 100\n        /* TryKeyword */\n        :\n        case 76\n        /* DebuggerKeyword */\n        : // 'catch' and 'finally' do not actually indicate that the code is part of a statement,\n        // however, we say they are here so that we may gracefully parse them and error later.\n\n        case 72\n        /* CatchKeyword */\n        :\n        case 85\n        /* FinallyKeyword */\n        :\n          return true;\n\n        case 74\n        /* ConstKeyword */\n        :\n        case 82\n        /* ExportKeyword */\n        :\n        case 89\n        /* ImportKeyword */\n        :\n          return isStartOfDeclaration();\n\n        case 118\n        /* AsyncKeyword */\n        :\n        case 122\n        /* DeclareKeyword */\n        :\n        case 107\n        /* InterfaceKeyword */\n        :\n        case 125\n        /* ModuleKeyword */\n        :\n        case 126\n        /* NamespaceKeyword */\n        :\n        case 132\n        /* TypeKeyword */\n        :\n        case 134\n        /* GlobalKeyword */\n        :\n          // When these don't start a declaration, they're an identifier in an expression statement\n          return true;\n\n        case 112\n        /* PublicKeyword */\n        :\n        case 110\n        /* PrivateKeyword */\n        :\n        case 111\n        /* ProtectedKeyword */\n        :\n        case 113\n        /* StaticKeyword */\n        :\n          // When these don't start a declaration, they may be the start of a class member if an identifier\n          // immediately follows. Otherwise they're an identifier in an expression statement.\n          return isStartOfDeclaration() || !lookAhead(nextTokenIsIdentifierOrKeywordOnSameLine);\n\n        default:\n          return isStartOfExpression();\n      }\n    }\n\n    function nextTokenIsIdentifierOrStartOfDestructuring() {\n      nextToken();\n      return isIdentifier() || token === 15\n      /* OpenBraceToken */\n      || token === 19\n      /* OpenBracketToken */\n      ;\n    }\n\n    function isLetDeclaration() {\n      // In ES6 'let' always starts a lexical declaration if followed by an identifier or {\n      // or [.\n      return lookAhead(nextTokenIsIdentifierOrStartOfDestructuring);\n    }\n\n    function parseStatement() {\n      switch (token) {\n        case 23\n        /* SemicolonToken */\n        :\n          return parseEmptyStatement();\n\n        case 15\n        /* OpenBraceToken */\n        :\n          return parseBlock(\n          /*ignoreMissingOpenBrace*/\n          false);\n\n        case 102\n        /* VarKeyword */\n        :\n          return parseVariableStatement(scanner.getStartPos(),\n          /*decorators*/\n          undefined,\n          /*modifiers*/\n          undefined);\n\n        case 108\n        /* LetKeyword */\n        :\n          if (isLetDeclaration()) {\n            return parseVariableStatement(scanner.getStartPos(),\n            /*decorators*/\n            undefined,\n            /*modifiers*/\n            undefined);\n          }\n\n          break;\n\n        case 87\n        /* FunctionKeyword */\n        :\n          return parseFunctionDeclaration(scanner.getStartPos(),\n          /*decorators*/\n          undefined,\n          /*modifiers*/\n          undefined);\n\n        case 73\n        /* ClassKeyword */\n        :\n          return parseClassDeclaration(scanner.getStartPos(),\n          /*decorators*/\n          undefined,\n          /*modifiers*/\n          undefined);\n\n        case 88\n        /* IfKeyword */\n        :\n          return parseIfStatement();\n\n        case 79\n        /* DoKeyword */\n        :\n          return parseDoStatement();\n\n        case 104\n        /* WhileKeyword */\n        :\n          return parseWhileStatement();\n\n        case 86\n        /* ForKeyword */\n        :\n          return parseForOrForInOrForOfStatement();\n\n        case 75\n        /* ContinueKeyword */\n        :\n          return parseBreakOrContinueStatement(205\n          /* ContinueStatement */\n          );\n\n        case 70\n        /* BreakKeyword */\n        :\n          return parseBreakOrContinueStatement(206\n          /* BreakStatement */\n          );\n\n        case 94\n        /* ReturnKeyword */\n        :\n          return parseReturnStatement();\n\n        case 105\n        /* WithKeyword */\n        :\n          return parseWithStatement();\n\n        case 96\n        /* SwitchKeyword */\n        :\n          return parseSwitchStatement();\n\n        case 98\n        /* ThrowKeyword */\n        :\n          return parseThrowStatement();\n\n        case 100\n        /* TryKeyword */\n        : // Include 'catch' and 'finally' for error recovery.\n\n        case 72\n        /* CatchKeyword */\n        :\n        case 85\n        /* FinallyKeyword */\n        :\n          return parseTryStatement();\n\n        case 76\n        /* DebuggerKeyword */\n        :\n          return parseDebuggerStatement();\n\n        case 55\n        /* AtToken */\n        :\n          return parseDeclaration();\n\n        case 118\n        /* AsyncKeyword */\n        :\n        case 107\n        /* InterfaceKeyword */\n        :\n        case 132\n        /* TypeKeyword */\n        :\n        case 125\n        /* ModuleKeyword */\n        :\n        case 126\n        /* NamespaceKeyword */\n        :\n        case 122\n        /* DeclareKeyword */\n        :\n        case 74\n        /* ConstKeyword */\n        :\n        case 81\n        /* EnumKeyword */\n        :\n        case 82\n        /* ExportKeyword */\n        :\n        case 89\n        /* ImportKeyword */\n        :\n        case 110\n        /* PrivateKeyword */\n        :\n        case 111\n        /* ProtectedKeyword */\n        :\n        case 112\n        /* PublicKeyword */\n        :\n        case 115\n        /* AbstractKeyword */\n        :\n        case 113\n        /* StaticKeyword */\n        :\n        case 134\n        /* GlobalKeyword */\n        :\n          if (isStartOfDeclaration()) {\n            return parseDeclaration();\n          }\n\n          break;\n      }\n\n      return parseExpressionOrLabeledStatement();\n    }\n\n    function parseDeclaration() {\n      var fullStart = getNodePos();\n      var decorators = parseDecorators();\n      var modifiers = parseModifiers();\n\n      switch (token) {\n        case 102\n        /* VarKeyword */\n        :\n        case 108\n        /* LetKeyword */\n        :\n        case 74\n        /* ConstKeyword */\n        :\n          return parseVariableStatement(fullStart, decorators, modifiers);\n\n        case 87\n        /* FunctionKeyword */\n        :\n          return parseFunctionDeclaration(fullStart, decorators, modifiers);\n\n        case 73\n        /* ClassKeyword */\n        :\n          return parseClassDeclaration(fullStart, decorators, modifiers);\n\n        case 107\n        /* InterfaceKeyword */\n        :\n          return parseInterfaceDeclaration(fullStart, decorators, modifiers);\n\n        case 132\n        /* TypeKeyword */\n        :\n          return parseTypeAliasDeclaration(fullStart, decorators, modifiers);\n\n        case 81\n        /* EnumKeyword */\n        :\n          return parseEnumDeclaration(fullStart, decorators, modifiers);\n\n        case 134\n        /* GlobalKeyword */\n        :\n        case 125\n        /* ModuleKeyword */\n        :\n        case 126\n        /* NamespaceKeyword */\n        :\n          return parseModuleDeclaration(fullStart, decorators, modifiers);\n\n        case 89\n        /* ImportKeyword */\n        :\n          return parseImportDeclarationOrImportEqualsDeclaration(fullStart, decorators, modifiers);\n\n        case 82\n        /* ExportKeyword */\n        :\n          nextToken();\n          return token === 77\n          /* DefaultKeyword */\n          || token === 56\n          /* EqualsToken */\n          ? parseExportAssignment(fullStart, decorators, modifiers) : parseExportDeclaration(fullStart, decorators, modifiers);\n\n        default:\n          if (decorators || modifiers) {\n            // We reached this point because we encountered decorators and/or modifiers and assumed a declaration\n            // would follow. For recovery and error reporting purposes, return an incomplete declaration.\n            var node = createMissingNode(234\n            /* MissingDeclaration */\n            ,\n            /*reportAtCurrentPosition*/\n            true, ts.Diagnostics.Declaration_expected);\n            node.pos = fullStart;\n            node.decorators = decorators;\n            setModifiers(node, modifiers);\n            return finishNode(node);\n          }\n\n      }\n    }\n\n    function nextTokenIsIdentifierOrStringLiteralOnSameLine() {\n      nextToken();\n      return !scanner.hasPrecedingLineBreak() && (isIdentifier() || token === 9\n      /* StringLiteral */\n      );\n    }\n\n    function parseFunctionBlockOrSemicolon(isGenerator, isAsync, diagnosticMessage) {\n      if (token !== 15\n      /* OpenBraceToken */\n      && canParseSemicolon()) {\n        parseSemicolon();\n        return;\n      }\n\n      return parseFunctionBlock(isGenerator, isAsync,\n      /*ignoreMissingOpenBrace*/\n      false, diagnosticMessage);\n    } // DECLARATIONS\n\n\n    function parseArrayBindingElement() {\n      if (token === 24\n      /* CommaToken */\n      ) {\n          return createNode(190\n          /* OmittedExpression */\n          );\n        }\n\n      var node = createNode(166\n      /* BindingElement */\n      );\n      node.dotDotDotToken = parseOptionalToken(22\n      /* DotDotDotToken */\n      );\n      node.name = parseIdentifierOrPattern();\n      node.initializer = parseBindingElementInitializer(\n      /*inParameter*/\n      false);\n      return finishNode(node);\n    }\n\n    function parseObjectBindingElement() {\n      var node = createNode(166\n      /* BindingElement */\n      );\n      var tokenIsIdentifier = isIdentifier();\n      var propertyName = parsePropertyName();\n\n      if (tokenIsIdentifier && token !== 54\n      /* ColonToken */\n      ) {\n          node.name = propertyName;\n        } else {\n        parseExpected(54\n        /* ColonToken */\n        );\n        node.propertyName = propertyName;\n        node.name = parseIdentifierOrPattern();\n      }\n\n      node.initializer = parseBindingElementInitializer(\n      /*inParameter*/\n      false);\n      return finishNode(node);\n    }\n\n    function parseObjectBindingPattern() {\n      var node = createNode(164\n      /* ObjectBindingPattern */\n      );\n      parseExpected(15\n      /* OpenBraceToken */\n      );\n      node.elements = parseDelimitedList(9\n      /* ObjectBindingElements */\n      , parseObjectBindingElement);\n      parseExpected(16\n      /* CloseBraceToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseArrayBindingPattern() {\n      var node = createNode(165\n      /* ArrayBindingPattern */\n      );\n      parseExpected(19\n      /* OpenBracketToken */\n      );\n      node.elements = parseDelimitedList(10\n      /* ArrayBindingElements */\n      , parseArrayBindingElement);\n      parseExpected(20\n      /* CloseBracketToken */\n      );\n      return finishNode(node);\n    }\n\n    function isIdentifierOrPattern() {\n      return token === 15\n      /* OpenBraceToken */\n      || token === 19\n      /* OpenBracketToken */\n      || isIdentifier();\n    }\n\n    function parseIdentifierOrPattern() {\n      if (token === 19\n      /* OpenBracketToken */\n      ) {\n          return parseArrayBindingPattern();\n        }\n\n      if (token === 15\n      /* OpenBraceToken */\n      ) {\n          return parseObjectBindingPattern();\n        }\n\n      return parseIdentifier();\n    }\n\n    function parseVariableDeclaration() {\n      var node = createNode(214\n      /* VariableDeclaration */\n      );\n      node.name = parseIdentifierOrPattern();\n      node.type = parseTypeAnnotation();\n\n      if (!isInOrOfKeyword(token)) {\n        node.initializer = parseInitializer(\n        /*inParameter*/\n        false);\n      }\n\n      return finishNode(node);\n    }\n\n    function parseVariableDeclarationList(inForStatementInitializer) {\n      var node = createNode(215\n      /* VariableDeclarationList */\n      );\n\n      switch (token) {\n        case 102\n        /* VarKeyword */\n        :\n          break;\n\n        case 108\n        /* LetKeyword */\n        :\n          node.flags |= 8192\n          /* Let */\n          ;\n          break;\n\n        case 74\n        /* ConstKeyword */\n        :\n          node.flags |= 16384\n          /* Const */\n          ;\n          break;\n\n        default:\n          ts.Debug.fail();\n      }\n\n      nextToken(); // The user may have written the following:\n      //\n      //    for (let of X) { }\n      //\n      // In this case, we want to parse an empty declaration list, and then parse 'of'\n      // as a keyword. The reason this is not automatic is that 'of' is a valid identifier.\n      // So we need to look ahead to determine if 'of' should be treated as a keyword in\n      // this context.\n      // The checker will then give an error that there is an empty declaration list.\n\n      if (token === 135\n      /* OfKeyword */\n      && lookAhead(canFollowContextualOfKeyword)) {\n        node.declarations = createMissingList();\n      } else {\n        var savedDisallowIn = inDisallowInContext();\n        setDisallowInContext(inForStatementInitializer);\n        node.declarations = parseDelimitedList(8\n        /* VariableDeclarations */\n        , parseVariableDeclaration);\n        setDisallowInContext(savedDisallowIn);\n      }\n\n      return finishNode(node);\n    }\n\n    function canFollowContextualOfKeyword() {\n      return nextTokenIsIdentifier() && nextToken() === 18\n      /* CloseParenToken */\n      ;\n    }\n\n    function parseVariableStatement(fullStart, decorators, modifiers) {\n      var node = createNode(196\n      /* VariableStatement */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      node.declarationList = parseVariableDeclarationList(\n      /*inForStatementInitializer*/\n      false);\n      parseSemicolon();\n      return addJSDocComment(finishNode(node));\n    }\n\n    function parseFunctionDeclaration(fullStart, decorators, modifiers) {\n      var node = createNode(216\n      /* FunctionDeclaration */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      parseExpected(87\n      /* FunctionKeyword */\n      );\n      node.asteriskToken = parseOptionalToken(37\n      /* AsteriskToken */\n      );\n      node.name = node.flags & 512\n      /* Default */\n      ? parseOptionalIdentifier() : parseIdentifier();\n      var isGenerator = !!node.asteriskToken;\n      var isAsync = !!(node.flags & 256\n      /* Async */\n      );\n      fillSignature(54\n      /* ColonToken */\n      ,\n      /*yieldContext*/\n      isGenerator,\n      /*awaitContext*/\n      isAsync,\n      /*requireCompleteParameterList*/\n      false, node);\n      node.body = parseFunctionBlockOrSemicolon(isGenerator, isAsync, ts.Diagnostics.or_expected);\n      return addJSDocComment(finishNode(node));\n    }\n\n    function parseConstructorDeclaration(pos, decorators, modifiers) {\n      var node = createNode(145\n      /* Constructor */\n      , pos);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      parseExpected(121\n      /* ConstructorKeyword */\n      );\n      fillSignature(54\n      /* ColonToken */\n      ,\n      /*yieldContext*/\n      false,\n      /*awaitContext*/\n      false,\n      /*requireCompleteParameterList*/\n      false, node);\n      node.body = parseFunctionBlockOrSemicolon(\n      /*isGenerator*/\n      false,\n      /*isAsync*/\n      false, ts.Diagnostics.or_expected);\n      return addJSDocComment(finishNode(node));\n    }\n\n    function parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, name, questionToken, diagnosticMessage) {\n      var method = createNode(144\n      /* MethodDeclaration */\n      , fullStart);\n      method.decorators = decorators;\n      setModifiers(method, modifiers);\n      method.asteriskToken = asteriskToken;\n      method.name = name;\n      method.questionToken = questionToken;\n      var isGenerator = !!asteriskToken;\n      var isAsync = !!(method.flags & 256\n      /* Async */\n      );\n      fillSignature(54\n      /* ColonToken */\n      ,\n      /*yieldContext*/\n      isGenerator,\n      /*awaitContext*/\n      isAsync,\n      /*requireCompleteParameterList*/\n      false, method);\n      method.body = parseFunctionBlockOrSemicolon(isGenerator, isAsync, diagnosticMessage);\n      return addJSDocComment(finishNode(method));\n    }\n\n    function parsePropertyDeclaration(fullStart, decorators, modifiers, name, questionToken) {\n      var property = createNode(142\n      /* PropertyDeclaration */\n      , fullStart);\n      property.decorators = decorators;\n      setModifiers(property, modifiers);\n      property.name = name;\n      property.questionToken = questionToken;\n      property.type = parseTypeAnnotation(); // For instance properties specifically, since they are evaluated inside the constructor,\n      // we do *not * want to parse yield expressions, so we specifically turn the yield context\n      // off. The grammar would look something like this:\n      //\n      //    MemberVariableDeclaration[Yield]:\n      //        AccessibilityModifier_opt   PropertyName   TypeAnnotation_opt   Initialiser_opt[In];\n      //        AccessibilityModifier_opt  static_opt  PropertyName   TypeAnnotation_opt   Initialiser_opt[In, ?Yield];\n      //\n      // The checker may still error in the static case to explicitly disallow the yield expression.\n\n      property.initializer = modifiers && modifiers.flags & 64\n      /* Static */\n      ? allowInAnd(parseNonParameterInitializer) : doOutsideOfContext(2\n      /* Yield */\n      | 1\n      /* DisallowIn */\n      , parseNonParameterInitializer);\n      parseSemicolon();\n      return finishNode(property);\n    }\n\n    function parsePropertyOrMethodDeclaration(fullStart, decorators, modifiers) {\n      var asteriskToken = parseOptionalToken(37\n      /* AsteriskToken */\n      );\n      var name = parsePropertyName(); // Note: this is not legal as per the grammar.  But we allow it in the parser and\n      // report an error in the grammar checker.\n\n      var questionToken = parseOptionalToken(53\n      /* QuestionToken */\n      );\n\n      if (asteriskToken || token === 17\n      /* OpenParenToken */\n      || token === 25\n      /* LessThanToken */\n      ) {\n          return parseMethodDeclaration(fullStart, decorators, modifiers, asteriskToken, name, questionToken, ts.Diagnostics.or_expected);\n        } else {\n        return parsePropertyDeclaration(fullStart, decorators, modifiers, name, questionToken);\n      }\n    }\n\n    function parseNonParameterInitializer() {\n      return parseInitializer(\n      /*inParameter*/\n      false);\n    }\n\n    function parseAccessorDeclaration(kind, fullStart, decorators, modifiers) {\n      var node = createNode(kind, fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      node.name = parsePropertyName();\n      fillSignature(54\n      /* ColonToken */\n      ,\n      /*yieldContext*/\n      false,\n      /*awaitContext*/\n      false,\n      /*requireCompleteParameterList*/\n      false, node);\n      node.body = parseFunctionBlockOrSemicolon(\n      /*isGenerator*/\n      false,\n      /*isAsync*/\n      false);\n      return finishNode(node);\n    }\n\n    function isClassMemberModifier(idToken) {\n      switch (idToken) {\n        case 112\n        /* PublicKeyword */\n        :\n        case 110\n        /* PrivateKeyword */\n        :\n        case 111\n        /* ProtectedKeyword */\n        :\n        case 113\n        /* StaticKeyword */\n        :\n          return true;\n\n        default:\n          return false;\n      }\n    }\n\n    function isClassMemberStart() {\n      var idToken;\n\n      if (token === 55\n      /* AtToken */\n      ) {\n          return true;\n        } // Eat up all modifiers, but hold on to the last one in case it is actually an identifier.\n\n\n      while (ts.isModifierKind(token)) {\n        idToken = token; // If the idToken is a class modifier (protected, private, public, and static), it is\n        // certain that we are starting to parse class member. This allows better error recovery\n        // Example:\n        //      public foo() ...     // true\n        //      public @dec blah ... // true; we will then report an error later\n        //      export public ...    // true; we will then report an error later\n\n        if (isClassMemberModifier(idToken)) {\n          return true;\n        }\n\n        nextToken();\n      }\n\n      if (token === 37\n      /* AsteriskToken */\n      ) {\n          return true;\n        } // Try to get the first property-like token following all modifiers.\n      // This can either be an identifier or the 'get' or 'set' keywords.\n\n\n      if (isLiteralPropertyName()) {\n        idToken = token;\n        nextToken();\n      } // Index signatures and computed properties are class members; we can parse.\n\n\n      if (token === 19\n      /* OpenBracketToken */\n      ) {\n          return true;\n        } // If we were able to get any potential identifier...\n\n\n      if (idToken !== undefined) {\n        // If we have a non-keyword identifier, or if we have an accessor, then it's safe to parse.\n        if (!ts.isKeyword(idToken) || idToken === 129\n        /* SetKeyword */\n        || idToken === 123\n        /* GetKeyword */\n        ) {\n            return true;\n          } // If it *is* a keyword, but not an accessor, check a little farther along\n        // to see if it should actually be parsed as a class member.\n\n\n        switch (token) {\n          case 17\n          /* OpenParenToken */\n          : // Method declaration\n\n          case 25\n          /* LessThanToken */\n          : // Generic Method declaration\n\n          case 54\n          /* ColonToken */\n          : // Type Annotation for declaration\n\n          case 56\n          /* EqualsToken */\n          : // Initializer for declaration\n\n          case 53\n          /* QuestionToken */\n          :\n            return true;\n\n          default:\n            // Covers\n            //  - Semicolons     (declaration termination)\n            //  - Closing braces (end-of-class, must be declaration)\n            //  - End-of-files   (not valid, but permitted so that it gets caught later on)\n            //  - Line-breaks    (enabling *automatic semicolon insertion*)\n            return canParseSemicolon();\n        }\n      }\n\n      return false;\n    }\n\n    function parseDecorators() {\n      var decorators;\n\n      while (true) {\n        var decoratorStart = getNodePos();\n\n        if (!parseOptional(55\n        /* AtToken */\n        )) {\n          break;\n        }\n\n        if (!decorators) {\n          decorators = [];\n          decorators.pos = decoratorStart;\n        }\n\n        var decorator = createNode(140\n        /* Decorator */\n        , decoratorStart);\n        decorator.expression = doInDecoratorContext(parseLeftHandSideExpressionOrHigher);\n        decorators.push(finishNode(decorator));\n      }\n\n      if (decorators) {\n        decorators.end = getNodeEnd();\n      }\n\n      return decorators;\n    }\n    /*\n     * There are situations in which a modifier like 'const' will appear unexpectedly, such as on a class member.\n     * In those situations, if we are entirely sure that 'const' is not valid on its own (such as when ASI takes effect\n     * and turns it into a standalone declaration), then it is better to parse it and report an error later.\n     *\n     * In such situations, 'permitInvalidConstAsModifier' should be set to true.\n     */\n\n\n    function parseModifiers(permitInvalidConstAsModifier) {\n      var flags = 0;\n      var modifiers;\n\n      while (true) {\n        var modifierStart = scanner.getStartPos();\n        var modifierKind = token;\n\n        if (token === 74\n        /* ConstKeyword */\n        && permitInvalidConstAsModifier) {\n          // We need to ensure that any subsequent modifiers appear on the same line\n          // so that when 'const' is a standalone declaration, we don't issue an error.                \n          if (!tryParse(nextTokenIsOnSameLineAndCanFollowModifier)) {\n            break;\n          }\n        } else {\n          if (!parseAnyContextualModifier()) {\n            break;\n          }\n        }\n\n        if (!modifiers) {\n          modifiers = [];\n          modifiers.pos = modifierStart;\n        }\n\n        flags |= ts.modifierToFlag(modifierKind);\n        modifiers.push(finishNode(createNode(modifierKind, modifierStart)));\n      }\n\n      if (modifiers) {\n        modifiers.flags = flags;\n        modifiers.end = scanner.getStartPos();\n      }\n\n      return modifiers;\n    }\n\n    function parseModifiersForArrowFunction() {\n      var flags = 0;\n      var modifiers;\n\n      if (token === 118\n      /* AsyncKeyword */\n      ) {\n          var modifierStart = scanner.getStartPos();\n          var modifierKind = token;\n          nextToken();\n          modifiers = [];\n          modifiers.pos = modifierStart;\n          flags |= ts.modifierToFlag(modifierKind);\n          modifiers.push(finishNode(createNode(modifierKind, modifierStart)));\n          modifiers.flags = flags;\n          modifiers.end = scanner.getStartPos();\n        }\n\n      return modifiers;\n    }\n\n    function parseClassElement() {\n      if (token === 23\n      /* SemicolonToken */\n      ) {\n          var result = createNode(194\n          /* SemicolonClassElement */\n          );\n          nextToken();\n          return finishNode(result);\n        }\n\n      var fullStart = getNodePos();\n      var decorators = parseDecorators();\n      var modifiers = parseModifiers(\n      /*permitInvalidConstAsModifier*/\n      true);\n      var accessor = tryParseAccessorDeclaration(fullStart, decorators, modifiers);\n\n      if (accessor) {\n        return accessor;\n      }\n\n      if (token === 121\n      /* ConstructorKeyword */\n      ) {\n          return parseConstructorDeclaration(fullStart, decorators, modifiers);\n        }\n\n      if (isIndexSignature()) {\n        return parseIndexSignatureDeclaration(fullStart, decorators, modifiers);\n      } // It is very important that we check this *after* checking indexers because\n      // the [ token can start an index signature or a computed property name\n\n\n      if (ts.tokenIsIdentifierOrKeyword(token) || token === 9\n      /* StringLiteral */\n      || token === 8\n      /* NumericLiteral */\n      || token === 37\n      /* AsteriskToken */\n      || token === 19\n      /* OpenBracketToken */\n      ) {\n          return parsePropertyOrMethodDeclaration(fullStart, decorators, modifiers);\n        }\n\n      if (decorators || modifiers) {\n        // treat this as a property declaration with a missing name.\n        var name_7 = createMissingNode(69\n        /* Identifier */\n        ,\n        /*reportAtCurrentPosition*/\n        true, ts.Diagnostics.Declaration_expected);\n        return parsePropertyDeclaration(fullStart, decorators, modifiers, name_7,\n        /*questionToken*/\n        undefined);\n      } // 'isClassMemberStart' should have hinted not to attempt parsing.\n\n\n      ts.Debug.fail(\"Should not have attempted to parse class member declaration.\");\n    }\n\n    function parseClassExpression() {\n      return parseClassDeclarationOrExpression(\n      /*fullStart*/\n      scanner.getStartPos(),\n      /*decorators*/\n      undefined,\n      /*modifiers*/\n      undefined, 189\n      /* ClassExpression */\n      );\n    }\n\n    function parseClassDeclaration(fullStart, decorators, modifiers) {\n      return parseClassDeclarationOrExpression(fullStart, decorators, modifiers, 217\n      /* ClassDeclaration */\n      );\n    }\n\n    function parseClassDeclarationOrExpression(fullStart, decorators, modifiers, kind) {\n      var node = createNode(kind, fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      parseExpected(73\n      /* ClassKeyword */\n      );\n      node.name = parseNameOfClassDeclarationOrExpression();\n      node.typeParameters = parseTypeParameters();\n      node.heritageClauses = parseHeritageClauses(\n      /*isClassHeritageClause*/\n      true);\n\n      if (parseExpected(15\n      /* OpenBraceToken */\n      )) {\n        // ClassTail[Yield,Await] : (Modified) See 14.5\n        //      ClassHeritage[?Yield,?Await]opt { ClassBody[?Yield,?Await]opt }\n        node.members = parseClassMembers();\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n      } else {\n        node.members = createMissingList();\n      }\n\n      return finishNode(node);\n    }\n\n    function parseNameOfClassDeclarationOrExpression() {\n      // implements is a future reserved word so\n      // 'class implements' might mean either\n      // - class expression with omitted name, 'implements' starts heritage clause\n      // - class with name 'implements'\n      // 'isImplementsClause' helps to disambiguate between these two cases\n      return isIdentifier() && !isImplementsClause() ? parseIdentifier() : undefined;\n    }\n\n    function isImplementsClause() {\n      return token === 106\n      /* ImplementsKeyword */\n      && lookAhead(nextTokenIsIdentifierOrKeyword);\n    }\n\n    function parseHeritageClauses(isClassHeritageClause) {\n      // ClassTail[Yield,Await] : (Modified) See 14.5\n      //      ClassHeritage[?Yield,?Await]opt { ClassBody[?Yield,?Await]opt }\n      if (isHeritageClause()) {\n        return parseList(20\n        /* HeritageClauses */\n        , parseHeritageClause);\n      }\n\n      return undefined;\n    }\n\n    function parseHeritageClause() {\n      if (token === 83\n      /* ExtendsKeyword */\n      || token === 106\n      /* ImplementsKeyword */\n      ) {\n          var node = createNode(246\n          /* HeritageClause */\n          );\n          node.token = token;\n          nextToken();\n          node.types = parseDelimitedList(7\n          /* HeritageClauseElement */\n          , parseExpressionWithTypeArguments);\n          return finishNode(node);\n        }\n\n      return undefined;\n    }\n\n    function parseExpressionWithTypeArguments() {\n      var node = createNode(191\n      /* ExpressionWithTypeArguments */\n      );\n      node.expression = parseLeftHandSideExpressionOrHigher();\n\n      if (token === 25\n      /* LessThanToken */\n      ) {\n          node.typeArguments = parseBracketedList(18\n          /* TypeArguments */\n          , parseType, 25\n          /* LessThanToken */\n          , 27\n          /* GreaterThanToken */\n          );\n        }\n\n      return finishNode(node);\n    }\n\n    function isHeritageClause() {\n      return token === 83\n      /* ExtendsKeyword */\n      || token === 106\n      /* ImplementsKeyword */\n      ;\n    }\n\n    function parseClassMembers() {\n      return parseList(5\n      /* ClassMembers */\n      , parseClassElement);\n    }\n\n    function parseInterfaceDeclaration(fullStart, decorators, modifiers) {\n      var node = createNode(218\n      /* InterfaceDeclaration */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      parseExpected(107\n      /* InterfaceKeyword */\n      );\n      node.name = parseIdentifier();\n      node.typeParameters = parseTypeParameters();\n      node.heritageClauses = parseHeritageClauses(\n      /*isClassHeritageClause*/\n      false);\n      node.members = parseObjectTypeMembers();\n      return finishNode(node);\n    }\n\n    function parseTypeAliasDeclaration(fullStart, decorators, modifiers) {\n      var node = createNode(219\n      /* TypeAliasDeclaration */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      parseExpected(132\n      /* TypeKeyword */\n      );\n      node.name = parseIdentifier();\n      node.typeParameters = parseTypeParameters();\n      parseExpected(56\n      /* EqualsToken */\n      );\n      node.type = parseType();\n      parseSemicolon();\n      return finishNode(node);\n    } // In an ambient declaration, the grammar only allows integer literals as initializers.\n    // In a non-ambient declaration, the grammar allows uninitialized members only in a\n    // ConstantEnumMemberSection, which starts at the beginning of an enum declaration\n    // or any time an integer literal initializer is encountered.\n\n\n    function parseEnumMember() {\n      var node = createNode(250\n      /* EnumMember */\n      , scanner.getStartPos());\n      node.name = parsePropertyName();\n      node.initializer = allowInAnd(parseNonParameterInitializer);\n      return finishNode(node);\n    }\n\n    function parseEnumDeclaration(fullStart, decorators, modifiers) {\n      var node = createNode(220\n      /* EnumDeclaration */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      parseExpected(81\n      /* EnumKeyword */\n      );\n      node.name = parseIdentifier();\n\n      if (parseExpected(15\n      /* OpenBraceToken */\n      )) {\n        node.members = parseDelimitedList(6\n        /* EnumMembers */\n        , parseEnumMember);\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n      } else {\n        node.members = createMissingList();\n      }\n\n      return finishNode(node);\n    }\n\n    function parseModuleBlock() {\n      var node = createNode(222\n      /* ModuleBlock */\n      , scanner.getStartPos());\n\n      if (parseExpected(15\n      /* OpenBraceToken */\n      )) {\n        node.statements = parseList(1\n        /* BlockStatements */\n        , parseStatement);\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n      } else {\n        node.statements = createMissingList();\n      }\n\n      return finishNode(node);\n    }\n\n    function parseModuleOrNamespaceDeclaration(fullStart, decorators, modifiers, flags) {\n      var node = createNode(221\n      /* ModuleDeclaration */\n      , fullStart); // If we are parsing a dotted namespace name, we want to\n      // propagate the 'Namespace' flag across the names if set.\n\n      var namespaceFlag = flags & 65536\n      /* Namespace */\n      ;\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n      node.flags |= flags;\n      node.name = parseIdentifier();\n      node.body = parseOptional(21\n      /* DotToken */\n      ) ? parseModuleOrNamespaceDeclaration(getNodePos(),\n      /*decorators*/\n      undefined,\n      /*modifiers*/\n      undefined, 2\n      /* Export */\n      | namespaceFlag) : parseModuleBlock();\n      return finishNode(node);\n    }\n\n    function parseAmbientExternalModuleDeclaration(fullStart, decorators, modifiers) {\n      var node = createNode(221\n      /* ModuleDeclaration */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n\n      if (token === 134\n      /* GlobalKeyword */\n      ) {\n          // parse 'global' as name of global scope augmentation \n          node.name = parseIdentifier();\n          node.flags |= 2097152\n          /* GlobalAugmentation */\n          ;\n        } else {\n        node.name = parseLiteralNode(\n        /*internName*/\n        true);\n      }\n\n      node.body = parseModuleBlock();\n      return finishNode(node);\n    }\n\n    function parseModuleDeclaration(fullStart, decorators, modifiers) {\n      var flags = modifiers ? modifiers.flags : 0;\n\n      if (token === 134\n      /* GlobalKeyword */\n      ) {\n          // global augmentation\n          return parseAmbientExternalModuleDeclaration(fullStart, decorators, modifiers);\n        } else if (parseOptional(126\n      /* NamespaceKeyword */\n      )) {\n        flags |= 65536\n        /* Namespace */\n        ;\n      } else {\n        parseExpected(125\n        /* ModuleKeyword */\n        );\n\n        if (token === 9\n        /* StringLiteral */\n        ) {\n            return parseAmbientExternalModuleDeclaration(fullStart, decorators, modifiers);\n          }\n      }\n\n      return parseModuleOrNamespaceDeclaration(fullStart, decorators, modifiers, flags);\n    }\n\n    function isExternalModuleReference() {\n      return token === 127\n      /* RequireKeyword */\n      && lookAhead(nextTokenIsOpenParen);\n    }\n\n    function nextTokenIsOpenParen() {\n      return nextToken() === 17\n      /* OpenParenToken */\n      ;\n    }\n\n    function nextTokenIsSlash() {\n      return nextToken() === 39\n      /* SlashToken */\n      ;\n    }\n\n    function parseImportDeclarationOrImportEqualsDeclaration(fullStart, decorators, modifiers) {\n      parseExpected(89\n      /* ImportKeyword */\n      );\n      var afterImportPos = scanner.getStartPos();\n      var identifier;\n\n      if (isIdentifier()) {\n        identifier = parseIdentifier();\n\n        if (token !== 24\n        /* CommaToken */\n        && token !== 133\n        /* FromKeyword */\n        ) {\n            // ImportEquals declaration of type:\n            // import x = require(\"mod\"); or\n            // import x = M.x;\n            var importEqualsDeclaration = createNode(224\n            /* ImportEqualsDeclaration */\n            , fullStart);\n            importEqualsDeclaration.decorators = decorators;\n            setModifiers(importEqualsDeclaration, modifiers);\n            importEqualsDeclaration.name = identifier;\n            parseExpected(56\n            /* EqualsToken */\n            );\n            importEqualsDeclaration.moduleReference = parseModuleReference();\n            parseSemicolon();\n            return finishNode(importEqualsDeclaration);\n          }\n      } // Import statement\n\n\n      var importDeclaration = createNode(225\n      /* ImportDeclaration */\n      , fullStart);\n      importDeclaration.decorators = decorators;\n      setModifiers(importDeclaration, modifiers); // ImportDeclaration:\n      //  import ImportClause from ModuleSpecifier ;\n      //  import ModuleSpecifier;\n\n      if (identifier || token === 37\n      /* AsteriskToken */\n      || token === 15\n      /* OpenBraceToken */\n      ) {\n          importDeclaration.importClause = parseImportClause(identifier, afterImportPos);\n          parseExpected(133\n          /* FromKeyword */\n          );\n        }\n\n      importDeclaration.moduleSpecifier = parseModuleSpecifier();\n      parseSemicolon();\n      return finishNode(importDeclaration);\n    }\n\n    function parseImportClause(identifier, fullStart) {\n      // ImportClause:\n      //  ImportedDefaultBinding\n      //  NameSpaceImport\n      //  NamedImports\n      //  ImportedDefaultBinding, NameSpaceImport\n      //  ImportedDefaultBinding, NamedImports\n      var importClause = createNode(226\n      /* ImportClause */\n      , fullStart);\n\n      if (identifier) {\n        // ImportedDefaultBinding:\n        //  ImportedBinding\n        importClause.name = identifier;\n      } // If there was no default import or if there is comma token after default import\n      // parse namespace or named imports\n\n\n      if (!importClause.name || parseOptional(24\n      /* CommaToken */\n      )) {\n        importClause.namedBindings = token === 37\n        /* AsteriskToken */\n        ? parseNamespaceImport() : parseNamedImportsOrExports(228\n        /* NamedImports */\n        );\n      }\n\n      return finishNode(importClause);\n    }\n\n    function parseModuleReference() {\n      return isExternalModuleReference() ? parseExternalModuleReference() : parseEntityName(\n      /*allowReservedWords*/\n      false);\n    }\n\n    function parseExternalModuleReference() {\n      var node = createNode(235\n      /* ExternalModuleReference */\n      );\n      parseExpected(127\n      /* RequireKeyword */\n      );\n      parseExpected(17\n      /* OpenParenToken */\n      );\n      node.expression = parseModuleSpecifier();\n      parseExpected(18\n      /* CloseParenToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseModuleSpecifier() {\n      if (token === 9\n      /* StringLiteral */\n      ) {\n          var result = parseLiteralNode();\n          internIdentifier(result.text);\n          return result;\n        } else {\n        // We allow arbitrary expressions here, even though the grammar only allows string\n        // literals.  We check to ensure that it is only a string literal later in the grammar\n        // check pass.\n        return parseExpression();\n      }\n    }\n\n    function parseNamespaceImport() {\n      // NameSpaceImport:\n      //  * as ImportedBinding\n      var namespaceImport = createNode(227\n      /* NamespaceImport */\n      );\n      parseExpected(37\n      /* AsteriskToken */\n      );\n      parseExpected(116\n      /* AsKeyword */\n      );\n      namespaceImport.name = parseIdentifier();\n      return finishNode(namespaceImport);\n    }\n\n    function parseNamedImportsOrExports(kind) {\n      var node = createNode(kind); // NamedImports:\n      //  { }\n      //  { ImportsList }\n      //  { ImportsList, }\n      // ImportsList:\n      //  ImportSpecifier\n      //  ImportsList, ImportSpecifier\n\n      node.elements = parseBracketedList(21\n      /* ImportOrExportSpecifiers */\n      , kind === 228\n      /* NamedImports */\n      ? parseImportSpecifier : parseExportSpecifier, 15\n      /* OpenBraceToken */\n      , 16\n      /* CloseBraceToken */\n      );\n      return finishNode(node);\n    }\n\n    function parseExportSpecifier() {\n      return parseImportOrExportSpecifier(233\n      /* ExportSpecifier */\n      );\n    }\n\n    function parseImportSpecifier() {\n      return parseImportOrExportSpecifier(229\n      /* ImportSpecifier */\n      );\n    }\n\n    function parseImportOrExportSpecifier(kind) {\n      var node = createNode(kind); // ImportSpecifier:\n      //   BindingIdentifier\n      //   IdentifierName as BindingIdentifier\n      // ExportSpecififer:\n      //   IdentifierName\n      //   IdentifierName as IdentifierName\n\n      var checkIdentifierIsKeyword = ts.isKeyword(token) && !isIdentifier();\n      var checkIdentifierStart = scanner.getTokenPos();\n      var checkIdentifierEnd = scanner.getTextPos();\n      var identifierName = parseIdentifierName();\n\n      if (token === 116\n      /* AsKeyword */\n      ) {\n          node.propertyName = identifierName;\n          parseExpected(116\n          /* AsKeyword */\n          );\n          checkIdentifierIsKeyword = ts.isKeyword(token) && !isIdentifier();\n          checkIdentifierStart = scanner.getTokenPos();\n          checkIdentifierEnd = scanner.getTextPos();\n          node.name = parseIdentifierName();\n        } else {\n        node.name = identifierName;\n      }\n\n      if (kind === 229\n      /* ImportSpecifier */\n      && checkIdentifierIsKeyword) {\n        // Report error identifier expected\n        parseErrorAtPosition(checkIdentifierStart, checkIdentifierEnd - checkIdentifierStart, ts.Diagnostics.Identifier_expected);\n      }\n\n      return finishNode(node);\n    }\n\n    function parseExportDeclaration(fullStart, decorators, modifiers) {\n      var node = createNode(231\n      /* ExportDeclaration */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n\n      if (parseOptional(37\n      /* AsteriskToken */\n      )) {\n        parseExpected(133\n        /* FromKeyword */\n        );\n        node.moduleSpecifier = parseModuleSpecifier();\n      } else {\n        node.exportClause = parseNamedImportsOrExports(232\n        /* NamedExports */\n        ); // It is not uncommon to accidentally omit the 'from' keyword. Additionally, in editing scenarios,\n        // the 'from' keyword can be parsed as a named export when the export clause is unterminated (i.e. `export { from \"moduleName\";`)\n        // If we don't have a 'from' keyword, see if we have a string literal such that ASI won't take effect.\n\n        if (token === 133\n        /* FromKeyword */\n        || token === 9\n        /* StringLiteral */\n        && !scanner.hasPrecedingLineBreak()) {\n          parseExpected(133\n          /* FromKeyword */\n          );\n          node.moduleSpecifier = parseModuleSpecifier();\n        }\n      }\n\n      parseSemicolon();\n      return finishNode(node);\n    }\n\n    function parseExportAssignment(fullStart, decorators, modifiers) {\n      var node = createNode(230\n      /* ExportAssignment */\n      , fullStart);\n      node.decorators = decorators;\n      setModifiers(node, modifiers);\n\n      if (parseOptional(56\n      /* EqualsToken */\n      )) {\n        node.isExportEquals = true;\n      } else {\n        parseExpected(77\n        /* DefaultKeyword */\n        );\n      }\n\n      node.expression = parseAssignmentExpressionOrHigher();\n      parseSemicolon();\n      return finishNode(node);\n    }\n\n    function processReferenceComments(sourceFile) {\n      var triviaScanner = ts.createScanner(sourceFile.languageVersion,\n      /*skipTrivia*/\n      false, 0\n      /* Standard */\n      , sourceText);\n      var referencedFiles = [];\n      var amdDependencies = [];\n      var amdModuleName; // Keep scanning all the leading trivia in the file until we get to something that\n      // isn't trivia.  Any single line comment will be analyzed to see if it is a\n      // reference comment.\n\n      while (true) {\n        var kind = triviaScanner.scan();\n\n        if (kind !== 2\n        /* SingleLineCommentTrivia */\n        ) {\n            if (ts.isTrivia(kind)) {\n              continue;\n            } else {\n              break;\n            }\n          }\n\n        var range = {\n          pos: triviaScanner.getTokenPos(),\n          end: triviaScanner.getTextPos(),\n          kind: triviaScanner.getToken()\n        };\n        var comment = sourceText.substring(range.pos, range.end);\n        var referencePathMatchResult = ts.getFileReferenceFromReferencePath(comment, range);\n\n        if (referencePathMatchResult) {\n          var fileReference = referencePathMatchResult.fileReference;\n          sourceFile.hasNoDefaultLib = referencePathMatchResult.isNoDefaultLib;\n          var diagnosticMessage = referencePathMatchResult.diagnosticMessage;\n\n          if (fileReference) {\n            referencedFiles.push(fileReference);\n          }\n\n          if (diagnosticMessage) {\n            parseDiagnostics.push(ts.createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, diagnosticMessage));\n          }\n        } else {\n          var amdModuleNameRegEx = /^\\/\\/\\/\\s*<amd-module\\s+name\\s*=\\s*('|\")(.+?)\\1/gim;\n          var amdModuleNameMatchResult = amdModuleNameRegEx.exec(comment);\n\n          if (amdModuleNameMatchResult) {\n            if (amdModuleName) {\n              parseDiagnostics.push(ts.createFileDiagnostic(sourceFile, range.pos, range.end - range.pos, ts.Diagnostics.An_AMD_module_cannot_have_multiple_name_assignments));\n            }\n\n            amdModuleName = amdModuleNameMatchResult[2];\n          }\n\n          var amdDependencyRegEx = /^\\/\\/\\/\\s*<amd-dependency\\s/gim;\n          var pathRegex = /\\spath\\s*=\\s*('|\")(.+?)\\1/gim;\n          var nameRegex = /\\sname\\s*=\\s*('|\")(.+?)\\1/gim;\n          var amdDependencyMatchResult = amdDependencyRegEx.exec(comment);\n\n          if (amdDependencyMatchResult) {\n            var pathMatchResult = pathRegex.exec(comment);\n            var nameMatchResult = nameRegex.exec(comment);\n\n            if (pathMatchResult) {\n              var amdDependency = {\n                path: pathMatchResult[2],\n                name: nameMatchResult ? nameMatchResult[2] : undefined\n              };\n              amdDependencies.push(amdDependency);\n            }\n          }\n        }\n      }\n\n      sourceFile.referencedFiles = referencedFiles;\n      sourceFile.amdDependencies = amdDependencies;\n      sourceFile.moduleName = amdModuleName;\n    }\n\n    function setExternalModuleIndicator(sourceFile) {\n      sourceFile.externalModuleIndicator = ts.forEach(sourceFile.statements, function (node) {\n        return node.flags & 2\n        /* Export */\n        || node.kind === 224\n        /* ImportEqualsDeclaration */\n        && node.moduleReference.kind === 235\n        /* ExternalModuleReference */\n        || node.kind === 225\n        /* ImportDeclaration */\n        || node.kind === 230\n        /* ExportAssignment */\n        || node.kind === 231\n        /* ExportDeclaration */\n        ? node : undefined;\n      });\n    }\n\n    var ParsingContext;\n\n    (function (ParsingContext) {\n      ParsingContext[ParsingContext[\"SourceElements\"] = 0] = \"SourceElements\";\n      ParsingContext[ParsingContext[\"BlockStatements\"] = 1] = \"BlockStatements\";\n      ParsingContext[ParsingContext[\"SwitchClauses\"] = 2] = \"SwitchClauses\";\n      ParsingContext[ParsingContext[\"SwitchClauseStatements\"] = 3] = \"SwitchClauseStatements\";\n      ParsingContext[ParsingContext[\"TypeMembers\"] = 4] = \"TypeMembers\";\n      ParsingContext[ParsingContext[\"ClassMembers\"] = 5] = \"ClassMembers\";\n      ParsingContext[ParsingContext[\"EnumMembers\"] = 6] = \"EnumMembers\";\n      ParsingContext[ParsingContext[\"HeritageClauseElement\"] = 7] = \"HeritageClauseElement\";\n      ParsingContext[ParsingContext[\"VariableDeclarations\"] = 8] = \"VariableDeclarations\";\n      ParsingContext[ParsingContext[\"ObjectBindingElements\"] = 9] = \"ObjectBindingElements\";\n      ParsingContext[ParsingContext[\"ArrayBindingElements\"] = 10] = \"ArrayBindingElements\";\n      ParsingContext[ParsingContext[\"ArgumentExpressions\"] = 11] = \"ArgumentExpressions\";\n      ParsingContext[ParsingContext[\"ObjectLiteralMembers\"] = 12] = \"ObjectLiteralMembers\";\n      ParsingContext[ParsingContext[\"JsxAttributes\"] = 13] = \"JsxAttributes\";\n      ParsingContext[ParsingContext[\"JsxChildren\"] = 14] = \"JsxChildren\";\n      ParsingContext[ParsingContext[\"ArrayLiteralMembers\"] = 15] = \"ArrayLiteralMembers\";\n      ParsingContext[ParsingContext[\"Parameters\"] = 16] = \"Parameters\";\n      ParsingContext[ParsingContext[\"TypeParameters\"] = 17] = \"TypeParameters\";\n      ParsingContext[ParsingContext[\"TypeArguments\"] = 18] = \"TypeArguments\";\n      ParsingContext[ParsingContext[\"TupleElementTypes\"] = 19] = \"TupleElementTypes\";\n      ParsingContext[ParsingContext[\"HeritageClauses\"] = 20] = \"HeritageClauses\";\n      ParsingContext[ParsingContext[\"ImportOrExportSpecifiers\"] = 21] = \"ImportOrExportSpecifiers\";\n      ParsingContext[ParsingContext[\"JSDocFunctionParameters\"] = 22] = \"JSDocFunctionParameters\";\n      ParsingContext[ParsingContext[\"JSDocTypeArguments\"] = 23] = \"JSDocTypeArguments\";\n      ParsingContext[ParsingContext[\"JSDocRecordMembers\"] = 24] = \"JSDocRecordMembers\";\n      ParsingContext[ParsingContext[\"JSDocTupleTypes\"] = 25] = \"JSDocTupleTypes\";\n      ParsingContext[ParsingContext[\"Count\"] = 26] = \"Count\"; // Number of parsing contexts\n    })(ParsingContext || (ParsingContext = {}));\n\n    var Tristate;\n\n    (function (Tristate) {\n      Tristate[Tristate[\"False\"] = 0] = \"False\";\n      Tristate[Tristate[\"True\"] = 1] = \"True\";\n      Tristate[Tristate[\"Unknown\"] = 2] = \"Unknown\";\n    })(Tristate || (Tristate = {}));\n\n    var JSDocParser;\n\n    (function (JSDocParser) {\n      function isJSDocType() {\n        switch (token) {\n          case 37\n          /* AsteriskToken */\n          :\n          case 53\n          /* QuestionToken */\n          :\n          case 17\n          /* OpenParenToken */\n          :\n          case 19\n          /* OpenBracketToken */\n          :\n          case 49\n          /* ExclamationToken */\n          :\n          case 15\n          /* OpenBraceToken */\n          :\n          case 87\n          /* FunctionKeyword */\n          :\n          case 22\n          /* DotDotDotToken */\n          :\n          case 92\n          /* NewKeyword */\n          :\n          case 97\n          /* ThisKeyword */\n          :\n            return true;\n        }\n\n        return ts.tokenIsIdentifierOrKeyword(token);\n      }\n\n      JSDocParser.isJSDocType = isJSDocType;\n\n      function parseJSDocTypeExpressionForTests(content, start, length) {\n        initializeState(\"file.js\", content, 2\n        /* Latest */\n        ,\n        /*_syntaxCursor:*/\n        undefined, 1\n        /* JS */\n        );\n        scanner.setText(content, start, length);\n        token = scanner.scan();\n        var jsDocTypeExpression = parseJSDocTypeExpression();\n        var diagnostics = parseDiagnostics;\n        clearState();\n        return jsDocTypeExpression ? {\n          jsDocTypeExpression: jsDocTypeExpression,\n          diagnostics: diagnostics\n        } : undefined;\n      }\n\n      JSDocParser.parseJSDocTypeExpressionForTests = parseJSDocTypeExpressionForTests; // Parses out a JSDoc type expression.\n\n      /* @internal */\n\n      function parseJSDocTypeExpression() {\n        var result = createNode(252\n        /* JSDocTypeExpression */\n        , scanner.getTokenPos());\n        parseExpected(15\n        /* OpenBraceToken */\n        );\n        result.type = parseJSDocTopLevelType();\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n        fixupParentReferences(result);\n        return finishNode(result);\n      }\n\n      JSDocParser.parseJSDocTypeExpression = parseJSDocTypeExpression;\n\n      function parseJSDocTopLevelType() {\n        var type = parseJSDocType();\n\n        if (token === 47\n        /* BarToken */\n        ) {\n            var unionType = createNode(256\n            /* JSDocUnionType */\n            , type.pos);\n            unionType.types = parseJSDocTypeList(type);\n            type = finishNode(unionType);\n          }\n\n        if (token === 56\n        /* EqualsToken */\n        ) {\n            var optionalType = createNode(263\n            /* JSDocOptionalType */\n            , type.pos);\n            nextToken();\n            optionalType.type = type;\n            type = finishNode(optionalType);\n          }\n\n        return type;\n      }\n\n      function parseJSDocType() {\n        var type = parseBasicTypeExpression();\n\n        while (true) {\n          if (token === 19\n          /* OpenBracketToken */\n          ) {\n              var arrayType = createNode(255\n              /* JSDocArrayType */\n              , type.pos);\n              arrayType.elementType = type;\n              nextToken();\n              parseExpected(20\n              /* CloseBracketToken */\n              );\n              type = finishNode(arrayType);\n            } else if (token === 53\n          /* QuestionToken */\n          ) {\n              var nullableType = createNode(258\n              /* JSDocNullableType */\n              , type.pos);\n              nullableType.type = type;\n              nextToken();\n              type = finishNode(nullableType);\n            } else if (token === 49\n          /* ExclamationToken */\n          ) {\n              var nonNullableType = createNode(259\n              /* JSDocNonNullableType */\n              , type.pos);\n              nonNullableType.type = type;\n              nextToken();\n              type = finishNode(nonNullableType);\n            } else {\n            break;\n          }\n        }\n\n        return type;\n      }\n\n      function parseBasicTypeExpression() {\n        switch (token) {\n          case 37\n          /* AsteriskToken */\n          :\n            return parseJSDocAllType();\n\n          case 53\n          /* QuestionToken */\n          :\n            return parseJSDocUnknownOrNullableType();\n\n          case 17\n          /* OpenParenToken */\n          :\n            return parseJSDocUnionType();\n\n          case 19\n          /* OpenBracketToken */\n          :\n            return parseJSDocTupleType();\n\n          case 49\n          /* ExclamationToken */\n          :\n            return parseJSDocNonNullableType();\n\n          case 15\n          /* OpenBraceToken */\n          :\n            return parseJSDocRecordType();\n\n          case 87\n          /* FunctionKeyword */\n          :\n            return parseJSDocFunctionType();\n\n          case 22\n          /* DotDotDotToken */\n          :\n            return parseJSDocVariadicType();\n\n          case 92\n          /* NewKeyword */\n          :\n            return parseJSDocConstructorType();\n\n          case 97\n          /* ThisKeyword */\n          :\n            return parseJSDocThisType();\n\n          case 117\n          /* AnyKeyword */\n          :\n          case 130\n          /* StringKeyword */\n          :\n          case 128\n          /* NumberKeyword */\n          :\n          case 120\n          /* BooleanKeyword */\n          :\n          case 131\n          /* SymbolKeyword */\n          :\n          case 103\n          /* VoidKeyword */\n          :\n            return parseTokenNode();\n        } // TODO (drosen): Parse string literal types in JSDoc as well.\n\n\n        return parseJSDocTypeReference();\n      }\n\n      function parseJSDocThisType() {\n        var result = createNode(267\n        /* JSDocThisType */\n        );\n        nextToken();\n        parseExpected(54\n        /* ColonToken */\n        );\n        result.type = parseJSDocType();\n        return finishNode(result);\n      }\n\n      function parseJSDocConstructorType() {\n        var result = createNode(266\n        /* JSDocConstructorType */\n        );\n        nextToken();\n        parseExpected(54\n        /* ColonToken */\n        );\n        result.type = parseJSDocType();\n        return finishNode(result);\n      }\n\n      function parseJSDocVariadicType() {\n        var result = createNode(265\n        /* JSDocVariadicType */\n        );\n        nextToken();\n        result.type = parseJSDocType();\n        return finishNode(result);\n      }\n\n      function parseJSDocFunctionType() {\n        var result = createNode(264\n        /* JSDocFunctionType */\n        );\n        nextToken();\n        parseExpected(17\n        /* OpenParenToken */\n        );\n        result.parameters = parseDelimitedList(22\n        /* JSDocFunctionParameters */\n        , parseJSDocParameter);\n        checkForTrailingComma(result.parameters);\n        parseExpected(18\n        /* CloseParenToken */\n        );\n\n        if (token === 54\n        /* ColonToken */\n        ) {\n            nextToken();\n            result.type = parseJSDocType();\n          }\n\n        return finishNode(result);\n      }\n\n      function parseJSDocParameter() {\n        var parameter = createNode(139\n        /* Parameter */\n        );\n        parameter.type = parseJSDocType();\n\n        if (parseOptional(56\n        /* EqualsToken */\n        )) {\n          parameter.questionToken = createNode(56\n          /* EqualsToken */\n          );\n        }\n\n        return finishNode(parameter);\n      }\n\n      function parseJSDocTypeReference() {\n        var result = createNode(262\n        /* JSDocTypeReference */\n        );\n        result.name = parseSimplePropertyName();\n\n        if (token === 25\n        /* LessThanToken */\n        ) {\n            result.typeArguments = parseTypeArguments();\n          } else {\n          while (parseOptional(21\n          /* DotToken */\n          )) {\n            if (token === 25\n            /* LessThanToken */\n            ) {\n                result.typeArguments = parseTypeArguments();\n                break;\n              } else {\n              result.name = parseQualifiedName(result.name);\n            }\n          }\n        }\n\n        return finishNode(result);\n      }\n\n      function parseTypeArguments() {\n        // Move past the <\n        nextToken();\n        var typeArguments = parseDelimitedList(23\n        /* JSDocTypeArguments */\n        , parseJSDocType);\n        checkForTrailingComma(typeArguments);\n        checkForEmptyTypeArgumentList(typeArguments);\n        parseExpected(27\n        /* GreaterThanToken */\n        );\n        return typeArguments;\n      }\n\n      function checkForEmptyTypeArgumentList(typeArguments) {\n        if (parseDiagnostics.length === 0 && typeArguments && typeArguments.length === 0) {\n          var start = typeArguments.pos - \"<\".length;\n          var end = ts.skipTrivia(sourceText, typeArguments.end) + \">\".length;\n          return parseErrorAtPosition(start, end - start, ts.Diagnostics.Type_argument_list_cannot_be_empty);\n        }\n      }\n\n      function parseQualifiedName(left) {\n        var result = createNode(136\n        /* QualifiedName */\n        , left.pos);\n        result.left = left;\n        result.right = parseIdentifierName();\n        return finishNode(result);\n      }\n\n      function parseJSDocRecordType() {\n        var result = createNode(260\n        /* JSDocRecordType */\n        );\n        nextToken();\n        result.members = parseDelimitedList(24\n        /* JSDocRecordMembers */\n        , parseJSDocRecordMember);\n        checkForTrailingComma(result.members);\n        parseExpected(16\n        /* CloseBraceToken */\n        );\n        return finishNode(result);\n      }\n\n      function parseJSDocRecordMember() {\n        var result = createNode(261\n        /* JSDocRecordMember */\n        );\n        result.name = parseSimplePropertyName();\n\n        if (token === 54\n        /* ColonToken */\n        ) {\n            nextToken();\n            result.type = parseJSDocType();\n          }\n\n        return finishNode(result);\n      }\n\n      function parseJSDocNonNullableType() {\n        var result = createNode(259\n        /* JSDocNonNullableType */\n        );\n        nextToken();\n        result.type = parseJSDocType();\n        return finishNode(result);\n      }\n\n      function parseJSDocTupleType() {\n        var result = createNode(257\n        /* JSDocTupleType */\n        );\n        nextToken();\n        result.types = parseDelimitedList(25\n        /* JSDocTupleTypes */\n        , parseJSDocType);\n        checkForTrailingComma(result.types);\n        parseExpected(20\n        /* CloseBracketToken */\n        );\n        return finishNode(result);\n      }\n\n      function checkForTrailingComma(list) {\n        if (parseDiagnostics.length === 0 && list.hasTrailingComma) {\n          var start = list.end - \",\".length;\n          parseErrorAtPosition(start, \",\".length, ts.Diagnostics.Trailing_comma_not_allowed);\n        }\n      }\n\n      function parseJSDocUnionType() {\n        var result = createNode(256\n        /* JSDocUnionType */\n        );\n        nextToken();\n        result.types = parseJSDocTypeList(parseJSDocType());\n        parseExpected(18\n        /* CloseParenToken */\n        );\n        return finishNode(result);\n      }\n\n      function parseJSDocTypeList(firstType) {\n        ts.Debug.assert(!!firstType);\n        var types = [];\n        types.pos = firstType.pos;\n        types.push(firstType);\n\n        while (parseOptional(47\n        /* BarToken */\n        )) {\n          types.push(parseJSDocType());\n        }\n\n        types.end = scanner.getStartPos();\n        return types;\n      }\n\n      function parseJSDocAllType() {\n        var result = createNode(253\n        /* JSDocAllType */\n        );\n        nextToken();\n        return finishNode(result);\n      }\n\n      function parseJSDocUnknownOrNullableType() {\n        var pos = scanner.getStartPos(); // skip the ?\n\n        nextToken(); // Need to lookahead to decide if this is a nullable or unknown type.\n        // Here are cases where we'll pick the unknown type:\n        //\n        //      Foo(?,\n        //      { a: ? }\n        //      Foo(?)\n        //      Foo<?>\n        //      Foo(?=\n        //      (?|\n\n        if (token === 24\n        /* CommaToken */\n        || token === 16\n        /* CloseBraceToken */\n        || token === 18\n        /* CloseParenToken */\n        || token === 27\n        /* GreaterThanToken */\n        || token === 56\n        /* EqualsToken */\n        || token === 47\n        /* BarToken */\n        ) {\n            var result = createNode(254\n            /* JSDocUnknownType */\n            , pos);\n            return finishNode(result);\n          } else {\n          var result = createNode(258\n          /* JSDocNullableType */\n          , pos);\n          result.type = parseJSDocType();\n          return finishNode(result);\n        }\n      }\n\n      function parseIsolatedJSDocComment(content, start, length) {\n        initializeState(\"file.js\", content, 2\n        /* Latest */\n        ,\n        /*_syntaxCursor:*/\n        undefined, 1\n        /* JS */\n        );\n        sourceFile = {\n          languageVariant: 0\n          /* Standard */\n          ,\n          text: content\n        };\n        var jsDocComment = parseJSDocCommentWorker(start, length);\n        var diagnostics = parseDiagnostics;\n        clearState();\n        return jsDocComment ? {\n          jsDocComment: jsDocComment,\n          diagnostics: diagnostics\n        } : undefined;\n      }\n\n      JSDocParser.parseIsolatedJSDocComment = parseIsolatedJSDocComment;\n\n      function parseJSDocComment(parent, start, length) {\n        var saveToken = token;\n        var saveParseDiagnosticsLength = parseDiagnostics.length;\n        var saveParseErrorBeforeNextFinishedNode = parseErrorBeforeNextFinishedNode;\n        var comment = parseJSDocCommentWorker(start, length);\n\n        if (comment) {\n          comment.parent = parent;\n        }\n\n        token = saveToken;\n        parseDiagnostics.length = saveParseDiagnosticsLength;\n        parseErrorBeforeNextFinishedNode = saveParseErrorBeforeNextFinishedNode;\n        return comment;\n      }\n\n      JSDocParser.parseJSDocComment = parseJSDocComment;\n\n      function parseJSDocCommentWorker(start, length) {\n        var content = sourceText;\n        start = start || 0;\n        var end = length === undefined ? content.length : start + length;\n        length = end - start;\n        ts.Debug.assert(start >= 0);\n        ts.Debug.assert(start <= end);\n        ts.Debug.assert(end <= content.length);\n        var tags;\n        var result; // Check for /** (JSDoc opening part)\n\n        if (content.charCodeAt(start) === 47\n        /* slash */\n        && content.charCodeAt(start + 1) === 42\n        /* asterisk */\n        && content.charCodeAt(start + 2) === 42\n        /* asterisk */\n        && content.charCodeAt(start + 3) !== 42\n        /* asterisk */\n        ) {\n            // + 3 for leading /**, - 5 in total for /** */\n            scanner.scanRange(start + 3, length - 5, function () {\n              // Initially we can parse out a tag.  We also have seen a starting asterisk.\n              // This is so that /** * @type */ doesn't parse.\n              var canParseTag = true;\n              var seenAsterisk = true;\n              nextJSDocToken();\n\n              while (token !== 1\n              /* EndOfFileToken */\n              ) {\n                switch (token) {\n                  case 55\n                  /* AtToken */\n                  :\n                    if (canParseTag) {\n                      parseTag();\n                    } // This will take us to the end of the line, so it's OK to parse a tag on the next pass through the loop\n\n\n                    seenAsterisk = false;\n                    break;\n\n                  case 4\n                  /* NewLineTrivia */\n                  :\n                    // After a line break, we can parse a tag, and we haven't seen an asterisk on the next line yet\n                    canParseTag = true;\n                    seenAsterisk = false;\n                    break;\n\n                  case 37\n                  /* AsteriskToken */\n                  :\n                    if (seenAsterisk) {\n                      // If we've already seen an asterisk, then we can no longer parse a tag on this line\n                      canParseTag = false;\n                    } // Ignore the first asterisk on a line\n\n\n                    seenAsterisk = true;\n                    break;\n\n                  case 69\n                  /* Identifier */\n                  :\n                    // Anything else is doc comment text.  We can't do anything with it.  Because it\n                    // wasn't a tag, we can no longer parse a tag on this line until we hit the next\n                    // line break.\n                    canParseTag = false;\n                    break;\n\n                  case 1\n                  /* EndOfFileToken */\n                  :\n                    break;\n                }\n\n                nextJSDocToken();\n              }\n\n              result = createJSDocComment();\n            });\n          }\n\n        return result;\n\n        function createJSDocComment() {\n          if (!tags) {\n            return undefined;\n          }\n\n          var result = createNode(268\n          /* JSDocComment */\n          , start);\n          result.tags = tags;\n          return finishNode(result, end);\n        }\n\n        function skipWhitespace() {\n          while (token === 5\n          /* WhitespaceTrivia */\n          || token === 4\n          /* NewLineTrivia */\n          ) {\n            nextJSDocToken();\n          }\n        }\n\n        function parseTag() {\n          ts.Debug.assert(token === 55\n          /* AtToken */\n          );\n          var atToken = createNode(55\n          /* AtToken */\n          , scanner.getTokenPos());\n          atToken.end = scanner.getTextPos();\n          nextJSDocToken();\n          var tagName = parseJSDocIdentifier();\n\n          if (!tagName) {\n            return;\n          }\n\n          var tag = handleTag(atToken, tagName) || handleUnknownTag(atToken, tagName);\n          addTag(tag);\n        }\n\n        function handleTag(atToken, tagName) {\n          if (tagName) {\n            switch (tagName.text) {\n              case \"param\":\n                return handleParamTag(atToken, tagName);\n\n              case \"return\":\n              case \"returns\":\n                return handleReturnTag(atToken, tagName);\n\n              case \"template\":\n                return handleTemplateTag(atToken, tagName);\n\n              case \"type\":\n                return handleTypeTag(atToken, tagName);\n            }\n          }\n\n          return undefined;\n        }\n\n        function handleUnknownTag(atToken, tagName) {\n          var result = createNode(269\n          /* JSDocTag */\n          , atToken.pos);\n          result.atToken = atToken;\n          result.tagName = tagName;\n          return finishNode(result);\n        }\n\n        function addTag(tag) {\n          if (tag) {\n            if (!tags) {\n              tags = [];\n              tags.pos = tag.pos;\n            }\n\n            tags.push(tag);\n            tags.end = tag.end;\n          }\n        }\n\n        function tryParseTypeExpression() {\n          if (token !== 15\n          /* OpenBraceToken */\n          ) {\n              return undefined;\n            }\n\n          var typeExpression = parseJSDocTypeExpression();\n          return typeExpression;\n        }\n\n        function handleParamTag(atToken, tagName) {\n          var typeExpression = tryParseTypeExpression();\n          skipWhitespace();\n          var name;\n          var isBracketed; // Looking for something like '[foo]' or 'foo'\n\n          if (parseOptionalToken(19\n          /* OpenBracketToken */\n          )) {\n            name = parseJSDocIdentifier();\n            isBracketed = true; // May have an optional default, e.g. '[foo = 42]'\n\n            if (parseOptionalToken(56\n            /* EqualsToken */\n            )) {\n              parseExpression();\n            }\n\n            parseExpected(20\n            /* CloseBracketToken */\n            );\n          } else if (token === 69\n          /* Identifier */\n          ) {\n              name = parseJSDocIdentifier();\n            }\n\n          if (!name) {\n            parseErrorAtPosition(scanner.getStartPos(), 0, ts.Diagnostics.Identifier_expected);\n            return undefined;\n          }\n\n          var preName, postName;\n\n          if (typeExpression) {\n            postName = name;\n          } else {\n            preName = name;\n          }\n\n          if (!typeExpression) {\n            typeExpression = tryParseTypeExpression();\n          }\n\n          var result = createNode(270\n          /* JSDocParameterTag */\n          , atToken.pos);\n          result.atToken = atToken;\n          result.tagName = tagName;\n          result.preParameterName = preName;\n          result.typeExpression = typeExpression;\n          result.postParameterName = postName;\n          result.isBracketed = isBracketed;\n          return finishNode(result);\n        }\n\n        function handleReturnTag(atToken, tagName) {\n          if (ts.forEach(tags, function (t) {\n            return t.kind === 271\n            /* JSDocReturnTag */\n            ;\n          })) {\n            parseErrorAtPosition(tagName.pos, scanner.getTokenPos() - tagName.pos, ts.Diagnostics._0_tag_already_specified, tagName.text);\n          }\n\n          var result = createNode(271\n          /* JSDocReturnTag */\n          , atToken.pos);\n          result.atToken = atToken;\n          result.tagName = tagName;\n          result.typeExpression = tryParseTypeExpression();\n          return finishNode(result);\n        }\n\n        function handleTypeTag(atToken, tagName) {\n          if (ts.forEach(tags, function (t) {\n            return t.kind === 272\n            /* JSDocTypeTag */\n            ;\n          })) {\n            parseErrorAtPosition(tagName.pos, scanner.getTokenPos() - tagName.pos, ts.Diagnostics._0_tag_already_specified, tagName.text);\n          }\n\n          var result = createNode(272\n          /* JSDocTypeTag */\n          , atToken.pos);\n          result.atToken = atToken;\n          result.tagName = tagName;\n          result.typeExpression = tryParseTypeExpression();\n          return finishNode(result);\n        }\n\n        function handleTemplateTag(atToken, tagName) {\n          if (ts.forEach(tags, function (t) {\n            return t.kind === 273\n            /* JSDocTemplateTag */\n            ;\n          })) {\n            parseErrorAtPosition(tagName.pos, scanner.getTokenPos() - tagName.pos, ts.Diagnostics._0_tag_already_specified, tagName.text);\n          } // Type parameter list looks like '@template T,U,V'\n\n\n          var typeParameters = [];\n          typeParameters.pos = scanner.getStartPos();\n\n          while (true) {\n            var name_8 = parseJSDocIdentifier();\n\n            if (!name_8) {\n              parseErrorAtPosition(scanner.getStartPos(), 0, ts.Diagnostics.Identifier_expected);\n              return undefined;\n            }\n\n            var typeParameter = createNode(138\n            /* TypeParameter */\n            , name_8.pos);\n            typeParameter.name = name_8;\n            finishNode(typeParameter);\n            typeParameters.push(typeParameter);\n\n            if (token === 24\n            /* CommaToken */\n            ) {\n                nextJSDocToken();\n              } else {\n              break;\n            }\n          }\n\n          var result = createNode(273\n          /* JSDocTemplateTag */\n          , atToken.pos);\n          result.atToken = atToken;\n          result.tagName = tagName;\n          result.typeParameters = typeParameters;\n          finishNode(result);\n          typeParameters.end = result.end;\n          return result;\n        }\n\n        function nextJSDocToken() {\n          return token = scanner.scanJSDocToken();\n        }\n\n        function parseJSDocIdentifier() {\n          if (token !== 69\n          /* Identifier */\n          ) {\n              parseErrorAtCurrentToken(ts.Diagnostics.Identifier_expected);\n              return undefined;\n            }\n\n          var pos = scanner.getTokenPos();\n          var end = scanner.getTextPos();\n          var result = createNode(69\n          /* Identifier */\n          , pos);\n          result.text = content.substring(pos, end);\n          finishNode(result, end);\n          nextJSDocToken();\n          return result;\n        }\n      }\n\n      JSDocParser.parseJSDocCommentWorker = parseJSDocCommentWorker;\n    })(JSDocParser = Parser.JSDocParser || (Parser.JSDocParser = {}));\n  })(Parser || (Parser = {}));\n\n  var IncrementalParser;\n\n  (function (IncrementalParser) {\n    function updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks) {\n      aggressiveChecks = aggressiveChecks || ts.Debug.shouldAssert(2\n      /* Aggressive */\n      );\n      checkChangeRange(sourceFile, newText, textChangeRange, aggressiveChecks);\n\n      if (ts.textChangeRangeIsUnchanged(textChangeRange)) {\n        // if the text didn't change, then we can just return our current source file as-is.\n        return sourceFile;\n      }\n\n      if (sourceFile.statements.length === 0) {\n        // If we don't have any statements in the current source file, then there's no real\n        // way to incrementally parse.  So just do a full parse instead.\n        return Parser.parseSourceFile(sourceFile.fileName, newText, sourceFile.languageVersion,\n        /*syntaxCursor*/\n        undefined,\n        /*setParentNodes*/\n        true, sourceFile.scriptKind);\n      } // Make sure we're not trying to incrementally update a source file more than once.  Once\n      // we do an update the original source file is considered unusbale from that point onwards.\n      //\n      // This is because we do incremental parsing in-place.  i.e. we take nodes from the old\n      // tree and give them new positions and parents.  From that point on, trusting the old\n      // tree at all is not possible as far too much of it may violate invariants.\n\n\n      var incrementalSourceFile = sourceFile;\n      ts.Debug.assert(!incrementalSourceFile.hasBeenIncrementallyParsed);\n      incrementalSourceFile.hasBeenIncrementallyParsed = true;\n      var oldText = sourceFile.text;\n      var syntaxCursor = createSyntaxCursor(sourceFile); // Make the actual change larger so that we know to reparse anything whose lookahead\n      // might have intersected the change.\n\n      var changeRange = extendToAffectedRange(sourceFile, textChangeRange);\n      checkChangeRange(sourceFile, newText, changeRange, aggressiveChecks); // Ensure that extending the affected range only moved the start of the change range\n      // earlier in the file.\n\n      ts.Debug.assert(changeRange.span.start <= textChangeRange.span.start);\n      ts.Debug.assert(ts.textSpanEnd(changeRange.span) === ts.textSpanEnd(textChangeRange.span));\n      ts.Debug.assert(ts.textSpanEnd(ts.textChangeRangeNewSpan(changeRange)) === ts.textSpanEnd(ts.textChangeRangeNewSpan(textChangeRange))); // The is the amount the nodes after the edit range need to be adjusted.  It can be\n      // positive (if the edit added characters), negative (if the edit deleted characters)\n      // or zero (if this was a pure overwrite with nothing added/removed).\n\n      var delta = ts.textChangeRangeNewSpan(changeRange).length - changeRange.span.length; // If we added or removed characters during the edit, then we need to go and adjust all\n      // the nodes after the edit.  Those nodes may move forward (if we inserted chars) or they\n      // may move backward (if we deleted chars).\n      //\n      // Doing this helps us out in two ways.  First, it means that any nodes/tokens we want\n      // to reuse are already at the appropriate position in the new text.  That way when we\n      // reuse them, we don't have to figure out if they need to be adjusted.  Second, it makes\n      // it very easy to determine if we can reuse a node.  If the node's position is at where\n      // we are in the text, then we can reuse it.  Otherwise we can't.  If the node's position\n      // is ahead of us, then we'll need to rescan tokens.  If the node's position is behind\n      // us, then we'll need to skip it or crumble it as appropriate\n      //\n      // We will also adjust the positions of nodes that intersect the change range as well.\n      // By doing this, we ensure that all the positions in the old tree are consistent, not\n      // just the positions of nodes entirely before/after the change range.  By being\n      // consistent, we can then easily map from positions to nodes in the old tree easily.\n      //\n      // Also, mark any syntax elements that intersect the changed span.  We know, up front,\n      // that we cannot reuse these elements.\n\n      updateTokenPositionsAndMarkElements(incrementalSourceFile, changeRange.span.start, ts.textSpanEnd(changeRange.span), ts.textSpanEnd(ts.textChangeRangeNewSpan(changeRange)), delta, oldText, newText, aggressiveChecks); // Now that we've set up our internal incremental state just proceed and parse the\n      // source file in the normal fashion.  When possible the parser will retrieve and\n      // reuse nodes from the old tree.\n      //\n      // Note: passing in 'true' for setNodeParents is very important.  When incrementally\n      // parsing, we will be reusing nodes from the old tree, and placing it into new\n      // parents.  If we don't set the parents now, we'll end up with an observably\n      // inconsistent tree.  Setting the parents on the new tree should be very fast.  We\n      // will immediately bail out of walking any subtrees when we can see that their parents\n      // are already correct.\n\n      var result = Parser.parseSourceFile(sourceFile.fileName, newText, sourceFile.languageVersion, syntaxCursor,\n      /*setParentNodes*/\n      true, sourceFile.scriptKind);\n      return result;\n    }\n\n    IncrementalParser.updateSourceFile = updateSourceFile;\n\n    function moveElementEntirelyPastChangeRange(element, isArray, delta, oldText, newText, aggressiveChecks) {\n      if (isArray) {\n        visitArray(element);\n      } else {\n        visitNode(element);\n      }\n\n      return;\n\n      function visitNode(node) {\n        var text = \"\";\n\n        if (aggressiveChecks && shouldCheckNode(node)) {\n          text = oldText.substring(node.pos, node.end);\n        } // Ditch any existing LS children we may have created.  This way we can avoid\n        // moving them forward.\n\n\n        if (node._children) {\n          node._children = undefined;\n        }\n\n        if (node.jsDocComment) {\n          node.jsDocComment = undefined;\n        }\n\n        node.pos += delta;\n        node.end += delta;\n\n        if (aggressiveChecks && shouldCheckNode(node)) {\n          ts.Debug.assert(text === newText.substring(node.pos, node.end));\n        }\n\n        forEachChild(node, visitNode, visitArray);\n        checkNodePositions(node, aggressiveChecks);\n      }\n\n      function visitArray(array) {\n        array._children = undefined;\n        array.pos += delta;\n        array.end += delta;\n\n        for (var _i = 0, array_7 = array; _i < array_7.length; _i++) {\n          var node = array_7[_i];\n          visitNode(node);\n        }\n      }\n    }\n\n    function shouldCheckNode(node) {\n      switch (node.kind) {\n        case 9\n        /* StringLiteral */\n        :\n        case 8\n        /* NumericLiteral */\n        :\n        case 69\n        /* Identifier */\n        :\n          return true;\n      }\n\n      return false;\n    }\n\n    function adjustIntersectingElement(element, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta) {\n      ts.Debug.assert(element.end >= changeStart, \"Adjusting an element that was entirely before the change range\");\n      ts.Debug.assert(element.pos <= changeRangeOldEnd, \"Adjusting an element that was entirely after the change range\");\n      ts.Debug.assert(element.pos <= element.end); // We have an element that intersects the change range in some way.  It may have its\n      // start, or its end (or both) in the changed range.  We want to adjust any part\n      // that intersects such that the final tree is in a consistent state.  i.e. all\n      // chlidren have spans within the span of their parent, and all siblings are ordered\n      // properly.\n      // We may need to update both the 'pos' and the 'end' of the element.\n      // If the 'pos' is before the start of the change, then we don't need to touch it.\n      // If it isn't, then the 'pos' must be inside the change.  How we update it will\n      // depend if delta is  positive or negative.  If delta is positive then we have\n      // something like:\n      //\n      //  -------------------AAA-----------------\n      //  -------------------BBBCCCCCCC-----------------\n      //\n      // In this case, we consider any node that started in the change range to still be\n      // starting at the same position.\n      //\n      // however, if the delta is negative, then we instead have something like this:\n      //\n      //  -------------------XXXYYYYYYY-----------------\n      //  -------------------ZZZ-----------------\n      //\n      // In this case, any element that started in the 'X' range will keep its position.\n      // However any element htat started after that will have their pos adjusted to be\n      // at the end of the new range.  i.e. any node that started in the 'Y' range will\n      // be adjusted to have their start at the end of the 'Z' range.\n      //\n      // The element will keep its position if possible.  Or Move backward to the new-end\n      // if it's in the 'Y' range.\n\n      element.pos = Math.min(element.pos, changeRangeNewEnd); // If the 'end' is after the change range, then we always adjust it by the delta\n      // amount.  However, if the end is in the change range, then how we adjust it\n      // will depend on if delta is  positive or negative.  If delta is positive then we\n      // have something like:\n      //\n      //  -------------------AAA-----------------\n      //  -------------------BBBCCCCCCC-----------------\n      //\n      // In this case, we consider any node that ended inside the change range to keep its\n      // end position.\n      //\n      // however, if the delta is negative, then we instead have something like this:\n      //\n      //  -------------------XXXYYYYYYY-----------------\n      //  -------------------ZZZ-----------------\n      //\n      // In this case, any element that ended in the 'X' range will keep its position.\n      // However any element htat ended after that will have their pos adjusted to be\n      // at the end of the new range.  i.e. any node that ended in the 'Y' range will\n      // be adjusted to have their end at the end of the 'Z' range.\n\n      if (element.end >= changeRangeOldEnd) {\n        // Element ends after the change range.  Always adjust the end pos.\n        element.end += delta;\n      } else {\n        // Element ends in the change range.  The element will keep its position if\n        // possible. Or Move backward to the new-end if it's in the 'Y' range.\n        element.end = Math.min(element.end, changeRangeNewEnd);\n      }\n\n      ts.Debug.assert(element.pos <= element.end);\n\n      if (element.parent) {\n        ts.Debug.assert(element.pos >= element.parent.pos);\n        ts.Debug.assert(element.end <= element.parent.end);\n      }\n    }\n\n    function checkNodePositions(node, aggressiveChecks) {\n      if (aggressiveChecks) {\n        var pos_2 = node.pos;\n        forEachChild(node, function (child) {\n          ts.Debug.assert(child.pos >= pos_2);\n          pos_2 = child.end;\n        });\n        ts.Debug.assert(pos_2 <= node.end);\n      }\n    }\n\n    function updateTokenPositionsAndMarkElements(sourceFile, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta, oldText, newText, aggressiveChecks) {\n      visitNode(sourceFile);\n      return;\n\n      function visitNode(child) {\n        ts.Debug.assert(child.pos <= child.end);\n\n        if (child.pos > changeRangeOldEnd) {\n          // Node is entirely past the change range.  We need to move both its pos and\n          // end, forward or backward appropriately.\n          moveElementEntirelyPastChangeRange(child,\n          /*isArray*/\n          false, delta, oldText, newText, aggressiveChecks);\n          return;\n        } // Check if the element intersects the change range.  If it does, then it is not\n        // reusable.  Also, we'll need to recurse to see what constituent portions we may\n        // be able to use.\n\n\n        var fullEnd = child.end;\n\n        if (fullEnd >= changeStart) {\n          child.intersectsChange = true;\n          child._children = undefined; // Adjust the pos or end (or both) of the intersecting element accordingly.\n\n          adjustIntersectingElement(child, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);\n          forEachChild(child, visitNode, visitArray);\n          checkNodePositions(child, aggressiveChecks);\n          return;\n        } // Otherwise, the node is entirely before the change range.  No need to do anything with it.\n\n\n        ts.Debug.assert(fullEnd < changeStart);\n      }\n\n      function visitArray(array) {\n        ts.Debug.assert(array.pos <= array.end);\n\n        if (array.pos > changeRangeOldEnd) {\n          // Array is entirely after the change range.  We need to move it, and move any of\n          // its children.\n          moveElementEntirelyPastChangeRange(array,\n          /*isArray*/\n          true, delta, oldText, newText, aggressiveChecks);\n          return;\n        } // Check if the element intersects the change range.  If it does, then it is not\n        // reusable.  Also, we'll need to recurse to see what constituent portions we may\n        // be able to use.\n\n\n        var fullEnd = array.end;\n\n        if (fullEnd >= changeStart) {\n          array.intersectsChange = true;\n          array._children = undefined; // Adjust the pos or end (or both) of the intersecting array accordingly.\n\n          adjustIntersectingElement(array, changeStart, changeRangeOldEnd, changeRangeNewEnd, delta);\n\n          for (var _i = 0, array_8 = array; _i < array_8.length; _i++) {\n            var node = array_8[_i];\n            visitNode(node);\n          }\n\n          return;\n        } // Otherwise, the array is entirely before the change range.  No need to do anything with it.\n\n\n        ts.Debug.assert(fullEnd < changeStart);\n      }\n    }\n\n    function extendToAffectedRange(sourceFile, changeRange) {\n      // Consider the following code:\n      //      void foo() { /; }\n      //\n      // If the text changes with an insertion of / just before the semicolon then we end up with:\n      //      void foo() { //; }\n      //\n      // If we were to just use the changeRange a is, then we would not rescan the { token\n      // (as it does not intersect the actual original change range).  Because an edit may\n      // change the token touching it, we actually need to look back *at least* one token so\n      // that the prior token sees that change.\n      var maxLookahead = 1;\n      var start = changeRange.span.start; // the first iteration aligns us with the change start. subsequent iteration move us to\n      // the left by maxLookahead tokens.  We only need to do this as long as we're not at the\n      // start of the tree.\n\n      for (var i = 0; start > 0 && i <= maxLookahead; i++) {\n        var nearestNode = findNearestNodeStartingBeforeOrAtPosition(sourceFile, start);\n        ts.Debug.assert(nearestNode.pos <= start);\n        var position = nearestNode.pos;\n        start = Math.max(0, position - 1);\n      }\n\n      var finalSpan = ts.createTextSpanFromBounds(start, ts.textSpanEnd(changeRange.span));\n      var finalLength = changeRange.newLength + (changeRange.span.start - start);\n      return ts.createTextChangeRange(finalSpan, finalLength);\n    }\n\n    function findNearestNodeStartingBeforeOrAtPosition(sourceFile, position) {\n      var bestResult = sourceFile;\n      var lastNodeEntirelyBeforePosition;\n      forEachChild(sourceFile, visit);\n\n      if (lastNodeEntirelyBeforePosition) {\n        var lastChildOfLastEntireNodeBeforePosition = getLastChild(lastNodeEntirelyBeforePosition);\n\n        if (lastChildOfLastEntireNodeBeforePosition.pos > bestResult.pos) {\n          bestResult = lastChildOfLastEntireNodeBeforePosition;\n        }\n      }\n\n      return bestResult;\n\n      function getLastChild(node) {\n        while (true) {\n          var lastChild = getLastChildWorker(node);\n\n          if (lastChild) {\n            node = lastChild;\n          } else {\n            return node;\n          }\n        }\n      }\n\n      function getLastChildWorker(node) {\n        var last = undefined;\n        forEachChild(node, function (child) {\n          if (ts.nodeIsPresent(child)) {\n            last = child;\n          }\n        });\n        return last;\n      }\n\n      function visit(child) {\n        if (ts.nodeIsMissing(child)) {\n          // Missing nodes are effectively invisible to us.  We never even consider them\n          // When trying to find the nearest node before us.\n          return;\n        } // If the child intersects this position, then this node is currently the nearest\n        // node that starts before the position.\n\n\n        if (child.pos <= position) {\n          if (child.pos >= bestResult.pos) {\n            // This node starts before the position, and is closer to the position than\n            // the previous best node we found.  It is now the new best node.\n            bestResult = child;\n          } // Now, the node may overlap the position, or it may end entirely before the\n          // position.  If it overlaps with the position, then either it, or one of its\n          // children must be the nearest node before the position.  So we can just\n          // recurse into this child to see if we can find something better.\n\n\n          if (position < child.end) {\n            // The nearest node is either this child, or one of the children inside\n            // of it.  We've already marked this child as the best so far.  Recurse\n            // in case one of the children is better.\n            forEachChild(child, visit); // Once we look at the children of this node, then there's no need to\n            // continue any further.\n\n            return true;\n          } else {\n            ts.Debug.assert(child.end <= position); // The child ends entirely before this position.  Say you have the following\n            // (where $ is the position)\n            //\n            //      <complex expr 1> ? <complex expr 2> $ : <...> <...>\n            //\n            // We would want to find the nearest preceding node in \"complex expr 2\".\n            // To support that, we keep track of this node, and once we're done searching\n            // for a best node, we recurse down this node to see if we can find a good\n            // result in it.\n            //\n            // This approach allows us to quickly skip over nodes that are entirely\n            // before the position, while still allowing us to find any nodes in the\n            // last one that might be what we want.\n\n            lastNodeEntirelyBeforePosition = child;\n          }\n        } else {\n          ts.Debug.assert(child.pos > position); // We're now at a node that is entirely past the position we're searching for.\n          // This node (and all following nodes) could never contribute to the result,\n          // so just skip them by returning 'true' here.\n\n          return true;\n        }\n      }\n    }\n\n    function checkChangeRange(sourceFile, newText, textChangeRange, aggressiveChecks) {\n      var oldText = sourceFile.text;\n\n      if (textChangeRange) {\n        ts.Debug.assert(oldText.length - textChangeRange.span.length + textChangeRange.newLength === newText.length);\n\n        if (aggressiveChecks || ts.Debug.shouldAssert(3\n        /* VeryAggressive */\n        )) {\n          var oldTextPrefix = oldText.substr(0, textChangeRange.span.start);\n          var newTextPrefix = newText.substr(0, textChangeRange.span.start);\n          ts.Debug.assert(oldTextPrefix === newTextPrefix);\n          var oldTextSuffix = oldText.substring(ts.textSpanEnd(textChangeRange.span), oldText.length);\n          var newTextSuffix = newText.substring(ts.textSpanEnd(ts.textChangeRangeNewSpan(textChangeRange)), newText.length);\n          ts.Debug.assert(oldTextSuffix === newTextSuffix);\n        }\n      }\n    }\n\n    function createSyntaxCursor(sourceFile) {\n      var currentArray = sourceFile.statements;\n      var currentArrayIndex = 0;\n      ts.Debug.assert(currentArrayIndex < currentArray.length);\n      var current = currentArray[currentArrayIndex];\n      var lastQueriedPosition = -1\n      /* Value */\n      ;\n      return {\n        currentNode: function currentNode(position) {\n          // Only compute the current node if the position is different than the last time\n          // we were asked.  The parser commonly asks for the node at the same position\n          // twice.  Once to know if can read an appropriate list element at a certain point,\n          // and then to actually read and consume the node.\n          if (position !== lastQueriedPosition) {\n            // Much of the time the parser will need the very next node in the array that\n            // we just returned a node from.So just simply check for that case and move\n            // forward in the array instead of searching for the node again.\n            if (current && current.end === position && currentArrayIndex < currentArray.length - 1) {\n              currentArrayIndex++;\n              current = currentArray[currentArrayIndex];\n            } // If we don't have a node, or the node we have isn't in the right position,\n            // then try to find a viable node at the position requested.\n\n\n            if (!current || current.pos !== position) {\n              findHighestListElementThatStartsAtPosition(position);\n            }\n          } // Cache this query so that we don't do any extra work if the parser calls back\n          // into us.  Note: this is very common as the parser will make pairs of calls like\n          // 'isListElement -> parseListElement'.  If we were unable to find a node when\n          // called with 'isListElement', we don't want to redo the work when parseListElement\n          // is called immediately after.\n\n\n          lastQueriedPosition = position; // Either we don'd have a node, or we have a node at the position being asked for.\n\n          ts.Debug.assert(!current || current.pos === position);\n          return current;\n        }\n      }; // Finds the highest element in the tree we can find that starts at the provided position.\n      // The element must be a direct child of some node list in the tree.  This way after we\n      // return it, we can easily return its next sibling in the list.\n\n      function findHighestListElementThatStartsAtPosition(position) {\n        // Clear out any cached state about the last node we found.\n        currentArray = undefined;\n        currentArrayIndex = -1\n        /* Value */\n        ;\n        current = undefined; // Recurse into the source file to find the highest node at this position.\n\n        forEachChild(sourceFile, visitNode, visitArray);\n        return;\n\n        function visitNode(node) {\n          if (position >= node.pos && position < node.end) {\n            // Position was within this node.  Keep searching deeper to find the node.\n            forEachChild(node, visitNode, visitArray); // don't procede any futher in the search.\n\n            return true;\n          } // position wasn't in this node, have to keep searching.\n\n\n          return false;\n        }\n\n        function visitArray(array) {\n          if (position >= array.pos && position < array.end) {\n            // position was in this array.  Search through this array to see if we find a\n            // viable element.\n            for (var i = 0, n = array.length; i < n; i++) {\n              var child = array[i];\n\n              if (child) {\n                if (child.pos === position) {\n                  // Found the right node.  We're done.\n                  currentArray = array;\n                  currentArrayIndex = i;\n                  current = child;\n                  return true;\n                } else {\n                  if (child.pos < position && position < child.end) {\n                    // Position in somewhere within this child.  Search in it and\n                    // stop searching in this array.\n                    forEachChild(child, visitNode, visitArray);\n                    return true;\n                  }\n                }\n              }\n            }\n          } // position wasn't in this array, have to keep searching.\n\n\n          return false;\n        }\n      }\n    }\n\n    var InvalidPosition;\n\n    (function (InvalidPosition) {\n      InvalidPosition[InvalidPosition[\"Value\"] = -1] = \"Value\";\n    })(InvalidPosition || (InvalidPosition = {}));\n  })(IncrementalParser || (IncrementalParser = {}));\n})(ts || (ts = {})); /// <reference path=\"utilities.ts\"/>\n/// <reference path=\"parser.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  ts.bindTime = 0;\n\n  (function (ModuleInstanceState) {\n    ModuleInstanceState[ModuleInstanceState[\"NonInstantiated\"] = 0] = \"NonInstantiated\";\n    ModuleInstanceState[ModuleInstanceState[\"Instantiated\"] = 1] = \"Instantiated\";\n    ModuleInstanceState[ModuleInstanceState[\"ConstEnumOnly\"] = 2] = \"ConstEnumOnly\";\n  })(ts.ModuleInstanceState || (ts.ModuleInstanceState = {}));\n\n  var ModuleInstanceState = ts.ModuleInstanceState;\n  var Reachability;\n\n  (function (Reachability) {\n    Reachability[Reachability[\"Unintialized\"] = 1] = \"Unintialized\";\n    Reachability[Reachability[\"Reachable\"] = 2] = \"Reachable\";\n    Reachability[Reachability[\"Unreachable\"] = 4] = \"Unreachable\";\n    Reachability[Reachability[\"ReportedUnreachable\"] = 8] = \"ReportedUnreachable\";\n  })(Reachability || (Reachability = {}));\n\n  function or(state1, state2) {\n    return (state1 | state2) & 2\n    /* Reachable */\n    ? 2\n    /* Reachable */\n    : state1 & state2 & 8\n    /* ReportedUnreachable */\n    ? 8\n    /* ReportedUnreachable */\n    : 4\n    /* Unreachable */\n    ;\n  }\n\n  function getModuleInstanceState(node) {\n    // A module is uninstantiated if it contains only\n    // 1. interface declarations, type alias declarations\n    if (node.kind === 218\n    /* InterfaceDeclaration */\n    || node.kind === 219\n    /* TypeAliasDeclaration */\n    ) {\n        return 0\n        /* NonInstantiated */\n        ;\n      } else if (ts.isConstEnumDeclaration(node)) {\n      return 2\n      /* ConstEnumOnly */\n      ;\n    } else if ((node.kind === 225\n    /* ImportDeclaration */\n    || node.kind === 224\n    /* ImportEqualsDeclaration */\n    ) && !(node.flags & 2\n    /* Export */\n    )) {\n        return 0\n        /* NonInstantiated */\n        ;\n      } else if (node.kind === 222\n    /* ModuleBlock */\n    ) {\n        var state_1 = 0\n        /* NonInstantiated */\n        ;\n        ts.forEachChild(node, function (n) {\n          switch (getModuleInstanceState(n)) {\n            case 0\n            /* NonInstantiated */\n            :\n              // child is non-instantiated - continue searching\n              return false;\n\n            case 2\n            /* ConstEnumOnly */\n            :\n              // child is const enum only - record state and continue searching\n              state_1 = 2\n              /* ConstEnumOnly */\n              ;\n              return false;\n\n            case 1\n            /* Instantiated */\n            :\n              // child is instantiated - record state and stop\n              state_1 = 1\n              /* Instantiated */\n              ;\n              return true;\n          }\n        });\n        return state_1;\n      } else if (node.kind === 221\n    /* ModuleDeclaration */\n    ) {\n        return getModuleInstanceState(node.body);\n      } else {\n      return 1\n      /* Instantiated */\n      ;\n    }\n  }\n\n  ts.getModuleInstanceState = getModuleInstanceState;\n  var ContainerFlags;\n\n  (function (ContainerFlags) {\n    // The current node is not a container, and no container manipulation should happen before\n    // recursing into it.\n    ContainerFlags[ContainerFlags[\"None\"] = 0] = \"None\"; // The current node is a container.  It should be set as the current container (and block-\n    // container) before recursing into it.  The current node does not have locals.  Examples:\n    //\n    //      Classes, ObjectLiterals, TypeLiterals, Interfaces...\n\n    ContainerFlags[ContainerFlags[\"IsContainer\"] = 1] = \"IsContainer\"; // The current node is a block-scoped-container.  It should be set as the current block-\n    // container before recursing into it.  Examples:\n    //\n    //      Blocks (when not parented by functions), Catch clauses, For/For-in/For-of statements...\n\n    ContainerFlags[ContainerFlags[\"IsBlockScopedContainer\"] = 2] = \"IsBlockScopedContainer\";\n    ContainerFlags[ContainerFlags[\"HasLocals\"] = 4] = \"HasLocals\"; // If the current node is a container that also container that also contains locals.  Examples:\n    //\n    //      Functions, Methods, Modules, Source-files.\n\n    ContainerFlags[ContainerFlags[\"IsContainerWithLocals\"] = 5] = \"IsContainerWithLocals\";\n  })(ContainerFlags || (ContainerFlags = {}));\n\n  var binder = createBinder();\n\n  function bindSourceFile(file, options) {\n    var start = new Date().getTime();\n    binder(file, options);\n    ts.bindTime += new Date().getTime() - start;\n  }\n\n  ts.bindSourceFile = bindSourceFile;\n\n  function createBinder() {\n    var file;\n    var options;\n    var parent;\n    var container;\n    var blockScopeContainer;\n    var lastContainer;\n    var seenThisKeyword; // state used by reachability checks\n\n    var hasExplicitReturn;\n    var currentReachabilityState;\n    var labelStack;\n    var labelIndexMap;\n    var implicitLabels; // state used for emit helpers\n\n    var hasClassExtends;\n    var hasAsyncFunctions;\n    var hasDecorators;\n    var hasParameterDecorators;\n    var hasJsxSpreadAttribute; // If this file is an external module, then it is automatically in strict-mode according to\n    // ES6.  If it is not an external module, then we'll determine if it is in strict mode or\n    // not depending on if we see \"use strict\" in certain places (or if we hit a class/namespace).\n\n    var inStrictMode;\n    var symbolCount = 0;\n    var Symbol;\n    var classifiableNames;\n\n    function bindSourceFile(f, opts) {\n      file = f;\n      options = opts;\n      inStrictMode = !!file.externalModuleIndicator;\n      classifiableNames = {};\n      Symbol = ts.objectAllocator.getSymbolConstructor();\n\n      if (!file.locals) {\n        bind(file);\n        file.symbolCount = symbolCount;\n        file.classifiableNames = classifiableNames;\n      }\n\n      file = undefined;\n      options = undefined;\n      parent = undefined;\n      container = undefined;\n      blockScopeContainer = undefined;\n      lastContainer = undefined;\n      seenThisKeyword = false;\n      hasExplicitReturn = false;\n      labelStack = undefined;\n      labelIndexMap = undefined;\n      implicitLabels = undefined;\n      hasClassExtends = false;\n      hasAsyncFunctions = false;\n      hasDecorators = false;\n      hasParameterDecorators = false;\n      hasJsxSpreadAttribute = false;\n    }\n\n    return bindSourceFile;\n\n    function createSymbol(flags, name) {\n      symbolCount++;\n      return new Symbol(flags, name);\n    }\n\n    function addDeclarationToSymbol(symbol, node, symbolFlags) {\n      symbol.flags |= symbolFlags;\n      node.symbol = symbol;\n\n      if (!symbol.declarations) {\n        symbol.declarations = [];\n      }\n\n      symbol.declarations.push(node);\n\n      if (symbolFlags & 1952\n      /* HasExports */\n      && !symbol.exports) {\n        symbol.exports = {};\n      }\n\n      if (symbolFlags & 6240\n      /* HasMembers */\n      && !symbol.members) {\n        symbol.members = {};\n      }\n\n      if (symbolFlags & 107455\n      /* Value */\n      ) {\n          var valueDeclaration = symbol.valueDeclaration;\n\n          if (!valueDeclaration || valueDeclaration.kind !== node.kind && valueDeclaration.kind === 221\n          /* ModuleDeclaration */\n          ) {\n            // other kinds of value declarations take precedence over modules\n            symbol.valueDeclaration = node;\n          }\n        }\n    } // Should not be called on a declaration with a computed property name,\n    // unless it is a well known Symbol.\n\n\n    function getDeclarationName(node) {\n      if (node.name) {\n        if (ts.isAmbientModule(node)) {\n          return ts.isGlobalScopeAugmentation(node) ? \"__global\" : \"\\\"\" + node.name.text + \"\\\"\";\n        }\n\n        if (node.name.kind === 137\n        /* ComputedPropertyName */\n        ) {\n            var nameExpression = node.name.expression; // treat computed property names where expression is string/numeric literal as just string/numeric literal\n\n            if (ts.isStringOrNumericLiteral(nameExpression.kind)) {\n              return nameExpression.text;\n            }\n\n            ts.Debug.assert(ts.isWellKnownSymbolSyntactically(nameExpression));\n            return ts.getPropertyNameForKnownSymbolName(nameExpression.name.text);\n          }\n\n        return node.name.text;\n      }\n\n      switch (node.kind) {\n        case 145\n        /* Constructor */\n        :\n          return \"__constructor\";\n\n        case 153\n        /* FunctionType */\n        :\n        case 148\n        /* CallSignature */\n        :\n          return \"__call\";\n\n        case 154\n        /* ConstructorType */\n        :\n        case 149\n        /* ConstructSignature */\n        :\n          return \"__new\";\n\n        case 150\n        /* IndexSignature */\n        :\n          return \"__index\";\n\n        case 231\n        /* ExportDeclaration */\n        :\n          return \"__export\";\n\n        case 230\n        /* ExportAssignment */\n        :\n          return node.isExportEquals ? \"export=\" : \"default\";\n\n        case 184\n        /* BinaryExpression */\n        :\n          switch (ts.getSpecialPropertyAssignmentKind(node)) {\n            case 2\n            /* ModuleExports */\n            :\n              // module.exports = ...\n              return \"export=\";\n\n            case 1\n            /* ExportsProperty */\n            :\n            case 4\n            /* ThisProperty */\n            :\n              // exports.x = ... or this.y = ...\n              return node.left.name.text;\n\n            case 3\n            /* PrototypeProperty */\n            :\n              // className.prototype.methodName = ...\n              return node.left.expression.name.text;\n          }\n\n          ts.Debug.fail(\"Unknown binary declaration kind\");\n          break;\n\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n          return node.flags & 512\n          /* Default */\n          ? \"default\" : undefined;\n\n        case 264\n        /* JSDocFunctionType */\n        :\n          return ts.isJSDocConstructSignature(node) ? \"__new\" : \"__call\";\n\n        case 139\n        /* Parameter */\n        :\n          // Parameters with names are handled at the top of this function.  Parameters\n          // without names can only come from JSDocFunctionTypes.\n          ts.Debug.assert(node.parent.kind === 264\n          /* JSDocFunctionType */\n          );\n          var functionType = node.parent;\n          var index = ts.indexOf(functionType.parameters, node);\n          return \"p\" + index;\n      }\n    }\n\n    function getDisplayName(node) {\n      return node.name ? ts.declarationNameToString(node.name) : getDeclarationName(node);\n    }\n    /**\n     * Declares a Symbol for the node and adds it to symbols. Reports errors for conflicting identifier names.\n     * @param symbolTable - The symbol table which node will be added to.\n     * @param parent - node's parent declaration.\n     * @param node - The declaration to be added to the symbol table\n     * @param includes - The SymbolFlags that node has in addition to its declaration type (eg: export, ambient, etc.)\n     * @param excludes - The flags which node cannot be declared alongside in a symbol table. Used to report forbidden declarations.\n     */\n\n\n    function declareSymbol(symbolTable, parent, node, includes, excludes) {\n      ts.Debug.assert(!ts.hasDynamicName(node));\n      var isDefaultExport = node.flags & 512\n      /* Default */\n      ; // The exported symbol for an export default function/class node is always named \"default\"\n\n      var name = isDefaultExport && parent ? \"default\" : getDeclarationName(node);\n      var symbol;\n\n      if (name !== undefined) {\n        // Check and see if the symbol table already has a symbol with this name.  If not,\n        // create a new symbol with this name and add it to the table.  Note that we don't\n        // give the new symbol any flags *yet*.  This ensures that it will not conflict\n        // with the 'excludes' flags we pass in.\n        //\n        // If we do get an existing symbol, see if it conflicts with the new symbol we're\n        // creating.  For example, a 'var' symbol and a 'class' symbol will conflict within\n        // the same symbol table.  If we have a conflict, report the issue on each\n        // declaration we have for this symbol, and then create a new symbol for this\n        // declaration.\n        //\n        // If we created a new symbol, either because we didn't have a symbol with this name\n        // in the symbol table, or we conflicted with an existing symbol, then just add this\n        // node as the sole declaration of the new symbol.\n        //\n        // Otherwise, we'll be merging into a compatible existing symbol (for example when\n        // you have multiple 'vars' with the same name in the same container).  In this case\n        // just add this node into the declarations list of the symbol.\n        symbol = ts.hasProperty(symbolTable, name) ? symbolTable[name] : symbolTable[name] = createSymbol(0\n        /* None */\n        , name);\n\n        if (name && includes & 788448\n        /* Classifiable */\n        ) {\n          classifiableNames[name] = name;\n        }\n\n        if (symbol.flags & excludes) {\n          if (node.name) {\n            node.name.parent = node;\n          } // Report errors every position with duplicate declaration\n          // Report errors on previous encountered declarations\n\n\n          var message_1 = symbol.flags & 2\n          /* BlockScopedVariable */\n          ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0 : ts.Diagnostics.Duplicate_identifier_0;\n          ts.forEach(symbol.declarations, function (declaration) {\n            if (declaration.flags & 512\n            /* Default */\n            ) {\n                message_1 = ts.Diagnostics.A_module_cannot_have_multiple_default_exports;\n              }\n          });\n          ts.forEach(symbol.declarations, function (declaration) {\n            file.bindDiagnostics.push(ts.createDiagnosticForNode(declaration.name || declaration, message_1, getDisplayName(declaration)));\n          });\n          file.bindDiagnostics.push(ts.createDiagnosticForNode(node.name || node, message_1, getDisplayName(node)));\n          symbol = createSymbol(0\n          /* None */\n          , name);\n        }\n      } else {\n        symbol = createSymbol(0\n        /* None */\n        , \"__missing\");\n      }\n\n      addDeclarationToSymbol(symbol, node, includes);\n      symbol.parent = parent;\n      return symbol;\n    }\n\n    function declareModuleMember(node, symbolFlags, symbolExcludes) {\n      var hasExportModifier = ts.getCombinedNodeFlags(node) & 2\n      /* Export */\n      ;\n\n      if (symbolFlags & 8388608\n      /* Alias */\n      ) {\n          if (node.kind === 233\n          /* ExportSpecifier */\n          || node.kind === 224\n          /* ImportEqualsDeclaration */\n          && hasExportModifier) {\n            return declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);\n          } else {\n            return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);\n          }\n        } else {\n        // Exported module members are given 2 symbols: A local symbol that is classified with an ExportValue,\n        // ExportType, or ExportContainer flag, and an associated export symbol with all the correct flags set\n        // on it. There are 2 main reasons:\n        //\n        //   1. We treat locals and exports of the same name as mutually exclusive within a container.\n        //      That means the binder will issue a Duplicate Identifier error if you mix locals and exports\n        //      with the same name in the same container.\n        //      TODO: Make this a more specific error and decouple it from the exclusion logic.\n        //   2. When we checkIdentifier in the checker, we set its resolved symbol to the local symbol,\n        //      but return the export symbol (by calling getExportSymbolOfValueSymbolIfExported). That way\n        //      when the emitter comes back to it, it knows not to qualify the name if it was found in a containing scope.\n        // NOTE: Nested ambient modules always should go to to 'locals' table to prevent their automatic merge\n        //       during global merging in the checker. Why? The only case when ambient module is permitted inside another module is module augmentation\n        //       and this case is specially handled. Module augmentations should only be merged with original module definition\n        //       and should never be merged directly with other augmentation, and the latter case would be possible if automatic merge is allowed.\n        if (!ts.isAmbientModule(node) && (hasExportModifier || container.flags & 131072\n        /* ExportContext */\n        )) {\n          var exportKind = (symbolFlags & 107455\n          /* Value */\n          ? 1048576\n          /* ExportValue */\n          : 0) | (symbolFlags & 793056\n          /* Type */\n          ? 2097152\n          /* ExportType */\n          : 0) | (symbolFlags & 1536\n          /* Namespace */\n          ? 4194304\n          /* ExportNamespace */\n          : 0);\n          var local = declareSymbol(container.locals, undefined, node, exportKind, symbolExcludes);\n          local.exportSymbol = declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);\n          node.localSymbol = local;\n          return local;\n        } else {\n          return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);\n        }\n      }\n    } // All container nodes are kept on a linked list in declaration order. This list is used by\n    // the getLocalNameOfContainer function in the type checker to validate that the local name\n    // used for a container is unique.\n\n\n    function bindChildren(node) {\n      // Before we recurse into a node's chilren, we first save the existing parent, container\n      // and block-container.  Then after we pop out of processing the children, we restore\n      // these saved values.\n      var saveParent = parent;\n      var saveContainer = container;\n      var savedBlockScopeContainer = blockScopeContainer; // This node will now be set as the parent of all of its children as we recurse into them.\n\n      parent = node; // Depending on what kind of node this is, we may have to adjust the current container\n      // and block-container.   If the current node is a container, then it is automatically\n      // considered the current block-container as well.  Also, for containers that we know\n      // may contain locals, we proactively initialize the .locals field. We do this because\n      // it's highly likely that the .locals will be needed to place some child in (for example,\n      // a parameter, or variable declaration).\n      //\n      // However, we do not proactively create the .locals for block-containers because it's\n      // totally normal and common for block-containers to never actually have a block-scoped\n      // variable in them.  We don't want to end up allocating an object for every 'block' we\n      // run into when most of them won't be necessary.\n      //\n      // Finally, if this is a block-container, then we clear out any existing .locals object\n      // it may contain within it.  This happens in incremental scenarios.  Because we can be\n      // reusing a node from a previous compilation, that node may have had 'locals' created\n      // for it.  We must clear this so we don't accidently move any stale data forward from\n      // a previous compilation.\n\n      var containerFlags = getContainerFlags(node);\n\n      if (containerFlags & 1\n      /* IsContainer */\n      ) {\n          container = blockScopeContainer = node;\n\n          if (containerFlags & 4\n          /* HasLocals */\n          ) {\n              container.locals = {};\n            }\n\n          addToContainerChain(container);\n        } else if (containerFlags & 2\n      /* IsBlockScopedContainer */\n      ) {\n          blockScopeContainer = node;\n          blockScopeContainer.locals = undefined;\n        }\n\n      var savedReachabilityState;\n      var savedLabelStack;\n      var savedLabels;\n      var savedImplicitLabels;\n      var savedHasExplicitReturn;\n      var kind = node.kind;\n      var flags = node.flags; // reset all reachability check related flags on node (for incremental scenarios)\n\n      flags &= ~1572864\n      /* ReachabilityCheckFlags */\n      ; // reset all emit helper flags on node (for incremental scenarios)\n\n      flags &= ~62914560\n      /* EmitHelperFlags */\n      ;\n\n      if (kind === 218\n      /* InterfaceDeclaration */\n      ) {\n          seenThisKeyword = false;\n        }\n\n      var saveState = kind === 251\n      /* SourceFile */\n      || kind === 222\n      /* ModuleBlock */\n      || ts.isFunctionLikeKind(kind);\n\n      if (saveState) {\n        savedReachabilityState = currentReachabilityState;\n        savedLabelStack = labelStack;\n        savedLabels = labelIndexMap;\n        savedImplicitLabels = implicitLabels;\n        savedHasExplicitReturn = hasExplicitReturn;\n        currentReachabilityState = 2\n        /* Reachable */\n        ;\n        hasExplicitReturn = false;\n        labelStack = labelIndexMap = implicitLabels = undefined;\n      }\n\n      if (ts.isInJavaScriptFile(node) && node.jsDocComment) {\n        bind(node.jsDocComment);\n      }\n\n      bindReachableStatement(node);\n\n      if (currentReachabilityState === 2\n      /* Reachable */\n      && ts.isFunctionLikeKind(kind) && ts.nodeIsPresent(node.body)) {\n        flags |= 524288\n        /* HasImplicitReturn */\n        ;\n\n        if (hasExplicitReturn) {\n          flags |= 1048576\n          /* HasExplicitReturn */\n          ;\n        }\n      }\n\n      if (kind === 218\n      /* InterfaceDeclaration */\n      ) {\n          flags = seenThisKeyword ? flags | 262144\n          /* ContainsThis */\n          : flags & ~262144\n          /* ContainsThis */\n          ;\n        }\n\n      if (kind === 251\n      /* SourceFile */\n      ) {\n          if (hasClassExtends) {\n            flags |= 4194304\n            /* HasClassExtends */\n            ;\n          }\n\n          if (hasDecorators) {\n            flags |= 8388608\n            /* HasDecorators */\n            ;\n          }\n\n          if (hasParameterDecorators) {\n            flags |= 16777216\n            /* HasParamDecorators */\n            ;\n          }\n\n          if (hasAsyncFunctions) {\n            flags |= 33554432\n            /* HasAsyncFunctions */\n            ;\n          }\n\n          if (hasJsxSpreadAttribute) {\n            flags |= 1073741824\n            /* HasJsxSpreadAttribute */\n            ;\n          }\n        }\n\n      node.flags = flags;\n\n      if (saveState) {\n        hasExplicitReturn = savedHasExplicitReturn;\n        currentReachabilityState = savedReachabilityState;\n        labelStack = savedLabelStack;\n        labelIndexMap = savedLabels;\n        implicitLabels = savedImplicitLabels;\n      }\n\n      container = saveContainer;\n      parent = saveParent;\n      blockScopeContainer = savedBlockScopeContainer;\n    }\n    /**\n     * Returns true if node and its subnodes were successfully traversed.\n     * Returning false means that node was not examined and caller needs to dive into the node himself.\n     */\n\n\n    function bindReachableStatement(node) {\n      if (checkUnreachable(node)) {\n        ts.forEachChild(node, bind);\n        return;\n      }\n\n      switch (node.kind) {\n        case 201\n        /* WhileStatement */\n        :\n          bindWhileStatement(node);\n          break;\n\n        case 200\n        /* DoStatement */\n        :\n          bindDoStatement(node);\n          break;\n\n        case 202\n        /* ForStatement */\n        :\n          bindForStatement(node);\n          break;\n\n        case 203\n        /* ForInStatement */\n        :\n        case 204\n        /* ForOfStatement */\n        :\n          bindForInOrForOfStatement(node);\n          break;\n\n        case 199\n        /* IfStatement */\n        :\n          bindIfStatement(node);\n          break;\n\n        case 207\n        /* ReturnStatement */\n        :\n        case 211\n        /* ThrowStatement */\n        :\n          bindReturnOrThrow(node);\n          break;\n\n        case 206\n        /* BreakStatement */\n        :\n        case 205\n        /* ContinueStatement */\n        :\n          bindBreakOrContinueStatement(node);\n          break;\n\n        case 212\n        /* TryStatement */\n        :\n          bindTryStatement(node);\n          break;\n\n        case 209\n        /* SwitchStatement */\n        :\n          bindSwitchStatement(node);\n          break;\n\n        case 223\n        /* CaseBlock */\n        :\n          bindCaseBlock(node);\n          break;\n\n        case 210\n        /* LabeledStatement */\n        :\n          bindLabeledStatement(node);\n          break;\n\n        default:\n          ts.forEachChild(node, bind);\n          break;\n      }\n    }\n\n    function bindWhileStatement(n) {\n      var preWhileState = n.expression.kind === 84\n      /* FalseKeyword */\n      ? 4\n      /* Unreachable */\n      : currentReachabilityState;\n      var postWhileState = n.expression.kind === 99\n      /* TrueKeyword */\n      ? 4\n      /* Unreachable */\n      : currentReachabilityState; // bind expressions (don't affect reachability)\n\n      bind(n.expression);\n      currentReachabilityState = preWhileState;\n      var postWhileLabel = pushImplicitLabel();\n      bind(n.statement);\n      popImplicitLabel(postWhileLabel, postWhileState);\n    }\n\n    function bindDoStatement(n) {\n      var preDoState = currentReachabilityState;\n      var postDoLabel = pushImplicitLabel();\n      bind(n.statement);\n      var postDoState = n.expression.kind === 99\n      /* TrueKeyword */\n      ? 4\n      /* Unreachable */\n      : preDoState;\n      popImplicitLabel(postDoLabel, postDoState); // bind expressions (don't affect reachability)\n\n      bind(n.expression);\n    }\n\n    function bindForStatement(n) {\n      var preForState = currentReachabilityState;\n      var postForLabel = pushImplicitLabel(); // bind expressions (don't affect reachability)\n\n      bind(n.initializer);\n      bind(n.condition);\n      bind(n.incrementor);\n      bind(n.statement); // for statement is considered infinite when it condition is either omitted or is true keyword\n      // - for(..;;..)\n      // - for(..;true;..)\n\n      var isInfiniteLoop = !n.condition || n.condition.kind === 99\n      /* TrueKeyword */\n      ;\n      var postForState = isInfiniteLoop ? 4\n      /* Unreachable */\n      : preForState;\n      popImplicitLabel(postForLabel, postForState);\n    }\n\n    function bindForInOrForOfStatement(n) {\n      var preStatementState = currentReachabilityState;\n      var postStatementLabel = pushImplicitLabel(); // bind expressions (don't affect reachability)\n\n      bind(n.initializer);\n      bind(n.expression);\n      bind(n.statement);\n      popImplicitLabel(postStatementLabel, preStatementState);\n    }\n\n    function bindIfStatement(n) {\n      // denotes reachability state when entering 'thenStatement' part of the if statement:\n      // i.e. if condition is false then thenStatement is unreachable\n      var ifTrueState = n.expression.kind === 84\n      /* FalseKeyword */\n      ? 4\n      /* Unreachable */\n      : currentReachabilityState; // denotes reachability state when entering 'elseStatement':\n      // i.e. if condition is true then elseStatement is unreachable\n\n      var ifFalseState = n.expression.kind === 99\n      /* TrueKeyword */\n      ? 4\n      /* Unreachable */\n      : currentReachabilityState;\n      currentReachabilityState = ifTrueState; // bind expression (don't affect reachability)\n\n      bind(n.expression);\n      bind(n.thenStatement);\n\n      if (n.elseStatement) {\n        var preElseState = currentReachabilityState;\n        currentReachabilityState = ifFalseState;\n        bind(n.elseStatement);\n        currentReachabilityState = or(currentReachabilityState, preElseState);\n      } else {\n        currentReachabilityState = or(currentReachabilityState, ifFalseState);\n      }\n    }\n\n    function bindReturnOrThrow(n) {\n      // bind expression (don't affect reachability)\n      bind(n.expression);\n\n      if (n.kind === 207\n      /* ReturnStatement */\n      ) {\n          hasExplicitReturn = true;\n        }\n\n      currentReachabilityState = 4\n      /* Unreachable */\n      ;\n    }\n\n    function bindBreakOrContinueStatement(n) {\n      // call bind on label (don't affect reachability)\n      bind(n.label); // for continue case touch label so it will be marked a used\n\n      var isValidJump = jumpToLabel(n.label, n.kind === 206\n      /* BreakStatement */\n      ? currentReachabilityState : 4\n      /* Unreachable */\n      );\n\n      if (isValidJump) {\n        currentReachabilityState = 4\n        /* Unreachable */\n        ;\n      }\n    }\n\n    function bindTryStatement(n) {\n      // catch\\finally blocks has the same reachability as try block\n      var preTryState = currentReachabilityState;\n      bind(n.tryBlock);\n      var postTryState = currentReachabilityState;\n      currentReachabilityState = preTryState;\n      bind(n.catchClause);\n      var postCatchState = currentReachabilityState;\n      currentReachabilityState = preTryState;\n      bind(n.finallyBlock); // post catch/finally state is reachable if\n      // - post try state is reachable - control flow can fall out of try block\n      // - post catch state is reachable - control flow can fall out of catch block\n\n      currentReachabilityState = or(postTryState, postCatchState);\n    }\n\n    function bindSwitchStatement(n) {\n      var preSwitchState = currentReachabilityState;\n      var postSwitchLabel = pushImplicitLabel(); // bind expression (don't affect reachability)\n\n      bind(n.expression);\n      bind(n.caseBlock);\n      var hasDefault = ts.forEach(n.caseBlock.clauses, function (c) {\n        return c.kind === 245\n        /* DefaultClause */\n        ;\n      }); // post switch state is unreachable if switch is exaustive (has a default case ) and does not have fallthrough from the last case\n\n      var postSwitchState = hasDefault && currentReachabilityState !== 2\n      /* Reachable */\n      ? 4\n      /* Unreachable */\n      : preSwitchState;\n      popImplicitLabel(postSwitchLabel, postSwitchState);\n    }\n\n    function bindCaseBlock(n) {\n      var startState = currentReachabilityState;\n\n      for (var _i = 0, _a = n.clauses; _i < _a.length; _i++) {\n        var clause = _a[_i];\n        currentReachabilityState = startState;\n        bind(clause);\n\n        if (clause.statements.length && currentReachabilityState === 2\n        /* Reachable */\n        && options.noFallthroughCasesInSwitch) {\n          errorOnFirstToken(clause, ts.Diagnostics.Fallthrough_case_in_switch);\n        }\n      }\n    }\n\n    function bindLabeledStatement(n) {\n      // call bind on label (don't affect reachability)\n      bind(n.label);\n      var ok = pushNamedLabel(n.label);\n      bind(n.statement);\n\n      if (ok) {\n        popNamedLabel(n.label, currentReachabilityState);\n      }\n    }\n\n    function getContainerFlags(node) {\n      switch (node.kind) {\n        case 189\n        /* ClassExpression */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 220\n        /* EnumDeclaration */\n        :\n        case 168\n        /* ObjectLiteralExpression */\n        :\n        case 156\n        /* TypeLiteral */\n        :\n        case 260\n        /* JSDocRecordType */\n        :\n          return 1\n          /* IsContainer */\n          ;\n\n        case 148\n        /* CallSignature */\n        :\n        case 149\n        /* ConstructSignature */\n        :\n        case 150\n        /* IndexSignature */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 145\n        /* Constructor */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n        case 153\n        /* FunctionType */\n        :\n        case 264\n        /* JSDocFunctionType */\n        :\n        case 154\n        /* ConstructorType */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 251\n        /* SourceFile */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n          return 5\n          /* IsContainerWithLocals */\n          ;\n\n        case 247\n        /* CatchClause */\n        :\n        case 202\n        /* ForStatement */\n        :\n        case 203\n        /* ForInStatement */\n        :\n        case 204\n        /* ForOfStatement */\n        :\n        case 223\n        /* CaseBlock */\n        :\n          return 2\n          /* IsBlockScopedContainer */\n          ;\n\n        case 195\n        /* Block */\n        :\n          // do not treat blocks directly inside a function as a block-scoped-container.\n          // Locals that reside in this block should go to the function locals. Othewise 'x'\n          // would not appear to be a redeclaration of a block scoped local in the following\n          // example:\n          //\n          //      function foo() {\n          //          var x;\n          //          let x;\n          //      }\n          //\n          // If we placed 'var x' into the function locals and 'let x' into the locals of\n          // the block, then there would be no collision.\n          //\n          // By not creating a new block-scoped-container here, we ensure that both 'var x'\n          // and 'let x' go into the Function-container's locals, and we do get a collision\n          // conflict.\n          return ts.isFunctionLike(node.parent) ? 0\n          /* None */\n          : 2\n          /* IsBlockScopedContainer */\n          ;\n      }\n\n      return 0\n      /* None */\n      ;\n    }\n\n    function addToContainerChain(next) {\n      if (lastContainer) {\n        lastContainer.nextContainer = next;\n      }\n\n      lastContainer = next;\n    }\n\n    function declareSymbolAndAddToSymbolTable(node, symbolFlags, symbolExcludes) {\n      // Just call this directly so that the return type of this function stays \"void\".\n      declareSymbolAndAddToSymbolTableWorker(node, symbolFlags, symbolExcludes);\n    }\n\n    function declareSymbolAndAddToSymbolTableWorker(node, symbolFlags, symbolExcludes) {\n      switch (container.kind) {\n        // Modules, source files, and classes need specialized handling for how their\n        // members are declared (for example, a member of a class will go into a specific\n        // symbol table depending on if it is static or not). We defer to specialized\n        // handlers to take care of declaring these child members.\n        case 221\n        /* ModuleDeclaration */\n        :\n          return declareModuleMember(node, symbolFlags, symbolExcludes);\n\n        case 251\n        /* SourceFile */\n        :\n          return declareSourceFileMember(node, symbolFlags, symbolExcludes);\n\n        case 189\n        /* ClassExpression */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n          return declareClassMember(node, symbolFlags, symbolExcludes);\n\n        case 220\n        /* EnumDeclaration */\n        :\n          return declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes);\n\n        case 156\n        /* TypeLiteral */\n        :\n        case 168\n        /* ObjectLiteralExpression */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 260\n        /* JSDocRecordType */\n        :\n          // Interface/Object-types always have their children added to the 'members' of\n          // their container. They are only accessible through an instance of their\n          // container, and are never in scope otherwise (even inside the body of the\n          // object / type / interface declaring them). An exception is type parameters,\n          // which are in scope without qualification (similar to 'locals').\n          return declareSymbol(container.symbol.members, container.symbol, node, symbolFlags, symbolExcludes);\n\n        case 153\n        /* FunctionType */\n        :\n        case 154\n        /* ConstructorType */\n        :\n        case 148\n        /* CallSignature */\n        :\n        case 149\n        /* ConstructSignature */\n        :\n        case 150\n        /* IndexSignature */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 145\n        /* Constructor */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n        case 264\n        /* JSDocFunctionType */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n          // All the children of these container types are never visible through another\n          // symbol (i.e. through another symbol's 'exports' or 'members').  Instead,\n          // they're only accessed 'lexically' (i.e. from code that exists underneath\n          // their container in the tree.  To accomplish this, we simply add their declared\n          // symbol to the 'locals' of the container.  These symbols can then be found as\n          // the type checker walks up the containers, checking them for matching names.\n          return declareSymbol(container.locals, undefined, node, symbolFlags, symbolExcludes);\n      }\n    }\n\n    function declareClassMember(node, symbolFlags, symbolExcludes) {\n      return node.flags & 64\n      /* Static */\n      ? declareSymbol(container.symbol.exports, container.symbol, node, symbolFlags, symbolExcludes) : declareSymbol(container.symbol.members, container.symbol, node, symbolFlags, symbolExcludes);\n    }\n\n    function declareSourceFileMember(node, symbolFlags, symbolExcludes) {\n      return ts.isExternalModule(file) ? declareModuleMember(node, symbolFlags, symbolExcludes) : declareSymbol(file.locals, undefined, node, symbolFlags, symbolExcludes);\n    }\n\n    function hasExportDeclarations(node) {\n      var body = node.kind === 251\n      /* SourceFile */\n      ? node : node.body;\n\n      if (body.kind === 251\n      /* SourceFile */\n      || body.kind === 222\n      /* ModuleBlock */\n      ) {\n          for (var _i = 0, _a = body.statements; _i < _a.length; _i++) {\n            var stat = _a[_i];\n\n            if (stat.kind === 231\n            /* ExportDeclaration */\n            || stat.kind === 230\n            /* ExportAssignment */\n            ) {\n                return true;\n              }\n          }\n        }\n\n      return false;\n    }\n\n    function setExportContextFlag(node) {\n      // A declaration source file or ambient module declaration that contains no export declarations (but possibly regular\n      // declarations with export modifiers) is an export context in which declarations are implicitly exported.\n      if (ts.isInAmbientContext(node) && !hasExportDeclarations(node)) {\n        node.flags |= 131072\n        /* ExportContext */\n        ;\n      } else {\n        node.flags &= ~131072\n        /* ExportContext */\n        ;\n      }\n    }\n\n    function bindModuleDeclaration(node) {\n      setExportContextFlag(node);\n\n      if (ts.isAmbientModule(node)) {\n        if (node.flags & 2\n        /* Export */\n        ) {\n            errorOnFirstToken(node, ts.Diagnostics.export_modifier_cannot_be_applied_to_ambient_modules_and_module_augmentations_since_they_are_always_visible);\n          }\n\n        declareSymbolAndAddToSymbolTable(node, 512\n        /* ValueModule */\n        , 106639\n        /* ValueModuleExcludes */\n        );\n      } else {\n        var state = getModuleInstanceState(node);\n\n        if (state === 0\n        /* NonInstantiated */\n        ) {\n            declareSymbolAndAddToSymbolTable(node, 1024\n            /* NamespaceModule */\n            , 0\n            /* NamespaceModuleExcludes */\n            );\n          } else {\n          declareSymbolAndAddToSymbolTable(node, 512\n          /* ValueModule */\n          , 106639\n          /* ValueModuleExcludes */\n          );\n\n          if (node.symbol.flags & (16\n          /* Function */\n          | 32\n          /* Class */\n          | 256\n          /* RegularEnum */\n          )) {\n            // if module was already merged with some function, class or non-const enum\n            // treat is a non-const-enum-only\n            node.symbol.constEnumOnlyModule = false;\n          } else {\n            var currentModuleIsConstEnumOnly = state === 2\n            /* ConstEnumOnly */\n            ;\n\n            if (node.symbol.constEnumOnlyModule === undefined) {\n              // non-merged case - use the current state\n              node.symbol.constEnumOnlyModule = currentModuleIsConstEnumOnly;\n            } else {\n              // merged case: module is const enum only if all its pieces are non-instantiated or const enum\n              node.symbol.constEnumOnlyModule = node.symbol.constEnumOnlyModule && currentModuleIsConstEnumOnly;\n            }\n          }\n        }\n      }\n    }\n\n    function bindFunctionOrConstructorType(node) {\n      // For a given function symbol \"<...>(...) => T\" we want to generate a symbol identical\n      // to the one we would get for: { <...>(...): T }\n      //\n      // We do that by making an anonymous type literal symbol, and then setting the function\n      // symbol as its sole member. To the rest of the system, this symbol will be  indistinguishable\n      // from an actual type literal symbol you would have gotten had you used the long form.\n      var symbol = createSymbol(131072\n      /* Signature */\n      , getDeclarationName(node));\n      addDeclarationToSymbol(symbol, node, 131072\n      /* Signature */\n      );\n      var typeLiteralSymbol = createSymbol(2048\n      /* TypeLiteral */\n      , \"__type\");\n      addDeclarationToSymbol(typeLiteralSymbol, node, 2048\n      /* TypeLiteral */\n      );\n      typeLiteralSymbol.members = (_a = {}, _a[symbol.name] = symbol, _a);\n\n      var _a;\n    }\n\n    function bindObjectLiteralExpression(node) {\n      var ElementKind;\n\n      (function (ElementKind) {\n        ElementKind[ElementKind[\"Property\"] = 1] = \"Property\";\n        ElementKind[ElementKind[\"Accessor\"] = 2] = \"Accessor\";\n      })(ElementKind || (ElementKind = {}));\n\n      if (inStrictMode) {\n        var seen = {};\n\n        for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {\n          var prop = _a[_i];\n\n          if (prop.name.kind !== 69\n          /* Identifier */\n          ) {\n              continue;\n            }\n\n          var identifier = prop.name; // ECMA-262 11.1.5 Object Initialiser\n          // If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true\n          // a.This production is contained in strict code and IsDataDescriptor(previous) is true and\n          // IsDataDescriptor(propId.descriptor) is true.\n          //    b.IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.\n          //    c.IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.\n          //    d.IsAccessorDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true\n          // and either both previous and propId.descriptor have[[Get]] fields or both previous and propId.descriptor have[[Set]] fields\n\n          var currentKind = prop.kind === 248\n          /* PropertyAssignment */\n          || prop.kind === 249\n          /* ShorthandPropertyAssignment */\n          || prop.kind === 144\n          /* MethodDeclaration */\n          ? 1\n          /* Property */\n          : 2\n          /* Accessor */\n          ;\n          var existingKind = seen[identifier.text];\n\n          if (!existingKind) {\n            seen[identifier.text] = currentKind;\n            continue;\n          }\n\n          if (currentKind === 1\n          /* Property */\n          && existingKind === 1\n          /* Property */\n          ) {\n              var span = ts.getErrorSpanForNode(file, identifier);\n              file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, ts.Diagnostics.An_object_literal_cannot_have_multiple_properties_with_the_same_name_in_strict_mode));\n            }\n        }\n      }\n\n      return bindAnonymousDeclaration(node, 4096\n      /* ObjectLiteral */\n      , \"__object\");\n    }\n\n    function bindAnonymousDeclaration(node, symbolFlags, name) {\n      var symbol = createSymbol(symbolFlags, name);\n      addDeclarationToSymbol(symbol, node, symbolFlags);\n    }\n\n    function bindBlockScopedDeclaration(node, symbolFlags, symbolExcludes) {\n      switch (blockScopeContainer.kind) {\n        case 221\n        /* ModuleDeclaration */\n        :\n          declareModuleMember(node, symbolFlags, symbolExcludes);\n          break;\n\n        case 251\n        /* SourceFile */\n        :\n          if (ts.isExternalModule(container)) {\n            declareModuleMember(node, symbolFlags, symbolExcludes);\n            break;\n          }\n\n        // fall through.\n\n        default:\n          if (!blockScopeContainer.locals) {\n            blockScopeContainer.locals = {};\n            addToContainerChain(blockScopeContainer);\n          }\n\n          declareSymbol(blockScopeContainer.locals, undefined, node, symbolFlags, symbolExcludes);\n      }\n    }\n\n    function bindBlockScopedVariableDeclaration(node) {\n      bindBlockScopedDeclaration(node, 2\n      /* BlockScopedVariable */\n      , 107455\n      /* BlockScopedVariableExcludes */\n      );\n    } // The binder visits every node in the syntax tree so it is a convenient place to perform a single localized\n    // check for reserved words used as identifiers in strict mode code.\n\n\n    function checkStrictModeIdentifier(node) {\n      if (inStrictMode && node.originalKeywordKind >= 106\n      /* FirstFutureReservedWord */\n      && node.originalKeywordKind <= 114\n      /* LastFutureReservedWord */\n      && !ts.isIdentifierName(node)) {\n        // Report error only if there are no parse errors in file\n        if (!file.parseDiagnostics.length) {\n          file.bindDiagnostics.push(ts.createDiagnosticForNode(node, getStrictModeIdentifierMessage(node), ts.declarationNameToString(node)));\n        }\n      }\n    }\n\n    function getStrictModeIdentifierMessage(node) {\n      // Provide specialized messages to help the user understand why we think they're in\n      // strict mode.\n      if (ts.getContainingClass(node)) {\n        return ts.Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Class_definitions_are_automatically_in_strict_mode;\n      }\n\n      if (file.externalModuleIndicator) {\n        return ts.Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode_Modules_are_automatically_in_strict_mode;\n      }\n\n      return ts.Diagnostics.Identifier_expected_0_is_a_reserved_word_in_strict_mode;\n    }\n\n    function checkStrictModeBinaryExpression(node) {\n      if (inStrictMode && ts.isLeftHandSideExpression(node.left) && ts.isAssignmentOperator(node.operatorToken.kind)) {\n        // ECMA 262 (Annex C) The identifier eval or arguments may not appear as the LeftHandSideExpression of an\n        // Assignment operator(11.13) or of a PostfixExpression(11.3)\n        checkStrictModeEvalOrArguments(node, node.left);\n      }\n    }\n\n    function checkStrictModeCatchClause(node) {\n      // It is a SyntaxError if a TryStatement with a Catch occurs within strict code and the Identifier of the\n      // Catch production is eval or arguments\n      if (inStrictMode && node.variableDeclaration) {\n        checkStrictModeEvalOrArguments(node, node.variableDeclaration.name);\n      }\n    }\n\n    function checkStrictModeDeleteExpression(node) {\n      // Grammar checking\n      if (inStrictMode && node.expression.kind === 69\n      /* Identifier */\n      ) {\n          // When a delete operator occurs within strict mode code, a SyntaxError is thrown if its\n          // UnaryExpression is a direct reference to a variable, function argument, or function name\n          var span = ts.getErrorSpanForNode(file, node.expression);\n          file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, ts.Diagnostics.delete_cannot_be_called_on_an_identifier_in_strict_mode));\n        }\n    }\n\n    function isEvalOrArgumentsIdentifier(node) {\n      return node.kind === 69\n      /* Identifier */\n      && (node.text === \"eval\" || node.text === \"arguments\");\n    }\n\n    function checkStrictModeEvalOrArguments(contextNode, name) {\n      if (name && name.kind === 69\n      /* Identifier */\n      ) {\n          var identifier = name;\n\n          if (isEvalOrArgumentsIdentifier(identifier)) {\n            // We check first if the name is inside class declaration or class expression; if so give explicit message\n            // otherwise report generic error message.\n            var span = ts.getErrorSpanForNode(file, name);\n            file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, getStrictModeEvalOrArgumentsMessage(contextNode), identifier.text));\n          }\n        }\n    }\n\n    function getStrictModeEvalOrArgumentsMessage(node) {\n      // Provide specialized messages to help the user understand why we think they're in\n      // strict mode.\n      if (ts.getContainingClass(node)) {\n        return ts.Diagnostics.Invalid_use_of_0_Class_definitions_are_automatically_in_strict_mode;\n      }\n\n      if (file.externalModuleIndicator) {\n        return ts.Diagnostics.Invalid_use_of_0_Modules_are_automatically_in_strict_mode;\n      }\n\n      return ts.Diagnostics.Invalid_use_of_0_in_strict_mode;\n    }\n\n    function checkStrictModeFunctionName(node) {\n      if (inStrictMode) {\n        // It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a strict mode FunctionDeclaration or FunctionExpression (13.1))\n        checkStrictModeEvalOrArguments(node, node.name);\n      }\n    }\n\n    function checkStrictModeNumericLiteral(node) {\n      if (inStrictMode && node.flags & 32768\n      /* OctalLiteral */\n      ) {\n          file.bindDiagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.Octal_literals_are_not_allowed_in_strict_mode));\n        }\n    }\n\n    function checkStrictModePostfixUnaryExpression(node) {\n      // Grammar checking\n      // The identifier eval or arguments may not appear as the LeftHandSideExpression of an\n      // Assignment operator(11.13) or of a PostfixExpression(11.3) or as the UnaryExpression\n      // operated upon by a Prefix Increment(11.4.4) or a Prefix Decrement(11.4.5) operator.\n      if (inStrictMode) {\n        checkStrictModeEvalOrArguments(node, node.operand);\n      }\n    }\n\n    function checkStrictModePrefixUnaryExpression(node) {\n      // Grammar checking\n      if (inStrictMode) {\n        if (node.operator === 41\n        /* PlusPlusToken */\n        || node.operator === 42\n        /* MinusMinusToken */\n        ) {\n            checkStrictModeEvalOrArguments(node, node.operand);\n          }\n      }\n    }\n\n    function checkStrictModeWithStatement(node) {\n      // Grammar checking for withStatement\n      if (inStrictMode) {\n        errorOnFirstToken(node, ts.Diagnostics.with_statements_are_not_allowed_in_strict_mode);\n      }\n    }\n\n    function errorOnFirstToken(node, message, arg0, arg1, arg2) {\n      var span = ts.getSpanOfTokenAtPosition(file, node.pos);\n      file.bindDiagnostics.push(ts.createFileDiagnostic(file, span.start, span.length, message, arg0, arg1, arg2));\n    }\n\n    function getDestructuringParameterName(node) {\n      return \"__\" + ts.indexOf(node.parent.parameters, node);\n    }\n\n    function bind(node) {\n      if (!node) {\n        return;\n      }\n\n      node.parent = parent;\n      var savedInStrictMode = inStrictMode;\n\n      if (!savedInStrictMode) {\n        updateStrictMode(node);\n      } // First we bind declaration nodes to a symbol if possible.  We'll both create a symbol\n      // and then potentially add the symbol to an appropriate symbol table. Possible\n      // destination symbol tables are:\n      //\n      //  1) The 'exports' table of the current container's symbol.\n      //  2) The 'members' table of the current container's symbol.\n      //  3) The 'locals' table of the current container.\n      //\n      // However, not all symbols will end up in any of these tables.  'Anonymous' symbols\n      // (like TypeLiterals for example) will not be put in any table.\n\n\n      bindWorker(node); // Then we recurse into the children of the node to bind them as well.  For certain\n      // symbols we do specialized work when we recurse.  For example, we'll keep track of\n      // the current 'container' node when it changes.  This helps us know which symbol table\n      // a local should go into for example.\n\n      bindChildren(node);\n      inStrictMode = savedInStrictMode;\n    }\n\n    function updateStrictMode(node) {\n      switch (node.kind) {\n        case 251\n        /* SourceFile */\n        :\n        case 222\n        /* ModuleBlock */\n        :\n          updateStrictModeStatementList(node.statements);\n          return;\n\n        case 195\n        /* Block */\n        :\n          if (ts.isFunctionLike(node.parent)) {\n            updateStrictModeStatementList(node.statements);\n          }\n\n          return;\n\n        case 217\n        /* ClassDeclaration */\n        :\n        case 189\n        /* ClassExpression */\n        :\n          // All classes are automatically in strict mode in ES6.\n          inStrictMode = true;\n          return;\n      }\n    }\n\n    function updateStrictModeStatementList(statements) {\n      for (var _i = 0, statements_1 = statements; _i < statements_1.length; _i++) {\n        var statement = statements_1[_i];\n\n        if (!ts.isPrologueDirective(statement)) {\n          return;\n        }\n\n        if (isUseStrictPrologueDirective(statement)) {\n          inStrictMode = true;\n          return;\n        }\n      }\n    } /// Should be called only on prologue directives (isPrologueDirective(node) should be true)\n\n\n    function isUseStrictPrologueDirective(node) {\n      var nodeText = ts.getTextOfNodeFromSourceText(file.text, node.expression); // Note: the node text must be exactly \"use strict\" or 'use strict'.  It is not ok for the\n      // string to contain unicode escapes (as per ES5).\n\n      return nodeText === \"\\\"use strict\\\"\" || nodeText === \"'use strict'\";\n    }\n\n    function bindWorker(node) {\n      switch (node.kind) {\n        /* Strict mode checks */\n        case 69\n        /* Identifier */\n        :\n          return checkStrictModeIdentifier(node);\n\n        case 184\n        /* BinaryExpression */\n        :\n          if (ts.isInJavaScriptFile(node)) {\n            var specialKind = ts.getSpecialPropertyAssignmentKind(node);\n\n            switch (specialKind) {\n              case 1\n              /* ExportsProperty */\n              :\n                bindExportsPropertyAssignment(node);\n                break;\n\n              case 2\n              /* ModuleExports */\n              :\n                bindModuleExportsAssignment(node);\n                break;\n\n              case 3\n              /* PrototypeProperty */\n              :\n                bindPrototypePropertyAssignment(node);\n                break;\n\n              case 4\n              /* ThisProperty */\n              :\n                bindThisPropertyAssignment(node);\n                break;\n\n              case 0\n              /* None */\n              :\n                // Nothing to do\n                break;\n\n              default:\n                ts.Debug.fail(\"Unknown special property assignment kind\");\n            }\n          }\n\n          return checkStrictModeBinaryExpression(node);\n\n        case 247\n        /* CatchClause */\n        :\n          return checkStrictModeCatchClause(node);\n\n        case 178\n        /* DeleteExpression */\n        :\n          return checkStrictModeDeleteExpression(node);\n\n        case 8\n        /* NumericLiteral */\n        :\n          return checkStrictModeNumericLiteral(node);\n\n        case 183\n        /* PostfixUnaryExpression */\n        :\n          return checkStrictModePostfixUnaryExpression(node);\n\n        case 182\n        /* PrefixUnaryExpression */\n        :\n          return checkStrictModePrefixUnaryExpression(node);\n\n        case 208\n        /* WithStatement */\n        :\n          return checkStrictModeWithStatement(node);\n\n        case 162\n        /* ThisType */\n        :\n          seenThisKeyword = true;\n          return;\n\n        case 151\n        /* TypePredicate */\n        :\n          return checkTypePredicate(node);\n\n        case 138\n        /* TypeParameter */\n        :\n          return declareSymbolAndAddToSymbolTable(node, 262144\n          /* TypeParameter */\n          , 530912\n          /* TypeParameterExcludes */\n          );\n\n        case 139\n        /* Parameter */\n        :\n          return bindParameter(node);\n\n        case 214\n        /* VariableDeclaration */\n        :\n        case 166\n        /* BindingElement */\n        :\n          return bindVariableDeclarationOrBindingElement(node);\n\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n        case 261\n        /* JSDocRecordMember */\n        :\n          return bindPropertyOrMethodOrAccessor(node, 4\n          /* Property */\n          | (node.questionToken ? 536870912\n          /* Optional */\n          : 0\n          /* None */\n          ), 107455\n          /* PropertyExcludes */\n          );\n\n        case 248\n        /* PropertyAssignment */\n        :\n        case 249\n        /* ShorthandPropertyAssignment */\n        :\n          return bindPropertyOrMethodOrAccessor(node, 4\n          /* Property */\n          , 107455\n          /* PropertyExcludes */\n          );\n\n        case 250\n        /* EnumMember */\n        :\n          return bindPropertyOrMethodOrAccessor(node, 8\n          /* EnumMember */\n          , 107455\n          /* EnumMemberExcludes */\n          );\n\n        case 242\n        /* JsxSpreadAttribute */\n        :\n          hasJsxSpreadAttribute = true;\n          return;\n\n        case 148\n        /* CallSignature */\n        :\n        case 149\n        /* ConstructSignature */\n        :\n        case 150\n        /* IndexSignature */\n        :\n          return declareSymbolAndAddToSymbolTable(node, 131072\n          /* Signature */\n          , 0\n          /* None */\n          );\n\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n          // If this is an ObjectLiteralExpression method, then it sits in the same space\n          // as other properties in the object literal.  So we use SymbolFlags.PropertyExcludes\n          // so that it will conflict with any other object literal members with the same\n          // name.\n          return bindPropertyOrMethodOrAccessor(node, 8192\n          /* Method */\n          | (node.questionToken ? 536870912\n          /* Optional */\n          : 0\n          /* None */\n          ), ts.isObjectLiteralMethod(node) ? 107455\n          /* PropertyExcludes */\n          : 99263\n          /* MethodExcludes */\n          );\n\n        case 216\n        /* FunctionDeclaration */\n        :\n          return bindFunctionDeclaration(node);\n\n        case 145\n        /* Constructor */\n        :\n          return declareSymbolAndAddToSymbolTable(node, 16384\n          /* Constructor */\n          ,\n          /*symbolExcludes:*/\n          0\n          /* None */\n          );\n\n        case 146\n        /* GetAccessor */\n        :\n          return bindPropertyOrMethodOrAccessor(node, 32768\n          /* GetAccessor */\n          , 41919\n          /* GetAccessorExcludes */\n          );\n\n        case 147\n        /* SetAccessor */\n        :\n          return bindPropertyOrMethodOrAccessor(node, 65536\n          /* SetAccessor */\n          , 74687\n          /* SetAccessorExcludes */\n          );\n\n        case 153\n        /* FunctionType */\n        :\n        case 154\n        /* ConstructorType */\n        :\n        case 264\n        /* JSDocFunctionType */\n        :\n          return bindFunctionOrConstructorType(node);\n\n        case 156\n        /* TypeLiteral */\n        :\n        case 260\n        /* JSDocRecordType */\n        :\n          return bindAnonymousDeclaration(node, 2048\n          /* TypeLiteral */\n          , \"__type\");\n\n        case 168\n        /* ObjectLiteralExpression */\n        :\n          return bindObjectLiteralExpression(node);\n\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          return bindFunctionExpression(node);\n\n        case 171\n        /* CallExpression */\n        :\n          if (ts.isInJavaScriptFile(node)) {\n            bindCallExpression(node);\n          }\n\n          break;\n        // Members of classes, interfaces, and modules\n\n        case 189\n        /* ClassExpression */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n          return bindClassLikeDeclaration(node);\n\n        case 218\n        /* InterfaceDeclaration */\n        :\n          return bindBlockScopedDeclaration(node, 64\n          /* Interface */\n          , 792960\n          /* InterfaceExcludes */\n          );\n\n        case 219\n        /* TypeAliasDeclaration */\n        :\n          return bindBlockScopedDeclaration(node, 524288\n          /* TypeAlias */\n          , 793056\n          /* TypeAliasExcludes */\n          );\n\n        case 220\n        /* EnumDeclaration */\n        :\n          return bindEnumDeclaration(node);\n\n        case 221\n        /* ModuleDeclaration */\n        :\n          return bindModuleDeclaration(node);\n        // Imports and exports\n\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n        case 227\n        /* NamespaceImport */\n        :\n        case 229\n        /* ImportSpecifier */\n        :\n        case 233\n        /* ExportSpecifier */\n        :\n          return declareSymbolAndAddToSymbolTable(node, 8388608\n          /* Alias */\n          , 8388608\n          /* AliasExcludes */\n          );\n\n        case 226\n        /* ImportClause */\n        :\n          return bindImportClause(node);\n\n        case 231\n        /* ExportDeclaration */\n        :\n          return bindExportDeclaration(node);\n\n        case 230\n        /* ExportAssignment */\n        :\n          return bindExportAssignment(node);\n\n        case 251\n        /* SourceFile */\n        :\n          return bindSourceFileIfExternalModule();\n      }\n    }\n\n    function checkTypePredicate(node) {\n      var parameterName = node.parameterName,\n          type = node.type;\n\n      if (parameterName && parameterName.kind === 69\n      /* Identifier */\n      ) {\n          checkStrictModeIdentifier(parameterName);\n        }\n\n      if (parameterName && parameterName.kind === 162\n      /* ThisType */\n      ) {\n          seenThisKeyword = true;\n        }\n\n      bind(type);\n    }\n\n    function bindSourceFileIfExternalModule() {\n      setExportContextFlag(file);\n\n      if (ts.isExternalModule(file)) {\n        bindSourceFileAsExternalModule();\n      }\n    }\n\n    function bindSourceFileAsExternalModule() {\n      bindAnonymousDeclaration(file, 512\n      /* ValueModule */\n      , \"\\\"\" + ts.removeFileExtension(file.fileName) + \"\\\"\");\n    }\n\n    function bindExportAssignment(node) {\n      var boundExpression = node.kind === 230\n      /* ExportAssignment */\n      ? node.expression : node.right;\n\n      if (!container.symbol || !container.symbol.exports) {\n        // Export assignment in some sort of block construct\n        bindAnonymousDeclaration(node, 8388608\n        /* Alias */\n        , getDeclarationName(node));\n      } else if (boundExpression.kind === 69\n      /* Identifier */\n      && node.kind === 230\n      /* ExportAssignment */\n      ) {\n          // An export default clause with an identifier exports all meanings of that identifier\n          declareSymbol(container.symbol.exports, container.symbol, node, 8388608\n          /* Alias */\n          , 107455\n          /* PropertyExcludes */\n          | 8388608\n          /* AliasExcludes */\n          );\n        } else {\n        // An export default clause with an expression exports a value\n        declareSymbol(container.symbol.exports, container.symbol, node, 4\n        /* Property */\n        , 107455\n        /* PropertyExcludes */\n        | 8388608\n        /* AliasExcludes */\n        );\n      }\n    }\n\n    function bindExportDeclaration(node) {\n      if (!container.symbol || !container.symbol.exports) {\n        // Export * in some sort of block construct\n        bindAnonymousDeclaration(node, 1073741824\n        /* ExportStar */\n        , getDeclarationName(node));\n      } else if (!node.exportClause) {\n        // All export * declarations are collected in an __export symbol\n        declareSymbol(container.symbol.exports, container.symbol, node, 1073741824\n        /* ExportStar */\n        , 0\n        /* None */\n        );\n      }\n    }\n\n    function bindImportClause(node) {\n      if (node.name) {\n        declareSymbolAndAddToSymbolTable(node, 8388608\n        /* Alias */\n        , 8388608\n        /* AliasExcludes */\n        );\n      }\n    }\n\n    function setCommonJsModuleIndicator(node) {\n      if (!file.commonJsModuleIndicator) {\n        file.commonJsModuleIndicator = node;\n        bindSourceFileAsExternalModule();\n      }\n    }\n\n    function bindExportsPropertyAssignment(node) {\n      // When we create a property via 'exports.foo = bar', the 'exports.foo' property access\n      // expression is the declaration\n      setCommonJsModuleIndicator(node);\n      declareSymbol(file.symbol.exports, file.symbol, node.left, 4\n      /* Property */\n      | 7340032\n      /* Export */\n      , 0\n      /* None */\n      );\n    }\n\n    function bindModuleExportsAssignment(node) {\n      // 'module.exports = expr' assignment\n      setCommonJsModuleIndicator(node);\n      declareSymbol(file.symbol.exports, file.symbol, node, 4\n      /* Property */\n      | 7340032\n      /* Export */\n      | 512\n      /* ValueModule */\n      , 0\n      /* None */\n      );\n    }\n\n    function bindThisPropertyAssignment(node) {\n      // Declare a 'member' in case it turns out the container was an ES5 class\n      if (container.kind === 176\n      /* FunctionExpression */\n      || container.kind === 216\n      /* FunctionDeclaration */\n      ) {\n          container.symbol.members = container.symbol.members || {}; // It's acceptable for multiple 'this' assignments of the same identifier to occur\n\n          declareSymbol(container.symbol.members, container.symbol, node, 4\n          /* Property */\n          , 107455\n          /* PropertyExcludes */\n          & ~4\n          /* Property */\n          );\n        }\n    }\n\n    function bindPrototypePropertyAssignment(node) {\n      // We saw a node of the form 'x.prototype.y = z'. Declare a 'member' y on x if x was a function.\n      // Look up the function in the local scope, since prototype assignments should\n      // follow the function declaration\n      var leftSideOfAssignment = node.left;\n      var classPrototype = leftSideOfAssignment.expression;\n      var constructorFunction = classPrototype.expression; // Fix up parent pointers since we're going to use these nodes before we bind into them\n\n      leftSideOfAssignment.parent = node;\n      constructorFunction.parent = classPrototype;\n      classPrototype.parent = leftSideOfAssignment;\n      var funcSymbol = container.locals[constructorFunction.text];\n\n      if (!funcSymbol || !(funcSymbol.flags & 16\n      /* Function */\n      )) {\n        return;\n      } // Set up the members collection if it doesn't exist already\n\n\n      if (!funcSymbol.members) {\n        funcSymbol.members = {};\n      } // Declare the method/property\n      // It's acceptable for multiple prototype property assignments of the same identifier to occur\n\n\n      declareSymbol(funcSymbol.members, funcSymbol, leftSideOfAssignment, 4\n      /* Property */\n      , 107455\n      /* PropertyExcludes */\n      & ~4\n      /* Property */\n      );\n    }\n\n    function bindCallExpression(node) {\n      // We're only inspecting call expressions to detect CommonJS modules, so we can skip\n      // this check if we've already seen the module indicator\n      if (!file.commonJsModuleIndicator && ts.isRequireCall(node,\n      /*checkArgumentIsStringLiteral*/\n      false)) {\n        setCommonJsModuleIndicator(node);\n      }\n    }\n\n    function bindClassLikeDeclaration(node) {\n      if (!ts.isDeclarationFile(file) && !ts.isInAmbientContext(node)) {\n        if (ts.getClassExtendsHeritageClauseElement(node) !== undefined) {\n          hasClassExtends = true;\n        }\n\n        if (ts.nodeIsDecorated(node)) {\n          hasDecorators = true;\n        }\n      }\n\n      if (node.kind === 217\n      /* ClassDeclaration */\n      ) {\n          bindBlockScopedDeclaration(node, 32\n          /* Class */\n          , 899519\n          /* ClassExcludes */\n          );\n        } else {\n        var bindingName = node.name ? node.name.text : \"__class\";\n        bindAnonymousDeclaration(node, 32\n        /* Class */\n        , bindingName); // Add name of class expression into the map for semantic classifier\n\n        if (node.name) {\n          classifiableNames[node.name.text] = node.name.text;\n        }\n      }\n\n      var symbol = node.symbol; // TypeScript 1.0 spec (April 2014): 8.4\n      // Every class automatically contains a static property member named 'prototype', the\n      // type of which is an instantiation of the class type with type Any supplied as a type\n      // argument for each type parameter. It is an error to explicitly declare a static\n      // property member with the name 'prototype'.\n      //\n      // Note: we check for this here because this class may be merging into a module.  The\n      // module might have an exported variable called 'prototype'.  We can't allow that as\n      // that would clash with the built-in 'prototype' for the class.\n\n      var prototypeSymbol = createSymbol(4\n      /* Property */\n      | 134217728\n      /* Prototype */\n      , \"prototype\");\n\n      if (ts.hasProperty(symbol.exports, prototypeSymbol.name)) {\n        if (node.name) {\n          node.name.parent = node;\n        }\n\n        file.bindDiagnostics.push(ts.createDiagnosticForNode(symbol.exports[prototypeSymbol.name].declarations[0], ts.Diagnostics.Duplicate_identifier_0, prototypeSymbol.name));\n      }\n\n      symbol.exports[prototypeSymbol.name] = prototypeSymbol;\n      prototypeSymbol.parent = symbol;\n    }\n\n    function bindEnumDeclaration(node) {\n      return ts.isConst(node) ? bindBlockScopedDeclaration(node, 128\n      /* ConstEnum */\n      , 899967\n      /* ConstEnumExcludes */\n      ) : bindBlockScopedDeclaration(node, 256\n      /* RegularEnum */\n      , 899327\n      /* RegularEnumExcludes */\n      );\n    }\n\n    function bindVariableDeclarationOrBindingElement(node) {\n      if (inStrictMode) {\n        checkStrictModeEvalOrArguments(node, node.name);\n      }\n\n      if (!ts.isBindingPattern(node.name)) {\n        if (ts.isBlockOrCatchScoped(node)) {\n          bindBlockScopedVariableDeclaration(node);\n        } else if (ts.isParameterDeclaration(node)) {\n          // It is safe to walk up parent chain to find whether the node is a destructing parameter declaration\n          // because its parent chain has already been set up, since parents are set before descending into children.\n          //\n          // If node is a binding element in parameter declaration, we need to use ParameterExcludes.\n          // Using ParameterExcludes flag allows the compiler to report an error on duplicate identifiers in Parameter Declaration\n          // For example:\n          //      function foo([a,a]) {} // Duplicate Identifier error\n          //      function bar(a,a) {}   // Duplicate Identifier error, parameter declaration in this case is handled in bindParameter\n          //                             // which correctly set excluded symbols\n          declareSymbolAndAddToSymbolTable(node, 1\n          /* FunctionScopedVariable */\n          , 107455\n          /* ParameterExcludes */\n          );\n        } else {\n          declareSymbolAndAddToSymbolTable(node, 1\n          /* FunctionScopedVariable */\n          , 107454\n          /* FunctionScopedVariableExcludes */\n          );\n        }\n      }\n    }\n\n    function bindParameter(node) {\n      if (!ts.isDeclarationFile(file) && !ts.isInAmbientContext(node) && ts.nodeIsDecorated(node)) {\n        hasDecorators = true;\n        hasParameterDecorators = true;\n      }\n\n      if (inStrictMode) {\n        // It is a SyntaxError if the identifier eval or arguments appears within a FormalParameterList of a\n        // strict mode FunctionLikeDeclaration or FunctionExpression(13.1)\n        checkStrictModeEvalOrArguments(node, node.name);\n      }\n\n      if (ts.isBindingPattern(node.name)) {\n        bindAnonymousDeclaration(node, 1\n        /* FunctionScopedVariable */\n        , getDestructuringParameterName(node));\n      } else {\n        declareSymbolAndAddToSymbolTable(node, 1\n        /* FunctionScopedVariable */\n        , 107455\n        /* ParameterExcludes */\n        );\n      } // If this is a property-parameter, then also declare the property symbol into the\n      // containing class.\n\n\n      if (ts.isParameterPropertyDeclaration(node)) {\n        var classDeclaration = node.parent.parent;\n        declareSymbol(classDeclaration.symbol.members, classDeclaration.symbol, node, 4\n        /* Property */\n        , 107455\n        /* PropertyExcludes */\n        );\n      }\n    }\n\n    function bindFunctionDeclaration(node) {\n      if (!ts.isDeclarationFile(file) && !ts.isInAmbientContext(node)) {\n        if (ts.isAsyncFunctionLike(node)) {\n          hasAsyncFunctions = true;\n        }\n      }\n\n      checkStrictModeFunctionName(node);\n      return declareSymbolAndAddToSymbolTable(node, 16\n      /* Function */\n      , 106927\n      /* FunctionExcludes */\n      );\n    }\n\n    function bindFunctionExpression(node) {\n      if (!ts.isDeclarationFile(file) && !ts.isInAmbientContext(node)) {\n        if (ts.isAsyncFunctionLike(node)) {\n          hasAsyncFunctions = true;\n        }\n      }\n\n      checkStrictModeFunctionName(node);\n      var bindingName = node.name ? node.name.text : \"__function\";\n      return bindAnonymousDeclaration(node, 16\n      /* Function */\n      , bindingName);\n    }\n\n    function bindPropertyOrMethodOrAccessor(node, symbolFlags, symbolExcludes) {\n      if (!ts.isDeclarationFile(file) && !ts.isInAmbientContext(node)) {\n        if (ts.isAsyncFunctionLike(node)) {\n          hasAsyncFunctions = true;\n        }\n\n        if (ts.nodeIsDecorated(node)) {\n          hasDecorators = true;\n        }\n      }\n\n      return ts.hasDynamicName(node) ? bindAnonymousDeclaration(node, symbolFlags, \"__computed\") : declareSymbolAndAddToSymbolTable(node, symbolFlags, symbolExcludes);\n    } // reachability checks\n\n\n    function pushNamedLabel(name) {\n      initializeReachabilityStateIfNecessary();\n\n      if (ts.hasProperty(labelIndexMap, name.text)) {\n        return false;\n      }\n\n      labelIndexMap[name.text] = labelStack.push(1\n      /* Unintialized */\n      ) - 1;\n      return true;\n    }\n\n    function pushImplicitLabel() {\n      initializeReachabilityStateIfNecessary();\n      var index = labelStack.push(1\n      /* Unintialized */\n      ) - 1;\n      implicitLabels.push(index);\n      return index;\n    }\n\n    function popNamedLabel(label, outerState) {\n      var index = labelIndexMap[label.text];\n      ts.Debug.assert(index !== undefined);\n      ts.Debug.assert(labelStack.length == index + 1);\n      labelIndexMap[label.text] = undefined;\n      setCurrentStateAtLabel(labelStack.pop(), outerState, label);\n    }\n\n    function popImplicitLabel(implicitLabelIndex, outerState) {\n      if (labelStack.length !== implicitLabelIndex + 1) {\n        ts.Debug.assert(false, \"Label stack: \" + labelStack.length + \", index:\" + implicitLabelIndex);\n      }\n\n      var i = implicitLabels.pop();\n\n      if (implicitLabelIndex !== i) {\n        ts.Debug.assert(false, \"i: \" + i + \", index: \" + implicitLabelIndex);\n      }\n\n      setCurrentStateAtLabel(labelStack.pop(), outerState,\n      /*name*/\n      undefined);\n    }\n\n    function setCurrentStateAtLabel(innerMergedState, outerState, label) {\n      if (innerMergedState === 1\n      /* Unintialized */\n      ) {\n          if (label && !options.allowUnusedLabels) {\n            file.bindDiagnostics.push(ts.createDiagnosticForNode(label, ts.Diagnostics.Unused_label));\n          }\n\n          currentReachabilityState = outerState;\n        } else {\n        currentReachabilityState = or(innerMergedState, outerState);\n      }\n    }\n\n    function jumpToLabel(label, outerState) {\n      initializeReachabilityStateIfNecessary();\n      var index = label ? labelIndexMap[label.text] : ts.lastOrUndefined(implicitLabels);\n\n      if (index === undefined) {\n        // reference to unknown label or\n        // break/continue used outside of loops\n        return false;\n      }\n\n      var stateAtLabel = labelStack[index];\n      labelStack[index] = stateAtLabel === 1\n      /* Unintialized */\n      ? outerState : or(stateAtLabel, outerState);\n      return true;\n    }\n\n    function checkUnreachable(node) {\n      switch (currentReachabilityState) {\n        case 4\n        /* Unreachable */\n        :\n          var reportError = // report error on all statements except empty ones\n          ts.isStatement(node) && node.kind !== 197\n          /* EmptyStatement */\n          || // report error on class declarations\n          node.kind === 217\n          /* ClassDeclaration */\n          || // report error on instantiated modules or const-enums only modules if preserveConstEnums is set\n          node.kind === 221\n          /* ModuleDeclaration */\n          && shouldReportErrorOnModuleDeclaration(node) || // report error on regular enums and const enums if preserveConstEnums is set\n          node.kind === 220\n          /* EnumDeclaration */\n          && (!ts.isConstEnumDeclaration(node) || options.preserveConstEnums);\n\n          if (reportError) {\n            currentReachabilityState = 8\n            /* ReportedUnreachable */\n            ; // unreachable code is reported if\n            // - user has explicitly asked about it AND\n            // - statement is in not ambient context (statements in ambient context is already an error\n            //   so we should not report extras) AND\n            //   - node is not variable statement OR\n            //   - node is block scoped variable statement OR\n            //   - node is not block scoped variable statement and at least one variable declaration has initializer\n            //   Rationale: we don't want to report errors on non-initialized var's since they are hoisted\n            //   On the other side we do want to report errors on non-initialized 'lets' because of TDZ\n\n            var reportUnreachableCode = !options.allowUnreachableCode && !ts.isInAmbientContext(node) && (node.kind !== 196\n            /* VariableStatement */\n            || ts.getCombinedNodeFlags(node.declarationList) & 24576\n            /* BlockScoped */\n            || ts.forEach(node.declarationList.declarations, function (d) {\n              return d.initializer;\n            }));\n\n            if (reportUnreachableCode) {\n              errorOnFirstToken(node, ts.Diagnostics.Unreachable_code_detected);\n            }\n          }\n\n        case 8\n        /* ReportedUnreachable */\n        :\n          return true;\n\n        default:\n          return false;\n      }\n\n      function shouldReportErrorOnModuleDeclaration(node) {\n        var instanceState = getModuleInstanceState(node);\n        return instanceState === 1\n        /* Instantiated */\n        || instanceState === 2\n        /* ConstEnumOnly */\n        && options.preserveConstEnums;\n      }\n    }\n\n    function initializeReachabilityStateIfNecessary() {\n      if (labelIndexMap) {\n        return;\n      }\n\n      currentReachabilityState = 2\n      /* Reachable */\n      ;\n      labelIndexMap = {};\n      labelStack = [];\n      implicitLabels = [];\n    }\n  }\n})(ts || (ts = {})); /// <reference path=\"binder.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var nextSymbolId = 1;\n  var nextNodeId = 1;\n  var nextMergeId = 1;\n\n  function getNodeId(node) {\n    if (!node.id) {\n      node.id = nextNodeId;\n      nextNodeId++;\n    }\n\n    return node.id;\n  }\n\n  ts.getNodeId = getNodeId;\n  ts.checkTime = 0;\n\n  function getSymbolId(symbol) {\n    if (!symbol.id) {\n      symbol.id = nextSymbolId;\n      nextSymbolId++;\n    }\n\n    return symbol.id;\n  }\n\n  ts.getSymbolId = getSymbolId;\n\n  function createTypeChecker(host, produceDiagnostics) {\n    // Cancellation that controls whether or not we can cancel in the middle of type checking.\n    // In general cancelling is *not* safe for the type checker.  We might be in the middle of\n    // computing something, and we will leave our internals in an inconsistent state.  Callers\n    // who set the cancellation token should catch if a cancellation exception occurs, and\n    // should throw away and create a new TypeChecker.\n    //\n    // Currently we only support setting the cancellation token when getting diagnostics.  This\n    // is because diagnostics can be quite expensive, and we want to allow hosts to bail out if\n    // they no longer need the information (for example, if the user started editing again).\n    var cancellationToken;\n    var Symbol = ts.objectAllocator.getSymbolConstructor();\n    var Type = ts.objectAllocator.getTypeConstructor();\n    var Signature = ts.objectAllocator.getSignatureConstructor();\n    var typeCount = 0;\n    var symbolCount = 0;\n    var emptyArray = [];\n    var emptySymbols = {};\n    var compilerOptions = host.getCompilerOptions();\n    var languageVersion = compilerOptions.target || 0\n    /* ES3 */\n    ;\n    var modulekind = ts.getEmitModuleKind(compilerOptions);\n    var allowSyntheticDefaultImports = typeof compilerOptions.allowSyntheticDefaultImports !== \"undefined\" ? compilerOptions.allowSyntheticDefaultImports : modulekind === 4\n    /* System */\n    ;\n    var emitResolver = createResolver();\n    var undefinedSymbol = createSymbol(4\n    /* Property */\n    | 67108864\n    /* Transient */\n    , \"undefined\");\n    undefinedSymbol.declarations = [];\n    var argumentsSymbol = createSymbol(4\n    /* Property */\n    | 67108864\n    /* Transient */\n    , \"arguments\");\n    var checker = {\n      getNodeCount: function getNodeCount() {\n        return ts.sum(host.getSourceFiles(), \"nodeCount\");\n      },\n      getIdentifierCount: function getIdentifierCount() {\n        return ts.sum(host.getSourceFiles(), \"identifierCount\");\n      },\n      getSymbolCount: function getSymbolCount() {\n        return ts.sum(host.getSourceFiles(), \"symbolCount\") + symbolCount;\n      },\n      getTypeCount: function getTypeCount() {\n        return typeCount;\n      },\n      isUndefinedSymbol: function isUndefinedSymbol(symbol) {\n        return symbol === undefinedSymbol;\n      },\n      isArgumentsSymbol: function isArgumentsSymbol(symbol) {\n        return symbol === argumentsSymbol;\n      },\n      isUnknownSymbol: function isUnknownSymbol(symbol) {\n        return symbol === unknownSymbol;\n      },\n      getDiagnostics: getDiagnostics,\n      getGlobalDiagnostics: getGlobalDiagnostics,\n      // The language service will always care about the narrowed type of a symbol, because that is\n      // the type the language says the symbol should have.\n      getTypeOfSymbolAtLocation: getNarrowedTypeOfSymbol,\n      getSymbolsOfParameterPropertyDeclaration: getSymbolsOfParameterPropertyDeclaration,\n      getDeclaredTypeOfSymbol: getDeclaredTypeOfSymbol,\n      getPropertiesOfType: getPropertiesOfType,\n      getPropertyOfType: getPropertyOfType,\n      getSignaturesOfType: getSignaturesOfType,\n      getIndexTypeOfType: getIndexTypeOfType,\n      getBaseTypes: getBaseTypes,\n      getReturnTypeOfSignature: getReturnTypeOfSignature,\n      getSymbolsInScope: getSymbolsInScope,\n      getSymbolAtLocation: getSymbolAtLocation,\n      getShorthandAssignmentValueSymbol: getShorthandAssignmentValueSymbol,\n      getExportSpecifierLocalTargetSymbol: getExportSpecifierLocalTargetSymbol,\n      getTypeAtLocation: getTypeOfNode,\n      typeToString: typeToString,\n      getSymbolDisplayBuilder: getSymbolDisplayBuilder,\n      symbolToString: symbolToString,\n      getAugmentedPropertiesOfType: getAugmentedPropertiesOfType,\n      getRootSymbols: getRootSymbols,\n      getContextualType: getContextualType,\n      getFullyQualifiedName: getFullyQualifiedName,\n      getResolvedSignature: getResolvedSignature,\n      getConstantValue: getConstantValue,\n      isValidPropertyAccess: isValidPropertyAccess,\n      getSignatureFromDeclaration: getSignatureFromDeclaration,\n      isImplementationOfOverload: isImplementationOfOverload,\n      getAliasedSymbol: resolveAlias,\n      getEmitResolver: getEmitResolver,\n      getExportsOfModule: getExportsOfModuleAsArray,\n      getJsxElementAttributesType: getJsxElementAttributesType,\n      getJsxIntrinsicTagNames: getJsxIntrinsicTagNames,\n      isOptionalParameter: isOptionalParameter\n    };\n    var unknownSymbol = createSymbol(4\n    /* Property */\n    | 67108864\n    /* Transient */\n    , \"unknown\");\n    var resolvingSymbol = createSymbol(67108864\n    /* Transient */\n    , \"__resolving__\");\n    var anyType = createIntrinsicType(1\n    /* Any */\n    , \"any\");\n    var stringType = createIntrinsicType(2\n    /* String */\n    , \"string\");\n    var numberType = createIntrinsicType(4\n    /* Number */\n    , \"number\");\n    var booleanType = createIntrinsicType(8\n    /* Boolean */\n    , \"boolean\");\n    var esSymbolType = createIntrinsicType(16777216\n    /* ESSymbol */\n    , \"symbol\");\n    var voidType = createIntrinsicType(16\n    /* Void */\n    , \"void\");\n    var undefinedType = createIntrinsicType(32\n    /* Undefined */\n    | 2097152\n    /* ContainsUndefinedOrNull */\n    , \"undefined\");\n    var nullType = createIntrinsicType(64\n    /* Null */\n    | 2097152\n    /* ContainsUndefinedOrNull */\n    , \"null\");\n    var unknownType = createIntrinsicType(1\n    /* Any */\n    , \"unknown\");\n    var emptyObjectType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\n    var emptyUnionType = emptyObjectType;\n    var emptyGenericType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\n    emptyGenericType.instantiations = {};\n    var anyFunctionType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined); // The anyFunctionType contains the anyFunctionType by definition. The flag is further propagated\n    // in getPropagatingFlagsOfTypes, and it is checked in inferFromTypes.\n\n    anyFunctionType.flags |= 8388608\n    /* ContainsAnyFunctionType */\n    ;\n    var noConstraintType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\n    var anySignature = createSignature(undefined, undefined, emptyArray, anyType,\n    /*typePredicate*/\n    undefined, 0,\n    /*hasRestParameter*/\n    false,\n    /*hasStringLiterals*/\n    false);\n    var unknownSignature = createSignature(undefined, undefined, emptyArray, unknownType,\n    /*typePredicate*/\n    undefined, 0,\n    /*hasRestParameter*/\n    false,\n    /*hasStringLiterals*/\n    false);\n    var globals = {};\n    var globalESSymbolConstructorSymbol;\n    var getGlobalPromiseConstructorSymbol;\n    var globalObjectType;\n    var globalFunctionType;\n    var globalArrayType;\n    var globalStringType;\n    var globalNumberType;\n    var globalBooleanType;\n    var globalRegExpType;\n    var globalTemplateStringsArrayType;\n    var globalESSymbolType;\n    var globalIterableType;\n    var globalIteratorType;\n    var globalIterableIteratorType;\n    var anyArrayType;\n    var getGlobalClassDecoratorType;\n    var getGlobalParameterDecoratorType;\n    var getGlobalPropertyDecoratorType;\n    var getGlobalMethodDecoratorType;\n    var getGlobalTypedPropertyDescriptorType;\n    var getGlobalPromiseType;\n    var tryGetGlobalPromiseType;\n    var getGlobalPromiseLikeType;\n    var getInstantiatedGlobalPromiseLikeType;\n    var getGlobalPromiseConstructorLikeType;\n    var getGlobalThenableType;\n    var jsxElementClassType;\n    var deferredNodes;\n    var tupleTypes = {};\n    var unionTypes = {};\n    var intersectionTypes = {};\n    var stringLiteralTypes = {};\n    var resolutionTargets = [];\n    var resolutionResults = [];\n    var resolutionPropertyNames = [];\n    var mergedSymbols = [];\n    var symbolLinks = [];\n    var nodeLinks = [];\n    var potentialThisCollisions = [];\n    var awaitedTypeStack = [];\n    var diagnostics = ts.createDiagnosticCollection();\n    var primitiveTypeInfo = {\n      \"string\": {\n        type: stringType,\n        flags: 258\n        /* StringLike */\n\n      },\n      \"number\": {\n        type: numberType,\n        flags: 132\n        /* NumberLike */\n\n      },\n      \"boolean\": {\n        type: booleanType,\n        flags: 8\n        /* Boolean */\n\n      },\n      \"symbol\": {\n        type: esSymbolType,\n        flags: 16777216\n        /* ESSymbol */\n\n      },\n      \"undefined\": {\n        type: undefinedType,\n        flags: 2097152\n        /* ContainsUndefinedOrNull */\n\n      }\n    };\n    var jsxElementType;\n    /** Things we lazy load from the JSX namespace */\n\n    var jsxTypes = {};\n    var JsxNames = {\n      JSX: \"JSX\",\n      IntrinsicElements: \"IntrinsicElements\",\n      ElementClass: \"ElementClass\",\n      ElementAttributesPropertyNameContainer: \"ElementAttributesProperty\",\n      Element: \"Element\",\n      IntrinsicAttributes: \"IntrinsicAttributes\",\n      IntrinsicClassAttributes: \"IntrinsicClassAttributes\"\n    };\n    var subtypeRelation = {};\n    var assignableRelation = {};\n    var identityRelation = {}; // This is for caching the result of getSymbolDisplayBuilder. Do not access directly.\n\n    var _displayBuilder;\n\n    var TypeSystemPropertyName;\n\n    (function (TypeSystemPropertyName) {\n      TypeSystemPropertyName[TypeSystemPropertyName[\"Type\"] = 0] = \"Type\";\n      TypeSystemPropertyName[TypeSystemPropertyName[\"ResolvedBaseConstructorType\"] = 1] = \"ResolvedBaseConstructorType\";\n      TypeSystemPropertyName[TypeSystemPropertyName[\"DeclaredType\"] = 2] = \"DeclaredType\";\n      TypeSystemPropertyName[TypeSystemPropertyName[\"ResolvedReturnType\"] = 3] = \"ResolvedReturnType\";\n    })(TypeSystemPropertyName || (TypeSystemPropertyName = {}));\n\n    var builtinGlobals = (_a = {}, _a[undefinedSymbol.name] = undefinedSymbol, _a);\n    initializeTypeChecker();\n    return checker;\n\n    function getEmitResolver(sourceFile, cancellationToken) {\n      // Ensure we have all the type information in place for this file so that all the\n      // emitter questions of this resolver will return the right information.\n      getDiagnostics(sourceFile, cancellationToken);\n      return emitResolver;\n    }\n\n    function error(location, message, arg0, arg1, arg2) {\n      var diagnostic = location ? ts.createDiagnosticForNode(location, message, arg0, arg1, arg2) : ts.createCompilerDiagnostic(message, arg0, arg1, arg2);\n      diagnostics.add(diagnostic);\n    }\n\n    function createSymbol(flags, name) {\n      symbolCount++;\n      return new Symbol(flags, name);\n    }\n\n    function getExcludedSymbolFlags(flags) {\n      var result = 0;\n      if (flags & 2\n      /* BlockScopedVariable */\n      ) result |= 107455\n        /* BlockScopedVariableExcludes */\n        ;\n      if (flags & 1\n      /* FunctionScopedVariable */\n      ) result |= 107454\n        /* FunctionScopedVariableExcludes */\n        ;\n      if (flags & 4\n      /* Property */\n      ) result |= 107455\n        /* PropertyExcludes */\n        ;\n      if (flags & 8\n      /* EnumMember */\n      ) result |= 107455\n        /* EnumMemberExcludes */\n        ;\n      if (flags & 16\n      /* Function */\n      ) result |= 106927\n        /* FunctionExcludes */\n        ;\n      if (flags & 32\n      /* Class */\n      ) result |= 899519\n        /* ClassExcludes */\n        ;\n      if (flags & 64\n      /* Interface */\n      ) result |= 792960\n        /* InterfaceExcludes */\n        ;\n      if (flags & 256\n      /* RegularEnum */\n      ) result |= 899327\n        /* RegularEnumExcludes */\n        ;\n      if (flags & 128\n      /* ConstEnum */\n      ) result |= 899967\n        /* ConstEnumExcludes */\n        ;\n      if (flags & 512\n      /* ValueModule */\n      ) result |= 106639\n        /* ValueModuleExcludes */\n        ;\n      if (flags & 8192\n      /* Method */\n      ) result |= 99263\n        /* MethodExcludes */\n        ;\n      if (flags & 32768\n      /* GetAccessor */\n      ) result |= 41919\n        /* GetAccessorExcludes */\n        ;\n      if (flags & 65536\n      /* SetAccessor */\n      ) result |= 74687\n        /* SetAccessorExcludes */\n        ;\n      if (flags & 262144\n      /* TypeParameter */\n      ) result |= 530912\n        /* TypeParameterExcludes */\n        ;\n      if (flags & 524288\n      /* TypeAlias */\n      ) result |= 793056\n        /* TypeAliasExcludes */\n        ;\n      if (flags & 8388608\n      /* Alias */\n      ) result |= 8388608\n        /* AliasExcludes */\n        ;\n      return result;\n    }\n\n    function recordMergedSymbol(target, source) {\n      if (!source.mergeId) {\n        source.mergeId = nextMergeId;\n        nextMergeId++;\n      }\n\n      mergedSymbols[source.mergeId] = target;\n    }\n\n    function cloneSymbol(symbol) {\n      var result = createSymbol(symbol.flags | 33554432\n      /* Merged */\n      , symbol.name);\n      result.declarations = symbol.declarations.slice(0);\n      result.parent = symbol.parent;\n      if (symbol.valueDeclaration) result.valueDeclaration = symbol.valueDeclaration;\n      if (symbol.constEnumOnlyModule) result.constEnumOnlyModule = true;\n      if (symbol.members) result.members = cloneSymbolTable(symbol.members);\n      if (symbol.exports) result.exports = cloneSymbolTable(symbol.exports);\n      recordMergedSymbol(result, symbol);\n      return result;\n    }\n\n    function mergeSymbol(target, source) {\n      if (!(target.flags & getExcludedSymbolFlags(source.flags))) {\n        if (source.flags & 512\n        /* ValueModule */\n        && target.flags & 512\n        /* ValueModule */\n        && target.constEnumOnlyModule && !source.constEnumOnlyModule) {\n          // reset flag when merging instantiated module into value module that has only const enums\n          target.constEnumOnlyModule = false;\n        }\n\n        target.flags |= source.flags;\n\n        if (source.valueDeclaration && (!target.valueDeclaration || target.valueDeclaration.kind === 221\n        /* ModuleDeclaration */\n        && source.valueDeclaration.kind !== 221\n        /* ModuleDeclaration */\n        )) {\n          // other kinds of value declarations take precedence over modules\n          target.valueDeclaration = source.valueDeclaration;\n        }\n\n        ts.forEach(source.declarations, function (node) {\n          target.declarations.push(node);\n        });\n\n        if (source.members) {\n          if (!target.members) target.members = {};\n          mergeSymbolTable(target.members, source.members);\n        }\n\n        if (source.exports) {\n          if (!target.exports) target.exports = {};\n          mergeSymbolTable(target.exports, source.exports);\n        }\n\n        recordMergedSymbol(target, source);\n      } else {\n        var message_2 = target.flags & 2\n        /* BlockScopedVariable */\n        || source.flags & 2\n        /* BlockScopedVariable */\n        ? ts.Diagnostics.Cannot_redeclare_block_scoped_variable_0 : ts.Diagnostics.Duplicate_identifier_0;\n        ts.forEach(source.declarations, function (node) {\n          error(node.name ? node.name : node, message_2, symbolToString(source));\n        });\n        ts.forEach(target.declarations, function (node) {\n          error(node.name ? node.name : node, message_2, symbolToString(source));\n        });\n      }\n    }\n\n    function cloneSymbolTable(symbolTable) {\n      var result = {};\n\n      for (var id in symbolTable) {\n        if (ts.hasProperty(symbolTable, id)) {\n          result[id] = symbolTable[id];\n        }\n      }\n\n      return result;\n    }\n\n    function mergeSymbolTable(target, source) {\n      for (var id in source) {\n        if (ts.hasProperty(source, id)) {\n          if (!ts.hasProperty(target, id)) {\n            target[id] = source[id];\n          } else {\n            var symbol = target[id];\n\n            if (!(symbol.flags & 33554432\n            /* Merged */\n            )) {\n              target[id] = symbol = cloneSymbol(symbol);\n            }\n\n            mergeSymbol(symbol, source[id]);\n          }\n        }\n      }\n    }\n\n    function mergeModuleAugmentation(moduleName) {\n      var moduleAugmentation = moduleName.parent;\n\n      if (moduleAugmentation.symbol.valueDeclaration !== moduleAugmentation) {\n        // this is a combined symbol for multiple augmentations within the same file.\n        // its symbol already has accumulated information for all declarations\n        // so we need to add it just once - do the work only for first declaration\n        ts.Debug.assert(moduleAugmentation.symbol.declarations.length > 1);\n        return;\n      }\n\n      if (ts.isGlobalScopeAugmentation(moduleAugmentation)) {\n        mergeSymbolTable(globals, moduleAugmentation.symbol.exports);\n      } else {\n        // find a module that about to be augmented\n        var mainModule = resolveExternalModuleNameWorker(moduleName, moduleName, ts.Diagnostics.Invalid_module_name_in_augmentation_module_0_cannot_be_found);\n\n        if (!mainModule) {\n          return;\n        } // obtain item referenced by 'export='\n\n\n        mainModule = resolveExternalModuleSymbol(mainModule);\n\n        if (mainModule.flags & 1536\n        /* Namespace */\n        ) {\n            // if module symbol has already been merged - it is safe to use it.\n            // otherwise clone it\n            mainModule = mainModule.flags & 33554432\n            /* Merged */\n            ? mainModule : cloneSymbol(mainModule);\n            mergeSymbol(mainModule, moduleAugmentation.symbol);\n          } else {\n          error(moduleName, ts.Diagnostics.Cannot_augment_module_0_because_it_resolves_to_a_non_module_entity, moduleName.text);\n        }\n      }\n    }\n\n    function addToSymbolTable(target, source, message) {\n      for (var id in source) {\n        if (ts.hasProperty(source, id)) {\n          if (ts.hasProperty(target, id)) {\n            // Error on redeclarations\n            ts.forEach(target[id].declarations, addDeclarationDiagnostic(id, message));\n          } else {\n            target[id] = source[id];\n          }\n        }\n      }\n\n      function addDeclarationDiagnostic(id, message) {\n        return function (declaration) {\n          return diagnostics.add(ts.createDiagnosticForNode(declaration, message, id));\n        };\n      }\n    }\n\n    function getSymbolLinks(symbol) {\n      if (symbol.flags & 67108864\n      /* Transient */\n      ) return symbol;\n      var id = getSymbolId(symbol);\n      return symbolLinks[id] || (symbolLinks[id] = {});\n    }\n\n    function getNodeLinks(node) {\n      var nodeId = getNodeId(node);\n      return nodeLinks[nodeId] || (nodeLinks[nodeId] = {});\n    }\n\n    function isGlobalSourceFile(node) {\n      return node.kind === 251\n      /* SourceFile */\n      && !ts.isExternalOrCommonJsModule(node);\n    }\n\n    function getSymbol(symbols, name, meaning) {\n      if (meaning && ts.hasProperty(symbols, name)) {\n        var symbol = symbols[name];\n        ts.Debug.assert((symbol.flags & 16777216\n        /* Instantiated */\n        ) === 0, \"Should never get an instantiated symbol here.\");\n\n        if (symbol.flags & meaning) {\n          return symbol;\n        }\n\n        if (symbol.flags & 8388608\n        /* Alias */\n        ) {\n            var target = resolveAlias(symbol); // Unknown symbol means an error occurred in alias resolution, treat it as positive answer to avoid cascading errors\n\n            if (target === unknownSymbol || target.flags & meaning) {\n              return symbol;\n            }\n          }\n      } // return undefined if we can't find a symbol.\n\n    }\n    /**\n     * Get symbols that represent parameter-property-declaration as parameter and as property declaration\n     * @param parameter a parameterDeclaration node\n     * @param parameterName a name of the parameter to get the symbols for.\n     * @return a tuple of two symbols\n     */\n\n\n    function getSymbolsOfParameterPropertyDeclaration(parameter, parameterName) {\n      var constructoDeclaration = parameter.parent;\n      var classDeclaration = parameter.parent.parent;\n      var parameterSymbol = getSymbol(constructoDeclaration.locals, parameterName, 107455\n      /* Value */\n      );\n      var propertySymbol = getSymbol(classDeclaration.symbol.members, parameterName, 107455\n      /* Value */\n      );\n\n      if (parameterSymbol && propertySymbol) {\n        return [parameterSymbol, propertySymbol];\n      }\n\n      ts.Debug.fail(\"There should exist two symbols, one as property declaration and one as parameter declaration\");\n    }\n\n    function isBlockScopedNameDeclaredBeforeUse(declaration, usage) {\n      var declarationFile = ts.getSourceFileOfNode(declaration);\n      var useFile = ts.getSourceFileOfNode(usage);\n\n      if (declarationFile !== useFile) {\n        if (modulekind || !compilerOptions.outFile && !compilerOptions.out) {\n          // nodes are in different files and order cannot be determines\n          return true;\n        }\n\n        var sourceFiles = host.getSourceFiles();\n        return ts.indexOf(sourceFiles, declarationFile) <= ts.indexOf(sourceFiles, useFile);\n      }\n\n      if (declaration.pos <= usage.pos) {\n        // declaration is before usage\n        // still might be illegal if usage is in the initializer of the variable declaration\n        return declaration.kind !== 214\n        /* VariableDeclaration */\n        || !isImmediatelyUsedInInitializerOfBlockScopedVariable(declaration, usage);\n      } // declaration is after usage\n      // can be legal if usage is deferred (i.e. inside function or in initializer of instance property)\n\n\n      return isUsedInFunctionOrNonStaticProperty(declaration, usage);\n\n      function isImmediatelyUsedInInitializerOfBlockScopedVariable(declaration, usage) {\n        var container = ts.getEnclosingBlockScopeContainer(declaration);\n\n        if (declaration.parent.parent.kind === 196\n        /* VariableStatement */\n        || declaration.parent.parent.kind === 202\n        /* ForStatement */\n        ) {\n            // variable statement/for statement case,\n            // use site should not be inside variable declaration (initializer of declaration or binding element)\n            return isSameScopeDescendentOf(usage, declaration, container);\n          } else if (declaration.parent.parent.kind === 204\n        /* ForOfStatement */\n        || declaration.parent.parent.kind === 203\n        /* ForInStatement */\n        ) {\n            // ForIn/ForOf case - use site should not be used in expression part\n            var expression = declaration.parent.parent.expression;\n            return isSameScopeDescendentOf(usage, expression, container);\n          }\n      }\n\n      function isUsedInFunctionOrNonStaticProperty(declaration, usage) {\n        var container = ts.getEnclosingBlockScopeContainer(declaration);\n        var current = usage;\n\n        while (current) {\n          if (current === container) {\n            return false;\n          }\n\n          if (ts.isFunctionLike(current)) {\n            return true;\n          }\n\n          var initializerOfNonStaticProperty = current.parent && current.parent.kind === 142\n          /* PropertyDeclaration */\n          && (current.parent.flags & 64\n          /* Static */\n          ) === 0 && current.parent.initializer === current;\n\n          if (initializerOfNonStaticProperty) {\n            return true;\n          }\n\n          current = current.parent;\n        }\n\n        return false;\n      }\n    } // Resolve a given name for a given meaning at a given location. An error is reported if the name was not found and\n    // the nameNotFoundMessage argument is not undefined. Returns the resolved symbol, or undefined if no symbol with\n    // the given name can be found.\n\n\n    function resolveName(location, name, meaning, nameNotFoundMessage, nameArg) {\n      var result;\n      var lastLocation;\n      var propertyWithInvalidInitializer;\n      var errorLocation = location;\n      var grandparent;\n\n      loop: while (location) {\n        // Locals of a source file are not in scope (because they get merged into the global symbol table)\n        if (location.locals && !isGlobalSourceFile(location)) {\n          if (result = getSymbol(location.locals, name, meaning)) {\n            var useResult = true;\n\n            if (ts.isFunctionLike(location) && lastLocation && lastLocation !== location.body) {\n              // symbol lookup restrictions for function-like declarations\n              // - Type parameters of a function are in scope in the entire function declaration, including the parameter\n              //   list and return type. However, local types are only in scope in the function body.\n              // - parameters are only in the scope of function body\n              // This restriction does not apply to JSDoc comment types because they are parented\n              // at a higher level than type parameters would normally be\n              if (meaning & result.flags & 793056\n              /* Type */\n              && lastLocation.kind !== 268\n              /* JSDocComment */\n              ) {\n                  useResult = result.flags & 262144\n                  /* TypeParameter */\n                  ? lastLocation === location.type || lastLocation.kind === 139\n                  /* Parameter */\n                  || lastLocation.kind === 138\n                  /* TypeParameter */\n                  : false;\n                }\n\n              if (meaning & 107455\n              /* Value */\n              && result.flags & 1\n              /* FunctionScopedVariable */\n              ) {\n                  // parameters are visible only inside function body, parameter list and return type\n                  // technically for parameter list case here we might mix parameters and variables declared in function,\n                  // however it is detected separately when checking initializers of parameters\n                  // to make sure that they reference no variables declared after them.\n                  useResult = lastLocation.kind === 139\n                  /* Parameter */\n                  || lastLocation === location.type && result.valueDeclaration.kind === 139\n                  /* Parameter */\n                  ;\n                }\n            }\n\n            if (useResult) {\n              break loop;\n            } else {\n              result = undefined;\n            }\n          }\n        }\n\n        switch (location.kind) {\n          case 251\n          /* SourceFile */\n          :\n            if (!ts.isExternalOrCommonJsModule(location)) break;\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            var moduleExports = getSymbolOfNode(location).exports;\n\n            if (location.kind === 251\n            /* SourceFile */\n            || ts.isAmbientModule(location)) {\n              // It's an external module. First see if the module has an export default and if the local\n              // name of that export default matches.\n              if (result = moduleExports[\"default\"]) {\n                var localSymbol = ts.getLocalSymbolForExportDefault(result);\n\n                if (localSymbol && result.flags & meaning && localSymbol.name === name) {\n                  break loop;\n                }\n\n                result = undefined;\n              } // Because of module/namespace merging, a module's exports are in scope,\n              // yet we never want to treat an export specifier as putting a member in scope.\n              // Therefore, if the name we find is purely an export specifier, it is not actually considered in scope.\n              // Two things to note about this:\n              //     1. We have to check this without calling getSymbol. The problem with calling getSymbol\n              //        on an export specifier is that it might find the export specifier itself, and try to\n              //        resolve it as an alias. This will cause the checker to consider the export specifier\n              //        a circular alias reference when it might not be.\n              //     2. We check === SymbolFlags.Alias in order to check that the symbol is *purely*\n              //        an alias. If we used &, we'd be throwing out symbols that have non alias aspects,\n              //        which is not the desired behavior.\n\n\n              if (ts.hasProperty(moduleExports, name) && moduleExports[name].flags === 8388608\n              /* Alias */\n              && ts.getDeclarationOfKind(moduleExports[name], 233\n              /* ExportSpecifier */\n              )) {\n                break;\n              }\n            }\n\n            if (result = getSymbol(moduleExports, name, meaning & 8914931\n            /* ModuleMember */\n            )) {\n              break loop;\n            }\n\n            break;\n\n          case 220\n          /* EnumDeclaration */\n          :\n            if (result = getSymbol(getSymbolOfNode(location).exports, name, meaning & 8\n            /* EnumMember */\n            )) {\n              break loop;\n            }\n\n            break;\n\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n            // TypeScript 1.0 spec (April 2014): 8.4.1\n            // Initializer expressions for instance member variables are evaluated in the scope\n            // of the class constructor body but are not permitted to reference parameters or\n            // local variables of the constructor. This effectively means that entities from outer scopes\n            // by the same name as a constructor parameter or local variable are inaccessible\n            // in initializer expressions for instance member variables.\n            if (ts.isClassLike(location.parent) && !(location.flags & 64\n            /* Static */\n            )) {\n              var ctor = findConstructorDeclaration(location.parent);\n\n              if (ctor && ctor.locals) {\n                if (getSymbol(ctor.locals, name, meaning & 107455\n                /* Value */\n                )) {\n                  // Remember the property node, it will be used later to report appropriate error\n                  propertyWithInvalidInitializer = location;\n                }\n              }\n            }\n\n            break;\n\n          case 217\n          /* ClassDeclaration */\n          :\n          case 189\n          /* ClassExpression */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n            if (result = getSymbol(getSymbolOfNode(location).members, name, meaning & 793056\n            /* Type */\n            )) {\n              if (lastLocation && lastLocation.flags & 64\n              /* Static */\n              ) {\n                  // TypeScript 1.0 spec (April 2014): 3.4.1\n                  // The scope of a type parameter extends over the entire declaration with which the type\n                  // parameter list is associated, with the exception of static member declarations in classes.\n                  error(errorLocation, ts.Diagnostics.Static_members_cannot_reference_class_type_parameters);\n                  return undefined;\n                }\n\n              break loop;\n            }\n\n            if (location.kind === 189\n            /* ClassExpression */\n            && meaning & 32\n            /* Class */\n            ) {\n                var className = location.name;\n\n                if (className && name === className.text) {\n                  result = location.symbol;\n                  break loop;\n                }\n              }\n\n            break;\n          // It is not legal to reference a class's own type parameters from a computed property name that\n          // belongs to the class. For example:\n          //\n          //   function foo<T>() { return '' }\n          //   class C<T> { // <-- Class's own type parameter T\n          //       [foo<T>()]() { } // <-- Reference to T from class's own computed property\n          //   }\n          //\n\n          case 137\n          /* ComputedPropertyName */\n          :\n            grandparent = location.parent.parent;\n\n            if (ts.isClassLike(grandparent) || grandparent.kind === 218\n            /* InterfaceDeclaration */\n            ) {\n                // A reference to this grandparent's type parameters would be an error\n                if (result = getSymbol(getSymbolOfNode(grandparent).members, name, meaning & 793056\n                /* Type */\n                )) {\n                  error(errorLocation, ts.Diagnostics.A_computed_property_name_cannot_reference_a_type_parameter_from_its_containing_type);\n                  return undefined;\n                }\n              }\n\n            break;\n\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n            if (meaning & 3\n            /* Variable */\n            && name === \"arguments\") {\n              result = argumentsSymbol;\n              break loop;\n            }\n\n            break;\n\n          case 176\n          /* FunctionExpression */\n          :\n            if (meaning & 3\n            /* Variable */\n            && name === \"arguments\") {\n              result = argumentsSymbol;\n              break loop;\n            }\n\n            if (meaning & 16\n            /* Function */\n            ) {\n                var functionName = location.name;\n\n                if (functionName && name === functionName.text) {\n                  result = location.symbol;\n                  break loop;\n                }\n              }\n\n            break;\n\n          case 140\n          /* Decorator */\n          :\n            // Decorators are resolved at the class declaration. Resolving at the parameter\n            // or member would result in looking up locals in the method.\n            //\n            //   function y() {}\n            //   class C {\n            //       method(@y x, y) {} // <-- decorator y should be resolved at the class declaration, not the parameter.\n            //   }\n            //\n            if (location.parent && location.parent.kind === 139\n            /* Parameter */\n            ) {\n                location = location.parent;\n              } //\n            //   function y() {}\n            //   class C {\n            //       @y method(x, y) {} // <-- decorator y should be resolved at the class declaration, not the method.\n            //   }\n            //\n\n\n            if (location.parent && ts.isClassElement(location.parent)) {\n              location = location.parent;\n            }\n\n            break;\n        }\n\n        lastLocation = location;\n        location = location.parent;\n      }\n\n      if (!result) {\n        result = getSymbol(globals, name, meaning);\n      }\n\n      if (!result) {\n        if (nameNotFoundMessage) {\n          if (!checkAndReportErrorForMissingPrefix(errorLocation, name, nameArg)) {\n            error(errorLocation, nameNotFoundMessage, typeof nameArg === \"string\" ? nameArg : ts.declarationNameToString(nameArg));\n          }\n        }\n\n        return undefined;\n      } // Perform extra checks only if error reporting was requested\n\n\n      if (nameNotFoundMessage) {\n        if (propertyWithInvalidInitializer) {\n          // We have a match, but the reference occurred within a property initializer and the identifier also binds\n          // to a local variable in the constructor where the code will be emitted.\n          var propertyName = propertyWithInvalidInitializer.name;\n          error(errorLocation, ts.Diagnostics.Initializer_of_instance_member_variable_0_cannot_reference_identifier_1_declared_in_the_constructor, ts.declarationNameToString(propertyName), typeof nameArg === \"string\" ? nameArg : ts.declarationNameToString(nameArg));\n          return undefined;\n        } // Only check for block-scoped variable if we are looking for the\n        // name with variable meaning\n        //      For example,\n        //          declare module foo {\n        //              interface bar {}\n        //          }\n        //      const foo/*1*/: foo/*2*/.bar;\n        // The foo at /*1*/ and /*2*/ will share same symbol with two meaning\n        // block - scope variable and namespace module. However, only when we\n        // try to resolve name in /*1*/ which is used in variable position,\n        // we want to check for block- scoped\n\n\n        if (meaning & 2\n        /* BlockScopedVariable */\n        ) {\n            var exportOrLocalSymbol = getExportSymbolOfValueSymbolIfExported(result);\n\n            if (exportOrLocalSymbol.flags & 2\n            /* BlockScopedVariable */\n            ) {\n                checkResolvedBlockScopedVariable(exportOrLocalSymbol, errorLocation);\n              }\n          }\n      }\n\n      return result;\n    }\n\n    function checkAndReportErrorForMissingPrefix(errorLocation, name, nameArg) {\n      if (!errorLocation || errorLocation.kind === 69\n      /* Identifier */\n      && isTypeReferenceIdentifier(errorLocation) || isInTypeQuery(errorLocation)) {\n        return false;\n      }\n\n      var container = ts.getThisContainer(errorLocation,\n      /* includeArrowFunctions */\n      true);\n      var location = container;\n\n      while (location) {\n        if (ts.isClassLike(location.parent)) {\n          var classSymbol = getSymbolOfNode(location.parent);\n\n          if (!classSymbol) {\n            break;\n          } // Check to see if a static member exists.\n\n\n          var constructorType = getTypeOfSymbol(classSymbol);\n\n          if (getPropertyOfType(constructorType, name)) {\n            error(errorLocation, ts.Diagnostics.Cannot_find_name_0_Did_you_mean_the_static_member_1_0, typeof nameArg === \"string\" ? nameArg : ts.declarationNameToString(nameArg), symbolToString(classSymbol));\n            return true;\n          } // No static member is present.\n          // Check if we're in an instance method and look for a relevant instance member.\n\n\n          if (location === container && !(location.flags & 64\n          /* Static */\n          )) {\n            var instanceType = getDeclaredTypeOfSymbol(classSymbol).thisType;\n\n            if (getPropertyOfType(instanceType, name)) {\n              error(errorLocation, ts.Diagnostics.Cannot_find_name_0_Did_you_mean_the_instance_member_this_0, typeof nameArg === \"string\" ? nameArg : ts.declarationNameToString(nameArg));\n              return true;\n            }\n          }\n        }\n\n        location = location.parent;\n      }\n\n      return false;\n    }\n\n    function checkResolvedBlockScopedVariable(result, errorLocation) {\n      ts.Debug.assert((result.flags & 2\n      /* BlockScopedVariable */\n      ) !== 0); // Block-scoped variables cannot be used before their definition\n\n      var declaration = ts.forEach(result.declarations, function (d) {\n        return ts.isBlockOrCatchScoped(d) ? d : undefined;\n      });\n      ts.Debug.assert(declaration !== undefined, \"Block-scoped variable declaration is undefined\");\n\n      if (!isBlockScopedNameDeclaredBeforeUse(ts.getAncestor(declaration, 214\n      /* VariableDeclaration */\n      ), errorLocation)) {\n        error(errorLocation, ts.Diagnostics.Block_scoped_variable_0_used_before_its_declaration, ts.declarationNameToString(declaration.name));\n      }\n    }\n    /* Starting from 'initial' node walk up the parent chain until 'stopAt' node is reached.\n     * If at any point current node is equal to 'parent' node - return true.\n     * Return false if 'stopAt' node is reached or isFunctionLike(current) === true.\n     */\n\n\n    function isSameScopeDescendentOf(initial, parent, stopAt) {\n      if (!parent) {\n        return false;\n      }\n\n      for (var current = initial; current && current !== stopAt && !ts.isFunctionLike(current); current = current.parent) {\n        if (current === parent) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function getAnyImportSyntax(node) {\n      if (ts.isAliasSymbolDeclaration(node)) {\n        if (node.kind === 224\n        /* ImportEqualsDeclaration */\n        ) {\n            return node;\n          }\n\n        while (node && node.kind !== 225\n        /* ImportDeclaration */\n        ) {\n          node = node.parent;\n        }\n\n        return node;\n      }\n    }\n\n    function getDeclarationOfAliasSymbol(symbol) {\n      return ts.forEach(symbol.declarations, function (d) {\n        return ts.isAliasSymbolDeclaration(d) ? d : undefined;\n      });\n    }\n\n    function getTargetOfImportEqualsDeclaration(node) {\n      if (node.moduleReference.kind === 235\n      /* ExternalModuleReference */\n      ) {\n          return resolveExternalModuleSymbol(resolveExternalModuleName(node, ts.getExternalModuleImportEqualsDeclarationExpression(node)));\n        }\n\n      return getSymbolOfPartOfRightHandSideOfImportEquals(node.moduleReference, node);\n    }\n\n    function getTargetOfImportClause(node) {\n      var moduleSymbol = resolveExternalModuleName(node, node.parent.moduleSpecifier);\n\n      if (moduleSymbol) {\n        var exportDefaultSymbol = moduleSymbol.exports[\"export=\"] ? getPropertyOfType(getTypeOfSymbol(moduleSymbol.exports[\"export=\"]), \"default\") : resolveSymbol(moduleSymbol.exports[\"default\"]);\n\n        if (!exportDefaultSymbol && !allowSyntheticDefaultImports) {\n          error(node.name, ts.Diagnostics.Module_0_has_no_default_export, symbolToString(moduleSymbol));\n        } else if (!exportDefaultSymbol && allowSyntheticDefaultImports) {\n          return resolveExternalModuleSymbol(moduleSymbol) || resolveSymbol(moduleSymbol);\n        }\n\n        return exportDefaultSymbol;\n      }\n    }\n\n    function getTargetOfNamespaceImport(node) {\n      var moduleSpecifier = node.parent.parent.moduleSpecifier;\n      return resolveESModuleSymbol(resolveExternalModuleName(node, moduleSpecifier), moduleSpecifier);\n    } // This function creates a synthetic symbol that combines the value side of one symbol with the\n    // type/namespace side of another symbol. Consider this example:\n    //\n    //   declare module graphics {\n    //       interface Point {\n    //           x: number;\n    //           y: number;\n    //       }\n    //   }\n    //   declare var graphics: {\n    //       Point: new (x: number, y: number) => graphics.Point;\n    //   }\n    //   declare module \"graphics\" {\n    //       export = graphics;\n    //   }\n    //\n    // An 'import { Point } from \"graphics\"' needs to create a symbol that combines the value side 'Point'\n    // property with the type/namespace side interface 'Point'.\n\n\n    function combineValueAndTypeSymbols(valueSymbol, typeSymbol) {\n      if (valueSymbol.flags & (793056\n      /* Type */\n      | 1536\n      /* Namespace */\n      )) {\n        return valueSymbol;\n      }\n\n      var result = createSymbol(valueSymbol.flags | typeSymbol.flags, valueSymbol.name);\n      result.declarations = ts.concatenate(valueSymbol.declarations, typeSymbol.declarations);\n      result.parent = valueSymbol.parent || typeSymbol.parent;\n      if (valueSymbol.valueDeclaration) result.valueDeclaration = valueSymbol.valueDeclaration;\n      if (typeSymbol.members) result.members = typeSymbol.members;\n      if (valueSymbol.exports) result.exports = valueSymbol.exports;\n      return result;\n    }\n\n    function getExportOfModule(symbol, name) {\n      if (symbol.flags & 1536\n      /* Module */\n      ) {\n          var exports = getExportsOfSymbol(symbol);\n\n          if (ts.hasProperty(exports, name)) {\n            return resolveSymbol(exports[name]);\n          }\n        }\n    }\n\n    function getPropertyOfVariable(symbol, name) {\n      if (symbol.flags & 3\n      /* Variable */\n      ) {\n          var typeAnnotation = symbol.valueDeclaration.type;\n\n          if (typeAnnotation) {\n            return resolveSymbol(getPropertyOfType(getTypeFromTypeNode(typeAnnotation), name));\n          }\n        }\n    }\n\n    function getExternalModuleMember(node, specifier) {\n      var moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier);\n      var targetSymbol = resolveESModuleSymbol(moduleSymbol, node.moduleSpecifier);\n\n      if (targetSymbol) {\n        var name_9 = specifier.propertyName || specifier.name;\n\n        if (name_9.text) {\n          var symbolFromVariable = void 0; // First check if module was specified with \"export=\". If so, get the member from the resolved type\n\n          if (moduleSymbol && moduleSymbol.exports && moduleSymbol.exports[\"export=\"]) {\n            symbolFromVariable = getPropertyOfType(getTypeOfSymbol(targetSymbol), name_9.text);\n          } else {\n            symbolFromVariable = getPropertyOfVariable(targetSymbol, name_9.text);\n          }\n\n          var symbolFromModule = getExportOfModule(targetSymbol, name_9.text);\n          var symbol = symbolFromModule && symbolFromVariable ? combineValueAndTypeSymbols(symbolFromVariable, symbolFromModule) : symbolFromModule || symbolFromVariable;\n\n          if (!symbol) {\n            error(name_9, ts.Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(moduleSymbol), ts.declarationNameToString(name_9));\n          }\n\n          return symbol;\n        }\n      }\n    }\n\n    function getTargetOfImportSpecifier(node) {\n      return getExternalModuleMember(node.parent.parent.parent, node);\n    }\n\n    function getTargetOfExportSpecifier(node) {\n      return node.parent.parent.moduleSpecifier ? getExternalModuleMember(node.parent.parent, node) : resolveEntityName(node.propertyName || node.name, 107455\n      /* Value */\n      | 793056\n      /* Type */\n      | 1536\n      /* Namespace */\n      );\n    }\n\n    function getTargetOfExportAssignment(node) {\n      return resolveEntityName(node.expression, 107455\n      /* Value */\n      | 793056\n      /* Type */\n      | 1536\n      /* Namespace */\n      );\n    }\n\n    function getTargetOfAliasDeclaration(node) {\n      switch (node.kind) {\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n          return getTargetOfImportEqualsDeclaration(node);\n\n        case 226\n        /* ImportClause */\n        :\n          return getTargetOfImportClause(node);\n\n        case 227\n        /* NamespaceImport */\n        :\n          return getTargetOfNamespaceImport(node);\n\n        case 229\n        /* ImportSpecifier */\n        :\n          return getTargetOfImportSpecifier(node);\n\n        case 233\n        /* ExportSpecifier */\n        :\n          return getTargetOfExportSpecifier(node);\n\n        case 230\n        /* ExportAssignment */\n        :\n          return getTargetOfExportAssignment(node);\n      }\n    }\n\n    function resolveSymbol(symbol) {\n      return symbol && symbol.flags & 8388608\n      /* Alias */\n      && !(symbol.flags & (107455\n      /* Value */\n      | 793056\n      /* Type */\n      | 1536\n      /* Namespace */\n      )) ? resolveAlias(symbol) : symbol;\n    }\n\n    function resolveAlias(symbol) {\n      ts.Debug.assert((symbol.flags & 8388608\n      /* Alias */\n      ) !== 0, \"Should only get Alias here.\");\n      var links = getSymbolLinks(symbol);\n\n      if (!links.target) {\n        links.target = resolvingSymbol;\n        var node = getDeclarationOfAliasSymbol(symbol);\n        var target = getTargetOfAliasDeclaration(node);\n\n        if (links.target === resolvingSymbol) {\n          links.target = target || unknownSymbol;\n        } else {\n          error(node, ts.Diagnostics.Circular_definition_of_import_alias_0, symbolToString(symbol));\n        }\n      } else if (links.target === resolvingSymbol) {\n        links.target = unknownSymbol;\n      }\n\n      return links.target;\n    }\n\n    function markExportAsReferenced(node) {\n      var symbol = getSymbolOfNode(node);\n      var target = resolveAlias(symbol);\n\n      if (target) {\n        var markAlias = target === unknownSymbol && compilerOptions.isolatedModules || target !== unknownSymbol && target.flags & 107455\n        /* Value */\n        && !isConstEnumOrConstEnumOnlyModule(target);\n\n        if (markAlias) {\n          markAliasSymbolAsReferenced(symbol);\n        }\n      }\n    } // When an alias symbol is referenced, we need to mark the entity it references as referenced and in turn repeat that until\n    // we reach a non-alias or an exported entity (which is always considered referenced). We do this by checking the target of\n    // the alias as an expression (which recursively takes us back here if the target references another alias).\n\n\n    function markAliasSymbolAsReferenced(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.referenced) {\n        links.referenced = true;\n        var node = getDeclarationOfAliasSymbol(symbol);\n\n        if (node.kind === 230\n        /* ExportAssignment */\n        ) {\n            // export default <symbol>\n            checkExpressionCached(node.expression);\n          } else if (node.kind === 233\n        /* ExportSpecifier */\n        ) {\n            // export { <symbol> } or export { <symbol> as foo }\n            checkExpressionCached(node.propertyName || node.name);\n          } else if (ts.isInternalModuleImportEqualsDeclaration(node)) {\n          // import foo = <symbol>\n          checkExpressionCached(node.moduleReference);\n        }\n      }\n    } // This function is only for imports with entity names\n\n\n    function getSymbolOfPartOfRightHandSideOfImportEquals(entityName, importDeclaration) {\n      if (!importDeclaration) {\n        importDeclaration = ts.getAncestor(entityName, 224\n        /* ImportEqualsDeclaration */\n        );\n        ts.Debug.assert(importDeclaration !== undefined);\n      } // There are three things we might try to look for. In the following examples,\n      // the search term is enclosed in |...|:\n      //\n      //     import a = |b|; // Namespace\n      //     import a = |b.c|; // Value, type, namespace\n      //     import a = |b.c|.d; // Namespace\n\n\n      if (entityName.kind === 69\n      /* Identifier */\n      && ts.isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {\n        entityName = entityName.parent;\n      } // Check for case 1 and 3 in the above example\n\n\n      if (entityName.kind === 69\n      /* Identifier */\n      || entityName.parent.kind === 136\n      /* QualifiedName */\n      ) {\n          return resolveEntityName(entityName, 1536\n          /* Namespace */\n          );\n        } else {\n        // Case 2 in above example\n        // entityName.kind could be a QualifiedName or a Missing identifier\n        ts.Debug.assert(entityName.parent.kind === 224\n        /* ImportEqualsDeclaration */\n        );\n        return resolveEntityName(entityName, 107455\n        /* Value */\n        | 793056\n        /* Type */\n        | 1536\n        /* Namespace */\n        );\n      }\n    }\n\n    function getFullyQualifiedName(symbol) {\n      return symbol.parent ? getFullyQualifiedName(symbol.parent) + \".\" + symbolToString(symbol) : symbolToString(symbol);\n    } // Resolves a qualified name and any involved aliases\n\n\n    function resolveEntityName(name, meaning, ignoreErrors) {\n      if (ts.nodeIsMissing(name)) {\n        return undefined;\n      }\n\n      var symbol;\n\n      if (name.kind === 69\n      /* Identifier */\n      ) {\n          var message = meaning === 1536\n          /* Namespace */\n          ? ts.Diagnostics.Cannot_find_namespace_0 : ts.Diagnostics.Cannot_find_name_0;\n          symbol = resolveName(name, name.text, meaning, ignoreErrors ? undefined : message, name);\n\n          if (!symbol) {\n            return undefined;\n          }\n        } else if (name.kind === 136\n      /* QualifiedName */\n      || name.kind === 169\n      /* PropertyAccessExpression */\n      ) {\n          var left = name.kind === 136\n          /* QualifiedName */\n          ? name.left : name.expression;\n          var right = name.kind === 136\n          /* QualifiedName */\n          ? name.right : name.name;\n          var namespace = resolveEntityName(left, 1536\n          /* Namespace */\n          , ignoreErrors);\n\n          if (!namespace || namespace === unknownSymbol || ts.nodeIsMissing(right)) {\n            return undefined;\n          }\n\n          symbol = getSymbol(getExportsOfSymbol(namespace), right.text, meaning);\n\n          if (!symbol) {\n            if (!ignoreErrors) {\n              error(right, ts.Diagnostics.Module_0_has_no_exported_member_1, getFullyQualifiedName(namespace), ts.declarationNameToString(right));\n            }\n\n            return undefined;\n          }\n        } else {\n        ts.Debug.fail(\"Unknown entity name kind.\");\n      }\n\n      ts.Debug.assert((symbol.flags & 16777216\n      /* Instantiated */\n      ) === 0, \"Should never get an instantiated symbol here.\");\n      return symbol.flags & meaning ? symbol : resolveAlias(symbol);\n    }\n\n    function resolveExternalModuleName(location, moduleReferenceExpression) {\n      return resolveExternalModuleNameWorker(location, moduleReferenceExpression, ts.Diagnostics.Cannot_find_module_0);\n    }\n\n    function resolveExternalModuleNameWorker(location, moduleReferenceExpression, moduleNotFoundError) {\n      if (moduleReferenceExpression.kind !== 9\n      /* StringLiteral */\n      ) {\n          return;\n        }\n\n      var moduleReferenceLiteral = moduleReferenceExpression; // Module names are escaped in our symbol table.  However, string literal values aren't.\n      // Escape the name in the \"require(...)\" clause to ensure we find the right symbol.\n\n      var moduleName = ts.escapeIdentifier(moduleReferenceLiteral.text);\n\n      if (moduleName === undefined) {\n        return;\n      }\n\n      var isRelative = ts.isExternalModuleNameRelative(moduleName);\n\n      if (!isRelative) {\n        var symbol = getSymbol(globals, \"\\\"\" + moduleName + \"\\\"\", 512\n        /* ValueModule */\n        );\n\n        if (symbol) {\n          // merged symbol is module declaration symbol combined with all augmentations\n          return getMergedSymbol(symbol);\n        }\n      }\n\n      var resolvedModule = ts.getResolvedModule(ts.getSourceFileOfNode(location), moduleReferenceLiteral.text);\n      var sourceFile = resolvedModule && host.getSourceFile(resolvedModule.resolvedFileName);\n\n      if (sourceFile) {\n        if (sourceFile.symbol) {\n          // merged symbol is module declaration symbol combined with all augmentations\n          return getMergedSymbol(sourceFile.symbol);\n        }\n\n        if (moduleNotFoundError) {\n          // report errors only if it was requested\n          error(moduleReferenceLiteral, ts.Diagnostics.File_0_is_not_a_module, sourceFile.fileName);\n        }\n\n        return undefined;\n      }\n\n      if (moduleNotFoundError) {\n        // report errors only if it was requested\n        error(moduleReferenceLiteral, moduleNotFoundError, moduleName);\n      }\n\n      return undefined;\n    } // An external module with an 'export =' declaration resolves to the target of the 'export =' declaration,\n    // and an external module with no 'export =' declaration resolves to the module itself.\n\n\n    function resolveExternalModuleSymbol(moduleSymbol) {\n      return moduleSymbol && getMergedSymbol(resolveSymbol(moduleSymbol.exports[\"export=\"])) || moduleSymbol;\n    } // An external module with an 'export =' declaration may be referenced as an ES6 module provided the 'export ='\n    // references a symbol that is at least declared as a module or a variable. The target of the 'export =' may\n    // combine other declarations with the module or variable (e.g. a class/module, function/module, interface/variable).\n\n\n    function resolveESModuleSymbol(moduleSymbol, moduleReferenceExpression) {\n      var symbol = resolveExternalModuleSymbol(moduleSymbol);\n\n      if (symbol && !(symbol.flags & (1536\n      /* Module */\n      | 3\n      /* Variable */\n      ))) {\n        error(moduleReferenceExpression, ts.Diagnostics.Module_0_resolves_to_a_non_module_entity_and_cannot_be_imported_using_this_construct, symbolToString(moduleSymbol));\n        symbol = undefined;\n      }\n\n      return symbol;\n    }\n\n    function hasExportAssignmentSymbol(moduleSymbol) {\n      return moduleSymbol.exports[\"export=\"] !== undefined;\n    }\n\n    function getExportsOfModuleAsArray(moduleSymbol) {\n      return symbolsToArray(getExportsOfModule(moduleSymbol));\n    }\n\n    function getExportsOfSymbol(symbol) {\n      return symbol.flags & 1536\n      /* Module */\n      ? getExportsOfModule(symbol) : symbol.exports || emptySymbols;\n    }\n\n    function getExportsOfModule(moduleSymbol) {\n      var links = getSymbolLinks(moduleSymbol);\n      return links.resolvedExports || (links.resolvedExports = getExportsForModule(moduleSymbol));\n    }\n    /**\n     * Extends one symbol table with another while collecting information on name collisions for error message generation into the `lookupTable` argument\n     * Not passing `lookupTable` and `exportNode` disables this collection, and just extends the tables\n     */\n\n\n    function extendExportSymbols(target, source, lookupTable, exportNode) {\n      for (var id in source) {\n        if (id !== \"default\" && !ts.hasProperty(target, id)) {\n          target[id] = source[id];\n\n          if (lookupTable && exportNode) {\n            lookupTable[id] = {\n              specifierText: ts.getTextOfNode(exportNode.moduleSpecifier)\n            };\n          }\n        } else if (lookupTable && exportNode && id !== \"default\" && ts.hasProperty(target, id) && resolveSymbol(target[id]) !== resolveSymbol(source[id])) {\n          if (!lookupTable[id].exportsWithDuplicate) {\n            lookupTable[id].exportsWithDuplicate = [exportNode];\n          } else {\n            lookupTable[id].exportsWithDuplicate.push(exportNode);\n          }\n        }\n      }\n    }\n\n    function getExportsForModule(moduleSymbol) {\n      var visitedSymbols = [];\n      return visit(moduleSymbol) || moduleSymbol.exports; // The ES6 spec permits export * declarations in a module to circularly reference the module itself. For example,\n      // module 'a' can 'export * from \"b\"' and 'b' can 'export * from \"a\"' without error.\n\n      function visit(symbol) {\n        if (!(symbol && symbol.flags & 1952\n        /* HasExports */\n        && !ts.contains(visitedSymbols, symbol))) {\n          return;\n        }\n\n        visitedSymbols.push(symbol);\n        var symbols = cloneSymbolTable(symbol.exports); // All export * declarations are collected in an __export symbol by the binder\n\n        var exportStars = symbol.exports[\"__export\"];\n\n        if (exportStars) {\n          var nestedSymbols = {};\n          var lookupTable = {};\n\n          for (var _i = 0, _a = exportStars.declarations; _i < _a.length; _i++) {\n            var node = _a[_i];\n            var resolvedModule = resolveExternalModuleName(node, node.moduleSpecifier);\n            var exportedSymbols = visit(resolvedModule);\n            extendExportSymbols(nestedSymbols, exportedSymbols, lookupTable, node);\n          }\n\n          for (var id in lookupTable) {\n            var exportsWithDuplicate = lookupTable[id].exportsWithDuplicate; // It's not an error if the file with multiple `export *`s with duplicate names exports a member with that name itself\n\n            if (id === \"export=\" || !(exportsWithDuplicate && exportsWithDuplicate.length) || ts.hasProperty(symbols, id)) {\n              continue;\n            }\n\n            for (var _b = 0, exportsWithDuplicate_1 = exportsWithDuplicate; _b < exportsWithDuplicate_1.length; _b++) {\n              var node = exportsWithDuplicate_1[_b];\n              diagnostics.add(ts.createDiagnosticForNode(node, ts.Diagnostics.Module_0_has_already_exported_a_member_named_1_Consider_explicitly_re_exporting_to_resolve_the_ambiguity, lookupTable[id].specifierText, id));\n            }\n          }\n\n          extendExportSymbols(symbols, nestedSymbols);\n        }\n\n        return symbols;\n      }\n    }\n\n    function getMergedSymbol(symbol) {\n      var merged;\n      return symbol && symbol.mergeId && (merged = mergedSymbols[symbol.mergeId]) ? merged : symbol;\n    }\n\n    function getSymbolOfNode(node) {\n      return getMergedSymbol(node.symbol);\n    }\n\n    function getParentOfSymbol(symbol) {\n      return getMergedSymbol(symbol.parent);\n    }\n\n    function getExportSymbolOfValueSymbolIfExported(symbol) {\n      return symbol && (symbol.flags & 1048576\n      /* ExportValue */\n      ) !== 0 ? getMergedSymbol(symbol.exportSymbol) : symbol;\n    }\n\n    function symbolIsValue(symbol) {\n      // If it is an instantiated symbol, then it is a value if the symbol it is an\n      // instantiation of is a value.\n      if (symbol.flags & 16777216\n      /* Instantiated */\n      ) {\n          return symbolIsValue(getSymbolLinks(symbol).target);\n        } // If the symbol has the value flag, it is trivially a value.\n\n\n      if (symbol.flags & 107455\n      /* Value */\n      ) {\n          return true;\n        } // If it is an alias, then it is a value if the symbol it resolves to is a value.\n\n\n      if (symbol.flags & 8388608\n      /* Alias */\n      ) {\n          return (resolveAlias(symbol).flags & 107455\n          /* Value */\n          ) !== 0;\n        }\n\n      return false;\n    }\n\n    function findConstructorDeclaration(node) {\n      var members = node.members;\n\n      for (var _i = 0, members_1 = members; _i < members_1.length; _i++) {\n        var member = members_1[_i];\n\n        if (member.kind === 145\n        /* Constructor */\n        && ts.nodeIsPresent(member.body)) {\n          return member;\n        }\n      }\n    }\n\n    function createType(flags) {\n      var result = new Type(checker, flags);\n      result.id = typeCount;\n      typeCount++;\n      return result;\n    }\n\n    function createIntrinsicType(kind, intrinsicName) {\n      var type = createType(kind);\n      type.intrinsicName = intrinsicName;\n      return type;\n    }\n\n    function createObjectType(kind, symbol) {\n      var type = createType(kind);\n      type.symbol = symbol;\n      return type;\n    } // A reserved member name starts with two underscores, but the third character cannot be an underscore\n    // or the @ symbol. A third underscore indicates an escaped form of an identifer that started\n    // with at least two underscores. The @ character indicates that the name is denoted by a well known ES\n    // Symbol instance.\n\n\n    function isReservedMemberName(name) {\n      return name.charCodeAt(0) === 95\n      /* _ */\n      && name.charCodeAt(1) === 95\n      /* _ */\n      && name.charCodeAt(2) !== 95\n      /* _ */\n      && name.charCodeAt(2) !== 64\n      /* at */\n      ;\n    }\n\n    function getNamedMembers(members) {\n      var result;\n\n      for (var id in members) {\n        if (ts.hasProperty(members, id)) {\n          if (!isReservedMemberName(id)) {\n            if (!result) result = [];\n            var symbol = members[id];\n\n            if (symbolIsValue(symbol)) {\n              result.push(symbol);\n            }\n          }\n        }\n      }\n\n      return result || emptyArray;\n    }\n\n    function setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType) {\n      type.members = members;\n      type.properties = getNamedMembers(members);\n      type.callSignatures = callSignatures;\n      type.constructSignatures = constructSignatures;\n      if (stringIndexType) type.stringIndexType = stringIndexType;\n      if (numberIndexType) type.numberIndexType = numberIndexType;\n      return type;\n    }\n\n    function createAnonymousType(symbol, members, callSignatures, constructSignatures, stringIndexType, numberIndexType) {\n      return setObjectTypeMembers(createObjectType(65536\n      /* Anonymous */\n      , symbol), members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\n    }\n\n    function forEachSymbolTableInScope(enclosingDeclaration, callback) {\n      var result;\n\n      for (var location_1 = enclosingDeclaration; location_1; location_1 = location_1.parent) {\n        // Locals of a source file are not in scope (because they get merged into the global symbol table)\n        if (location_1.locals && !isGlobalSourceFile(location_1)) {\n          if (result = callback(location_1.locals)) {\n            return result;\n          }\n        }\n\n        switch (location_1.kind) {\n          case 251\n          /* SourceFile */\n          :\n            if (!ts.isExternalOrCommonJsModule(location_1)) {\n              break;\n            }\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            if (result = callback(getSymbolOfNode(location_1).exports)) {\n              return result;\n            }\n\n            break;\n\n          case 217\n          /* ClassDeclaration */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n            if (result = callback(getSymbolOfNode(location_1).members)) {\n              return result;\n            }\n\n            break;\n        }\n      }\n\n      return callback(globals);\n    }\n\n    function getQualifiedLeftMeaning(rightMeaning) {\n      // If we are looking in value space, the parent meaning is value, other wise it is namespace\n      return rightMeaning === 107455\n      /* Value */\n      ? 107455\n      /* Value */\n      : 1536\n      /* Namespace */\n      ;\n    }\n\n    function getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, useOnlyExternalAliasing) {\n      function getAccessibleSymbolChainFromSymbolTable(symbols) {\n        function canQualifySymbol(symbolFromSymbolTable, meaning) {\n          // If the symbol is equivalent and doesn't need further qualification, this symbol is accessible\n          if (!needsQualification(symbolFromSymbolTable, enclosingDeclaration, meaning)) {\n            return true;\n          } // If symbol needs qualification, make sure that parent is accessible, if it is then this symbol is accessible too\n\n\n          var accessibleParent = getAccessibleSymbolChain(symbolFromSymbolTable.parent, enclosingDeclaration, getQualifiedLeftMeaning(meaning), useOnlyExternalAliasing);\n          return !!accessibleParent;\n        }\n\n        function isAccessible(symbolFromSymbolTable, resolvedAliasSymbol) {\n          if (symbol === (resolvedAliasSymbol || symbolFromSymbolTable)) {\n            // if the symbolFromSymbolTable is not external module (it could be if it was determined as ambient external module and would be in globals table)\n            // and if symbolfrom symbolTable or alias resolution matches the symbol,\n            // check the symbol can be qualified, it is only then this symbol is accessible\n            return !ts.forEach(symbolFromSymbolTable.declarations, hasExternalModuleSymbol) && canQualifySymbol(symbolFromSymbolTable, meaning);\n          }\n        } // If symbol is directly available by its name in the symbol table\n\n\n        if (isAccessible(ts.lookUp(symbols, symbol.name))) {\n          return [symbol];\n        } // Check if symbol is any of the alias\n\n\n        return ts.forEachValue(symbols, function (symbolFromSymbolTable) {\n          if (symbolFromSymbolTable.flags & 8388608\n          /* Alias */\n          && symbolFromSymbolTable.name !== \"export=\" && !ts.getDeclarationOfKind(symbolFromSymbolTable, 233\n          /* ExportSpecifier */\n          )) {\n            if (!useOnlyExternalAliasing || // Is this external alias, then use it to name\n            ts.forEach(symbolFromSymbolTable.declarations, ts.isExternalModuleImportEqualsDeclaration)) {\n              var resolvedImportedSymbol = resolveAlias(symbolFromSymbolTable);\n\n              if (isAccessible(symbolFromSymbolTable, resolveAlias(symbolFromSymbolTable))) {\n                return [symbolFromSymbolTable];\n              } // Look in the exported members, if we can find accessibleSymbolChain, symbol is accessible using this chain\n              // but only if the symbolFromSymbolTable can be qualified\n\n\n              var accessibleSymbolsFromExports = resolvedImportedSymbol.exports ? getAccessibleSymbolChainFromSymbolTable(resolvedImportedSymbol.exports) : undefined;\n\n              if (accessibleSymbolsFromExports && canQualifySymbol(symbolFromSymbolTable, getQualifiedLeftMeaning(meaning))) {\n                return [symbolFromSymbolTable].concat(accessibleSymbolsFromExports);\n              }\n            }\n          }\n        });\n      }\n\n      if (symbol) {\n        return forEachSymbolTableInScope(enclosingDeclaration, getAccessibleSymbolChainFromSymbolTable);\n      }\n    }\n\n    function needsQualification(symbol, enclosingDeclaration, meaning) {\n      var qualify = false;\n      forEachSymbolTableInScope(enclosingDeclaration, function (symbolTable) {\n        // If symbol of this name is not available in the symbol table we are ok\n        if (!ts.hasProperty(symbolTable, symbol.name)) {\n          // Continue to the next symbol table\n          return false;\n        } // If the symbol with this name is present it should refer to the symbol\n\n\n        var symbolFromSymbolTable = symbolTable[symbol.name];\n\n        if (symbolFromSymbolTable === symbol) {\n          // No need to qualify\n          return true;\n        } // Qualify if the symbol from symbol table has same meaning as expected\n\n\n        symbolFromSymbolTable = symbolFromSymbolTable.flags & 8388608\n        /* Alias */\n        && !ts.getDeclarationOfKind(symbolFromSymbolTable, 233\n        /* ExportSpecifier */\n        ) ? resolveAlias(symbolFromSymbolTable) : symbolFromSymbolTable;\n\n        if (symbolFromSymbolTable.flags & meaning) {\n          qualify = true;\n          return true;\n        } // Continue to the next symbol table\n\n\n        return false;\n      });\n      return qualify;\n    }\n\n    function isSymbolAccessible(symbol, enclosingDeclaration, meaning) {\n      if (symbol && enclosingDeclaration && !(symbol.flags & 262144\n      /* TypeParameter */\n      )) {\n        var initialSymbol = symbol;\n        var meaningToLook = meaning;\n\n        while (symbol) {\n          // Symbol is accessible if it by itself is accessible\n          var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaningToLook,\n          /*useOnlyExternalAliasing*/\n          false);\n\n          if (accessibleSymbolChain) {\n            var hasAccessibleDeclarations = hasVisibleDeclarations(accessibleSymbolChain[0]);\n\n            if (!hasAccessibleDeclarations) {\n              return {\n                accessibility: 1\n                /* NotAccessible */\n                ,\n                errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\n                errorModuleName: symbol !== initialSymbol ? symbolToString(symbol, enclosingDeclaration, 1536\n                /* Namespace */\n                ) : undefined\n              };\n            }\n\n            return hasAccessibleDeclarations;\n          } // If we haven't got the accessible symbol, it doesn't mean the symbol is actually inaccessible.\n          // It could be a qualified symbol and hence verify the path\n          // e.g.:\n          // module m {\n          //     export class c {\n          //     }\n          // }\n          // const x: typeof m.c\n          // In the above example when we start with checking if typeof m.c symbol is accessible,\n          // we are going to see if c can be accessed in scope directly.\n          // But it can't, hence the accessible is going to be undefined, but that doesn't mean m.c is inaccessible\n          // It is accessible if the parent m is accessible because then m.c can be accessed through qualification\n\n\n          meaningToLook = getQualifiedLeftMeaning(meaning);\n          symbol = getParentOfSymbol(symbol);\n        } // This could be a symbol that is not exported in the external module\n        // or it could be a symbol from different external module that is not aliased and hence cannot be named\n\n\n        var symbolExternalModule = ts.forEach(initialSymbol.declarations, getExternalModuleContainer);\n\n        if (symbolExternalModule) {\n          var enclosingExternalModule = getExternalModuleContainer(enclosingDeclaration);\n\n          if (symbolExternalModule !== enclosingExternalModule) {\n            // name from different external module that is not visible\n            return {\n              accessibility: 2\n              /* CannotBeNamed */\n              ,\n              errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning),\n              errorModuleName: symbolToString(symbolExternalModule)\n            };\n          }\n        } // Just a local name that is not accessible\n\n\n        return {\n          accessibility: 1\n          /* NotAccessible */\n          ,\n          errorSymbolName: symbolToString(initialSymbol, enclosingDeclaration, meaning)\n        };\n      }\n\n      return {\n        accessibility: 0\n        /* Accessible */\n\n      };\n\n      function getExternalModuleContainer(declaration) {\n        for (; declaration; declaration = declaration.parent) {\n          if (hasExternalModuleSymbol(declaration)) {\n            return getSymbolOfNode(declaration);\n          }\n        }\n      }\n    }\n\n    function hasExternalModuleSymbol(declaration) {\n      return ts.isAmbientModule(declaration) || declaration.kind === 251\n      /* SourceFile */\n      && ts.isExternalOrCommonJsModule(declaration);\n    }\n\n    function hasVisibleDeclarations(symbol) {\n      var aliasesToMakeVisible;\n\n      if (ts.forEach(symbol.declarations, function (declaration) {\n        return !getIsDeclarationVisible(declaration);\n      })) {\n        return undefined;\n      }\n\n      return {\n        accessibility: 0\n        /* Accessible */\n        ,\n        aliasesToMakeVisible: aliasesToMakeVisible\n      };\n\n      function getIsDeclarationVisible(declaration) {\n        if (!isDeclarationVisible(declaration)) {\n          // Mark the unexported alias as visible if its parent is visible\n          // because these kind of aliases can be used to name types in declaration file\n          var anyImportSyntax = getAnyImportSyntax(declaration);\n\n          if (anyImportSyntax && !(anyImportSyntax.flags & 2\n          /* Export */\n          ) && isDeclarationVisible(anyImportSyntax.parent)) {\n            getNodeLinks(declaration).isVisible = true;\n\n            if (aliasesToMakeVisible) {\n              if (!ts.contains(aliasesToMakeVisible, anyImportSyntax)) {\n                aliasesToMakeVisible.push(anyImportSyntax);\n              }\n            } else {\n              aliasesToMakeVisible = [anyImportSyntax];\n            }\n\n            return true;\n          } // Declaration is not visible\n\n\n          return false;\n        }\n\n        return true;\n      }\n    }\n\n    function isEntityNameVisible(entityName, enclosingDeclaration) {\n      // get symbol of the first identifier of the entityName\n      var meaning;\n\n      if (entityName.parent.kind === 155\n      /* TypeQuery */\n      ) {\n          // Typeof value\n          meaning = 107455\n          /* Value */\n          | 1048576\n          /* ExportValue */\n          ;\n        } else if (entityName.kind === 136\n      /* QualifiedName */\n      || entityName.kind === 169\n      /* PropertyAccessExpression */\n      || entityName.parent.kind === 224\n      /* ImportEqualsDeclaration */\n      ) {\n          // Left identifier from type reference or TypeAlias\n          // Entity name of the import declaration\n          meaning = 1536\n          /* Namespace */\n          ;\n        } else {\n        // Type Reference or TypeAlias entity = Identifier\n        meaning = 793056\n        /* Type */\n        ;\n      }\n\n      var firstIdentifier = getFirstIdentifier(entityName);\n      var symbol = resolveName(enclosingDeclaration, firstIdentifier.text, meaning,\n      /*nodeNotFoundErrorMessage*/\n      undefined,\n      /*nameArg*/\n      undefined); // Verify if the symbol is accessible\n\n      return symbol && hasVisibleDeclarations(symbol) || {\n        accessibility: 1\n        /* NotAccessible */\n        ,\n        errorSymbolName: ts.getTextOfNode(firstIdentifier),\n        errorNode: firstIdentifier\n      };\n    }\n\n    function writeKeyword(writer, kind) {\n      writer.writeKeyword(ts.tokenToString(kind));\n    }\n\n    function writePunctuation(writer, kind) {\n      writer.writePunctuation(ts.tokenToString(kind));\n    }\n\n    function writeSpace(writer) {\n      writer.writeSpace(\" \");\n    }\n\n    function symbolToString(symbol, enclosingDeclaration, meaning) {\n      var writer = ts.getSingleLineStringWriter();\n      getSymbolDisplayBuilder().buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning);\n      var result = writer.string();\n      ts.releaseStringWriter(writer);\n      return result;\n    }\n\n    function signatureToString(signature, enclosingDeclaration, flags, kind) {\n      var writer = ts.getSingleLineStringWriter();\n      getSymbolDisplayBuilder().buildSignatureDisplay(signature, writer, enclosingDeclaration, flags, kind);\n      var result = writer.string();\n      ts.releaseStringWriter(writer);\n      return result;\n    }\n\n    function typeToString(type, enclosingDeclaration, flags) {\n      var writer = ts.getSingleLineStringWriter();\n      getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\n      var result = writer.string();\n      ts.releaseStringWriter(writer);\n      var maxLength = compilerOptions.noErrorTruncation || flags & 4\n      /* NoTruncation */\n      ? undefined : 100;\n\n      if (maxLength && result.length >= maxLength) {\n        result = result.substr(0, maxLength - \"...\".length) + \"...\";\n      }\n\n      return result;\n    }\n\n    function typePredicateToString(typePredicate, enclosingDeclaration, flags) {\n      var writer = ts.getSingleLineStringWriter();\n      getSymbolDisplayBuilder().buildTypePredicateDisplay(typePredicate, writer, enclosingDeclaration, flags);\n      var result = writer.string();\n      ts.releaseStringWriter(writer);\n      return result;\n    }\n\n    function getTypeAliasForTypeLiteral(type) {\n      if (type.symbol && type.symbol.flags & 2048\n      /* TypeLiteral */\n      ) {\n          var node = type.symbol.declarations[0].parent;\n\n          while (node.kind === 161\n          /* ParenthesizedType */\n          ) {\n            node = node.parent;\n          }\n\n          if (node.kind === 219\n          /* TypeAliasDeclaration */\n          ) {\n              return getSymbolOfNode(node);\n            }\n        }\n\n      return undefined;\n    }\n\n    function isTopLevelInExternalModuleAugmentation(node) {\n      return node && node.parent && node.parent.kind === 222\n      /* ModuleBlock */\n      && ts.isExternalModuleAugmentation(node.parent.parent);\n    }\n\n    function getSymbolDisplayBuilder() {\n      function getNameOfSymbol(symbol) {\n        if (symbol.declarations && symbol.declarations.length) {\n          var declaration = symbol.declarations[0];\n\n          if (declaration.name) {\n            return ts.declarationNameToString(declaration.name);\n          }\n\n          switch (declaration.kind) {\n            case 189\n            /* ClassExpression */\n            :\n              return \"(Anonymous class)\";\n\n            case 176\n            /* FunctionExpression */\n            :\n            case 177\n            /* ArrowFunction */\n            :\n              return \"(Anonymous function)\";\n          }\n        }\n\n        return symbol.name;\n      }\n      /**\n       * Writes only the name of the symbol out to the writer. Uses the original source text\n       * for the name of the symbol if it is available to match how the user inputted the name.\n       */\n\n\n      function appendSymbolNameOnly(symbol, writer) {\n        writer.writeSymbol(getNameOfSymbol(symbol), symbol);\n      }\n      /**\n       * Enclosing declaration is optional when we don't want to get qualified name in the enclosing declaration scope\n       * Meaning needs to be specified if the enclosing declaration is given\n       */\n\n\n      function buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning, flags, typeFlags) {\n        var parentSymbol;\n\n        function appendParentTypeArgumentsAndSymbolName(symbol) {\n          if (parentSymbol) {\n            // Write type arguments of instantiated class/interface here\n            if (flags & 1\n            /* WriteTypeParametersOrArguments */\n            ) {\n                if (symbol.flags & 16777216\n                /* Instantiated */\n                ) {\n                    buildDisplayForTypeArgumentsAndDelimiters(getTypeParametersOfClassOrInterface(parentSymbol), symbol.mapper, writer, enclosingDeclaration);\n                  } else {\n                  buildTypeParameterDisplayFromSymbol(parentSymbol, writer, enclosingDeclaration);\n                }\n              }\n\n            writePunctuation(writer, 21\n            /* DotToken */\n            );\n          }\n\n          parentSymbol = symbol;\n          appendSymbolNameOnly(symbol, writer);\n        } // const the writer know we just wrote out a symbol.  The declaration emitter writer uses\n        // this to determine if an import it has previously seen (and not written out) needs\n        // to be written to the file once the walk of the tree is complete.\n        //\n        // NOTE(cyrusn): This approach feels somewhat unfortunate.  A simple pass over the tree\n        // up front (for example, during checking) could determine if we need to emit the imports\n        // and we could then access that data during declaration emit.\n\n\n        writer.trackSymbol(symbol, enclosingDeclaration, meaning);\n\n        function walkSymbol(symbol, meaning) {\n          if (symbol) {\n            var accessibleSymbolChain = getAccessibleSymbolChain(symbol, enclosingDeclaration, meaning, !!(flags & 2\n            /* UseOnlyExternalAliasing */\n            ));\n\n            if (!accessibleSymbolChain || needsQualification(accessibleSymbolChain[0], enclosingDeclaration, accessibleSymbolChain.length === 1 ? meaning : getQualifiedLeftMeaning(meaning))) {\n              // Go up and add our parent.\n              walkSymbol(getParentOfSymbol(accessibleSymbolChain ? accessibleSymbolChain[0] : symbol), getQualifiedLeftMeaning(meaning));\n            }\n\n            if (accessibleSymbolChain) {\n              for (var _i = 0, accessibleSymbolChain_1 = accessibleSymbolChain; _i < accessibleSymbolChain_1.length; _i++) {\n                var accessibleSymbol = accessibleSymbolChain_1[_i];\n                appendParentTypeArgumentsAndSymbolName(accessibleSymbol);\n              }\n            } else {\n              // If we didn't find accessible symbol chain for this symbol, break if this is external module\n              if (!parentSymbol && ts.forEach(symbol.declarations, hasExternalModuleSymbol)) {\n                return;\n              } // if this is anonymous type break\n\n\n              if (symbol.flags & 2048\n              /* TypeLiteral */\n              || symbol.flags & 4096\n              /* ObjectLiteral */\n              ) {\n                  return;\n                }\n\n              appendParentTypeArgumentsAndSymbolName(symbol);\n            }\n          }\n        } // Get qualified name if the symbol is not a type parameter\n        // and there is an enclosing declaration or we specifically\n        // asked for it\n\n\n        var isTypeParameter = symbol.flags & 262144\n        /* TypeParameter */\n        ;\n        var typeFormatFlag = 128\n        /* UseFullyQualifiedType */\n        & typeFlags;\n\n        if (!isTypeParameter && (enclosingDeclaration || typeFormatFlag)) {\n          walkSymbol(symbol, meaning);\n          return;\n        }\n\n        return appendParentTypeArgumentsAndSymbolName(symbol);\n      }\n\n      function buildTypeDisplay(type, writer, enclosingDeclaration, globalFlags, symbolStack) {\n        var globalFlagsToPass = globalFlags & 16\n        /* WriteOwnNameForAnyLike */\n        ;\n        var inObjectTypeLiteral = false;\n        return writeType(type, globalFlags);\n\n        function writeType(type, flags) {\n          // Write undefined/null type as any\n          if (type.flags & 16777343\n          /* Intrinsic */\n          ) {\n              // Special handling for unknown / resolving types, they should show up as any and not unknown or __resolving\n              writer.writeKeyword(!(globalFlags & 16\n              /* WriteOwnNameForAnyLike */\n              ) && isTypeAny(type) ? \"any\" : type.intrinsicName);\n            } else if (type.flags & 33554432\n          /* ThisType */\n          ) {\n              if (inObjectTypeLiteral) {\n                writer.reportInaccessibleThisError();\n              }\n\n              writer.writeKeyword(\"this\");\n            } else if (type.flags & 4096\n          /* Reference */\n          ) {\n              writeTypeReference(type, flags);\n            } else if (type.flags & (1024\n          /* Class */\n          | 2048\n          /* Interface */\n          | 128\n          /* Enum */\n          | 512\n          /* TypeParameter */\n          )) {\n            // The specified symbol flags need to be reinterpreted as type flags\n            buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, 793056\n            /* Type */\n            , 0\n            /* None */\n            , flags);\n          } else if (type.flags & 8192\n          /* Tuple */\n          ) {\n              writeTupleType(type);\n            } else if (type.flags & 49152\n          /* UnionOrIntersection */\n          ) {\n              writeUnionOrIntersectionType(type, flags);\n            } else if (type.flags & 65536\n          /* Anonymous */\n          ) {\n              writeAnonymousType(type, flags);\n            } else if (type.flags & 256\n          /* StringLiteral */\n          ) {\n              writer.writeStringLiteral(\"\\\"\" + ts.escapeString(type.text) + \"\\\"\");\n            } else {\n            // Should never get here\n            // { ... }\n            writePunctuation(writer, 15\n            /* OpenBraceToken */\n            );\n            writeSpace(writer);\n            writePunctuation(writer, 22\n            /* DotDotDotToken */\n            );\n            writeSpace(writer);\n            writePunctuation(writer, 16\n            /* CloseBraceToken */\n            );\n          }\n        }\n\n        function writeTypeList(types, delimiter) {\n          for (var i = 0; i < types.length; i++) {\n            if (i > 0) {\n              if (delimiter !== 24\n              /* CommaToken */\n              ) {\n                  writeSpace(writer);\n                }\n\n              writePunctuation(writer, delimiter);\n              writeSpace(writer);\n            }\n\n            writeType(types[i], delimiter === 24\n            /* CommaToken */\n            ? 0\n            /* None */\n            : 64\n            /* InElementType */\n            );\n          }\n        }\n\n        function writeSymbolTypeReference(symbol, typeArguments, pos, end, flags) {\n          // Unnamed function expressions and arrow functions have reserved names that we don't want to display\n          if (symbol.flags & 32\n          /* Class */\n          || !isReservedMemberName(symbol.name)) {\n            buildSymbolDisplay(symbol, writer, enclosingDeclaration, 793056\n            /* Type */\n            , 0\n            /* None */\n            , flags);\n          }\n\n          if (pos < end) {\n            writePunctuation(writer, 25\n            /* LessThanToken */\n            );\n            writeType(typeArguments[pos], 0\n            /* None */\n            );\n            pos++;\n\n            while (pos < end) {\n              writePunctuation(writer, 24\n              /* CommaToken */\n              );\n              writeSpace(writer);\n              writeType(typeArguments[pos], 0\n              /* None */\n              );\n              pos++;\n            }\n\n            writePunctuation(writer, 27\n            /* GreaterThanToken */\n            );\n          }\n        }\n\n        function writeTypeReference(type, flags) {\n          var typeArguments = type.typeArguments || emptyArray;\n\n          if (type.target === globalArrayType && !(flags & 1\n          /* WriteArrayAsGenericType */\n          )) {\n            writeType(typeArguments[0], 64\n            /* InElementType */\n            );\n            writePunctuation(writer, 19\n            /* OpenBracketToken */\n            );\n            writePunctuation(writer, 20\n            /* CloseBracketToken */\n            );\n          } else {\n            // Write the type reference in the format f<A>.g<B>.C<X, Y> where A and B are type arguments\n            // for outer type parameters, and f and g are the respective declaring containers of those\n            // type parameters.\n            var outerTypeParameters = type.target.outerTypeParameters;\n            var i = 0;\n\n            if (outerTypeParameters) {\n              var length_1 = outerTypeParameters.length;\n\n              while (i < length_1) {\n                // Find group of type arguments for type parameters with the same declaring container.\n                var start = i;\n                var parent_4 = getParentSymbolOfTypeParameter(outerTypeParameters[i]);\n\n                do {\n                  i++;\n                } while (i < length_1 && getParentSymbolOfTypeParameter(outerTypeParameters[i]) === parent_4); // When type parameters are their own type arguments for the whole group (i.e. we have\n                // the default outer type arguments), we don't show the group.\n\n\n                if (!ts.rangeEquals(outerTypeParameters, typeArguments, start, i)) {\n                  writeSymbolTypeReference(parent_4, typeArguments, start, i, flags);\n                  writePunctuation(writer, 21\n                  /* DotToken */\n                  );\n                }\n              }\n            }\n\n            var typeParameterCount = (type.target.typeParameters || emptyArray).length;\n            writeSymbolTypeReference(type.symbol, typeArguments, i, typeParameterCount, flags);\n          }\n        }\n\n        function writeTupleType(type) {\n          writePunctuation(writer, 19\n          /* OpenBracketToken */\n          );\n          writeTypeList(type.elementTypes, 24\n          /* CommaToken */\n          );\n          writePunctuation(writer, 20\n          /* CloseBracketToken */\n          );\n        }\n\n        function writeUnionOrIntersectionType(type, flags) {\n          if (flags & 64\n          /* InElementType */\n          ) {\n              writePunctuation(writer, 17\n              /* OpenParenToken */\n              );\n            }\n\n          writeTypeList(type.types, type.flags & 16384\n          /* Union */\n          ? 47\n          /* BarToken */\n          : 46\n          /* AmpersandToken */\n          );\n\n          if (flags & 64\n          /* InElementType */\n          ) {\n              writePunctuation(writer, 18\n              /* CloseParenToken */\n              );\n            }\n        }\n\n        function writeAnonymousType(type, flags) {\n          var symbol = type.symbol;\n\n          if (symbol) {\n            // Always use 'typeof T' for type of class, enum, and module objects\n            if (symbol.flags & (32\n            /* Class */\n            | 384\n            /* Enum */\n            | 512\n            /* ValueModule */\n            )) {\n              writeTypeofSymbol(type, flags);\n            } else if (shouldWriteTypeOfFunctionSymbol()) {\n              writeTypeofSymbol(type, flags);\n            } else if (ts.contains(symbolStack, symbol)) {\n              // If type is an anonymous type literal in a type alias declaration, use type alias name\n              var typeAlias = getTypeAliasForTypeLiteral(type);\n\n              if (typeAlias) {\n                // The specified symbol flags need to be reinterpreted as type flags\n                buildSymbolDisplay(typeAlias, writer, enclosingDeclaration, 793056\n                /* Type */\n                , 0\n                /* None */\n                , flags);\n              } else {\n                // Recursive usage, use any\n                writeKeyword(writer, 117\n                /* AnyKeyword */\n                );\n              }\n            } else {\n              // Since instantiations of the same anonymous type have the same symbol, tracking symbols instead\n              // of types allows us to catch circular references to instantiations of the same anonymous type\n              if (!symbolStack) {\n                symbolStack = [];\n              }\n\n              symbolStack.push(symbol);\n              writeLiteralType(type, flags);\n              symbolStack.pop();\n            }\n          } else {\n            // Anonymous types with no symbol are never circular\n            writeLiteralType(type, flags);\n          }\n\n          function shouldWriteTypeOfFunctionSymbol() {\n            var isStaticMethodSymbol = !!(symbol.flags & 8192\n            /* Method */\n            && ts.forEach(symbol.declarations, function (declaration) {\n              return declaration.flags & 64\n              /* Static */\n              ;\n            }));\n            var isNonLocalFunctionSymbol = !!(symbol.flags & 16\n            /* Function */\n            ) && (symbol.parent || ts.forEach(symbol.declarations, function (declaration) {\n              return declaration.parent.kind === 251\n              /* SourceFile */\n              || declaration.parent.kind === 222\n              /* ModuleBlock */\n              ;\n            }));\n\n            if (isStaticMethodSymbol || isNonLocalFunctionSymbol) {\n              // typeof is allowed only for static/non local functions\n              return !!(flags & 2\n              /* UseTypeOfFunction */\n              ) || ts.contains(symbolStack, symbol); // it is type of the symbol uses itself recursively\n            }\n          }\n        }\n\n        function writeTypeofSymbol(type, typeFormatFlags) {\n          writeKeyword(writer, 101\n          /* TypeOfKeyword */\n          );\n          writeSpace(writer);\n          buildSymbolDisplay(type.symbol, writer, enclosingDeclaration, 107455\n          /* Value */\n          , 0\n          /* None */\n          , typeFormatFlags);\n        }\n\n        function getIndexerParameterName(type, indexKind, fallbackName) {\n          var declaration = getIndexDeclarationOfSymbol(type.symbol, indexKind);\n\n          if (!declaration) {\n            // declaration might not be found if indexer was added from the contextual type.\n            // in this case use fallback name\n            return fallbackName;\n          }\n\n          ts.Debug.assert(declaration.parameters.length !== 0);\n          return ts.declarationNameToString(declaration.parameters[0].name);\n        }\n\n        function writeLiteralType(type, flags) {\n          var resolved = resolveStructuredTypeMembers(type);\n\n          if (!resolved.properties.length && !resolved.stringIndexType && !resolved.numberIndexType) {\n            if (!resolved.callSignatures.length && !resolved.constructSignatures.length) {\n              writePunctuation(writer, 15\n              /* OpenBraceToken */\n              );\n              writePunctuation(writer, 16\n              /* CloseBraceToken */\n              );\n              return;\n            }\n\n            if (resolved.callSignatures.length === 1 && !resolved.constructSignatures.length) {\n              if (flags & 64\n              /* InElementType */\n              ) {\n                  writePunctuation(writer, 17\n                  /* OpenParenToken */\n                  );\n                }\n\n              buildSignatureDisplay(resolved.callSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | 8\n              /* WriteArrowStyleSignature */\n              ,\n              /*kind*/\n              undefined, symbolStack);\n\n              if (flags & 64\n              /* InElementType */\n              ) {\n                  writePunctuation(writer, 18\n                  /* CloseParenToken */\n                  );\n                }\n\n              return;\n            }\n\n            if (resolved.constructSignatures.length === 1 && !resolved.callSignatures.length) {\n              if (flags & 64\n              /* InElementType */\n              ) {\n                  writePunctuation(writer, 17\n                  /* OpenParenToken */\n                  );\n                }\n\n              writeKeyword(writer, 92\n              /* NewKeyword */\n              );\n              writeSpace(writer);\n              buildSignatureDisplay(resolved.constructSignatures[0], writer, enclosingDeclaration, globalFlagsToPass | 8\n              /* WriteArrowStyleSignature */\n              ,\n              /*kind*/\n              undefined, symbolStack);\n\n              if (flags & 64\n              /* InElementType */\n              ) {\n                  writePunctuation(writer, 18\n                  /* CloseParenToken */\n                  );\n                }\n\n              return;\n            }\n          }\n\n          var saveInObjectTypeLiteral = inObjectTypeLiteral;\n          inObjectTypeLiteral = true;\n          writePunctuation(writer, 15\n          /* OpenBraceToken */\n          );\n          writer.writeLine();\n          writer.increaseIndent();\n\n          for (var _i = 0, _a = resolved.callSignatures; _i < _a.length; _i++) {\n            var signature = _a[_i];\n            buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass,\n            /*kind*/\n            undefined, symbolStack);\n            writePunctuation(writer, 23\n            /* SemicolonToken */\n            );\n            writer.writeLine();\n          }\n\n          for (var _b = 0, _c = resolved.constructSignatures; _b < _c.length; _b++) {\n            var signature = _c[_b];\n            buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass, 1\n            /* Construct */\n            , symbolStack);\n            writePunctuation(writer, 23\n            /* SemicolonToken */\n            );\n            writer.writeLine();\n          }\n\n          if (resolved.stringIndexType) {\n            // [x: string]:\n            writePunctuation(writer, 19\n            /* OpenBracketToken */\n            );\n            writer.writeParameter(getIndexerParameterName(resolved, 0\n            /* String */\n            ,\n            /*fallbackName*/\n            \"x\"));\n            writePunctuation(writer, 54\n            /* ColonToken */\n            );\n            writeSpace(writer);\n            writeKeyword(writer, 130\n            /* StringKeyword */\n            );\n            writePunctuation(writer, 20\n            /* CloseBracketToken */\n            );\n            writePunctuation(writer, 54\n            /* ColonToken */\n            );\n            writeSpace(writer);\n            writeType(resolved.stringIndexType, 0\n            /* None */\n            );\n            writePunctuation(writer, 23\n            /* SemicolonToken */\n            );\n            writer.writeLine();\n          }\n\n          if (resolved.numberIndexType) {\n            // [x: number]:\n            writePunctuation(writer, 19\n            /* OpenBracketToken */\n            );\n            writer.writeParameter(getIndexerParameterName(resolved, 1\n            /* Number */\n            ,\n            /*fallbackName*/\n            \"x\"));\n            writePunctuation(writer, 54\n            /* ColonToken */\n            );\n            writeSpace(writer);\n            writeKeyword(writer, 128\n            /* NumberKeyword */\n            );\n            writePunctuation(writer, 20\n            /* CloseBracketToken */\n            );\n            writePunctuation(writer, 54\n            /* ColonToken */\n            );\n            writeSpace(writer);\n            writeType(resolved.numberIndexType, 0\n            /* None */\n            );\n            writePunctuation(writer, 23\n            /* SemicolonToken */\n            );\n            writer.writeLine();\n          }\n\n          for (var _d = 0, _e = resolved.properties; _d < _e.length; _d++) {\n            var p = _e[_d];\n            var t = getTypeOfSymbol(p);\n\n            if (p.flags & (16\n            /* Function */\n            | 8192\n            /* Method */\n            ) && !getPropertiesOfObjectType(t).length) {\n              var signatures = getSignaturesOfType(t, 0\n              /* Call */\n              );\n\n              for (var _f = 0, signatures_1 = signatures; _f < signatures_1.length; _f++) {\n                var signature = signatures_1[_f];\n                buildSymbolDisplay(p, writer);\n\n                if (p.flags & 536870912\n                /* Optional */\n                ) {\n                    writePunctuation(writer, 53\n                    /* QuestionToken */\n                    );\n                  }\n\n                buildSignatureDisplay(signature, writer, enclosingDeclaration, globalFlagsToPass,\n                /*kind*/\n                undefined, symbolStack);\n                writePunctuation(writer, 23\n                /* SemicolonToken */\n                );\n                writer.writeLine();\n              }\n            } else {\n              buildSymbolDisplay(p, writer);\n\n              if (p.flags & 536870912\n              /* Optional */\n              ) {\n                  writePunctuation(writer, 53\n                  /* QuestionToken */\n                  );\n                }\n\n              writePunctuation(writer, 54\n              /* ColonToken */\n              );\n              writeSpace(writer);\n              writeType(t, 0\n              /* None */\n              );\n              writePunctuation(writer, 23\n              /* SemicolonToken */\n              );\n              writer.writeLine();\n            }\n          }\n\n          writer.decreaseIndent();\n          writePunctuation(writer, 16\n          /* CloseBraceToken */\n          );\n          inObjectTypeLiteral = saveInObjectTypeLiteral;\n        }\n      }\n\n      function buildTypeParameterDisplayFromSymbol(symbol, writer, enclosingDeclaration, flags) {\n        var targetSymbol = getTargetSymbol(symbol);\n\n        if (targetSymbol.flags & 32\n        /* Class */\n        || targetSymbol.flags & 64\n        /* Interface */\n        || targetSymbol.flags & 524288\n        /* TypeAlias */\n        ) {\n            buildDisplayForTypeParametersAndDelimiters(getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol), writer, enclosingDeclaration, flags);\n          }\n      }\n\n      function buildTypeParameterDisplay(tp, writer, enclosingDeclaration, flags, symbolStack) {\n        appendSymbolNameOnly(tp.symbol, writer);\n        var constraint = getConstraintOfTypeParameter(tp);\n\n        if (constraint) {\n          writeSpace(writer);\n          writeKeyword(writer, 83\n          /* ExtendsKeyword */\n          );\n          writeSpace(writer);\n          buildTypeDisplay(constraint, writer, enclosingDeclaration, flags, symbolStack);\n        }\n      }\n\n      function buildParameterDisplay(p, writer, enclosingDeclaration, flags, symbolStack) {\n        var parameterNode = p.valueDeclaration;\n\n        if (ts.isRestParameter(parameterNode)) {\n          writePunctuation(writer, 22\n          /* DotDotDotToken */\n          );\n        }\n\n        appendSymbolNameOnly(p, writer);\n\n        if (isOptionalParameter(parameterNode)) {\n          writePunctuation(writer, 53\n          /* QuestionToken */\n          );\n        }\n\n        writePunctuation(writer, 54\n        /* ColonToken */\n        );\n        writeSpace(writer);\n        buildTypeDisplay(getTypeOfSymbol(p), writer, enclosingDeclaration, flags, symbolStack);\n      }\n\n      function buildDisplayForTypeParametersAndDelimiters(typeParameters, writer, enclosingDeclaration, flags, symbolStack) {\n        if (typeParameters && typeParameters.length) {\n          writePunctuation(writer, 25\n          /* LessThanToken */\n          );\n\n          for (var i = 0; i < typeParameters.length; i++) {\n            if (i > 0) {\n              writePunctuation(writer, 24\n              /* CommaToken */\n              );\n              writeSpace(writer);\n            }\n\n            buildTypeParameterDisplay(typeParameters[i], writer, enclosingDeclaration, flags, symbolStack);\n          }\n\n          writePunctuation(writer, 27\n          /* GreaterThanToken */\n          );\n        }\n      }\n\n      function buildDisplayForTypeArgumentsAndDelimiters(typeParameters, mapper, writer, enclosingDeclaration, flags, symbolStack) {\n        if (typeParameters && typeParameters.length) {\n          writePunctuation(writer, 25\n          /* LessThanToken */\n          );\n\n          for (var i = 0; i < typeParameters.length; i++) {\n            if (i > 0) {\n              writePunctuation(writer, 24\n              /* CommaToken */\n              );\n              writeSpace(writer);\n            }\n\n            buildTypeDisplay(mapper(typeParameters[i]), writer, enclosingDeclaration, 0\n            /* None */\n            );\n          }\n\n          writePunctuation(writer, 27\n          /* GreaterThanToken */\n          );\n        }\n      }\n\n      function buildDisplayForParametersAndDelimiters(parameters, writer, enclosingDeclaration, flags, symbolStack) {\n        writePunctuation(writer, 17\n        /* OpenParenToken */\n        );\n\n        for (var i = 0; i < parameters.length; i++) {\n          if (i > 0) {\n            writePunctuation(writer, 24\n            /* CommaToken */\n            );\n            writeSpace(writer);\n          }\n\n          buildParameterDisplay(parameters[i], writer, enclosingDeclaration, flags, symbolStack);\n        }\n\n        writePunctuation(writer, 18\n        /* CloseParenToken */\n        );\n      }\n\n      function buildTypePredicateDisplay(predicate, writer, enclosingDeclaration, flags, symbolStack) {\n        if (ts.isIdentifierTypePredicate(predicate)) {\n          writer.writeParameter(predicate.parameterName);\n        } else {\n          writeKeyword(writer, 97\n          /* ThisKeyword */\n          );\n        }\n\n        writeSpace(writer);\n        writeKeyword(writer, 124\n        /* IsKeyword */\n        );\n        writeSpace(writer);\n        buildTypeDisplay(predicate.type, writer, enclosingDeclaration, flags, symbolStack);\n      }\n\n      function buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, symbolStack) {\n        if (flags & 8\n        /* WriteArrowStyleSignature */\n        ) {\n            writeSpace(writer);\n            writePunctuation(writer, 34\n            /* EqualsGreaterThanToken */\n            );\n          } else {\n          writePunctuation(writer, 54\n          /* ColonToken */\n          );\n        }\n\n        writeSpace(writer);\n\n        if (signature.typePredicate) {\n          buildTypePredicateDisplay(signature.typePredicate, writer, enclosingDeclaration, flags, symbolStack);\n        } else {\n          var returnType = getReturnTypeOfSignature(signature);\n          buildTypeDisplay(returnType, writer, enclosingDeclaration, flags, symbolStack);\n        }\n      }\n\n      function buildSignatureDisplay(signature, writer, enclosingDeclaration, flags, kind, symbolStack) {\n        if (kind === 1\n        /* Construct */\n        ) {\n            writeKeyword(writer, 92\n            /* NewKeyword */\n            );\n            writeSpace(writer);\n          }\n\n        if (signature.target && flags & 32\n        /* WriteTypeArgumentsOfSignature */\n        ) {\n          // Instantiated signature, write type arguments instead\n          // This is achieved by passing in the mapper separately\n          buildDisplayForTypeArgumentsAndDelimiters(signature.target.typeParameters, signature.mapper, writer, enclosingDeclaration);\n        } else {\n          buildDisplayForTypeParametersAndDelimiters(signature.typeParameters, writer, enclosingDeclaration, flags, symbolStack);\n        }\n\n        buildDisplayForParametersAndDelimiters(signature.parameters, writer, enclosingDeclaration, flags, symbolStack);\n        buildReturnTypeDisplay(signature, writer, enclosingDeclaration, flags, symbolStack);\n      }\n\n      return _displayBuilder || (_displayBuilder = {\n        buildSymbolDisplay: buildSymbolDisplay,\n        buildTypeDisplay: buildTypeDisplay,\n        buildTypeParameterDisplay: buildTypeParameterDisplay,\n        buildTypePredicateDisplay: buildTypePredicateDisplay,\n        buildParameterDisplay: buildParameterDisplay,\n        buildDisplayForParametersAndDelimiters: buildDisplayForParametersAndDelimiters,\n        buildDisplayForTypeParametersAndDelimiters: buildDisplayForTypeParametersAndDelimiters,\n        buildTypeParameterDisplayFromSymbol: buildTypeParameterDisplayFromSymbol,\n        buildSignatureDisplay: buildSignatureDisplay,\n        buildReturnTypeDisplay: buildReturnTypeDisplay\n      });\n    }\n\n    function isDeclarationVisible(node) {\n      if (node) {\n        var links = getNodeLinks(node);\n\n        if (links.isVisible === undefined) {\n          links.isVisible = !!determineIfDeclarationIsVisible();\n        }\n\n        return links.isVisible;\n      }\n\n      return false;\n\n      function determineIfDeclarationIsVisible() {\n        switch (node.kind) {\n          case 166\n          /* BindingElement */\n          :\n            return isDeclarationVisible(node.parent.parent);\n\n          case 214\n          /* VariableDeclaration */\n          :\n            if (ts.isBindingPattern(node.name) && !node.name.elements.length) {\n              // If the binding pattern is empty, this variable declaration is not visible\n              return false;\n            }\n\n          // Otherwise fall through\n\n          case 221\n          /* ModuleDeclaration */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 219\n          /* TypeAliasDeclaration */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n            // external module augmentation is always visible\n            if (ts.isExternalModuleAugmentation(node)) {\n              return true;\n            }\n\n            var parent_5 = getDeclarationContainer(node); // If the node is not exported or it is not ambient module element (except import declaration)\n\n            if (!(ts.getCombinedNodeFlags(node) & 2\n            /* Export */\n            ) && !(node.kind !== 224\n            /* ImportEqualsDeclaration */\n            && parent_5.kind !== 251\n            /* SourceFile */\n            && ts.isInAmbientContext(parent_5))) {\n              return isGlobalSourceFile(parent_5);\n            } // Exported members/ambient module elements (exception import declaration) are visible if parent is visible\n\n\n            return isDeclarationVisible(parent_5);\n\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            if (node.flags & (16\n            /* Private */\n            | 32\n            /* Protected */\n            )) {\n              // Private/protected properties/methods are not visible\n              return false;\n            }\n\n          // Public properties/methods are visible if its parents are visible, so const it fall into next case statement\n\n          case 145\n          /* Constructor */\n          :\n          case 149\n          /* ConstructSignature */\n          :\n          case 148\n          /* CallSignature */\n          :\n          case 150\n          /* IndexSignature */\n          :\n          case 139\n          /* Parameter */\n          :\n          case 222\n          /* ModuleBlock */\n          :\n          case 153\n          /* FunctionType */\n          :\n          case 154\n          /* ConstructorType */\n          :\n          case 156\n          /* TypeLiteral */\n          :\n          case 152\n          /* TypeReference */\n          :\n          case 157\n          /* ArrayType */\n          :\n          case 158\n          /* TupleType */\n          :\n          case 159\n          /* UnionType */\n          :\n          case 160\n          /* IntersectionType */\n          :\n          case 161\n          /* ParenthesizedType */\n          :\n            return isDeclarationVisible(node.parent);\n          // Default binding, import specifier and namespace import is visible\n          // only on demand so by default it is not visible\n\n          case 226\n          /* ImportClause */\n          :\n          case 227\n          /* NamespaceImport */\n          :\n          case 229\n          /* ImportSpecifier */\n          :\n            return false;\n          // Type parameters are always visible\n\n          case 138\n          /* TypeParameter */\n          : // Source file is always visible\n\n          case 251\n          /* SourceFile */\n          :\n            return true;\n          // Export assignments do not create name bindings outside the module\n\n          case 230\n          /* ExportAssignment */\n          :\n            return false;\n\n          default:\n            ts.Debug.fail(\"isDeclarationVisible unknown: SyntaxKind: \" + node.kind);\n        }\n      }\n    }\n\n    function collectLinkedAliases(node) {\n      var exportSymbol;\n\n      if (node.parent && node.parent.kind === 230\n      /* ExportAssignment */\n      ) {\n          exportSymbol = resolveName(node.parent, node.text, 107455\n          /* Value */\n          | 793056\n          /* Type */\n          | 1536\n          /* Namespace */\n          | 8388608\n          /* Alias */\n          , ts.Diagnostics.Cannot_find_name_0, node);\n        } else if (node.parent.kind === 233\n      /* ExportSpecifier */\n      ) {\n          var exportSpecifier = node.parent;\n          exportSymbol = exportSpecifier.parent.parent.moduleSpecifier ? getExternalModuleMember(exportSpecifier.parent.parent, exportSpecifier) : resolveEntityName(exportSpecifier.propertyName || exportSpecifier.name, 107455\n          /* Value */\n          | 793056\n          /* Type */\n          | 1536\n          /* Namespace */\n          | 8388608\n          /* Alias */\n          );\n        }\n\n      var result = [];\n\n      if (exportSymbol) {\n        buildVisibleNodeList(exportSymbol.declarations);\n      }\n\n      return result;\n\n      function buildVisibleNodeList(declarations) {\n        ts.forEach(declarations, function (declaration) {\n          getNodeLinks(declaration).isVisible = true;\n          var resultNode = getAnyImportSyntax(declaration) || declaration;\n\n          if (!ts.contains(result, resultNode)) {\n            result.push(resultNode);\n          }\n\n          if (ts.isInternalModuleImportEqualsDeclaration(declaration)) {\n            // Add the referenced top container visible\n            var internalModuleReference = declaration.moduleReference;\n            var firstIdentifier = getFirstIdentifier(internalModuleReference);\n            var importSymbol = resolveName(declaration, firstIdentifier.text, 107455\n            /* Value */\n            | 793056\n            /* Type */\n            | 1536\n            /* Namespace */\n            , ts.Diagnostics.Cannot_find_name_0, firstIdentifier);\n\n            if (importSymbol) {\n              buildVisibleNodeList(importSymbol.declarations);\n            }\n          }\n        });\n      }\n    }\n    /**\n     * Push an entry on the type resolution stack. If an entry with the given target and the given property name\n     * is already on the stack, and no entries in between already have a type, then a circularity has occurred.\n     * In this case, the result values of the existing entry and all entries pushed after it are changed to false,\n     * and the value false is returned. Otherwise, the new entry is just pushed onto the stack, and true is returned.\n     * In order to see if the same query has already been done before, the target object and the propertyName both\n     * must match the one passed in.\n     *\n     * @param target The symbol, type, or signature whose type is being queried\n     * @param propertyName The property name that should be used to query the target for its type\n     */\n\n\n    function pushTypeResolution(target, propertyName) {\n      var resolutionCycleStartIndex = findResolutionCycleStartIndex(target, propertyName);\n\n      if (resolutionCycleStartIndex >= 0) {\n        // A cycle was found\n        var length_2 = resolutionTargets.length;\n\n        for (var i = resolutionCycleStartIndex; i < length_2; i++) {\n          resolutionResults[i] = false;\n        }\n\n        return false;\n      }\n\n      resolutionTargets.push(target);\n      resolutionResults.push(\n      /*items*/\n      true);\n      resolutionPropertyNames.push(propertyName);\n      return true;\n    }\n\n    function findResolutionCycleStartIndex(target, propertyName) {\n      for (var i = resolutionTargets.length - 1; i >= 0; i--) {\n        if (hasType(resolutionTargets[i], resolutionPropertyNames[i])) {\n          return -1;\n        }\n\n        if (resolutionTargets[i] === target && resolutionPropertyNames[i] === propertyName) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    function hasType(target, propertyName) {\n      if (propertyName === 0\n      /* Type */\n      ) {\n          return getSymbolLinks(target).type;\n        }\n\n      if (propertyName === 2\n      /* DeclaredType */\n      ) {\n          return getSymbolLinks(target).declaredType;\n        }\n\n      if (propertyName === 1\n      /* ResolvedBaseConstructorType */\n      ) {\n          ts.Debug.assert(!!(target.flags & 1024\n          /* Class */\n          ));\n          return target.resolvedBaseConstructorType;\n        }\n\n      if (propertyName === 3\n      /* ResolvedReturnType */\n      ) {\n          return target.resolvedReturnType;\n        }\n\n      ts.Debug.fail(\"Unhandled TypeSystemPropertyName \" + propertyName);\n    } // Pop an entry from the type resolution stack and return its associated result value. The result value will\n    // be true if no circularities were detected, or false if a circularity was found.\n\n\n    function popTypeResolution() {\n      resolutionTargets.pop();\n      resolutionPropertyNames.pop();\n      return resolutionResults.pop();\n    }\n\n    function getDeclarationContainer(node) {\n      node = ts.getRootDeclaration(node);\n\n      while (node) {\n        switch (node.kind) {\n          case 214\n          /* VariableDeclaration */\n          :\n          case 215\n          /* VariableDeclarationList */\n          :\n          case 229\n          /* ImportSpecifier */\n          :\n          case 228\n          /* NamedImports */\n          :\n          case 227\n          /* NamespaceImport */\n          :\n          case 226\n          /* ImportClause */\n          :\n            node = node.parent;\n            break;\n\n          default:\n            return node.parent;\n        }\n      }\n    }\n\n    function getTypeOfPrototypeProperty(prototype) {\n      // TypeScript 1.0 spec (April 2014): 8.4\n      // Every class automatically contains a static property member named 'prototype',\n      // the type of which is an instantiation of the class type with type Any supplied as a type argument for each type parameter.\n      // It is an error to explicitly declare a static property member with the name 'prototype'.\n      var classType = getDeclaredTypeOfSymbol(getParentOfSymbol(prototype));\n      return classType.typeParameters ? createTypeReference(classType, ts.map(classType.typeParameters, function (_) {\n        return anyType;\n      })) : classType;\n    } // Return the type of the given property in the given type, or undefined if no such property exists\n\n\n    function getTypeOfPropertyOfType(type, name) {\n      var prop = getPropertyOfType(type, name);\n      return prop ? getTypeOfSymbol(prop) : undefined;\n    }\n\n    function isTypeAny(type) {\n      return type && (type.flags & 1\n      /* Any */\n      ) !== 0;\n    } // Return the type of a binding element parent. We check SymbolLinks first to see if a type has been\n    // assigned by contextual typing.\n\n\n    function getTypeForBindingElementParent(node) {\n      var symbol = getSymbolOfNode(node);\n      return symbol && getSymbolLinks(symbol).type || getTypeForVariableLikeDeclaration(node);\n    }\n\n    function getTextOfPropertyName(name) {\n      switch (name.kind) {\n        case 69\n        /* Identifier */\n        :\n          return name.text;\n\n        case 9\n        /* StringLiteral */\n        :\n        case 8\n        /* NumericLiteral */\n        :\n          return name.text;\n\n        case 137\n        /* ComputedPropertyName */\n        :\n          if (ts.isStringOrNumericLiteral(name.expression.kind)) {\n            return name.expression.text;\n          }\n\n      }\n\n      return undefined;\n    }\n\n    function isComputedNonLiteralName(name) {\n      return name.kind === 137\n      /* ComputedPropertyName */\n      && !ts.isStringOrNumericLiteral(name.expression.kind);\n    } // Return the inferred type for a binding element\n\n\n    function getTypeForBindingElement(declaration) {\n      var pattern = declaration.parent;\n      var parentType = getTypeForBindingElementParent(pattern.parent); // If parent has the unknown (error) type, then so does this binding element\n\n      if (parentType === unknownType) {\n        return unknownType;\n      } // If no type was specified or inferred for parent, or if the specified or inferred type is any,\n      // infer from the initializer of the binding element if one is present. Otherwise, go with the\n      // undefined or any type of the parent.\n\n\n      if (!parentType || isTypeAny(parentType)) {\n        if (declaration.initializer) {\n          return checkExpressionCached(declaration.initializer);\n        }\n\n        return parentType;\n      }\n\n      var type;\n\n      if (pattern.kind === 164\n      /* ObjectBindingPattern */\n      ) {\n          // Use explicitly specified property name ({ p: xxx } form), or otherwise the implied name ({ p } form)\n          var name_10 = declaration.propertyName || declaration.name;\n\n          if (isComputedNonLiteralName(name_10)) {\n            // computed properties with non-literal names are treated as 'any'\n            return anyType;\n          } // Use type of the specified property, or otherwise, for a numeric name, the type of the numeric index signature,\n          // or otherwise the type of the string index signature.\n\n\n          var text = getTextOfPropertyName(name_10);\n          type = getTypeOfPropertyOfType(parentType, text) || isNumericLiteralName(text) && getIndexTypeOfType(parentType, 1\n          /* Number */\n          ) || getIndexTypeOfType(parentType, 0\n          /* String */\n          );\n\n          if (!type) {\n            error(name_10, ts.Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(parentType), ts.declarationNameToString(name_10));\n            return unknownType;\n          }\n        } else {\n        // This elementType will be used if the specific property corresponding to this index is not\n        // present (aka the tuple element property). This call also checks that the parentType is in\n        // fact an iterable or array (depending on target language).\n        var elementType = checkIteratedTypeOrElementType(parentType, pattern,\n        /*allowStringInput*/\n        false);\n\n        if (!declaration.dotDotDotToken) {\n          // Use specific property type when parent is a tuple or numeric index type when parent is an array\n          var propName = \"\" + ts.indexOf(pattern.elements, declaration);\n          type = isTupleLikeType(parentType) ? getTypeOfPropertyOfType(parentType, propName) : elementType;\n\n          if (!type) {\n            if (isTupleType(parentType)) {\n              error(declaration, ts.Diagnostics.Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2, typeToString(parentType), parentType.elementTypes.length, pattern.elements.length);\n            } else {\n              error(declaration, ts.Diagnostics.Type_0_has_no_property_1, typeToString(parentType), propName);\n            }\n\n            return unknownType;\n          }\n        } else {\n          // Rest element has an array type with the same element type as the parent type\n          type = createArrayType(elementType);\n        }\n      }\n\n      return type;\n    }\n\n    function getTypeForVariableLikeDeclarationFromJSDocComment(declaration) {\n      var jsDocType = getJSDocTypeForVariableLikeDeclarationFromJSDocComment(declaration);\n\n      if (jsDocType) {\n        return getTypeFromTypeNode(jsDocType);\n      }\n    }\n\n    function getJSDocTypeForVariableLikeDeclarationFromJSDocComment(declaration) {\n      // First, see if this node has an @type annotation on it directly.\n      var typeTag = ts.getJSDocTypeTag(declaration);\n\n      if (typeTag && typeTag.typeExpression) {\n        return typeTag.typeExpression.type;\n      }\n\n      if (declaration.kind === 214\n      /* VariableDeclaration */\n      && declaration.parent.kind === 215\n      /* VariableDeclarationList */\n      && declaration.parent.parent.kind === 196\n      /* VariableStatement */\n      ) {\n          // @type annotation might have been on the variable statement, try that instead.\n          var annotation = ts.getJSDocTypeTag(declaration.parent.parent);\n\n          if (annotation && annotation.typeExpression) {\n            return annotation.typeExpression.type;\n          }\n        } else if (declaration.kind === 139\n      /* Parameter */\n      ) {\n          // If it's a parameter, see if the parent has a jsdoc comment with an @param\n          // annotation.\n          var paramTag = ts.getCorrespondingJSDocParameterTag(declaration);\n\n          if (paramTag && paramTag.typeExpression) {\n            return paramTag.typeExpression.type;\n          }\n        }\n\n      return undefined;\n    } // Return the inferred type for a variable, parameter, or property declaration\n\n\n    function getTypeForVariableLikeDeclaration(declaration) {\n      if (declaration.parserContextFlags & 32\n      /* JavaScriptFile */\n      ) {\n          // If this is a variable in a JavaScript file, then use the JSDoc type (if it has\n          // one as its type), otherwise fallback to the below standard TS codepaths to\n          // try to figure it out.\n          var type = getTypeForVariableLikeDeclarationFromJSDocComment(declaration);\n\n          if (type && type !== unknownType) {\n            return type;\n          }\n        } // A variable declared in a for..in statement is always of type string\n\n\n      if (declaration.parent.parent.kind === 203\n      /* ForInStatement */\n      ) {\n          return stringType;\n        }\n\n      if (declaration.parent.parent.kind === 204\n      /* ForOfStatement */\n      ) {\n          // checkRightHandSideOfForOf will return undefined if the for-of expression type was\n          // missing properties/signatures required to get its iteratedType (like\n          // [Symbol.iterator] or next). This may be because we accessed properties from anyType,\n          // or it may have led to an error inside getElementTypeOfIterable.\n          return checkRightHandSideOfForOf(declaration.parent.parent.expression) || anyType;\n        }\n\n      if (ts.isBindingPattern(declaration.parent)) {\n        return getTypeForBindingElement(declaration);\n      } // Use type from type annotation if one is present\n\n\n      if (declaration.type) {\n        return getTypeFromTypeNode(declaration.type);\n      }\n\n      if (declaration.kind === 139\n      /* Parameter */\n      ) {\n          var func = declaration.parent; // For a parameter of a set accessor, use the type of the get accessor if one is present\n\n          if (func.kind === 147\n          /* SetAccessor */\n          && !ts.hasDynamicName(func)) {\n            var getter = ts.getDeclarationOfKind(declaration.parent.symbol, 146\n            /* GetAccessor */\n            );\n\n            if (getter) {\n              return getReturnTypeOfSignature(getSignatureFromDeclaration(getter));\n            }\n          } // Use contextual parameter type if one is available\n\n\n          var type = getContextuallyTypedParameterType(declaration);\n\n          if (type) {\n            return type;\n          }\n        } // Use the type of the initializer expression if one is present\n\n\n      if (declaration.initializer) {\n        return checkExpressionCached(declaration.initializer);\n      } // If it is a short-hand property assignment, use the type of the identifier\n\n\n      if (declaration.kind === 249\n      /* ShorthandPropertyAssignment */\n      ) {\n          return checkIdentifier(declaration.name);\n        } // If the declaration specifies a binding pattern, use the type implied by the binding pattern\n\n\n      if (ts.isBindingPattern(declaration.name)) {\n        return getTypeFromBindingPattern(declaration.name,\n        /*includePatternInType*/\n        false);\n      } // No type specified and nothing can be inferred\n\n\n      return undefined;\n    } // Return the type implied by a binding pattern element. This is the type of the initializer of the element if\n    // one is present. Otherwise, if the element is itself a binding pattern, it is the type implied by the binding\n    // pattern. Otherwise, it is the type any.\n\n\n    function getTypeFromBindingElement(element, includePatternInType) {\n      if (element.initializer) {\n        return getWidenedType(checkExpressionCached(element.initializer));\n      }\n\n      if (ts.isBindingPattern(element.name)) {\n        return getTypeFromBindingPattern(element.name, includePatternInType);\n      }\n\n      return anyType;\n    } // Return the type implied by an object binding pattern\n\n\n    function getTypeFromObjectBindingPattern(pattern, includePatternInType) {\n      var members = {};\n      var hasComputedProperties = false;\n      ts.forEach(pattern.elements, function (e) {\n        var name = e.propertyName || e.name;\n\n        if (isComputedNonLiteralName(name)) {\n          // do not include computed properties in the implied type\n          hasComputedProperties = true;\n          return;\n        }\n\n        var text = getTextOfPropertyName(name);\n        var flags = 4\n        /* Property */\n        | 67108864\n        /* Transient */\n        | (e.initializer ? 536870912\n        /* Optional */\n        : 0);\n        var symbol = createSymbol(flags, text);\n        symbol.type = getTypeFromBindingElement(e, includePatternInType);\n        symbol.bindingElement = e;\n        members[symbol.name] = symbol;\n      });\n      var result = createAnonymousType(undefined, members, emptyArray, emptyArray, undefined, undefined);\n\n      if (includePatternInType) {\n        result.pattern = pattern;\n      }\n\n      if (hasComputedProperties) {\n        result.flags |= 67108864\n        /* ObjectLiteralPatternWithComputedProperties */\n        ;\n      }\n\n      return result;\n    } // Return the type implied by an array binding pattern\n\n\n    function getTypeFromArrayBindingPattern(pattern, includePatternInType) {\n      var elements = pattern.elements;\n\n      if (elements.length === 0 || elements[elements.length - 1].dotDotDotToken) {\n        return languageVersion >= 2\n        /* ES6 */\n        ? createIterableType(anyType) : anyArrayType;\n      } // If the pattern has at least one element, and no rest element, then it should imply a tuple type.\n\n\n      var elementTypes = ts.map(elements, function (e) {\n        return e.kind === 190\n        /* OmittedExpression */\n        ? anyType : getTypeFromBindingElement(e, includePatternInType);\n      });\n\n      if (includePatternInType) {\n        var result = createNewTupleType(elementTypes);\n        result.pattern = pattern;\n        return result;\n      }\n\n      return createTupleType(elementTypes);\n    } // Return the type implied by a binding pattern. This is the type implied purely by the binding pattern itself\n    // and without regard to its context (i.e. without regard any type annotation or initializer associated with the\n    // declaration in which the binding pattern is contained). For example, the implied type of [x, y] is [any, any]\n    // and the implied type of { x, y: z = 1 } is { x: any; y: number; }. The type implied by a binding pattern is\n    // used as the contextual type of an initializer associated with the binding pattern. Also, for a destructuring\n    // parameter with no type annotation or initializer, the type implied by the binding pattern becomes the type of\n    // the parameter.\n\n\n    function getTypeFromBindingPattern(pattern, includePatternInType) {\n      return pattern.kind === 164\n      /* ObjectBindingPattern */\n      ? getTypeFromObjectBindingPattern(pattern, includePatternInType) : getTypeFromArrayBindingPattern(pattern, includePatternInType);\n    } // Return the type associated with a variable, parameter, or property declaration. In the simple case this is the type\n    // specified in a type annotation or inferred from an initializer. However, in the case of a destructuring declaration it\n    // is a bit more involved. For example:\n    //\n    //   var [x, s = \"\"] = [1, \"one\"];\n    //\n    // Here, the array literal [1, \"one\"] is contextually typed by the type [any, string], which is the implied type of the\n    // binding pattern [x, s = \"\"]. Because the contextual type is a tuple type, the resulting type of [1, \"one\"] is the\n    // tuple type [number, string]. Thus, the type inferred for 'x' is number and the type inferred for 's' is string.\n\n\n    function getWidenedTypeForVariableLikeDeclaration(declaration, reportErrors) {\n      var type = getTypeForVariableLikeDeclaration(declaration);\n\n      if (type) {\n        if (reportErrors) {\n          reportErrorsFromWidening(declaration, type);\n        } // During a normal type check we'll never get to here with a property assignment (the check of the containing\n        // object literal uses a different path). We exclude widening only so that language services and type verification\n        // tools see the actual type.\n\n\n        if (declaration.kind === 248\n        /* PropertyAssignment */\n        ) {\n            return type;\n          }\n\n        return getWidenedType(type);\n      } // Rest parameters default to type any[], other parameters default to type any\n\n\n      type = declaration.dotDotDotToken ? anyArrayType : anyType; // Report implicit any errors unless this is a private property within an ambient declaration\n\n      if (reportErrors && compilerOptions.noImplicitAny) {\n        var root = ts.getRootDeclaration(declaration);\n\n        if (!isPrivateWithinAmbient(root) && !(root.kind === 139\n        /* Parameter */\n        && isPrivateWithinAmbient(root.parent))) {\n          reportImplicitAnyError(declaration, type);\n        }\n      }\n\n      return type;\n    }\n\n    function getTypeOfVariableOrParameterOrProperty(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.type) {\n        // Handle prototype property\n        if (symbol.flags & 134217728\n        /* Prototype */\n        ) {\n            return links.type = getTypeOfPrototypeProperty(symbol);\n          } // Handle catch clause variables\n\n\n        var declaration = symbol.valueDeclaration;\n\n        if (declaration.parent.kind === 247\n        /* CatchClause */\n        ) {\n            return links.type = anyType;\n          } // Handle export default expressions\n\n\n        if (declaration.kind === 230\n        /* ExportAssignment */\n        ) {\n            return links.type = checkExpression(declaration.expression);\n          } // Handle module.exports = expr\n\n\n        if (declaration.kind === 184\n        /* BinaryExpression */\n        ) {\n            return links.type = getUnionType(ts.map(symbol.declarations, function (decl) {\n              return checkExpressionCached(decl.right);\n            }));\n          }\n\n        if (declaration.kind === 169\n        /* PropertyAccessExpression */\n        ) {\n            // Declarations only exist for property access expressions for certain\n            // special assignment kinds\n            if (declaration.parent.kind === 184\n            /* BinaryExpression */\n            ) {\n                // Handle exports.p = expr or this.p = expr or className.prototype.method = expr\n                return links.type = checkExpressionCached(declaration.parent.right);\n              }\n          } // Handle variable, parameter or property\n\n\n        if (!pushTypeResolution(symbol, 0\n        /* Type */\n        )) {\n          return unknownType;\n        }\n\n        var type = getWidenedTypeForVariableLikeDeclaration(declaration,\n        /*reportErrors*/\n        true);\n\n        if (!popTypeResolution()) {\n          if (symbol.valueDeclaration.type) {\n            // Variable has type annotation that circularly references the variable itself\n            type = unknownType;\n            error(symbol.valueDeclaration, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_type_annotation, symbolToString(symbol));\n          } else {\n            // Variable has initializer that circularly references the variable itself\n            type = anyType;\n\n            if (compilerOptions.noImplicitAny) {\n              error(symbol.valueDeclaration, ts.Diagnostics._0_implicitly_has_type_any_because_it_does_not_have_a_type_annotation_and_is_referenced_directly_or_indirectly_in_its_own_initializer, symbolToString(symbol));\n            }\n          }\n        }\n\n        links.type = type;\n      }\n\n      return links.type;\n    }\n\n    function getAnnotatedAccessorType(accessor) {\n      if (accessor) {\n        if (accessor.kind === 146\n        /* GetAccessor */\n        ) {\n            return accessor.type && getTypeFromTypeNode(accessor.type);\n          } else {\n          var setterTypeAnnotation = ts.getSetAccessorTypeAnnotationNode(accessor);\n          return setterTypeAnnotation && getTypeFromTypeNode(setterTypeAnnotation);\n        }\n      }\n\n      return undefined;\n    }\n\n    function getTypeOfAccessors(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.type) {\n        if (!pushTypeResolution(symbol, 0\n        /* Type */\n        )) {\n          return unknownType;\n        }\n\n        var getter = ts.getDeclarationOfKind(symbol, 146\n        /* GetAccessor */\n        );\n        var setter = ts.getDeclarationOfKind(symbol, 147\n        /* SetAccessor */\n        );\n        var type = void 0; // First try to see if the user specified a return type on the get-accessor.\n\n        var getterReturnType = getAnnotatedAccessorType(getter);\n\n        if (getterReturnType) {\n          type = getterReturnType;\n        } else {\n          // If the user didn't specify a return type, try to use the set-accessor's parameter type.\n          var setterParameterType = getAnnotatedAccessorType(setter);\n\n          if (setterParameterType) {\n            type = setterParameterType;\n          } else {\n            // If there are no specified types, try to infer it from the body of the get accessor if it exists.\n            if (getter && getter.body) {\n              type = getReturnTypeFromBody(getter);\n            } else {\n              if (compilerOptions.noImplicitAny) {\n                error(setter, ts.Diagnostics.Property_0_implicitly_has_type_any_because_its_set_accessor_lacks_a_type_annotation, symbolToString(symbol));\n              }\n\n              type = anyType;\n            }\n          }\n        }\n\n        if (!popTypeResolution()) {\n          type = anyType;\n\n          if (compilerOptions.noImplicitAny) {\n            var getter_1 = ts.getDeclarationOfKind(symbol, 146\n            /* GetAccessor */\n            );\n            error(getter_1, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, symbolToString(symbol));\n          }\n        }\n\n        links.type = type;\n      }\n\n      return links.type;\n    }\n\n    function getTypeOfFuncClassEnumModule(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.type) {\n        links.type = createObjectType(65536\n        /* Anonymous */\n        , symbol);\n      }\n\n      return links.type;\n    }\n\n    function getTypeOfEnumMember(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.type) {\n        links.type = getDeclaredTypeOfEnum(getParentOfSymbol(symbol));\n      }\n\n      return links.type;\n    }\n\n    function getTypeOfAlias(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.type) {\n        var targetSymbol = resolveAlias(symbol); // It only makes sense to get the type of a value symbol. If the result of resolving\n        // the alias is not a value, then it has no type. To get the type associated with a\n        // type symbol, call getDeclaredTypeOfSymbol.\n        // This check is important because without it, a call to getTypeOfSymbol could end\n        // up recursively calling getTypeOfAlias, causing a stack overflow.\n\n        links.type = targetSymbol.flags & 107455\n        /* Value */\n        ? getTypeOfSymbol(targetSymbol) : unknownType;\n      }\n\n      return links.type;\n    }\n\n    function getTypeOfInstantiatedSymbol(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.type) {\n        links.type = instantiateType(getTypeOfSymbol(links.target), links.mapper);\n      }\n\n      return links.type;\n    }\n\n    function getTypeOfSymbol(symbol) {\n      if (symbol.flags & 16777216\n      /* Instantiated */\n      ) {\n          return getTypeOfInstantiatedSymbol(symbol);\n        }\n\n      if (symbol.flags & (3\n      /* Variable */\n      | 4\n      /* Property */\n      )) {\n        return getTypeOfVariableOrParameterOrProperty(symbol);\n      }\n\n      if (symbol.flags & (16\n      /* Function */\n      | 8192\n      /* Method */\n      | 32\n      /* Class */\n      | 384\n      /* Enum */\n      | 512\n      /* ValueModule */\n      )) {\n        return getTypeOfFuncClassEnumModule(symbol);\n      }\n\n      if (symbol.flags & 8\n      /* EnumMember */\n      ) {\n          return getTypeOfEnumMember(symbol);\n        }\n\n      if (symbol.flags & 98304\n      /* Accessor */\n      ) {\n          return getTypeOfAccessors(symbol);\n        }\n\n      if (symbol.flags & 8388608\n      /* Alias */\n      ) {\n          return getTypeOfAlias(symbol);\n        }\n\n      return unknownType;\n    }\n\n    function getTargetType(type) {\n      return type.flags & 4096\n      /* Reference */\n      ? type.target : type;\n    }\n\n    function hasBaseType(type, checkBase) {\n      return check(type);\n\n      function check(type) {\n        var target = getTargetType(type);\n        return target === checkBase || ts.forEach(getBaseTypes(target), check);\n      }\n    } // Appends the type parameters given by a list of declarations to a set of type parameters and returns the resulting set.\n    // The function allocates a new array if the input type parameter set is undefined, but otherwise it modifies the set\n    // in-place and returns the same array.\n\n\n    function appendTypeParameters(typeParameters, declarations) {\n      for (var _i = 0, declarations_2 = declarations; _i < declarations_2.length; _i++) {\n        var declaration = declarations_2[_i];\n        var tp = getDeclaredTypeOfTypeParameter(getSymbolOfNode(declaration));\n\n        if (!typeParameters) {\n          typeParameters = [tp];\n        } else if (!ts.contains(typeParameters, tp)) {\n          typeParameters.push(tp);\n        }\n      }\n\n      return typeParameters;\n    } // Appends the outer type parameters of a node to a set of type parameters and returns the resulting set. The function\n    // allocates a new array if the input type parameter set is undefined, but otherwise it modifies the set in-place and\n    // returns the same array.\n\n\n    function appendOuterTypeParameters(typeParameters, node) {\n      while (true) {\n        node = node.parent;\n\n        if (!node) {\n          return typeParameters;\n        }\n\n        if (node.kind === 217\n        /* ClassDeclaration */\n        || node.kind === 189\n        /* ClassExpression */\n        || node.kind === 216\n        /* FunctionDeclaration */\n        || node.kind === 176\n        /* FunctionExpression */\n        || node.kind === 144\n        /* MethodDeclaration */\n        || node.kind === 177\n        /* ArrowFunction */\n        ) {\n            var declarations = node.typeParameters;\n\n            if (declarations) {\n              return appendTypeParameters(appendOuterTypeParameters(typeParameters, node), declarations);\n            }\n          }\n      }\n    } // The outer type parameters are those defined by enclosing generic classes, methods, or functions.\n\n\n    function getOuterTypeParametersOfClassOrInterface(symbol) {\n      var declaration = symbol.flags & 32\n      /* Class */\n      ? symbol.valueDeclaration : ts.getDeclarationOfKind(symbol, 218\n      /* InterfaceDeclaration */\n      );\n      return appendOuterTypeParameters(undefined, declaration);\n    } // The local type parameters are the combined set of type parameters from all declarations of the class,\n    // interface, or type alias.\n\n\n    function getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol) {\n      var result;\n\n      for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {\n        var node = _a[_i];\n\n        if (node.kind === 218\n        /* InterfaceDeclaration */\n        || node.kind === 217\n        /* ClassDeclaration */\n        || node.kind === 189\n        /* ClassExpression */\n        || node.kind === 219\n        /* TypeAliasDeclaration */\n        ) {\n            var declaration = node;\n\n            if (declaration.typeParameters) {\n              result = appendTypeParameters(result, declaration.typeParameters);\n            }\n          }\n      }\n\n      return result;\n    } // The full set of type parameters for a generic class or interface type consists of its outer type parameters plus\n    // its locally declared type parameters.\n\n\n    function getTypeParametersOfClassOrInterface(symbol) {\n      return ts.concatenate(getOuterTypeParametersOfClassOrInterface(symbol), getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol));\n    }\n\n    function isConstructorType(type) {\n      return type.flags & 80896\n      /* ObjectType */\n      && getSignaturesOfType(type, 1\n      /* Construct */\n      ).length > 0;\n    }\n\n    function getBaseTypeNodeOfClass(type) {\n      return ts.getClassExtendsHeritageClauseElement(type.symbol.valueDeclaration);\n    }\n\n    function getConstructorsForTypeArguments(type, typeArgumentNodes) {\n      var typeArgCount = typeArgumentNodes ? typeArgumentNodes.length : 0;\n      return ts.filter(getSignaturesOfType(type, 1\n      /* Construct */\n      ), function (sig) {\n        return (sig.typeParameters ? sig.typeParameters.length : 0) === typeArgCount;\n      });\n    }\n\n    function getInstantiatedConstructorsForTypeArguments(type, typeArgumentNodes) {\n      var signatures = getConstructorsForTypeArguments(type, typeArgumentNodes);\n\n      if (typeArgumentNodes) {\n        var typeArguments_1 = ts.map(typeArgumentNodes, getTypeFromTypeNode);\n        signatures = ts.map(signatures, function (sig) {\n          return getSignatureInstantiation(sig, typeArguments_1);\n        });\n      }\n\n      return signatures;\n    } // The base constructor of a class can resolve to\n    // undefinedType if the class has no extends clause,\n    // unknownType if an error occurred during resolution of the extends expression,\n    // nullType if the extends expression is the null value, or\n    // an object type with at least one construct signature.\n\n\n    function getBaseConstructorTypeOfClass(type) {\n      if (!type.resolvedBaseConstructorType) {\n        var baseTypeNode = getBaseTypeNodeOfClass(type);\n\n        if (!baseTypeNode) {\n          return type.resolvedBaseConstructorType = undefinedType;\n        }\n\n        if (!pushTypeResolution(type, 1\n        /* ResolvedBaseConstructorType */\n        )) {\n          return unknownType;\n        }\n\n        var baseConstructorType = checkExpression(baseTypeNode.expression);\n\n        if (baseConstructorType.flags & 80896\n        /* ObjectType */\n        ) {\n            // Resolving the members of a class requires us to resolve the base class of that class.\n            // We force resolution here such that we catch circularities now.\n            resolveStructuredTypeMembers(baseConstructorType);\n          }\n\n        if (!popTypeResolution()) {\n          error(type.symbol.valueDeclaration, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_its_own_base_expression, symbolToString(type.symbol));\n          return type.resolvedBaseConstructorType = unknownType;\n        }\n\n        if (baseConstructorType !== unknownType && baseConstructorType !== nullType && !isConstructorType(baseConstructorType)) {\n          error(baseTypeNode.expression, ts.Diagnostics.Type_0_is_not_a_constructor_function_type, typeToString(baseConstructorType));\n          return type.resolvedBaseConstructorType = unknownType;\n        }\n\n        type.resolvedBaseConstructorType = baseConstructorType;\n      }\n\n      return type.resolvedBaseConstructorType;\n    }\n\n    function getBaseTypes(type) {\n      var isClass = type.symbol.flags & 32\n      /* Class */\n      ;\n      var isInterface = type.symbol.flags & 64\n      /* Interface */\n      ;\n\n      if (!type.resolvedBaseTypes) {\n        if (!isClass && !isInterface) {\n          ts.Debug.fail(\"type must be class or interface\");\n        }\n\n        if (isClass) {\n          resolveBaseTypesOfClass(type);\n        }\n\n        if (isInterface) {\n          resolveBaseTypesOfInterface(type);\n        }\n      }\n\n      return type.resolvedBaseTypes;\n    }\n\n    function resolveBaseTypesOfClass(type) {\n      type.resolvedBaseTypes = type.resolvedBaseTypes || emptyArray;\n      var baseConstructorType = getBaseConstructorTypeOfClass(type);\n\n      if (!(baseConstructorType.flags & 80896\n      /* ObjectType */\n      )) {\n        return;\n      }\n\n      var baseTypeNode = getBaseTypeNodeOfClass(type);\n      var baseType;\n      var originalBaseType = baseConstructorType && baseConstructorType.symbol ? getDeclaredTypeOfSymbol(baseConstructorType.symbol) : undefined;\n\n      if (baseConstructorType.symbol && baseConstructorType.symbol.flags & 32\n      /* Class */\n      && areAllOuterTypeParametersApplied(originalBaseType)) {\n        // When base constructor type is a class with no captured type arguments we know that the constructors all have the same type parameters as the\n        // class and all return the instance type of the class. There is no need for further checks and we can apply the\n        // type arguments in the same manner as a type reference to get the same error reporting experience.\n        baseType = getTypeFromClassOrInterfaceReference(baseTypeNode, baseConstructorType.symbol);\n      } else {\n        // The class derives from a \"class-like\" constructor function, check that we have at least one construct signature\n        // with a matching number of type parameters and use the return type of the first instantiated signature. Elsewhere\n        // we check that all instantiated signatures return the same type.\n        var constructors = getInstantiatedConstructorsForTypeArguments(baseConstructorType, baseTypeNode.typeArguments);\n\n        if (!constructors.length) {\n          error(baseTypeNode.expression, ts.Diagnostics.No_base_constructor_has_the_specified_number_of_type_arguments);\n          return;\n        }\n\n        baseType = getReturnTypeOfSignature(constructors[0]);\n      }\n\n      if (baseType === unknownType) {\n        return;\n      }\n\n      if (!(getTargetType(baseType).flags & (1024\n      /* Class */\n      | 2048\n      /* Interface */\n      ))) {\n        error(baseTypeNode.expression, ts.Diagnostics.Base_constructor_return_type_0_is_not_a_class_or_interface_type, typeToString(baseType));\n        return;\n      }\n\n      if (type === baseType || hasBaseType(baseType, type)) {\n        error(type.symbol.valueDeclaration, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type,\n        /*enclosingDeclaration*/\n        undefined, 1\n        /* WriteArrayAsGenericType */\n        ));\n        return;\n      }\n\n      if (type.resolvedBaseTypes === emptyArray) {\n        type.resolvedBaseTypes = [baseType];\n      } else {\n        type.resolvedBaseTypes.push(baseType);\n      }\n    }\n\n    function areAllOuterTypeParametersApplied(type) {\n      // An unapplied type parameter has its symbol still the same as the matching argument symbol.\n      // Since parameters are applied outer-to-inner, only the last outer parameter needs to be checked.\n      var outerTypeParameters = type.outerTypeParameters;\n\n      if (outerTypeParameters) {\n        var last = outerTypeParameters.length - 1;\n        var typeArguments = type.typeArguments;\n        return outerTypeParameters[last].symbol !== typeArguments[last].symbol;\n      }\n\n      return true;\n    }\n\n    function resolveBaseTypesOfInterface(type) {\n      type.resolvedBaseTypes = type.resolvedBaseTypes || emptyArray;\n\n      for (var _i = 0, _a = type.symbol.declarations; _i < _a.length; _i++) {\n        var declaration = _a[_i];\n\n        if (declaration.kind === 218\n        /* InterfaceDeclaration */\n        && ts.getInterfaceBaseTypeNodes(declaration)) {\n          for (var _b = 0, _c = ts.getInterfaceBaseTypeNodes(declaration); _b < _c.length; _b++) {\n            var node = _c[_b];\n            var baseType = getTypeFromTypeNode(node);\n\n            if (baseType !== unknownType) {\n              if (getTargetType(baseType).flags & (1024\n              /* Class */\n              | 2048\n              /* Interface */\n              )) {\n                if (type !== baseType && !hasBaseType(baseType, type)) {\n                  if (type.resolvedBaseTypes === emptyArray) {\n                    type.resolvedBaseTypes = [baseType];\n                  } else {\n                    type.resolvedBaseTypes.push(baseType);\n                  }\n                } else {\n                  error(declaration, ts.Diagnostics.Type_0_recursively_references_itself_as_a_base_type, typeToString(type,\n                  /*enclosingDeclaration*/\n                  undefined, 1\n                  /* WriteArrayAsGenericType */\n                  ));\n                }\n              } else {\n                error(node, ts.Diagnostics.An_interface_may_only_extend_a_class_or_another_interface);\n              }\n            }\n          }\n        }\n      }\n    } // Returns true if the interface given by the symbol is free of \"this\" references. Specifically, the result is\n    // true if the interface itself contains no references to \"this\" in its body, if all base types are interfaces,\n    // and if none of the base interfaces have a \"this\" type.\n\n\n    function isIndependentInterface(symbol) {\n      for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {\n        var declaration = _a[_i];\n\n        if (declaration.kind === 218\n        /* InterfaceDeclaration */\n        ) {\n            if (declaration.flags & 262144\n            /* ContainsThis */\n            ) {\n                return false;\n              }\n\n            var baseTypeNodes = ts.getInterfaceBaseTypeNodes(declaration);\n\n            if (baseTypeNodes) {\n              for (var _b = 0, baseTypeNodes_1 = baseTypeNodes; _b < baseTypeNodes_1.length; _b++) {\n                var node = baseTypeNodes_1[_b];\n\n                if (ts.isSupportedExpressionWithTypeArguments(node)) {\n                  var baseSymbol = resolveEntityName(node.expression, 793056\n                  /* Type */\n                  ,\n                  /*ignoreErrors*/\n                  true);\n\n                  if (!baseSymbol || !(baseSymbol.flags & 64\n                  /* Interface */\n                  ) || getDeclaredTypeOfClassOrInterface(baseSymbol).thisType) {\n                    return false;\n                  }\n                }\n              }\n            }\n          }\n      }\n\n      return true;\n    }\n\n    function getDeclaredTypeOfClassOrInterface(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.declaredType) {\n        var kind = symbol.flags & 32\n        /* Class */\n        ? 1024\n        /* Class */\n        : 2048\n        /* Interface */\n        ;\n        var type = links.declaredType = createObjectType(kind, symbol);\n        var outerTypeParameters = getOuterTypeParametersOfClassOrInterface(symbol);\n        var localTypeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol); // A class or interface is generic if it has type parameters or a \"this\" type. We always give classes a \"this\" type\n        // because it is not feasible to analyze all members to determine if the \"this\" type escapes the class (in particular,\n        // property types inferred from initializers and method return types inferred from return statements are very hard\n        // to exhaustively analyze). We give interfaces a \"this\" type if we can't definitely determine that they are free of\n        // \"this\" references.\n\n        if (outerTypeParameters || localTypeParameters || kind === 1024\n        /* Class */\n        || !isIndependentInterface(symbol)) {\n          type.flags |= 4096\n          /* Reference */\n          ;\n          type.typeParameters = ts.concatenate(outerTypeParameters, localTypeParameters);\n          type.outerTypeParameters = outerTypeParameters;\n          type.localTypeParameters = localTypeParameters;\n          type.instantiations = {};\n          type.instantiations[getTypeListId(type.typeParameters)] = type;\n          type.target = type;\n          type.typeArguments = type.typeParameters;\n          type.thisType = createType(512\n          /* TypeParameter */\n          | 33554432\n          /* ThisType */\n          );\n          type.thisType.symbol = symbol;\n          type.thisType.constraint = type;\n        }\n      }\n\n      return links.declaredType;\n    }\n\n    function getDeclaredTypeOfTypeAlias(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.declaredType) {\n        // Note that we use the links object as the target here because the symbol object is used as the unique\n        // identity for resolution of the 'type' property in SymbolLinks.\n        if (!pushTypeResolution(symbol, 2\n        /* DeclaredType */\n        )) {\n          return unknownType;\n        }\n\n        var declaration = ts.getDeclarationOfKind(symbol, 219\n        /* TypeAliasDeclaration */\n        );\n        var type = getTypeFromTypeNode(declaration.type);\n\n        if (popTypeResolution()) {\n          links.typeParameters = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(symbol);\n\n          if (links.typeParameters) {\n            // Initialize the instantiation cache for generic type aliases. The declared type corresponds to\n            // an instantiation of the type alias with the type parameters supplied as type arguments.\n            links.instantiations = {};\n            links.instantiations[getTypeListId(links.typeParameters)] = type;\n          }\n        } else {\n          type = unknownType;\n          error(declaration.name, ts.Diagnostics.Type_alias_0_circularly_references_itself, symbolToString(symbol));\n        }\n\n        links.declaredType = type;\n      }\n\n      return links.declaredType;\n    }\n\n    function getDeclaredTypeOfEnum(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.declaredType) {\n        var type = createType(128\n        /* Enum */\n        );\n        type.symbol = symbol;\n        links.declaredType = type;\n      }\n\n      return links.declaredType;\n    }\n\n    function getDeclaredTypeOfTypeParameter(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.declaredType) {\n        var type = createType(512\n        /* TypeParameter */\n        );\n        type.symbol = symbol;\n\n        if (!ts.getDeclarationOfKind(symbol, 138\n        /* TypeParameter */\n        ).constraint) {\n          type.constraint = noConstraintType;\n        }\n\n        links.declaredType = type;\n      }\n\n      return links.declaredType;\n    }\n\n    function getDeclaredTypeOfAlias(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.declaredType) {\n        links.declaredType = getDeclaredTypeOfSymbol(resolveAlias(symbol));\n      }\n\n      return links.declaredType;\n    }\n\n    function getDeclaredTypeOfSymbol(symbol) {\n      ts.Debug.assert((symbol.flags & 16777216\n      /* Instantiated */\n      ) === 0);\n\n      if (symbol.flags & (32\n      /* Class */\n      | 64\n      /* Interface */\n      )) {\n        return getDeclaredTypeOfClassOrInterface(symbol);\n      }\n\n      if (symbol.flags & 524288\n      /* TypeAlias */\n      ) {\n          return getDeclaredTypeOfTypeAlias(symbol);\n        }\n\n      if (symbol.flags & 384\n      /* Enum */\n      ) {\n          return getDeclaredTypeOfEnum(symbol);\n        }\n\n      if (symbol.flags & 262144\n      /* TypeParameter */\n      ) {\n          return getDeclaredTypeOfTypeParameter(symbol);\n        }\n\n      if (symbol.flags & 8388608\n      /* Alias */\n      ) {\n          return getDeclaredTypeOfAlias(symbol);\n        }\n\n      return unknownType;\n    } // A type reference is considered independent if each type argument is considered independent.\n\n\n    function isIndependentTypeReference(node) {\n      if (node.typeArguments) {\n        for (var _i = 0, _a = node.typeArguments; _i < _a.length; _i++) {\n          var typeNode = _a[_i];\n\n          if (!isIndependentType(typeNode)) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    } // A type is considered independent if it the any, string, number, boolean, symbol, or void keyword, a string\n    // literal type, an array with an element type that is considered independent, or a type reference that is\n    // considered independent.\n\n\n    function isIndependentType(node) {\n      switch (node.kind) {\n        case 117\n        /* AnyKeyword */\n        :\n        case 130\n        /* StringKeyword */\n        :\n        case 128\n        /* NumberKeyword */\n        :\n        case 120\n        /* BooleanKeyword */\n        :\n        case 131\n        /* SymbolKeyword */\n        :\n        case 103\n        /* VoidKeyword */\n        :\n        case 163\n        /* StringLiteralType */\n        :\n          return true;\n\n        case 157\n        /* ArrayType */\n        :\n          return isIndependentType(node.elementType);\n\n        case 152\n        /* TypeReference */\n        :\n          return isIndependentTypeReference(node);\n      }\n\n      return false;\n    } // A variable-like declaration is considered independent (free of this references) if it has a type annotation\n    // that specifies an independent type, or if it has no type annotation and no initializer (and thus of type any).\n\n\n    function isIndependentVariableLikeDeclaration(node) {\n      return node.type && isIndependentType(node.type) || !node.type && !node.initializer;\n    } // A function-like declaration is considered independent (free of this references) if it has a return type\n    // annotation that is considered independent and if each parameter is considered independent.\n\n\n    function isIndependentFunctionLikeDeclaration(node) {\n      if (node.kind !== 145\n      /* Constructor */\n      && (!node.type || !isIndependentType(node.type))) {\n        return false;\n      }\n\n      for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {\n        var parameter = _a[_i];\n\n        if (!isIndependentVariableLikeDeclaration(parameter)) {\n          return false;\n        }\n      }\n\n      return true;\n    } // Returns true if the class or interface member given by the symbol is free of \"this\" references. The\n    // function may return false for symbols that are actually free of \"this\" references because it is not\n    // feasible to perform a complete analysis in all cases. In particular, property members with types\n    // inferred from their initializers and function members with inferred return types are convervatively\n    // assumed not to be free of \"this\" references.\n\n\n    function isIndependentMember(symbol) {\n      if (symbol.declarations && symbol.declarations.length === 1) {\n        var declaration = symbol.declarations[0];\n\n        if (declaration) {\n          switch (declaration.kind) {\n            case 142\n            /* PropertyDeclaration */\n            :\n            case 141\n            /* PropertySignature */\n            :\n              return isIndependentVariableLikeDeclaration(declaration);\n\n            case 144\n            /* MethodDeclaration */\n            :\n            case 143\n            /* MethodSignature */\n            :\n            case 145\n            /* Constructor */\n            :\n              return isIndependentFunctionLikeDeclaration(declaration);\n          }\n        }\n      }\n\n      return false;\n    }\n\n    function createSymbolTable(symbols) {\n      var result = {};\n\n      for (var _i = 0, symbols_1 = symbols; _i < symbols_1.length; _i++) {\n        var symbol = symbols_1[_i];\n        result[symbol.name] = symbol;\n      }\n\n      return result;\n    } // The mappingThisOnly flag indicates that the only type parameter being mapped is \"this\". When the flag is true,\n    // we check symbols to see if we can quickly conclude they are free of \"this\" references, thus needing no instantiation.\n\n\n    function createInstantiatedSymbolTable(symbols, mapper, mappingThisOnly) {\n      var result = {};\n\n      for (var _i = 0, symbols_2 = symbols; _i < symbols_2.length; _i++) {\n        var symbol = symbols_2[_i];\n        result[symbol.name] = mappingThisOnly && isIndependentMember(symbol) ? symbol : instantiateSymbol(symbol, mapper);\n      }\n\n      return result;\n    }\n\n    function addInheritedMembers(symbols, baseSymbols) {\n      for (var _i = 0, baseSymbols_1 = baseSymbols; _i < baseSymbols_1.length; _i++) {\n        var s = baseSymbols_1[_i];\n\n        if (!ts.hasProperty(symbols, s.name)) {\n          symbols[s.name] = s;\n        }\n      }\n    }\n\n    function resolveDeclaredMembers(type) {\n      if (!type.declaredProperties) {\n        var symbol = type.symbol;\n        type.declaredProperties = getNamedMembers(symbol.members);\n        type.declaredCallSignatures = getSignaturesOfSymbol(symbol.members[\"__call\"]);\n        type.declaredConstructSignatures = getSignaturesOfSymbol(symbol.members[\"__new\"]);\n        type.declaredStringIndexType = getIndexTypeOfSymbol(symbol, 0\n        /* String */\n        );\n        type.declaredNumberIndexType = getIndexTypeOfSymbol(symbol, 1\n        /* Number */\n        );\n      }\n\n      return type;\n    }\n\n    function getTypeWithThisArgument(type, thisArgument) {\n      if (type.flags & 4096\n      /* Reference */\n      ) {\n          return createTypeReference(type.target, ts.concatenate(type.typeArguments, [thisArgument || type.target.thisType]));\n        }\n\n      return type;\n    }\n\n    function resolveObjectTypeMembers(type, source, typeParameters, typeArguments) {\n      var mapper = identityMapper;\n      var members = source.symbol.members;\n      var callSignatures = source.declaredCallSignatures;\n      var constructSignatures = source.declaredConstructSignatures;\n      var stringIndexType = source.declaredStringIndexType;\n      var numberIndexType = source.declaredNumberIndexType;\n\n      if (!ts.rangeEquals(typeParameters, typeArguments, 0, typeParameters.length)) {\n        mapper = createTypeMapper(typeParameters, typeArguments);\n        members = createInstantiatedSymbolTable(source.declaredProperties, mapper,\n        /*mappingThisOnly*/\n        typeParameters.length === 1);\n        callSignatures = instantiateList(source.declaredCallSignatures, mapper, instantiateSignature);\n        constructSignatures = instantiateList(source.declaredConstructSignatures, mapper, instantiateSignature);\n        stringIndexType = instantiateType(source.declaredStringIndexType, mapper);\n        numberIndexType = instantiateType(source.declaredNumberIndexType, mapper);\n      }\n\n      var baseTypes = getBaseTypes(source);\n\n      if (baseTypes.length) {\n        if (members === source.symbol.members) {\n          members = createSymbolTable(source.declaredProperties);\n        }\n\n        var thisArgument = ts.lastOrUndefined(typeArguments);\n\n        for (var _i = 0, baseTypes_1 = baseTypes; _i < baseTypes_1.length; _i++) {\n          var baseType = baseTypes_1[_i];\n          var instantiatedBaseType = thisArgument ? getTypeWithThisArgument(instantiateType(baseType, mapper), thisArgument) : baseType;\n          addInheritedMembers(members, getPropertiesOfObjectType(instantiatedBaseType));\n          callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(instantiatedBaseType, 0\n          /* Call */\n          ));\n          constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(instantiatedBaseType, 1\n          /* Construct */\n          ));\n          stringIndexType = stringIndexType || getIndexTypeOfType(instantiatedBaseType, 0\n          /* String */\n          );\n          numberIndexType = numberIndexType || getIndexTypeOfType(instantiatedBaseType, 1\n          /* Number */\n          );\n        }\n      }\n\n      setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\n    }\n\n    function resolveClassOrInterfaceMembers(type) {\n      resolveObjectTypeMembers(type, resolveDeclaredMembers(type), emptyArray, emptyArray);\n    }\n\n    function resolveTypeReferenceMembers(type) {\n      var source = resolveDeclaredMembers(type.target);\n      var typeParameters = ts.concatenate(source.typeParameters, [source.thisType]);\n      var typeArguments = type.typeArguments && type.typeArguments.length === typeParameters.length ? type.typeArguments : ts.concatenate(type.typeArguments, [type]);\n      resolveObjectTypeMembers(type, source, typeParameters, typeArguments);\n    }\n\n    function createSignature(declaration, typeParameters, parameters, resolvedReturnType, typePredicate, minArgumentCount, hasRestParameter, hasStringLiterals) {\n      var sig = new Signature(checker);\n      sig.declaration = declaration;\n      sig.typeParameters = typeParameters;\n      sig.parameters = parameters;\n      sig.resolvedReturnType = resolvedReturnType;\n      sig.typePredicate = typePredicate;\n      sig.minArgumentCount = minArgumentCount;\n      sig.hasRestParameter = hasRestParameter;\n      sig.hasStringLiterals = hasStringLiterals;\n      return sig;\n    }\n\n    function cloneSignature(sig) {\n      return createSignature(sig.declaration, sig.typeParameters, sig.parameters, sig.resolvedReturnType, sig.typePredicate, sig.minArgumentCount, sig.hasRestParameter, sig.hasStringLiterals);\n    }\n\n    function getDefaultConstructSignatures(classType) {\n      var baseConstructorType = getBaseConstructorTypeOfClass(classType);\n      var baseSignatures = getSignaturesOfType(baseConstructorType, 1\n      /* Construct */\n      );\n\n      if (baseSignatures.length === 0) {\n        return [createSignature(undefined, classType.localTypeParameters, emptyArray, classType,\n        /*typePredicate*/\n        undefined, 0,\n        /*hasRestParameter*/\n        false,\n        /*hasStringLiterals*/\n        false)];\n      }\n\n      var baseTypeNode = getBaseTypeNodeOfClass(classType);\n      var typeArguments = ts.map(baseTypeNode.typeArguments, getTypeFromTypeNode);\n      var typeArgCount = typeArguments ? typeArguments.length : 0;\n      var result = [];\n\n      for (var _i = 0, baseSignatures_1 = baseSignatures; _i < baseSignatures_1.length; _i++) {\n        var baseSig = baseSignatures_1[_i];\n        var typeParamCount = baseSig.typeParameters ? baseSig.typeParameters.length : 0;\n\n        if (typeParamCount === typeArgCount) {\n          var sig = typeParamCount ? getSignatureInstantiation(baseSig, typeArguments) : cloneSignature(baseSig);\n          sig.typeParameters = classType.localTypeParameters;\n          sig.resolvedReturnType = classType;\n          result.push(sig);\n        }\n      }\n\n      return result;\n    }\n\n    function createTupleTypeMemberSymbols(memberTypes) {\n      var members = {};\n\n      for (var i = 0; i < memberTypes.length; i++) {\n        var symbol = createSymbol(4\n        /* Property */\n        | 67108864\n        /* Transient */\n        , \"\" + i);\n        symbol.type = memberTypes[i];\n        members[i] = symbol;\n      }\n\n      return members;\n    }\n\n    function resolveTupleTypeMembers(type) {\n      var arrayElementType = getUnionType(type.elementTypes,\n      /*noSubtypeReduction*/\n      true); // Make the tuple type itself the 'this' type by including an extra type argument\n\n      var arrayType = resolveStructuredTypeMembers(createTypeFromGenericGlobalType(globalArrayType, [arrayElementType, type]));\n      var members = createTupleTypeMemberSymbols(type.elementTypes);\n      addInheritedMembers(members, arrayType.properties);\n      setObjectTypeMembers(type, members, arrayType.callSignatures, arrayType.constructSignatures, arrayType.stringIndexType, arrayType.numberIndexType);\n    }\n\n    function findMatchingSignature(signatureList, signature, partialMatch, ignoreReturnTypes) {\n      for (var _i = 0, signatureList_1 = signatureList; _i < signatureList_1.length; _i++) {\n        var s = signatureList_1[_i];\n\n        if (compareSignaturesIdentical(s, signature, partialMatch, ignoreReturnTypes, compareTypesIdentical)) {\n          return s;\n        }\n      }\n    }\n\n    function findMatchingSignatures(signatureLists, signature, listIndex) {\n      if (signature.typeParameters) {\n        // We require an exact match for generic signatures, so we only return signatures from the first\n        // signature list and only if they have exact matches in the other signature lists.\n        if (listIndex > 0) {\n          return undefined;\n        }\n\n        for (var i = 1; i < signatureLists.length; i++) {\n          if (!findMatchingSignature(signatureLists[i], signature,\n          /*partialMatch*/\n          false,\n          /*ignoreReturnTypes*/\n          false)) {\n            return undefined;\n          }\n        }\n\n        return [signature];\n      }\n\n      var result = undefined;\n\n      for (var i = 0; i < signatureLists.length; i++) {\n        // Allow matching non-generic signatures to have excess parameters and different return types\n        var match = i === listIndex ? signature : findMatchingSignature(signatureLists[i], signature,\n        /*partialMatch*/\n        true,\n        /*ignoreReturnTypes*/\n        true);\n\n        if (!match) {\n          return undefined;\n        }\n\n        if (!ts.contains(result, match)) {\n          (result || (result = [])).push(match);\n        }\n      }\n\n      return result;\n    } // The signatures of a union type are those signatures that are present in each of the constituent types.\n    // Generic signatures must match exactly, but non-generic signatures are allowed to have extra optional\n    // parameters and may differ in return types. When signatures differ in return types, the resulting return\n    // type is the union of the constituent return types.\n\n\n    function getUnionSignatures(types, kind) {\n      var signatureLists = ts.map(types, function (t) {\n        return getSignaturesOfType(t, kind);\n      });\n      var result = undefined;\n\n      for (var i = 0; i < signatureLists.length; i++) {\n        for (var _i = 0, _a = signatureLists[i]; _i < _a.length; _i++) {\n          var signature = _a[_i]; // Only process signatures with parameter lists that aren't already in the result list\n\n          if (!result || !findMatchingSignature(result, signature,\n          /*partialMatch*/\n          false,\n          /*ignoreReturnTypes*/\n          true)) {\n            var unionSignatures = findMatchingSignatures(signatureLists, signature, i);\n\n            if (unionSignatures) {\n              var s = signature; // Union the result types when more than one signature matches\n\n              if (unionSignatures.length > 1) {\n                s = cloneSignature(signature); // Clear resolved return type we possibly got from cloneSignature\n\n                s.resolvedReturnType = undefined;\n                s.unionSignatures = unionSignatures;\n              }\n\n              (result || (result = [])).push(s);\n            }\n          }\n        }\n      }\n\n      return result || emptyArray;\n    }\n\n    function getUnionIndexType(types, kind) {\n      var indexTypes = [];\n\n      for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {\n        var type = types_1[_i];\n        var indexType = getIndexTypeOfType(type, kind);\n\n        if (!indexType) {\n          return undefined;\n        }\n\n        indexTypes.push(indexType);\n      }\n\n      return getUnionType(indexTypes);\n    }\n\n    function resolveUnionTypeMembers(type) {\n      // The members and properties collections are empty for union types. To get all properties of a union\n      // type use getPropertiesOfType (only the language service uses this).\n      var callSignatures = getUnionSignatures(type.types, 0\n      /* Call */\n      );\n      var constructSignatures = getUnionSignatures(type.types, 1\n      /* Construct */\n      );\n      var stringIndexType = getUnionIndexType(type.types, 0\n      /* String */\n      );\n      var numberIndexType = getUnionIndexType(type.types, 1\n      /* Number */\n      );\n      setObjectTypeMembers(type, emptySymbols, callSignatures, constructSignatures, stringIndexType, numberIndexType);\n    }\n\n    function intersectTypes(type1, type2) {\n      return !type1 ? type2 : !type2 ? type1 : getIntersectionType([type1, type2]);\n    }\n\n    function resolveIntersectionTypeMembers(type) {\n      // The members and properties collections are empty for intersection types. To get all properties of an\n      // intersection type use getPropertiesOfType (only the language service uses this).\n      var callSignatures = emptyArray;\n      var constructSignatures = emptyArray;\n      var stringIndexType = undefined;\n      var numberIndexType = undefined;\n\n      for (var _i = 0, _a = type.types; _i < _a.length; _i++) {\n        var t = _a[_i];\n        callSignatures = ts.concatenate(callSignatures, getSignaturesOfType(t, 0\n        /* Call */\n        ));\n        constructSignatures = ts.concatenate(constructSignatures, getSignaturesOfType(t, 1\n        /* Construct */\n        ));\n        stringIndexType = intersectTypes(stringIndexType, getIndexTypeOfType(t, 0\n        /* String */\n        ));\n        numberIndexType = intersectTypes(numberIndexType, getIndexTypeOfType(t, 1\n        /* Number */\n        ));\n      }\n\n      setObjectTypeMembers(type, emptySymbols, callSignatures, constructSignatures, stringIndexType, numberIndexType);\n    }\n\n    function resolveAnonymousTypeMembers(type) {\n      var symbol = type.symbol;\n\n      if (type.target) {\n        var members = createInstantiatedSymbolTable(getPropertiesOfObjectType(type.target), type.mapper,\n        /*mappingThisOnly*/\n        false);\n        var callSignatures = instantiateList(getSignaturesOfType(type.target, 0\n        /* Call */\n        ), type.mapper, instantiateSignature);\n        var constructSignatures = instantiateList(getSignaturesOfType(type.target, 1\n        /* Construct */\n        ), type.mapper, instantiateSignature);\n        var stringIndexType = instantiateType(getIndexTypeOfType(type.target, 0\n        /* String */\n        ), type.mapper);\n        var numberIndexType = instantiateType(getIndexTypeOfType(type.target, 1\n        /* Number */\n        ), type.mapper);\n        setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\n      } else if (symbol.flags & 2048\n      /* TypeLiteral */\n      ) {\n          var members = symbol.members;\n          var callSignatures = getSignaturesOfSymbol(members[\"__call\"]);\n          var constructSignatures = getSignaturesOfSymbol(members[\"__new\"]);\n          var stringIndexType = getIndexTypeOfSymbol(symbol, 0\n          /* String */\n          );\n          var numberIndexType = getIndexTypeOfSymbol(symbol, 1\n          /* Number */\n          );\n          setObjectTypeMembers(type, members, callSignatures, constructSignatures, stringIndexType, numberIndexType);\n        } else {\n        // Combinations of function, class, enum and module\n        var members = emptySymbols;\n        var constructSignatures = emptyArray;\n\n        if (symbol.flags & 1952\n        /* HasExports */\n        ) {\n            members = getExportsOfSymbol(symbol);\n          }\n\n        if (symbol.flags & 32\n        /* Class */\n        ) {\n            var classType = getDeclaredTypeOfClassOrInterface(symbol);\n            constructSignatures = getSignaturesOfSymbol(symbol.members[\"__constructor\"]);\n\n            if (!constructSignatures.length) {\n              constructSignatures = getDefaultConstructSignatures(classType);\n            }\n\n            var baseConstructorType = getBaseConstructorTypeOfClass(classType);\n\n            if (baseConstructorType.flags & 80896\n            /* ObjectType */\n            ) {\n                members = createSymbolTable(getNamedMembers(members));\n                addInheritedMembers(members, getPropertiesOfObjectType(baseConstructorType));\n              }\n          }\n\n        var numberIndexType = symbol.flags & 384\n        /* Enum */\n        ? stringType : undefined;\n        setObjectTypeMembers(type, members, emptyArray, constructSignatures, undefined, numberIndexType); // We resolve the members before computing the signatures because a signature may use\n        // typeof with a qualified name expression that circularly references the type we are\n        // in the process of resolving (see issue #6072). The temporarily empty signature list\n        // will never be observed because a qualified name can't reference signatures.\n\n        if (symbol.flags & (16\n        /* Function */\n        | 8192\n        /* Method */\n        )) {\n          type.callSignatures = getSignaturesOfSymbol(symbol);\n        }\n      }\n    }\n\n    function resolveStructuredTypeMembers(type) {\n      if (!type.members) {\n        if (type.flags & 4096\n        /* Reference */\n        ) {\n            resolveTypeReferenceMembers(type);\n          } else if (type.flags & (1024\n        /* Class */\n        | 2048\n        /* Interface */\n        )) {\n          resolveClassOrInterfaceMembers(type);\n        } else if (type.flags & 65536\n        /* Anonymous */\n        ) {\n            resolveAnonymousTypeMembers(type);\n          } else if (type.flags & 8192\n        /* Tuple */\n        ) {\n            resolveTupleTypeMembers(type);\n          } else if (type.flags & 16384\n        /* Union */\n        ) {\n            resolveUnionTypeMembers(type);\n          } else if (type.flags & 32768\n        /* Intersection */\n        ) {\n            resolveIntersectionTypeMembers(type);\n          }\n      }\n\n      return type;\n    }\n    /** Return properties of an object type or an empty array for other types */\n\n\n    function getPropertiesOfObjectType(type) {\n      if (type.flags & 80896\n      /* ObjectType */\n      ) {\n          return resolveStructuredTypeMembers(type).properties;\n        }\n\n      return emptyArray;\n    }\n    /** If the given type is an object type and that type has a property by the given name,\n     * return the symbol for that property. Otherwise return undefined. */\n\n\n    function getPropertyOfObjectType(type, name) {\n      if (type.flags & 80896\n      /* ObjectType */\n      ) {\n          var resolved = resolveStructuredTypeMembers(type);\n\n          if (ts.hasProperty(resolved.members, name)) {\n            var symbol = resolved.members[name];\n\n            if (symbolIsValue(symbol)) {\n              return symbol;\n            }\n          }\n        }\n    }\n\n    function getPropertiesOfUnionOrIntersectionType(type) {\n      for (var _i = 0, _a = type.types; _i < _a.length; _i++) {\n        var current = _a[_i];\n\n        for (var _b = 0, _c = getPropertiesOfType(current); _b < _c.length; _b++) {\n          var prop = _c[_b];\n          getPropertyOfUnionOrIntersectionType(type, prop.name);\n        } // The properties of a union type are those that are present in all constituent types, so\n        // we only need to check the properties of the first type\n\n\n        if (type.flags & 16384\n        /* Union */\n        ) {\n            break;\n          }\n      }\n\n      return type.resolvedProperties ? symbolsToArray(type.resolvedProperties) : emptyArray;\n    }\n\n    function getPropertiesOfType(type) {\n      type = getApparentType(type);\n      return type.flags & 49152\n      /* UnionOrIntersection */\n      ? getPropertiesOfUnionOrIntersectionType(type) : getPropertiesOfObjectType(type);\n    }\n    /**\n     * The apparent type of a type parameter is the base constraint instantiated with the type parameter\n     * as the type argument for the 'this' type.\n     */\n\n\n    function getApparentTypeOfTypeParameter(type) {\n      if (!type.resolvedApparentType) {\n        var constraintType = getConstraintOfTypeParameter(type);\n\n        while (constraintType && constraintType.flags & 512\n        /* TypeParameter */\n        ) {\n          constraintType = getConstraintOfTypeParameter(constraintType);\n        }\n\n        type.resolvedApparentType = getTypeWithThisArgument(constraintType || emptyObjectType, type);\n      }\n\n      return type.resolvedApparentType;\n    }\n    /**\n     * For a type parameter, return the base constraint of the type parameter. For the string, number,\n     * boolean, and symbol primitive types, return the corresponding object types. Otherwise return the\n     * type itself. Note that the apparent type of a union type is the union type itself.\n     */\n\n\n    function getApparentType(type) {\n      if (type.flags & 512\n      /* TypeParameter */\n      ) {\n          type = getApparentTypeOfTypeParameter(type);\n        }\n\n      if (type.flags & 258\n      /* StringLike */\n      ) {\n          type = globalStringType;\n        } else if (type.flags & 132\n      /* NumberLike */\n      ) {\n          type = globalNumberType;\n        } else if (type.flags & 8\n      /* Boolean */\n      ) {\n          type = globalBooleanType;\n        } else if (type.flags & 16777216\n      /* ESSymbol */\n      ) {\n          type = globalESSymbolType;\n        }\n\n      return type;\n    }\n\n    function createUnionOrIntersectionProperty(containingType, name) {\n      var types = containingType.types;\n      var props; // Flags we want to propagate to the result if they exist in all source symbols\n\n      var commonFlags = containingType.flags & 32768\n      /* Intersection */\n      ? 536870912\n      /* Optional */\n      : 0\n      /* None */\n      ;\n\n      for (var _i = 0, types_2 = types; _i < types_2.length; _i++) {\n        var current = types_2[_i];\n        var type = getApparentType(current);\n\n        if (type !== unknownType) {\n          var prop = getPropertyOfType(type, name);\n\n          if (prop && !(getDeclarationFlagsFromSymbol(prop) & (16\n          /* Private */\n          | 32\n          /* Protected */\n          ))) {\n            commonFlags &= prop.flags;\n\n            if (!props) {\n              props = [prop];\n            } else if (!ts.contains(props, prop)) {\n              props.push(prop);\n            }\n          } else if (containingType.flags & 16384\n          /* Union */\n          ) {\n              // A union type requires the property to be present in all constituent types\n              return undefined;\n            }\n        }\n      }\n\n      if (!props) {\n        return undefined;\n      }\n\n      if (props.length === 1) {\n        return props[0];\n      }\n\n      var propTypes = [];\n      var declarations = [];\n\n      for (var _a = 0, props_1 = props; _a < props_1.length; _a++) {\n        var prop = props_1[_a];\n\n        if (prop.declarations) {\n          ts.addRange(declarations, prop.declarations);\n        }\n\n        propTypes.push(getTypeOfSymbol(prop));\n      }\n\n      var result = createSymbol(4\n      /* Property */\n      | 67108864\n      /* Transient */\n      | 268435456\n      /* SyntheticProperty */\n      | commonFlags, name);\n      result.containingType = containingType;\n      result.declarations = declarations;\n      result.type = containingType.flags & 16384\n      /* Union */\n      ? getUnionType(propTypes) : getIntersectionType(propTypes);\n      return result;\n    }\n\n    function getPropertyOfUnionOrIntersectionType(type, name) {\n      var properties = type.resolvedProperties || (type.resolvedProperties = {});\n\n      if (ts.hasProperty(properties, name)) {\n        return properties[name];\n      }\n\n      var property = createUnionOrIntersectionProperty(type, name);\n\n      if (property) {\n        properties[name] = property;\n      }\n\n      return property;\n    } // Return the symbol for the property with the given name in the given type. Creates synthetic union properties when\n    // necessary, maps primitive types and type parameters are to their apparent types, and augments with properties from\n    // Object and Function as appropriate.\n\n\n    function getPropertyOfType(type, name) {\n      type = getApparentType(type);\n\n      if (type.flags & 80896\n      /* ObjectType */\n      ) {\n          var resolved = resolveStructuredTypeMembers(type);\n\n          if (ts.hasProperty(resolved.members, name)) {\n            var symbol = resolved.members[name];\n\n            if (symbolIsValue(symbol)) {\n              return symbol;\n            }\n          }\n\n          if (resolved === anyFunctionType || resolved.callSignatures.length || resolved.constructSignatures.length) {\n            var symbol = getPropertyOfObjectType(globalFunctionType, name);\n\n            if (symbol) {\n              return symbol;\n            }\n          }\n\n          return getPropertyOfObjectType(globalObjectType, name);\n        }\n\n      if (type.flags & 49152\n      /* UnionOrIntersection */\n      ) {\n          return getPropertyOfUnionOrIntersectionType(type, name);\n        }\n\n      return undefined;\n    }\n\n    function getSignaturesOfStructuredType(type, kind) {\n      if (type.flags & 130048\n      /* StructuredType */\n      ) {\n          var resolved = resolveStructuredTypeMembers(type);\n          return kind === 0\n          /* Call */\n          ? resolved.callSignatures : resolved.constructSignatures;\n        }\n\n      return emptyArray;\n    }\n    /**\n     * Return the signatures of the given kind in the given type. Creates synthetic union signatures when necessary and\n     * maps primitive types and type parameters are to their apparent types.\n     */\n\n\n    function getSignaturesOfType(type, kind) {\n      return getSignaturesOfStructuredType(getApparentType(type), kind);\n    }\n\n    function getIndexTypeOfStructuredType(type, kind) {\n      if (type.flags & 130048\n      /* StructuredType */\n      ) {\n          var resolved = resolveStructuredTypeMembers(type);\n          return kind === 0\n          /* String */\n          ? resolved.stringIndexType : resolved.numberIndexType;\n        }\n    } // Return the index type of the given kind in the given type. Creates synthetic union index types when necessary and\n    // maps primitive types and type parameters are to their apparent types.\n\n\n    function getIndexTypeOfType(type, kind) {\n      return getIndexTypeOfStructuredType(getApparentType(type), kind);\n    }\n\n    function getTypeParametersFromJSDocTemplate(declaration) {\n      if (declaration.parserContextFlags & 32\n      /* JavaScriptFile */\n      ) {\n          var templateTag = ts.getJSDocTemplateTag(declaration);\n\n          if (templateTag) {\n            return getTypeParametersFromDeclaration(templateTag.typeParameters);\n          }\n        }\n\n      return undefined;\n    } // Return list of type parameters with duplicates removed (duplicate identifier errors are generated in the actual\n    // type checking functions).\n\n\n    function getTypeParametersFromDeclaration(typeParameterDeclarations) {\n      var result = [];\n      ts.forEach(typeParameterDeclarations, function (node) {\n        var tp = getDeclaredTypeOfTypeParameter(node.symbol);\n\n        if (!ts.contains(result, tp)) {\n          result.push(tp);\n        }\n      });\n      return result;\n    }\n\n    function symbolsToArray(symbols) {\n      var result = [];\n\n      for (var id in symbols) {\n        if (!isReservedMemberName(id)) {\n          result.push(symbols[id]);\n        }\n      }\n\n      return result;\n    }\n\n    function isOptionalParameter(node) {\n      if (node.parserContextFlags & 32\n      /* JavaScriptFile */\n      ) {\n          if (node.type && node.type.kind === 263\n          /* JSDocOptionalType */\n          ) {\n              return true;\n            }\n\n          var paramTag = ts.getCorrespondingJSDocParameterTag(node);\n\n          if (paramTag) {\n            if (paramTag.isBracketed) {\n              return true;\n            }\n\n            if (paramTag.typeExpression) {\n              return paramTag.typeExpression.type.kind === 263\n              /* JSDocOptionalType */\n              ;\n            }\n          }\n        }\n\n      if (ts.hasQuestionToken(node)) {\n        return true;\n      }\n\n      if (node.initializer) {\n        var signatureDeclaration = node.parent;\n        var signature = getSignatureFromDeclaration(signatureDeclaration);\n        var parameterIndex = ts.indexOf(signatureDeclaration.parameters, node);\n        ts.Debug.assert(parameterIndex >= 0);\n        return parameterIndex >= signature.minArgumentCount;\n      }\n\n      return false;\n    }\n\n    function createTypePredicateFromTypePredicateNode(node) {\n      if (node.parameterName.kind === 69\n      /* Identifier */\n      ) {\n          var parameterName = node.parameterName;\n          return {\n            kind: 1\n            /* Identifier */\n            ,\n            parameterName: parameterName ? parameterName.text : undefined,\n            parameterIndex: parameterName ? getTypePredicateParameterIndex(node.parent.parameters, parameterName) : undefined,\n            type: getTypeFromTypeNode(node.type)\n          };\n        } else {\n        return {\n          kind: 0\n          /* This */\n          ,\n          type: getTypeFromTypeNode(node.type)\n        };\n      }\n    }\n\n    function getSignatureFromDeclaration(declaration) {\n      var links = getNodeLinks(declaration);\n\n      if (!links.resolvedSignature) {\n        var classType = declaration.kind === 145\n        /* Constructor */\n        ? getDeclaredTypeOfClassOrInterface(getMergedSymbol(declaration.parent.symbol)) : undefined;\n        var typeParameters = classType ? classType.localTypeParameters : declaration.typeParameters ? getTypeParametersFromDeclaration(declaration.typeParameters) : getTypeParametersFromJSDocTemplate(declaration);\n        var parameters = [];\n        var hasStringLiterals = false;\n        var minArgumentCount = -1;\n        var isJSConstructSignature = ts.isJSDocConstructSignature(declaration);\n        var returnType = undefined;\n        var typePredicate = undefined; // If this is a JSDoc construct signature, then skip the first parameter in the\n        // parameter list.  The first parameter represents the return type of the construct\n        // signature.\n\n        for (var i = isJSConstructSignature ? 1 : 0, n = declaration.parameters.length; i < n; i++) {\n          var param = declaration.parameters[i];\n          var paramSymbol = param.symbol; // Include parameter symbol instead of property symbol in the signature\n\n          if (paramSymbol && !!(paramSymbol.flags & 4\n          /* Property */\n          ) && !ts.isBindingPattern(param.name)) {\n            var resolvedSymbol = resolveName(param, paramSymbol.name, 107455\n            /* Value */\n            , undefined, undefined);\n            paramSymbol = resolvedSymbol;\n          }\n\n          parameters.push(paramSymbol);\n\n          if (param.type && param.type.kind === 163\n          /* StringLiteralType */\n          ) {\n              hasStringLiterals = true;\n            }\n\n          if (param.initializer || param.questionToken || param.dotDotDotToken) {\n            if (minArgumentCount < 0) {\n              minArgumentCount = i;\n            }\n          } else {\n            // If we see any required parameters, it means the prior ones were not in fact optional.\n            minArgumentCount = -1;\n          }\n        }\n\n        if (minArgumentCount < 0) {\n          minArgumentCount = declaration.parameters.length;\n        }\n\n        if (isJSConstructSignature) {\n          minArgumentCount--;\n          returnType = getTypeFromTypeNode(declaration.parameters[0].type);\n        } else if (classType) {\n          returnType = classType;\n        } else if (declaration.type) {\n          returnType = getTypeFromTypeNode(declaration.type);\n\n          if (declaration.type.kind === 151\n          /* TypePredicate */\n          ) {\n              typePredicate = createTypePredicateFromTypePredicateNode(declaration.type);\n            }\n        } else {\n          if (declaration.parserContextFlags & 32\n          /* JavaScriptFile */\n          ) {\n              var type = getReturnTypeFromJSDocComment(declaration);\n\n              if (type && type !== unknownType) {\n                returnType = type;\n              }\n            } // TypeScript 1.0 spec (April 2014):\n          // If only one accessor includes a type annotation, the other behaves as if it had the same type annotation.\n\n\n          if (declaration.kind === 146\n          /* GetAccessor */\n          && !ts.hasDynamicName(declaration)) {\n            var setter = ts.getDeclarationOfKind(declaration.symbol, 147\n            /* SetAccessor */\n            );\n            returnType = getAnnotatedAccessorType(setter);\n          }\n\n          if (!returnType && ts.nodeIsMissing(declaration.body)) {\n            returnType = anyType;\n          }\n        }\n\n        links.resolvedSignature = createSignature(declaration, typeParameters, parameters, returnType, typePredicate, minArgumentCount, ts.hasRestParameter(declaration), hasStringLiterals);\n      }\n\n      return links.resolvedSignature;\n    }\n\n    function getSignaturesOfSymbol(symbol) {\n      if (!symbol) return emptyArray;\n      var result = [];\n\n      for (var i = 0, len = symbol.declarations.length; i < len; i++) {\n        var node = symbol.declarations[i];\n\n        switch (node.kind) {\n          case 153\n          /* FunctionType */\n          :\n          case 154\n          /* ConstructorType */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 148\n          /* CallSignature */\n          :\n          case 149\n          /* ConstructSignature */\n          :\n          case 150\n          /* IndexSignature */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n          case 264\n          /* JSDocFunctionType */\n          :\n            // Don't include signature if node is the implementation of an overloaded function. A node is considered\n            // an implementation node if it has a body and the previous node is of the same kind and immediately\n            // precedes the implementation node (i.e. has the same parent and ends where the implementation starts).\n            if (i > 0 && node.body) {\n              var previous = symbol.declarations[i - 1];\n\n              if (node.parent === previous.parent && node.kind === previous.kind && node.pos === previous.end) {\n                break;\n              }\n            }\n\n            result.push(getSignatureFromDeclaration(node));\n        }\n      }\n\n      return result;\n    }\n\n    function resolveExternalModuleTypeByLiteral(name) {\n      var moduleSym = resolveExternalModuleName(name, name);\n\n      if (moduleSym) {\n        var resolvedModuleSymbol = resolveExternalModuleSymbol(moduleSym);\n\n        if (resolvedModuleSymbol) {\n          return getTypeOfSymbol(resolvedModuleSymbol);\n        }\n      }\n\n      return anyType;\n    }\n\n    function getReturnTypeOfSignature(signature) {\n      if (!signature.resolvedReturnType) {\n        if (!pushTypeResolution(signature, 3\n        /* ResolvedReturnType */\n        )) {\n          return unknownType;\n        }\n\n        var type = void 0;\n\n        if (signature.target) {\n          type = instantiateType(getReturnTypeOfSignature(signature.target), signature.mapper);\n        } else if (signature.unionSignatures) {\n          type = getUnionType(ts.map(signature.unionSignatures, getReturnTypeOfSignature));\n        } else {\n          type = getReturnTypeFromBody(signature.declaration);\n        }\n\n        if (!popTypeResolution()) {\n          type = anyType;\n\n          if (compilerOptions.noImplicitAny) {\n            var declaration = signature.declaration;\n\n            if (declaration.name) {\n              error(declaration.name, ts.Diagnostics._0_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions, ts.declarationNameToString(declaration.name));\n            } else {\n              error(declaration, ts.Diagnostics.Function_implicitly_has_return_type_any_because_it_does_not_have_a_return_type_annotation_and_is_referenced_directly_or_indirectly_in_one_of_its_return_expressions);\n            }\n          }\n        }\n\n        signature.resolvedReturnType = type;\n      }\n\n      return signature.resolvedReturnType;\n    }\n\n    function getRestTypeOfSignature(signature) {\n      if (signature.hasRestParameter) {\n        var type = getTypeOfSymbol(ts.lastOrUndefined(signature.parameters));\n\n        if (type.flags & 4096\n        /* Reference */\n        && type.target === globalArrayType) {\n          return type.typeArguments[0];\n        }\n      }\n\n      return anyType;\n    }\n\n    function getSignatureInstantiation(signature, typeArguments) {\n      return instantiateSignature(signature, createTypeMapper(signature.typeParameters, typeArguments),\n      /*eraseTypeParameters*/\n      true);\n    }\n\n    function getErasedSignature(signature) {\n      if (!signature.typeParameters) return signature;\n\n      if (!signature.erasedSignatureCache) {\n        if (signature.target) {\n          signature.erasedSignatureCache = instantiateSignature(getErasedSignature(signature.target), signature.mapper);\n        } else {\n          signature.erasedSignatureCache = instantiateSignature(signature, createTypeEraser(signature.typeParameters),\n          /*eraseTypeParameters*/\n          true);\n        }\n      }\n\n      return signature.erasedSignatureCache;\n    }\n\n    function getOrCreateTypeFromSignature(signature) {\n      // There are two ways to declare a construct signature, one is by declaring a class constructor\n      // using the constructor keyword, and the other is declaring a bare construct signature in an\n      // object type literal or interface (using the new keyword). Each way of declaring a constructor\n      // will result in a different declaration kind.\n      if (!signature.isolatedSignatureType) {\n        var isConstructor = signature.declaration.kind === 145\n        /* Constructor */\n        || signature.declaration.kind === 149\n        /* ConstructSignature */\n        ;\n        var type = createObjectType(65536\n        /* Anonymous */\n        | 262144\n        /* FromSignature */\n        );\n        type.members = emptySymbols;\n        type.properties = emptyArray;\n        type.callSignatures = !isConstructor ? [signature] : emptyArray;\n        type.constructSignatures = isConstructor ? [signature] : emptyArray;\n        signature.isolatedSignatureType = type;\n      }\n\n      return signature.isolatedSignatureType;\n    }\n\n    function getIndexSymbol(symbol) {\n      return symbol.members[\"__index\"];\n    }\n\n    function getIndexDeclarationOfSymbol(symbol, kind) {\n      var syntaxKind = kind === 1\n      /* Number */\n      ? 128\n      /* NumberKeyword */\n      : 130\n      /* StringKeyword */\n      ;\n      var indexSymbol = getIndexSymbol(symbol);\n\n      if (indexSymbol) {\n        for (var _i = 0, _a = indexSymbol.declarations; _i < _a.length; _i++) {\n          var decl = _a[_i];\n          var node = decl;\n\n          if (node.parameters.length === 1) {\n            var parameter = node.parameters[0];\n\n            if (parameter && parameter.type && parameter.type.kind === syntaxKind) {\n              return node;\n            }\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    function getIndexTypeOfSymbol(symbol, kind) {\n      var declaration = getIndexDeclarationOfSymbol(symbol, kind);\n      return declaration ? declaration.type ? getTypeFromTypeNode(declaration.type) : anyType : undefined;\n    }\n\n    function getConstraintDeclaration(type) {\n      return ts.getDeclarationOfKind(type.symbol, 138\n      /* TypeParameter */\n      ).constraint;\n    }\n\n    function hasConstraintReferenceTo(type, target) {\n      var checked;\n\n      while (type && !(type.flags & 33554432\n      /* ThisType */\n      ) && type.flags & 512\n      /* TypeParameter */\n      && !ts.contains(checked, type)) {\n        if (type === target) {\n          return true;\n        }\n\n        (checked || (checked = [])).push(type);\n        var constraintDeclaration = getConstraintDeclaration(type);\n        type = constraintDeclaration && getTypeFromTypeNode(constraintDeclaration);\n      }\n\n      return false;\n    }\n\n    function getConstraintOfTypeParameter(typeParameter) {\n      if (!typeParameter.constraint) {\n        if (typeParameter.target) {\n          var targetConstraint = getConstraintOfTypeParameter(typeParameter.target);\n          typeParameter.constraint = targetConstraint ? instantiateType(targetConstraint, typeParameter.mapper) : noConstraintType;\n        } else {\n          var constraintDeclaration = getConstraintDeclaration(typeParameter);\n          var constraint = getTypeFromTypeNode(constraintDeclaration);\n\n          if (hasConstraintReferenceTo(constraint, typeParameter)) {\n            error(constraintDeclaration, ts.Diagnostics.Type_parameter_0_has_a_circular_constraint, typeToString(typeParameter));\n            constraint = unknownType;\n          }\n\n          typeParameter.constraint = constraint;\n        }\n      }\n\n      return typeParameter.constraint === noConstraintType ? undefined : typeParameter.constraint;\n    }\n\n    function getParentSymbolOfTypeParameter(typeParameter) {\n      return getSymbolOfNode(ts.getDeclarationOfKind(typeParameter.symbol, 138\n      /* TypeParameter */\n      ).parent);\n    }\n\n    function getTypeListId(types) {\n      if (types) {\n        switch (types.length) {\n          case 1:\n            return \"\" + types[0].id;\n\n          case 2:\n            return types[0].id + \",\" + types[1].id;\n\n          default:\n            var result = \"\";\n\n            for (var i = 0; i < types.length; i++) {\n              if (i > 0) {\n                result += \",\";\n              }\n\n              result += types[i].id;\n            }\n\n            return result;\n        }\n      }\n\n      return \"\";\n    } // This function is used to propagate certain flags when creating new object type references and union types.\n    // It is only necessary to do so if a constituent type might be the undefined type, the null type, the type\n    // of an object literal or the anyFunctionType. This is because there are operations in the type checker\n    // that care about the presence of such types at arbitrary depth in a containing type.\n\n\n    function getPropagatingFlagsOfTypes(types) {\n      var result = 0;\n\n      for (var _i = 0, types_3 = types; _i < types_3.length; _i++) {\n        var type = types_3[_i];\n        result |= type.flags;\n      }\n\n      return result & 14680064\n      /* PropagatingFlags */\n      ;\n    }\n\n    function createTypeReference(target, typeArguments) {\n      var id = getTypeListId(typeArguments);\n      var type = target.instantiations[id];\n\n      if (!type) {\n        var flags = 4096\n        /* Reference */\n        | (typeArguments ? getPropagatingFlagsOfTypes(typeArguments) : 0);\n        type = target.instantiations[id] = createObjectType(flags, target.symbol);\n        type.target = target;\n        type.typeArguments = typeArguments;\n      }\n\n      return type;\n    } // Get type from reference to class or interface\n\n\n    function getTypeFromClassOrInterfaceReference(node, symbol) {\n      var type = getDeclaredTypeOfSymbol(symbol);\n      var typeParameters = type.localTypeParameters;\n\n      if (typeParameters) {\n        if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {\n          error(node, ts.Diagnostics.Generic_type_0_requires_1_type_argument_s, typeToString(type,\n          /*enclosingDeclaration*/\n          undefined, 1\n          /* WriteArrayAsGenericType */\n          ), typeParameters.length);\n          return unknownType;\n        } // In a type reference, the outer type parameters of the referenced class or interface are automatically\n        // supplied as type arguments and the type reference only specifies arguments for the local type parameters\n        // of the class or interface.\n\n\n        return createTypeReference(type, ts.concatenate(type.outerTypeParameters, ts.map(node.typeArguments, getTypeFromTypeNode)));\n      }\n\n      if (node.typeArguments) {\n        error(node, ts.Diagnostics.Type_0_is_not_generic, typeToString(type));\n        return unknownType;\n      }\n\n      return type;\n    } // Get type from reference to type alias. When a type alias is generic, the declared type of the type alias may include\n    // references to the type parameters of the alias. We replace those with the actual type arguments by instantiating the\n    // declared type. Instantiations are cached using the type identities of the type arguments as the key.\n\n\n    function getTypeFromTypeAliasReference(node, symbol) {\n      var type = getDeclaredTypeOfSymbol(symbol);\n      var links = getSymbolLinks(symbol);\n      var typeParameters = links.typeParameters;\n\n      if (typeParameters) {\n        if (!node.typeArguments || node.typeArguments.length !== typeParameters.length) {\n          error(node, ts.Diagnostics.Generic_type_0_requires_1_type_argument_s, symbolToString(symbol), typeParameters.length);\n          return unknownType;\n        }\n\n        var typeArguments = ts.map(node.typeArguments, getTypeFromTypeNode);\n        var id = getTypeListId(typeArguments);\n        return links.instantiations[id] || (links.instantiations[id] = instantiateType(type, createTypeMapper(typeParameters, typeArguments)));\n      }\n\n      if (node.typeArguments) {\n        error(node, ts.Diagnostics.Type_0_is_not_generic, symbolToString(symbol));\n        return unknownType;\n      }\n\n      return type;\n    } // Get type from reference to named type that cannot be generic (enum or type parameter)\n\n\n    function getTypeFromNonGenericTypeReference(node, symbol) {\n      if (node.typeArguments) {\n        error(node, ts.Diagnostics.Type_0_is_not_generic, symbolToString(symbol));\n        return unknownType;\n      }\n\n      return getDeclaredTypeOfSymbol(symbol);\n    }\n\n    function getTypeReferenceName(node) {\n      switch (node.kind) {\n        case 152\n        /* TypeReference */\n        :\n          return node.typeName;\n\n        case 262\n        /* JSDocTypeReference */\n        :\n          return node.name;\n\n        case 191\n        /* ExpressionWithTypeArguments */\n        :\n          // We only support expressions that are simple qualified names. For other\n          // expressions this produces undefined.\n          if (ts.isSupportedExpressionWithTypeArguments(node)) {\n            return node.expression;\n          }\n\n      }\n\n      return undefined;\n    }\n\n    function resolveTypeReferenceName(node, typeReferenceName) {\n      if (!typeReferenceName) {\n        return unknownSymbol;\n      }\n\n      return resolveEntityName(typeReferenceName, 793056\n      /* Type */\n      ) || unknownSymbol;\n    }\n\n    function getTypeReferenceType(node, symbol) {\n      if (symbol === unknownSymbol) {\n        return unknownType;\n      }\n\n      if (symbol.flags & (32\n      /* Class */\n      | 64\n      /* Interface */\n      )) {\n        return getTypeFromClassOrInterfaceReference(node, symbol);\n      }\n\n      if (symbol.flags & 524288\n      /* TypeAlias */\n      ) {\n          return getTypeFromTypeAliasReference(node, symbol);\n        }\n\n      if (symbol.flags & 107455\n      /* Value */\n      && node.kind === 262\n      /* JSDocTypeReference */\n      ) {\n          // A JSDocTypeReference may have resolved to a value (as opposed to a type). In\n          // that case, the type of this reference is just the type of the value we resolved\n          // to.\n          return getTypeOfSymbol(symbol);\n        }\n\n      return getTypeFromNonGenericTypeReference(node, symbol);\n    }\n\n    function getTypeFromTypeReference(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        var symbol = void 0;\n        var type = void 0;\n\n        if (node.kind === 262\n        /* JSDocTypeReference */\n        ) {\n            var typeReferenceName = getTypeReferenceName(node);\n            symbol = resolveTypeReferenceName(node, typeReferenceName);\n            type = getTypeReferenceType(node, symbol);\n            links.resolvedSymbol = symbol;\n            links.resolvedType = type;\n          } else {\n          // We only support expressions that are simple qualified names. For other expressions this produces undefined.\n          var typeNameOrExpression = node.kind === 152\n          /* TypeReference */\n          ? node.typeName : ts.isSupportedExpressionWithTypeArguments(node) ? node.expression : undefined;\n          symbol = typeNameOrExpression && resolveEntityName(typeNameOrExpression, 793056\n          /* Type */\n          ) || unknownSymbol;\n          type = symbol === unknownSymbol ? unknownType : symbol.flags & (32\n          /* Class */\n          | 64\n          /* Interface */\n          ) ? getTypeFromClassOrInterfaceReference(node, symbol) : symbol.flags & 524288\n          /* TypeAlias */\n          ? getTypeFromTypeAliasReference(node, symbol) : getTypeFromNonGenericTypeReference(node, symbol);\n        } // Cache both the resolved symbol and the resolved type. The resolved symbol is needed in when we check the\n        // type reference in checkTypeReferenceOrExpressionWithTypeArguments.\n\n\n        links.resolvedSymbol = symbol;\n        links.resolvedType = type;\n      }\n\n      return links.resolvedType;\n    }\n\n    function getTypeFromTypeQueryNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        // TypeScript 1.0 spec (April 2014): 3.6.3\n        // The expression is processed as an identifier expression (section 4.3)\n        // or property access expression(section 4.10),\n        // the widened type(section 3.9) of which becomes the result.\n        links.resolvedType = getWidenedType(checkExpression(node.exprName));\n      }\n\n      return links.resolvedType;\n    }\n\n    function getTypeOfGlobalSymbol(symbol, arity) {\n      function getTypeDeclaration(symbol) {\n        var declarations = symbol.declarations;\n\n        for (var _i = 0, declarations_3 = declarations; _i < declarations_3.length; _i++) {\n          var declaration = declarations_3[_i];\n\n          switch (declaration.kind) {\n            case 217\n            /* ClassDeclaration */\n            :\n            case 218\n            /* InterfaceDeclaration */\n            :\n            case 220\n            /* EnumDeclaration */\n            :\n              return declaration;\n          }\n        }\n      }\n\n      if (!symbol) {\n        return arity ? emptyGenericType : emptyObjectType;\n      }\n\n      var type = getDeclaredTypeOfSymbol(symbol);\n\n      if (!(type.flags & 80896\n      /* ObjectType */\n      )) {\n        error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_be_a_class_or_interface_type, symbol.name);\n        return arity ? emptyGenericType : emptyObjectType;\n      }\n\n      if ((type.typeParameters ? type.typeParameters.length : 0) !== arity) {\n        error(getTypeDeclaration(symbol), ts.Diagnostics.Global_type_0_must_have_1_type_parameter_s, symbol.name, arity);\n        return arity ? emptyGenericType : emptyObjectType;\n      }\n\n      return type;\n    }\n\n    function getGlobalValueSymbol(name) {\n      return getGlobalSymbol(name, 107455\n      /* Value */\n      , ts.Diagnostics.Cannot_find_global_value_0);\n    }\n\n    function getGlobalTypeSymbol(name) {\n      return getGlobalSymbol(name, 793056\n      /* Type */\n      , ts.Diagnostics.Cannot_find_global_type_0);\n    }\n\n    function getGlobalSymbol(name, meaning, diagnostic) {\n      return resolveName(undefined, name, meaning, diagnostic, name);\n    }\n\n    function getGlobalType(name, arity) {\n      if (arity === void 0) {\n        arity = 0;\n      }\n\n      return getTypeOfGlobalSymbol(getGlobalTypeSymbol(name), arity);\n    }\n    /**\n     * Returns a type that is inside a namespace at the global scope, e.g.\n     * getExportedTypeFromNamespace('JSX', 'Element') returns the JSX.Element type\n     */\n\n\n    function getExportedTypeFromNamespace(namespace, name) {\n      var namespaceSymbol = getGlobalSymbol(namespace, 1536\n      /* Namespace */\n      ,\n      /*diagnosticMessage*/\n      undefined);\n      var typeSymbol = namespaceSymbol && getSymbol(namespaceSymbol.exports, name, 793056\n      /* Type */\n      );\n      return typeSymbol && getDeclaredTypeOfSymbol(typeSymbol);\n    }\n\n    function getGlobalESSymbolConstructorSymbol() {\n      return globalESSymbolConstructorSymbol || (globalESSymbolConstructorSymbol = getGlobalValueSymbol(\"Symbol\"));\n    }\n    /**\n      * Creates a TypeReference for a generic `TypedPropertyDescriptor<T>`.\n      */\n\n\n    function createTypedPropertyDescriptorType(propertyType) {\n      var globalTypedPropertyDescriptorType = getGlobalTypedPropertyDescriptorType();\n      return globalTypedPropertyDescriptorType !== emptyGenericType ? createTypeReference(globalTypedPropertyDescriptorType, [propertyType]) : emptyObjectType;\n    }\n    /**\n     * Instantiates a global type that is generic with some element type, and returns that instantiation.\n     */\n\n\n    function createTypeFromGenericGlobalType(genericGlobalType, typeArguments) {\n      return genericGlobalType !== emptyGenericType ? createTypeReference(genericGlobalType, typeArguments) : emptyObjectType;\n    }\n\n    function createIterableType(elementType) {\n      return createTypeFromGenericGlobalType(globalIterableType, [elementType]);\n    }\n\n    function createIterableIteratorType(elementType) {\n      return createTypeFromGenericGlobalType(globalIterableIteratorType, [elementType]);\n    }\n\n    function createArrayType(elementType) {\n      return createTypeFromGenericGlobalType(globalArrayType, [elementType]);\n    }\n\n    function getTypeFromArrayTypeNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        links.resolvedType = createArrayType(getTypeFromTypeNode(node.elementType));\n      }\n\n      return links.resolvedType;\n    }\n\n    function createTupleType(elementTypes) {\n      var id = getTypeListId(elementTypes);\n      return tupleTypes[id] || (tupleTypes[id] = createNewTupleType(elementTypes));\n    }\n\n    function createNewTupleType(elementTypes) {\n      var type = createObjectType(8192\n      /* Tuple */\n      | getPropagatingFlagsOfTypes(elementTypes));\n      type.elementTypes = elementTypes;\n      return type;\n    }\n\n    function getTypeFromTupleTypeNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        links.resolvedType = createTupleType(ts.map(node.elementTypes, getTypeFromTypeNode));\n      }\n\n      return links.resolvedType;\n    }\n\n    function addTypeToSet(typeSet, type, typeSetKind) {\n      if (type.flags & typeSetKind) {\n        addTypesToSet(typeSet, type.types, typeSetKind);\n      } else if (!ts.contains(typeSet, type)) {\n        typeSet.push(type);\n      }\n    } // Add the given types to the given type set. Order is preserved, duplicates are removed,\n    // and nested types of the given kind are flattened into the set.\n\n\n    function addTypesToSet(typeSet, types, typeSetKind) {\n      for (var _i = 0, types_4 = types; _i < types_4.length; _i++) {\n        var type = types_4[_i];\n        addTypeToSet(typeSet, type, typeSetKind);\n      }\n    }\n\n    function isSubtypeOfAny(candidate, types) {\n      for (var i = 0, len = types.length; i < len; i++) {\n        if (candidate !== types[i] && isTypeSubtypeOf(candidate, types[i])) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function removeSubtypes(types) {\n      var i = types.length;\n\n      while (i > 0) {\n        i--;\n\n        if (isSubtypeOfAny(types[i], types)) {\n          types.splice(i, 1);\n        }\n      }\n    }\n\n    function containsTypeAny(types) {\n      for (var _i = 0, types_5 = types; _i < types_5.length; _i++) {\n        var type = types_5[_i];\n\n        if (isTypeAny(type)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function removeAllButLast(types, typeToRemove) {\n      var i = types.length;\n\n      while (i > 0 && types.length > 1) {\n        i--;\n\n        if (types[i] === typeToRemove) {\n          types.splice(i, 1);\n        }\n      }\n    } // We reduce the constituent type set to only include types that aren't subtypes of other types, unless\n    // the noSubtypeReduction flag is specified, in which case we perform a simple deduplication based on\n    // object identity. Subtype reduction is possible only when union types are known not to circularly\n    // reference themselves (as is the case with union types created by expression constructs such as array\n    // literals and the || and ?: operators). Named types can circularly reference themselves and therefore\n    // cannot be deduplicated during their declaration. For example, \"type Item = string | (() => Item\" is\n    // a named type that circularly references itself.\n\n\n    function getUnionType(types, noSubtypeReduction) {\n      if (types.length === 0) {\n        return emptyUnionType;\n      }\n\n      var typeSet = [];\n      addTypesToSet(typeSet, types, 16384\n      /* Union */\n      );\n\n      if (containsTypeAny(typeSet)) {\n        return anyType;\n      }\n\n      if (noSubtypeReduction) {\n        removeAllButLast(typeSet, undefinedType);\n        removeAllButLast(typeSet, nullType);\n      } else {\n        removeSubtypes(typeSet);\n      }\n\n      if (typeSet.length === 1) {\n        return typeSet[0];\n      }\n\n      var id = getTypeListId(typeSet);\n      var type = unionTypes[id];\n\n      if (!type) {\n        type = unionTypes[id] = createObjectType(16384\n        /* Union */\n        | getPropagatingFlagsOfTypes(typeSet));\n        type.types = typeSet;\n      }\n\n      return type;\n    }\n\n    function getTypeFromUnionTypeNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        links.resolvedType = getUnionType(ts.map(node.types, getTypeFromTypeNode),\n        /*noSubtypeReduction*/\n        true);\n      }\n\n      return links.resolvedType;\n    } // We do not perform structural deduplication on intersection types. Intersection types are created only by the &\n    // type operator and we can't reduce those because we want to support recursive intersection types. For example,\n    // a type alias of the form \"type List<T> = T & { next: List<T> }\" cannot be reduced during its declaration.\n    // Also, unlike union types, the order of the constituent types is preserved in order that overload resolution\n    // for intersections of types with signatures can be deterministic.\n\n\n    function getIntersectionType(types) {\n      if (types.length === 0) {\n        return emptyObjectType;\n      }\n\n      var typeSet = [];\n      addTypesToSet(typeSet, types, 32768\n      /* Intersection */\n      );\n\n      if (containsTypeAny(typeSet)) {\n        return anyType;\n      }\n\n      if (typeSet.length === 1) {\n        return typeSet[0];\n      }\n\n      var id = getTypeListId(typeSet);\n      var type = intersectionTypes[id];\n\n      if (!type) {\n        type = intersectionTypes[id] = createObjectType(32768\n        /* Intersection */\n        | getPropagatingFlagsOfTypes(typeSet));\n        type.types = typeSet;\n      }\n\n      return type;\n    }\n\n    function getTypeFromIntersectionTypeNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        links.resolvedType = getIntersectionType(ts.map(node.types, getTypeFromTypeNode));\n      }\n\n      return links.resolvedType;\n    }\n\n    function getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        // Deferred resolution of members is handled by resolveObjectTypeMembers\n        links.resolvedType = createObjectType(65536\n        /* Anonymous */\n        , node.symbol);\n      }\n\n      return links.resolvedType;\n    }\n\n    function getStringLiteralTypeForText(text) {\n      if (ts.hasProperty(stringLiteralTypes, text)) {\n        return stringLiteralTypes[text];\n      }\n\n      var type = stringLiteralTypes[text] = createType(256\n      /* StringLiteral */\n      );\n      type.text = text;\n      return type;\n    }\n\n    function getTypeFromStringLiteralTypeNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        links.resolvedType = getStringLiteralTypeForText(node.text);\n      }\n\n      return links.resolvedType;\n    }\n\n    function getTypeFromJSDocVariadicType(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        var type = getTypeFromTypeNode(node.type);\n        links.resolvedType = type ? createArrayType(type) : unknownType;\n      }\n\n      return links.resolvedType;\n    }\n\n    function getTypeFromJSDocTupleType(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        var types = ts.map(node.types, getTypeFromTypeNode);\n        links.resolvedType = createTupleType(types);\n      }\n\n      return links.resolvedType;\n    }\n\n    function getThisType(node) {\n      var container = ts.getThisContainer(node,\n      /*includeArrowFunctions*/\n      false);\n      var parent = container && container.parent;\n\n      if (parent && (ts.isClassLike(parent) || parent.kind === 218\n      /* InterfaceDeclaration */\n      )) {\n        if (!(container.flags & 64\n        /* Static */\n        ) && (container.kind !== 145\n        /* Constructor */\n        || ts.isNodeDescendentOf(node, container.body))) {\n          return getDeclaredTypeOfClassOrInterface(getSymbolOfNode(parent)).thisType;\n        }\n      }\n\n      error(node, ts.Diagnostics.A_this_type_is_available_only_in_a_non_static_member_of_a_class_or_interface);\n      return unknownType;\n    }\n\n    function getTypeFromThisTypeNode(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        links.resolvedType = getThisType(node);\n      }\n\n      return links.resolvedType;\n    }\n\n    function getTypeFromTypeNode(node) {\n      switch (node.kind) {\n        case 117\n        /* AnyKeyword */\n        :\n        case 253\n        /* JSDocAllType */\n        :\n        case 254\n        /* JSDocUnknownType */\n        :\n          return anyType;\n\n        case 130\n        /* StringKeyword */\n        :\n          return stringType;\n\n        case 128\n        /* NumberKeyword */\n        :\n          return numberType;\n\n        case 120\n        /* BooleanKeyword */\n        :\n          return booleanType;\n\n        case 131\n        /* SymbolKeyword */\n        :\n          return esSymbolType;\n\n        case 103\n        /* VoidKeyword */\n        :\n          return voidType;\n\n        case 162\n        /* ThisType */\n        :\n          return getTypeFromThisTypeNode(node);\n\n        case 163\n        /* StringLiteralType */\n        :\n          return getTypeFromStringLiteralTypeNode(node);\n\n        case 152\n        /* TypeReference */\n        :\n        case 262\n        /* JSDocTypeReference */\n        :\n          return getTypeFromTypeReference(node);\n\n        case 151\n        /* TypePredicate */\n        :\n          return booleanType;\n\n        case 191\n        /* ExpressionWithTypeArguments */\n        :\n          return getTypeFromTypeReference(node);\n\n        case 155\n        /* TypeQuery */\n        :\n          return getTypeFromTypeQueryNode(node);\n\n        case 157\n        /* ArrayType */\n        :\n        case 255\n        /* JSDocArrayType */\n        :\n          return getTypeFromArrayTypeNode(node);\n\n        case 158\n        /* TupleType */\n        :\n          return getTypeFromTupleTypeNode(node);\n\n        case 159\n        /* UnionType */\n        :\n        case 256\n        /* JSDocUnionType */\n        :\n          return getTypeFromUnionTypeNode(node);\n\n        case 160\n        /* IntersectionType */\n        :\n          return getTypeFromIntersectionTypeNode(node);\n\n        case 161\n        /* ParenthesizedType */\n        :\n        case 258\n        /* JSDocNullableType */\n        :\n        case 259\n        /* JSDocNonNullableType */\n        :\n        case 266\n        /* JSDocConstructorType */\n        :\n        case 267\n        /* JSDocThisType */\n        :\n        case 263\n        /* JSDocOptionalType */\n        :\n          return getTypeFromTypeNode(node.type);\n\n        case 153\n        /* FunctionType */\n        :\n        case 154\n        /* ConstructorType */\n        :\n        case 156\n        /* TypeLiteral */\n        :\n        case 264\n        /* JSDocFunctionType */\n        :\n        case 260\n        /* JSDocRecordType */\n        :\n          return getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);\n        // This function assumes that an identifier or qualified name is a type expression\n        // Callers should first ensure this by calling isTypeNode\n\n        case 69\n        /* Identifier */\n        :\n        case 136\n        /* QualifiedName */\n        :\n          var symbol = getSymbolAtLocation(node);\n          return symbol && getDeclaredTypeOfSymbol(symbol);\n\n        case 257\n        /* JSDocTupleType */\n        :\n          return getTypeFromJSDocTupleType(node);\n\n        case 265\n        /* JSDocVariadicType */\n        :\n          return getTypeFromJSDocVariadicType(node);\n\n        default:\n          return unknownType;\n      }\n    }\n\n    function instantiateList(items, mapper, instantiator) {\n      if (items && items.length) {\n        var result = [];\n\n        for (var _i = 0, items_1 = items; _i < items_1.length; _i++) {\n          var v = items_1[_i];\n          result.push(instantiator(v, mapper));\n        }\n\n        return result;\n      }\n\n      return items;\n    }\n\n    function createUnaryTypeMapper(source, target) {\n      return function (t) {\n        return t === source ? target : t;\n      };\n    }\n\n    function createBinaryTypeMapper(source1, target1, source2, target2) {\n      return function (t) {\n        return t === source1 ? target1 : t === source2 ? target2 : t;\n      };\n    }\n\n    function createTypeMapper(sources, targets) {\n      switch (sources.length) {\n        case 1:\n          return createUnaryTypeMapper(sources[0], targets[0]);\n\n        case 2:\n          return createBinaryTypeMapper(sources[0], targets[0], sources[1], targets[1]);\n      }\n\n      return function (t) {\n        for (var i = 0; i < sources.length; i++) {\n          if (t === sources[i]) {\n            return targets[i];\n          }\n        }\n\n        return t;\n      };\n    }\n\n    function createUnaryTypeEraser(source) {\n      return function (t) {\n        return t === source ? anyType : t;\n      };\n    }\n\n    function createBinaryTypeEraser(source1, source2) {\n      return function (t) {\n        return t === source1 || t === source2 ? anyType : t;\n      };\n    }\n\n    function createTypeEraser(sources) {\n      switch (sources.length) {\n        case 1:\n          return createUnaryTypeEraser(sources[0]);\n\n        case 2:\n          return createBinaryTypeEraser(sources[0], sources[1]);\n      }\n\n      return function (t) {\n        for (var _i = 0, sources_1 = sources; _i < sources_1.length; _i++) {\n          var source = sources_1[_i];\n\n          if (t === source) {\n            return anyType;\n          }\n        }\n\n        return t;\n      };\n    }\n\n    function getInferenceMapper(context) {\n      if (!context.mapper) {\n        var mapper = function mapper(t) {\n          var typeParameters = context.typeParameters;\n\n          for (var i = 0; i < typeParameters.length; i++) {\n            if (t === typeParameters[i]) {\n              context.inferences[i].isFixed = true;\n              return getInferredType(context, i);\n            }\n          }\n\n          return t;\n        };\n\n        mapper.context = context;\n        context.mapper = mapper;\n      }\n\n      return context.mapper;\n    }\n\n    function identityMapper(type) {\n      return type;\n    }\n\n    function combineTypeMappers(mapper1, mapper2) {\n      return function (t) {\n        return instantiateType(mapper1(t), mapper2);\n      };\n    }\n\n    function cloneTypeParameter(typeParameter) {\n      var result = createType(512\n      /* TypeParameter */\n      );\n      result.symbol = typeParameter.symbol;\n      result.target = typeParameter;\n      return result;\n    }\n\n    function cloneTypePredicate(predicate, mapper) {\n      if (ts.isIdentifierTypePredicate(predicate)) {\n        return {\n          kind: 1\n          /* Identifier */\n          ,\n          parameterName: predicate.parameterName,\n          parameterIndex: predicate.parameterIndex,\n          type: instantiateType(predicate.type, mapper)\n        };\n      } else {\n        return {\n          kind: 0\n          /* This */\n          ,\n          type: instantiateType(predicate.type, mapper)\n        };\n      }\n    }\n\n    function instantiateSignature(signature, mapper, eraseTypeParameters) {\n      var freshTypeParameters;\n      var freshTypePredicate;\n\n      if (signature.typeParameters && !eraseTypeParameters) {\n        // First create a fresh set of type parameters, then include a mapping from the old to the\n        // new type parameters in the mapper function. Finally store this mapper in the new type\n        // parameters such that we can use it when instantiating constraints.\n        freshTypeParameters = ts.map(signature.typeParameters, cloneTypeParameter);\n        mapper = combineTypeMappers(createTypeMapper(signature.typeParameters, freshTypeParameters), mapper);\n\n        for (var _i = 0, freshTypeParameters_1 = freshTypeParameters; _i < freshTypeParameters_1.length; _i++) {\n          var tp = freshTypeParameters_1[_i];\n          tp.mapper = mapper;\n        }\n      }\n\n      if (signature.typePredicate) {\n        freshTypePredicate = cloneTypePredicate(signature.typePredicate, mapper);\n      }\n\n      var result = createSignature(signature.declaration, freshTypeParameters, instantiateList(signature.parameters, mapper, instantiateSymbol), instantiateType(signature.resolvedReturnType, mapper), freshTypePredicate, signature.minArgumentCount, signature.hasRestParameter, signature.hasStringLiterals);\n      result.target = signature;\n      result.mapper = mapper;\n      return result;\n    }\n\n    function instantiateSymbol(symbol, mapper) {\n      if (symbol.flags & 16777216\n      /* Instantiated */\n      ) {\n          var links = getSymbolLinks(symbol); // If symbol being instantiated is itself a instantiation, fetch the original target and combine the\n          // type mappers. This ensures that original type identities are properly preserved and that aliases\n          // always reference a non-aliases.\n\n          symbol = links.target;\n          mapper = combineTypeMappers(links.mapper, mapper);\n        } // Keep the flags from the symbol we're instantiating.  Mark that is instantiated, and\n      // also transient so that we can just store data on it directly.\n\n\n      var result = createSymbol(16777216\n      /* Instantiated */\n      | 67108864\n      /* Transient */\n      | symbol.flags, symbol.name);\n      result.declarations = symbol.declarations;\n      result.parent = symbol.parent;\n      result.target = symbol;\n      result.mapper = mapper;\n\n      if (symbol.valueDeclaration) {\n        result.valueDeclaration = symbol.valueDeclaration;\n      }\n\n      return result;\n    }\n\n    function instantiateAnonymousType(type, mapper) {\n      if (mapper.instantiations) {\n        var cachedType = mapper.instantiations[type.id];\n\n        if (cachedType) {\n          return cachedType;\n        }\n      } else {\n        mapper.instantiations = [];\n      } // Mark the anonymous type as instantiated such that our infinite instantiation detection logic can recognize it\n\n\n      var result = createObjectType(65536\n      /* Anonymous */\n      | 131072\n      /* Instantiated */\n      , type.symbol);\n      result.target = type;\n      result.mapper = mapper;\n      mapper.instantiations[type.id] = result;\n      return result;\n    }\n\n    function instantiateType(type, mapper) {\n      if (type && mapper !== identityMapper) {\n        if (type.flags & 512\n        /* TypeParameter */\n        ) {\n            return mapper(type);\n          }\n\n        if (type.flags & 65536\n        /* Anonymous */\n        ) {\n            return type.symbol && type.symbol.flags & (16\n            /* Function */\n            | 8192\n            /* Method */\n            | 32\n            /* Class */\n            | 2048\n            /* TypeLiteral */\n            | 4096\n            /* ObjectLiteral */\n            ) ? instantiateAnonymousType(type, mapper) : type;\n          }\n\n        if (type.flags & 4096\n        /* Reference */\n        ) {\n            return createTypeReference(type.target, instantiateList(type.typeArguments, mapper, instantiateType));\n          }\n\n        if (type.flags & 8192\n        /* Tuple */\n        ) {\n            return createTupleType(instantiateList(type.elementTypes, mapper, instantiateType));\n          }\n\n        if (type.flags & 16384\n        /* Union */\n        ) {\n            return getUnionType(instantiateList(type.types, mapper, instantiateType),\n            /*noSubtypeReduction*/\n            true);\n          }\n\n        if (type.flags & 32768\n        /* Intersection */\n        ) {\n            return getIntersectionType(instantiateList(type.types, mapper, instantiateType));\n          }\n      }\n\n      return type;\n    } // Returns true if the given expression contains (at any level of nesting) a function or arrow expression\n    // that is subject to contextual typing.\n\n\n    function isContextSensitive(node) {\n      ts.Debug.assert(node.kind !== 144\n      /* MethodDeclaration */\n      || ts.isObjectLiteralMethod(node));\n\n      switch (node.kind) {\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          return isContextSensitiveFunctionLikeDeclaration(node);\n\n        case 168\n        /* ObjectLiteralExpression */\n        :\n          return ts.forEach(node.properties, isContextSensitive);\n\n        case 167\n        /* ArrayLiteralExpression */\n        :\n          return ts.forEach(node.elements, isContextSensitive);\n\n        case 185\n        /* ConditionalExpression */\n        :\n          return isContextSensitive(node.whenTrue) || isContextSensitive(node.whenFalse);\n\n        case 184\n        /* BinaryExpression */\n        :\n          return node.operatorToken.kind === 52\n          /* BarBarToken */\n          && (isContextSensitive(node.left) || isContextSensitive(node.right));\n\n        case 248\n        /* PropertyAssignment */\n        :\n          return isContextSensitive(node.initializer);\n\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n          return isContextSensitiveFunctionLikeDeclaration(node);\n\n        case 175\n        /* ParenthesizedExpression */\n        :\n          return isContextSensitive(node.expression);\n      }\n\n      return false;\n    }\n\n    function isContextSensitiveFunctionLikeDeclaration(node) {\n      return !node.typeParameters && node.parameters.length && !ts.forEach(node.parameters, function (p) {\n        return p.type;\n      });\n    }\n\n    function getTypeWithoutSignatures(type) {\n      if (type.flags & 80896\n      /* ObjectType */\n      ) {\n          var resolved = resolveStructuredTypeMembers(type);\n\n          if (resolved.constructSignatures.length) {\n            var result = createObjectType(65536\n            /* Anonymous */\n            , type.symbol);\n            result.members = resolved.members;\n            result.properties = resolved.properties;\n            result.callSignatures = emptyArray;\n            result.constructSignatures = emptyArray;\n            type = result;\n          }\n        }\n\n      return type;\n    } // TYPE CHECKING\n\n\n    function isTypeIdenticalTo(source, target) {\n      return checkTypeRelatedTo(source, target, identityRelation,\n      /*errorNode*/\n      undefined);\n    }\n\n    function compareTypesIdentical(source, target) {\n      return checkTypeRelatedTo(source, target, identityRelation,\n      /*errorNode*/\n      undefined) ? -1\n      /* True */\n      : 0\n      /* False */\n      ;\n    }\n\n    function compareTypesAssignable(source, target) {\n      return checkTypeRelatedTo(source, target, assignableRelation,\n      /*errorNode*/\n      undefined) ? -1\n      /* True */\n      : 0\n      /* False */\n      ;\n    }\n\n    function isTypeSubtypeOf(source, target) {\n      return checkTypeSubtypeOf(source, target,\n      /*errorNode*/\n      undefined);\n    }\n\n    function isTypeAssignableTo(source, target) {\n      return checkTypeAssignableTo(source, target,\n      /*errorNode*/\n      undefined);\n    }\n\n    function checkTypeSubtypeOf(source, target, errorNode, headMessage, containingMessageChain) {\n      return checkTypeRelatedTo(source, target, subtypeRelation, errorNode, headMessage, containingMessageChain);\n    }\n\n    function checkTypeAssignableTo(source, target, errorNode, headMessage, containingMessageChain) {\n      return checkTypeRelatedTo(source, target, assignableRelation, errorNode, headMessage, containingMessageChain);\n    }\n\n    function isSignatureAssignableTo(source, target, ignoreReturnTypes) {\n      return compareSignaturesRelated(source, target, ignoreReturnTypes,\n      /*reportErrors*/\n      false,\n      /*errorReporter*/\n      undefined, compareTypesAssignable) !== 0\n      /* False */\n      ;\n    }\n    /**\n     * See signatureRelatedTo, compareSignaturesIdentical\n     */\n\n\n    function compareSignaturesRelated(source, target, ignoreReturnTypes, reportErrors, errorReporter, compareTypes) {\n      // TODO (drosen): De-duplicate code between related functions.\n      if (source === target) {\n        return -1\n        /* True */\n        ;\n      }\n\n      if (!target.hasRestParameter && source.minArgumentCount > target.parameters.length) {\n        return 0\n        /* False */\n        ;\n      } // Spec 1.0 Section 3.8.3 & 3.8.4:\n      // M and N (the signatures) are instantiated using type Any as the type argument for all type parameters declared by M and N\n\n\n      source = getErasedSignature(source);\n      target = getErasedSignature(target);\n      var result = -1\n      /* True */\n      ;\n      var sourceMax = getNumNonRestParameters(source);\n      var targetMax = getNumNonRestParameters(target);\n      var checkCount = getNumParametersToCheckForSignatureRelatability(source, sourceMax, target, targetMax);\n      var sourceParams = source.parameters;\n      var targetParams = target.parameters;\n\n      for (var i = 0; i < checkCount; i++) {\n        var s = i < sourceMax ? getTypeOfSymbol(sourceParams[i]) : getRestTypeOfSignature(source);\n        var t = i < targetMax ? getTypeOfSymbol(targetParams[i]) : getRestTypeOfSignature(target);\n        var related = compareTypes(s, t,\n        /*reportErrors*/\n        false) || compareTypes(t, s, reportErrors);\n\n        if (!related) {\n          if (reportErrors) {\n            errorReporter(ts.Diagnostics.Types_of_parameters_0_and_1_are_incompatible, sourceParams[i < sourceMax ? i : sourceMax].name, targetParams[i < targetMax ? i : targetMax].name);\n          }\n\n          return 0\n          /* False */\n          ;\n        }\n\n        result &= related;\n      }\n\n      if (!ignoreReturnTypes) {\n        var targetReturnType = getReturnTypeOfSignature(target);\n\n        if (targetReturnType === voidType) {\n          return result;\n        }\n\n        var sourceReturnType = getReturnTypeOfSignature(source); // The following block preserves behavior forbidding boolean returning functions from being assignable to type guard returning functions\n\n        if (target.typePredicate) {\n          if (source.typePredicate) {\n            result &= compareTypePredicateRelatedTo(source.typePredicate, target.typePredicate, reportErrors, errorReporter, compareTypes);\n          } else if (ts.isIdentifierTypePredicate(target.typePredicate)) {\n            if (reportErrors) {\n              errorReporter(ts.Diagnostics.Signature_0_must_have_a_type_predicate, signatureToString(source));\n            }\n\n            return 0\n            /* False */\n            ;\n          }\n        } else {\n          result &= compareTypes(sourceReturnType, targetReturnType, reportErrors);\n        }\n      }\n\n      return result;\n    }\n\n    function compareTypePredicateRelatedTo(source, target, reportErrors, errorReporter, compareTypes) {\n      if (source.kind !== target.kind) {\n        if (reportErrors) {\n          errorReporter(ts.Diagnostics.A_this_based_type_guard_is_not_compatible_with_a_parameter_based_type_guard);\n          errorReporter(ts.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));\n        }\n\n        return 0\n        /* False */\n        ;\n      }\n\n      if (source.kind === 1\n      /* Identifier */\n      ) {\n          var sourceIdentifierPredicate = source;\n          var targetIdentifierPredicate = target;\n\n          if (sourceIdentifierPredicate.parameterIndex !== targetIdentifierPredicate.parameterIndex) {\n            if (reportErrors) {\n              errorReporter(ts.Diagnostics.Parameter_0_is_not_in_the_same_position_as_parameter_1, sourceIdentifierPredicate.parameterName, targetIdentifierPredicate.parameterName);\n              errorReporter(ts.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));\n            }\n\n            return 0\n            /* False */\n            ;\n          }\n        }\n\n      var related = compareTypes(source.type, target.type, reportErrors);\n\n      if (related === 0\n      /* False */\n      && reportErrors) {\n        errorReporter(ts.Diagnostics.Type_predicate_0_is_not_assignable_to_1, typePredicateToString(source), typePredicateToString(target));\n      }\n\n      return related;\n    }\n\n    function isImplementationCompatibleWithOverload(implementation, overload) {\n      var erasedSource = getErasedSignature(implementation);\n      var erasedTarget = getErasedSignature(overload); // First see if the return types are compatible in either direction.\n\n      var sourceReturnType = getReturnTypeOfSignature(erasedSource);\n      var targetReturnType = getReturnTypeOfSignature(erasedTarget);\n\n      if (targetReturnType === voidType || checkTypeRelatedTo(targetReturnType, sourceReturnType, assignableRelation,\n      /*errorNode*/\n      undefined) || checkTypeRelatedTo(sourceReturnType, targetReturnType, assignableRelation,\n      /*errorNode*/\n      undefined)) {\n        return isSignatureAssignableTo(erasedSource, erasedTarget,\n        /*ignoreReturnTypes*/\n        true);\n      }\n\n      return false;\n    }\n\n    function getNumNonRestParameters(signature) {\n      var numParams = signature.parameters.length;\n      return signature.hasRestParameter ? numParams - 1 : numParams;\n    }\n\n    function getNumParametersToCheckForSignatureRelatability(source, sourceNonRestParamCount, target, targetNonRestParamCount) {\n      if (source.hasRestParameter === target.hasRestParameter) {\n        if (source.hasRestParameter) {\n          // If both have rest parameters, get the max and add 1 to\n          // compensate for the rest parameter.\n          return Math.max(sourceNonRestParamCount, targetNonRestParamCount) + 1;\n        } else {\n          return Math.min(sourceNonRestParamCount, targetNonRestParamCount);\n        }\n      } else {\n        // Return the count for whichever signature doesn't have rest parameters.\n        return source.hasRestParameter ? targetNonRestParamCount : sourceNonRestParamCount;\n      }\n    }\n    /**\n     * Checks if 'source' is related to 'target' (e.g.: is a assignable to).\n     * @param source The left-hand-side of the relation.\n     * @param target The right-hand-side of the relation.\n     * @param relation The relation considered. One of 'identityRelation', 'assignableRelation', or 'subTypeRelation'.\n     * Used as both to determine which checks are performed and as a cache of previously computed results.\n     * @param errorNode The suggested node upon which all errors will be reported, if defined. This may or may not be the actual node used.\n     * @param headMessage If the error chain should be prepended by a head message, then headMessage will be used.\n     * @param containingMessageChain A chain of errors to prepend any new errors found.\n     */\n\n\n    function checkTypeRelatedTo(source, target, relation, errorNode, headMessage, containingMessageChain) {\n      var errorInfo;\n      var sourceStack;\n      var targetStack;\n      var maybeStack;\n      var expandingFlags;\n      var depth = 0;\n      var overflow = false;\n      ts.Debug.assert(relation !== identityRelation || !errorNode, \"no error reporting in identity checking\");\n      var result = isRelatedTo(source, target,\n      /*reportErrors*/\n      !!errorNode, headMessage);\n\n      if (overflow) {\n        error(errorNode, ts.Diagnostics.Excessive_stack_depth_comparing_types_0_and_1, typeToString(source), typeToString(target));\n      } else if (errorInfo) {\n        if (containingMessageChain) {\n          errorInfo = ts.concatenateDiagnosticMessageChains(containingMessageChain, errorInfo);\n        }\n\n        diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(errorNode, errorInfo));\n      }\n\n      return result !== 0\n      /* False */\n      ;\n\n      function reportError(message, arg0, arg1, arg2) {\n        ts.Debug.assert(!!errorNode);\n        errorInfo = ts.chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2);\n      }\n\n      function reportRelationError(message, source, target) {\n        var sourceType = typeToString(source);\n        var targetType = typeToString(target);\n\n        if (sourceType === targetType) {\n          sourceType = typeToString(source,\n          /*enclosingDeclaration*/\n          undefined, 128\n          /* UseFullyQualifiedType */\n          );\n          targetType = typeToString(target,\n          /*enclosingDeclaration*/\n          undefined, 128\n          /* UseFullyQualifiedType */\n          );\n        }\n\n        reportError(message || ts.Diagnostics.Type_0_is_not_assignable_to_type_1, sourceType, targetType);\n      } // Compare two types and return\n      // Ternary.True if they are related with no assumptions,\n      // Ternary.Maybe if they are related with assumptions of other relationships, or\n      // Ternary.False if they are not related.\n\n\n      function isRelatedTo(source, target, reportErrors, headMessage) {\n        var result; // both types are the same - covers 'they are the same primitive type or both are Any' or the same type parameter cases\n\n        if (source === target) return -1\n        /* True */\n        ;\n\n        if (relation === identityRelation) {\n          return isIdenticalTo(source, target);\n        }\n\n        if (isTypeAny(target)) return -1\n        /* True */\n        ;\n        if (source === undefinedType) return -1\n        /* True */\n        ;\n        if (source === nullType && target !== undefinedType) return -1\n        /* True */\n        ;\n        if (source.flags & 128\n        /* Enum */\n        && target === numberType) return -1\n        /* True */\n        ;\n\n        if (source.flags & 128\n        /* Enum */\n        && target.flags & 128\n        /* Enum */\n        ) {\n            if (result = enumRelatedTo(source, target)) {\n              return result;\n            }\n          }\n\n        if (source.flags & 256\n        /* StringLiteral */\n        && target === stringType) return -1\n        /* True */\n        ;\n\n        if (relation === assignableRelation) {\n          if (isTypeAny(source)) return -1\n          /* True */\n          ;\n          if (source === numberType && target.flags & 128\n          /* Enum */\n          ) return -1\n            /* True */\n            ;\n        }\n\n        if (source.flags & 8\n        /* Boolean */\n        && target.flags & 8\n        /* Boolean */\n        ) {\n            return -1\n            /* True */\n            ;\n          }\n\n        if (source.flags & 1048576\n        /* FreshObjectLiteral */\n        ) {\n            if (hasExcessProperties(source, target, reportErrors)) {\n              if (reportErrors) {\n                reportRelationError(headMessage, source, target);\n              }\n\n              return 0\n              /* False */\n              ;\n            } // Above we check for excess properties with respect to the entire target type. When union\n            // and intersection types are further deconstructed on the target side, we don't want to\n            // make the check again (as it might fail for a partial target type). Therefore we obtain\n            // the regular source type and proceed with that.\n\n\n            if (target.flags & 49152\n            /* UnionOrIntersection */\n            ) {\n                source = getRegularTypeOfObjectLiteral(source);\n              }\n          }\n\n        var saveErrorInfo = errorInfo; // Note that the \"each\" checks must precede the \"some\" checks to produce the correct results\n\n        if (source.flags & 16384\n        /* Union */\n        ) {\n            if (result = eachTypeRelatedToType(source, target, reportErrors)) {\n              return result;\n            }\n          } else if (target.flags & 32768\n        /* Intersection */\n        ) {\n            if (result = typeRelatedToEachType(source, target, reportErrors)) {\n              return result;\n            }\n          } else {\n          // It is necessary to try \"some\" checks on both sides because there may be nested \"each\" checks\n          // on either side that need to be prioritized. For example, A | B = (A | B) & (C | D) or\n          // A & B = (A & B) | (C & D).\n          if (source.flags & 32768\n          /* Intersection */\n          ) {\n              // If target is a union type the following check will report errors so we suppress them here\n              if (result = someTypeRelatedToType(source, target, reportErrors && !(target.flags & 16384\n              /* Union */\n              ))) {\n                return result;\n              }\n            }\n\n          if (target.flags & 16384\n          /* Union */\n          ) {\n              if (result = typeRelatedToSomeType(source, target, reportErrors)) {\n                return result;\n              }\n            }\n        }\n\n        if (source.flags & 512\n        /* TypeParameter */\n        ) {\n            var constraint = getConstraintOfTypeParameter(source);\n\n            if (!constraint || constraint.flags & 1\n            /* Any */\n            ) {\n                constraint = emptyObjectType;\n              } // Report constraint errors only if the constraint is not the empty object type\n\n\n            var reportConstraintErrors = reportErrors && constraint !== emptyObjectType;\n\n            if (result = isRelatedTo(constraint, target, reportConstraintErrors)) {\n              errorInfo = saveErrorInfo;\n              return result;\n            }\n          } else {\n          if (source.flags & 4096\n          /* Reference */\n          && target.flags & 4096\n          /* Reference */\n          && source.target === target.target) {\n            // We have type references to same target type, see if relationship holds for all type arguments\n            if (result = typeArgumentsRelatedTo(source, target, reportErrors)) {\n              return result;\n            }\n          } // Even if relationship doesn't hold for unions, intersections, or generic type references,\n          // it may hold in a structural comparison.\n\n\n          var apparentSource = getApparentType(source); // In a check of the form X = A & B, we will have previously checked if A relates to X or B relates\n          // to X. Failing both of those we want to check if the aggregation of A and B's members structurally\n          // relates to X. Thus, we include intersection types on the source side here.\n\n          if (apparentSource.flags & (80896\n          /* ObjectType */\n          | 32768\n          /* Intersection */\n          ) && target.flags & 80896\n          /* ObjectType */\n          ) {\n              // Report structural errors only if we haven't reported any errors yet\n              var reportStructuralErrors = reportErrors && errorInfo === saveErrorInfo && !(source.flags & 16777726\n              /* Primitive */\n              );\n\n              if (result = objectTypeRelatedTo(apparentSource, source, target, reportStructuralErrors)) {\n                errorInfo = saveErrorInfo;\n                return result;\n              }\n            }\n        }\n\n        if (reportErrors) {\n          reportRelationError(headMessage, source, target);\n        }\n\n        return 0\n        /* False */\n        ;\n      }\n\n      function isIdenticalTo(source, target) {\n        var result;\n\n        if (source.flags & 80896\n        /* ObjectType */\n        && target.flags & 80896\n        /* ObjectType */\n        ) {\n            if (source.flags & 4096\n            /* Reference */\n            && target.flags & 4096\n            /* Reference */\n            && source.target === target.target) {\n              // We have type references to same target type, see if all type arguments are identical\n              if (result = typeArgumentsRelatedTo(source, target,\n              /*reportErrors*/\n              false)) {\n                return result;\n              }\n            }\n\n            return objectTypeRelatedTo(source, source, target,\n            /*reportErrors*/\n            false);\n          }\n\n        if (source.flags & 16384\n        /* Union */\n        && target.flags & 16384\n        /* Union */\n        || source.flags & 32768\n        /* Intersection */\n        && target.flags & 32768\n        /* Intersection */\n        ) {\n            if (result = eachTypeRelatedToSomeType(source, target)) {\n              if (result &= eachTypeRelatedToSomeType(target, source)) {\n                return result;\n              }\n            }\n          }\n\n        return 0\n        /* False */\n        ;\n      } // Check if a property with the given name is known anywhere in the given type. In an object type, a property\n      // is considered known if the object type is empty and the check is for assignability, if the object type has\n      // index signatures, or if the property is actually declared in the object type. In a union or intersection\n      // type, a property is considered known if it is known in any constituent type.\n\n\n      function isKnownProperty(type, name) {\n        if (type.flags & 80896\n        /* ObjectType */\n        ) {\n            var resolved = resolveStructuredTypeMembers(type);\n\n            if (relation === assignableRelation && (type === globalObjectType || resolved.properties.length === 0) || resolved.stringIndexType || resolved.numberIndexType || getPropertyOfType(type, name)) {\n              return true;\n            }\n          } else if (type.flags & 49152\n        /* UnionOrIntersection */\n        ) {\n            for (var _i = 0, _a = type.types; _i < _a.length; _i++) {\n              var t = _a[_i];\n\n              if (isKnownProperty(t, name)) {\n                return true;\n              }\n            }\n          }\n\n        return false;\n      }\n\n      function hasExcessProperties(source, target, reportErrors) {\n        if (!(target.flags & 67108864\n        /* ObjectLiteralPatternWithComputedProperties */\n        ) && someConstituentTypeHasKind(target, 80896\n        /* ObjectType */\n        )) {\n          for (var _i = 0, _a = getPropertiesOfObjectType(source); _i < _a.length; _i++) {\n            var prop = _a[_i];\n\n            if (!isKnownProperty(target, prop.name)) {\n              if (reportErrors) {\n                // We know *exactly* where things went wrong when comparing the types.\n                // Use this property as the error node as this will be more helpful in\n                // reasoning about what went wrong.\n                ts.Debug.assert(!!errorNode);\n                errorNode = prop.valueDeclaration;\n                reportError(ts.Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1, symbolToString(prop), typeToString(target));\n              }\n\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n\n      function eachTypeRelatedToSomeType(source, target) {\n        var result = -1\n        /* True */\n        ;\n        var sourceTypes = source.types;\n\n        for (var _i = 0, sourceTypes_1 = sourceTypes; _i < sourceTypes_1.length; _i++) {\n          var sourceType = sourceTypes_1[_i];\n          var related = typeRelatedToSomeType(sourceType, target,\n          /*reportErrors*/\n          false);\n\n          if (!related) {\n            return 0\n            /* False */\n            ;\n          }\n\n          result &= related;\n        }\n\n        return result;\n      }\n\n      function typeRelatedToSomeType(source, target, reportErrors) {\n        var targetTypes = target.types;\n\n        for (var i = 0, len = targetTypes.length; i < len; i++) {\n          var related = isRelatedTo(source, targetTypes[i], reportErrors && i === len - 1);\n\n          if (related) {\n            return related;\n          }\n        }\n\n        return 0\n        /* False */\n        ;\n      }\n\n      function typeRelatedToEachType(source, target, reportErrors) {\n        var result = -1\n        /* True */\n        ;\n        var targetTypes = target.types;\n\n        for (var _i = 0, targetTypes_1 = targetTypes; _i < targetTypes_1.length; _i++) {\n          var targetType = targetTypes_1[_i];\n          var related = isRelatedTo(source, targetType, reportErrors);\n\n          if (!related) {\n            return 0\n            /* False */\n            ;\n          }\n\n          result &= related;\n        }\n\n        return result;\n      }\n\n      function someTypeRelatedToType(source, target, reportErrors) {\n        var sourceTypes = source.types;\n\n        for (var i = 0, len = sourceTypes.length; i < len; i++) {\n          var related = isRelatedTo(sourceTypes[i], target, reportErrors && i === len - 1);\n\n          if (related) {\n            return related;\n          }\n        }\n\n        return 0\n        /* False */\n        ;\n      }\n\n      function eachTypeRelatedToType(source, target, reportErrors) {\n        var result = -1\n        /* True */\n        ;\n        var sourceTypes = source.types;\n\n        for (var _i = 0, sourceTypes_2 = sourceTypes; _i < sourceTypes_2.length; _i++) {\n          var sourceType = sourceTypes_2[_i];\n          var related = isRelatedTo(sourceType, target, reportErrors);\n\n          if (!related) {\n            return 0\n            /* False */\n            ;\n          }\n\n          result &= related;\n        }\n\n        return result;\n      }\n\n      function typeArgumentsRelatedTo(source, target, reportErrors) {\n        var sources = source.typeArguments || emptyArray;\n        var targets = target.typeArguments || emptyArray;\n\n        if (sources.length !== targets.length && relation === identityRelation) {\n          return 0\n          /* False */\n          ;\n        }\n\n        var length = sources.length <= targets.length ? sources.length : targets.length;\n        var result = -1\n        /* True */\n        ;\n\n        for (var i = 0; i < length; i++) {\n          var related = isRelatedTo(sources[i], targets[i], reportErrors);\n\n          if (!related) {\n            return 0\n            /* False */\n            ;\n          }\n\n          result &= related;\n        }\n\n        return result;\n      } // Determine if two object types are related by structure. First, check if the result is already available in the global cache.\n      // Second, check if we have already started a comparison of the given two types in which case we assume the result to be true.\n      // Third, check if both types are part of deeply nested chains of generic type instantiations and if so assume the types are\n      // equal and infinitely expanding. Fourth, if we have reached a depth of 100 nested comparisons, assume we have runaway recursion\n      // and issue an error. Otherwise, actually compare the structure of the two types.\n\n\n      function objectTypeRelatedTo(source, originalSource, target, reportErrors) {\n        if (overflow) {\n          return 0\n          /* False */\n          ;\n        }\n\n        var id = relation !== identityRelation || source.id < target.id ? source.id + \",\" + target.id : target.id + \",\" + source.id;\n        var related = relation[id];\n\n        if (related !== undefined) {\n          if (reportErrors && related === 2\n          /* Failed */\n          ) {\n              // We are elaborating errors and the cached result is an unreported failure. Record the result as a reported\n              // failure and continue computing the relation such that errors get reported.\n              relation[id] = 3\n              /* FailedAndReported */\n              ;\n            } else {\n            return related === 1\n            /* Succeeded */\n            ? -1\n            /* True */\n            : 0\n            /* False */\n            ;\n          }\n        }\n\n        if (depth > 0) {\n          for (var i = 0; i < depth; i++) {\n            // If source and target are already being compared, consider them related with assumptions\n            if (maybeStack[i][id]) {\n              return 1\n              /* Maybe */\n              ;\n            }\n          }\n\n          if (depth === 100) {\n            overflow = true;\n            return 0\n            /* False */\n            ;\n          }\n        } else {\n          sourceStack = [];\n          targetStack = [];\n          maybeStack = [];\n          expandingFlags = 0;\n        }\n\n        sourceStack[depth] = source;\n        targetStack[depth] = target;\n        maybeStack[depth] = {};\n        maybeStack[depth][id] = 1\n        /* Succeeded */\n        ;\n        depth++;\n        var saveExpandingFlags = expandingFlags;\n        if (!(expandingFlags & 1) && isDeeplyNestedGeneric(source, sourceStack, depth)) expandingFlags |= 1;\n        if (!(expandingFlags & 2) && isDeeplyNestedGeneric(target, targetStack, depth)) expandingFlags |= 2;\n        var result;\n\n        if (expandingFlags === 3) {\n          result = 1\n          /* Maybe */\n          ;\n        } else {\n          result = propertiesRelatedTo(source, target, reportErrors);\n\n          if (result) {\n            result &= signaturesRelatedTo(source, target, 0\n            /* Call */\n            , reportErrors);\n\n            if (result) {\n              result &= signaturesRelatedTo(source, target, 1\n              /* Construct */\n              , reportErrors);\n\n              if (result) {\n                result &= stringIndexTypesRelatedTo(source, originalSource, target, reportErrors);\n\n                if (result) {\n                  result &= numberIndexTypesRelatedTo(source, originalSource, target, reportErrors);\n                }\n              }\n            }\n          }\n        }\n\n        expandingFlags = saveExpandingFlags;\n        depth--;\n\n        if (result) {\n          var maybeCache = maybeStack[depth]; // If result is definitely true, copy assumptions to global cache, else copy to next level up\n\n          var destinationCache = result === -1\n          /* True */\n          || depth === 0 ? relation : maybeStack[depth - 1];\n          ts.copyMap(maybeCache, destinationCache);\n        } else {\n          // A false result goes straight into global cache (when something is false under assumptions it\n          // will also be false without assumptions)\n          relation[id] = reportErrors ? 3\n          /* FailedAndReported */\n          : 2\n          /* Failed */\n          ;\n        }\n\n        return result;\n      }\n\n      function propertiesRelatedTo(source, target, reportErrors) {\n        if (relation === identityRelation) {\n          return propertiesIdenticalTo(source, target);\n        }\n\n        var result = -1\n        /* True */\n        ;\n        var properties = getPropertiesOfObjectType(target);\n        var requireOptionalProperties = relation === subtypeRelation && !(source.flags & 524288\n        /* ObjectLiteral */\n        );\n\n        for (var _i = 0, properties_1 = properties; _i < properties_1.length; _i++) {\n          var targetProp = properties_1[_i];\n          var sourceProp = getPropertyOfType(source, targetProp.name);\n\n          if (sourceProp !== targetProp) {\n            if (!sourceProp) {\n              if (!(targetProp.flags & 536870912\n              /* Optional */\n              ) || requireOptionalProperties) {\n                if (reportErrors) {\n                  reportError(ts.Diagnostics.Property_0_is_missing_in_type_1, symbolToString(targetProp), typeToString(source));\n                }\n\n                return 0\n                /* False */\n                ;\n              }\n            } else if (!(targetProp.flags & 134217728\n            /* Prototype */\n            )) {\n              var sourcePropFlags = getDeclarationFlagsFromSymbol(sourceProp);\n              var targetPropFlags = getDeclarationFlagsFromSymbol(targetProp);\n\n              if (sourcePropFlags & 16\n              /* Private */\n              || targetPropFlags & 16\n              /* Private */\n              ) {\n                  if (sourceProp.valueDeclaration !== targetProp.valueDeclaration) {\n                    if (reportErrors) {\n                      if (sourcePropFlags & 16\n                      /* Private */\n                      && targetPropFlags & 16\n                      /* Private */\n                      ) {\n                          reportError(ts.Diagnostics.Types_have_separate_declarations_of_a_private_property_0, symbolToString(targetProp));\n                        } else {\n                        reportError(ts.Diagnostics.Property_0_is_private_in_type_1_but_not_in_type_2, symbolToString(targetProp), typeToString(sourcePropFlags & 16\n                        /* Private */\n                        ? source : target), typeToString(sourcePropFlags & 16\n                        /* Private */\n                        ? target : source));\n                      }\n                    }\n\n                    return 0\n                    /* False */\n                    ;\n                  }\n                } else if (targetPropFlags & 32\n              /* Protected */\n              ) {\n                  var sourceDeclaredInClass = sourceProp.parent && sourceProp.parent.flags & 32\n                  /* Class */\n                  ;\n                  var sourceClass = sourceDeclaredInClass ? getDeclaredTypeOfSymbol(getParentOfSymbol(sourceProp)) : undefined;\n                  var targetClass = getDeclaredTypeOfSymbol(getParentOfSymbol(targetProp));\n\n                  if (!sourceClass || !hasBaseType(sourceClass, targetClass)) {\n                    if (reportErrors) {\n                      reportError(ts.Diagnostics.Property_0_is_protected_but_type_1_is_not_a_class_derived_from_2, symbolToString(targetProp), typeToString(sourceClass || source), typeToString(targetClass));\n                    }\n\n                    return 0\n                    /* False */\n                    ;\n                  }\n                } else if (sourcePropFlags & 32\n              /* Protected */\n              ) {\n                  if (reportErrors) {\n                    reportError(ts.Diagnostics.Property_0_is_protected_in_type_1_but_public_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));\n                  }\n\n                  return 0\n                  /* False */\n                  ;\n                }\n\n              var related = isRelatedTo(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp), reportErrors);\n\n              if (!related) {\n                if (reportErrors) {\n                  reportError(ts.Diagnostics.Types_of_property_0_are_incompatible, symbolToString(targetProp));\n                }\n\n                return 0\n                /* False */\n                ;\n              }\n\n              result &= related;\n\n              if (sourceProp.flags & 536870912\n              /* Optional */\n              && !(targetProp.flags & 536870912\n              /* Optional */\n              )) {\n                // TypeScript 1.0 spec (April 2014): 3.8.3\n                // S is a subtype of a type T, and T is a supertype of S if ...\n                // S' and T are object types and, for each member M in T..\n                // M is a property and S' contains a property N where\n                // if M is a required property, N is also a required property\n                // (M - property in T)\n                // (N - property in S)\n                if (reportErrors) {\n                  reportError(ts.Diagnostics.Property_0_is_optional_in_type_1_but_required_in_type_2, symbolToString(targetProp), typeToString(source), typeToString(target));\n                }\n\n                return 0\n                /* False */\n                ;\n              }\n            }\n          }\n        }\n\n        return result;\n      }\n\n      function propertiesIdenticalTo(source, target) {\n        if (!(source.flags & 80896\n        /* ObjectType */\n        && target.flags & 80896\n        /* ObjectType */\n        )) {\n            return 0\n            /* False */\n            ;\n          }\n\n        var sourceProperties = getPropertiesOfObjectType(source);\n        var targetProperties = getPropertiesOfObjectType(target);\n\n        if (sourceProperties.length !== targetProperties.length) {\n          return 0\n          /* False */\n          ;\n        }\n\n        var result = -1\n        /* True */\n        ;\n\n        for (var _i = 0, sourceProperties_1 = sourceProperties; _i < sourceProperties_1.length; _i++) {\n          var sourceProp = sourceProperties_1[_i];\n          var targetProp = getPropertyOfObjectType(target, sourceProp.name);\n\n          if (!targetProp) {\n            return 0\n            /* False */\n            ;\n          }\n\n          var related = compareProperties(sourceProp, targetProp, isRelatedTo);\n\n          if (!related) {\n            return 0\n            /* False */\n            ;\n          }\n\n          result &= related;\n        }\n\n        return result;\n      }\n\n      function signaturesRelatedTo(source, target, kind, reportErrors) {\n        if (relation === identityRelation) {\n          return signaturesIdenticalTo(source, target, kind);\n        }\n\n        if (target === anyFunctionType || source === anyFunctionType) {\n          return -1\n          /* True */\n          ;\n        }\n\n        var sourceSignatures = getSignaturesOfType(source, kind);\n        var targetSignatures = getSignaturesOfType(target, kind);\n\n        if (kind === 1\n        /* Construct */\n        && sourceSignatures.length && targetSignatures.length && isAbstractConstructorType(source) && !isAbstractConstructorType(target)) {\n          // An abstract constructor type is not assignable to a non-abstract constructor type\n          // as it would otherwise be possible to new an abstract class. Note that the assignablity\n          // check we perform for an extends clause excludes construct signatures from the target,\n          // so this check never proceeds.\n          if (reportErrors) {\n            reportError(ts.Diagnostics.Cannot_assign_an_abstract_constructor_type_to_a_non_abstract_constructor_type);\n          }\n\n          return 0\n          /* False */\n          ;\n        }\n\n        var result = -1\n        /* True */\n        ;\n        var saveErrorInfo = errorInfo;\n\n        outer: for (var _i = 0, targetSignatures_1 = targetSignatures; _i < targetSignatures_1.length; _i++) {\n          var t = targetSignatures_1[_i];\n\n          if (!t.hasStringLiterals || target.flags & 262144\n          /* FromSignature */\n          ) {\n              // Only elaborate errors from the first failure\n              var shouldElaborateErrors = reportErrors;\n\n              for (var _a = 0, sourceSignatures_1 = sourceSignatures; _a < sourceSignatures_1.length; _a++) {\n                var s = sourceSignatures_1[_a];\n\n                if (!s.hasStringLiterals || source.flags & 262144\n                /* FromSignature */\n                ) {\n                    var related = signatureRelatedTo(s, t, shouldElaborateErrors);\n\n                    if (related) {\n                      result &= related;\n                      errorInfo = saveErrorInfo;\n                      continue outer;\n                    }\n\n                    shouldElaborateErrors = false;\n                  }\n              } // don't elaborate the primitive apparent types (like Number)\n              // because the actual primitives will have already been reported.\n\n\n              if (shouldElaborateErrors) {\n                reportError(ts.Diagnostics.Type_0_provides_no_match_for_the_signature_1, typeToString(source), signatureToString(t,\n                /*enclosingDeclaration*/\n                undefined,\n                /*flags*/\n                undefined, kind));\n              }\n\n              return 0\n              /* False */\n              ;\n            }\n        }\n\n        return result;\n      }\n      /**\n       * See signatureAssignableTo, compareSignaturesIdentical\n       */\n\n\n      function signatureRelatedTo(source, target, reportErrors) {\n        return compareSignaturesRelated(source, target,\n        /*ignoreReturnTypes*/\n        false, reportErrors, reportError, isRelatedTo);\n      }\n\n      function signaturesIdenticalTo(source, target, kind) {\n        var sourceSignatures = getSignaturesOfType(source, kind);\n        var targetSignatures = getSignaturesOfType(target, kind);\n\n        if (sourceSignatures.length !== targetSignatures.length) {\n          return 0\n          /* False */\n          ;\n        }\n\n        var result = -1\n        /* True */\n        ;\n\n        for (var i = 0, len = sourceSignatures.length; i < len; i++) {\n          var related = compareSignaturesIdentical(sourceSignatures[i], targetSignatures[i],\n          /*partialMatch*/\n          false,\n          /*ignoreReturnTypes*/\n          false, isRelatedTo);\n\n          if (!related) {\n            return 0\n            /* False */\n            ;\n          }\n\n          result &= related;\n        }\n\n        return result;\n      }\n\n      function stringIndexTypesRelatedTo(source, originalSource, target, reportErrors) {\n        if (relation === identityRelation) {\n          return indexTypesIdenticalTo(0\n          /* String */\n          , source, target);\n        }\n\n        var targetType = getIndexTypeOfType(target, 0\n        /* String */\n        );\n\n        if (targetType) {\n          if (targetType.flags & 1\n          /* Any */\n          && !(originalSource.flags & 16777726\n          /* Primitive */\n          )) {\n              // non-primitive assignment to any is always allowed, eg\n              //   `var x: { [index: string]: any } = { property: 12 };`\n              return -1\n              /* True */\n              ;\n            }\n\n          var sourceType = getIndexTypeOfType(source, 0\n          /* String */\n          );\n\n          if (!sourceType) {\n            if (reportErrors) {\n              reportError(ts.Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));\n            }\n\n            return 0\n            /* False */\n            ;\n          }\n\n          var related = isRelatedTo(sourceType, targetType, reportErrors);\n\n          if (!related) {\n            if (reportErrors) {\n              reportError(ts.Diagnostics.Index_signatures_are_incompatible);\n            }\n\n            return 0\n            /* False */\n            ;\n          }\n\n          return related;\n        }\n\n        return -1\n        /* True */\n        ;\n      }\n\n      function numberIndexTypesRelatedTo(source, originalSource, target, reportErrors) {\n        if (relation === identityRelation) {\n          return indexTypesIdenticalTo(1\n          /* Number */\n          , source, target);\n        }\n\n        var targetType = getIndexTypeOfType(target, 1\n        /* Number */\n        );\n\n        if (targetType) {\n          if (targetType.flags & 1\n          /* Any */\n          && !(originalSource.flags & 16777726\n          /* Primitive */\n          )) {\n              // non-primitive assignment to any is always allowed, eg\n              //   `var x: { [index: number]: any } = { property: 12 };`\n              return -1\n              /* True */\n              ;\n            }\n\n          var sourceStringType = getIndexTypeOfType(source, 0\n          /* String */\n          );\n          var sourceNumberType = getIndexTypeOfType(source, 1\n          /* Number */\n          );\n\n          if (!(sourceStringType || sourceNumberType)) {\n            if (reportErrors) {\n              reportError(ts.Diagnostics.Index_signature_is_missing_in_type_0, typeToString(source));\n            }\n\n            return 0\n            /* False */\n            ;\n          }\n\n          var related = void 0;\n\n          if (sourceStringType && sourceNumberType) {\n            // If we know for sure we're testing both string and numeric index types then only report errors from the second one\n            related = isRelatedTo(sourceStringType, targetType,\n            /*reportErrors*/\n            false) || isRelatedTo(sourceNumberType, targetType, reportErrors);\n          } else {\n            related = isRelatedTo(sourceStringType || sourceNumberType, targetType, reportErrors);\n          }\n\n          if (!related) {\n            if (reportErrors) {\n              reportError(ts.Diagnostics.Index_signatures_are_incompatible);\n            }\n\n            return 0\n            /* False */\n            ;\n          }\n\n          return related;\n        }\n\n        return -1\n        /* True */\n        ;\n      }\n\n      function indexTypesIdenticalTo(indexKind, source, target) {\n        var targetType = getIndexTypeOfType(target, indexKind);\n        var sourceType = getIndexTypeOfType(source, indexKind);\n\n        if (!sourceType && !targetType) {\n          return -1\n          /* True */\n          ;\n        }\n\n        if (sourceType && targetType) {\n          return isRelatedTo(sourceType, targetType);\n        }\n\n        return 0\n        /* False */\n        ;\n      }\n\n      function enumRelatedTo(source, target) {\n        if (source.symbol.name !== target.symbol.name || source.symbol.flags & 128\n        /* ConstEnum */\n        || target.symbol.flags & 128\n        /* ConstEnum */\n        ) {\n            return 0\n            /* False */\n            ;\n          }\n\n        var targetEnumType = getTypeOfSymbol(target.symbol);\n\n        for (var _i = 0, _a = getPropertiesOfType(getTypeOfSymbol(source.symbol)); _i < _a.length; _i++) {\n          var property = _a[_i];\n\n          if (property.flags & 8\n          /* EnumMember */\n          ) {\n              var targetProperty = getPropertyOfType(targetEnumType, property.name);\n\n              if (!targetProperty || !(targetProperty.flags & 8\n              /* EnumMember */\n              )) {\n                reportError(ts.Diagnostics.Property_0_is_missing_in_type_1, property.name, typeToString(target,\n                /*enclosingDeclaration*/\n                undefined, 128\n                /* UseFullyQualifiedType */\n                ));\n                return 0\n                /* False */\n                ;\n              }\n            }\n        }\n\n        return -1\n        /* True */\n        ;\n      }\n    } // Return true if the given type is the constructor type for an abstract class\n\n\n    function isAbstractConstructorType(type) {\n      if (type.flags & 65536\n      /* Anonymous */\n      ) {\n          var symbol = type.symbol;\n\n          if (symbol && symbol.flags & 32\n          /* Class */\n          ) {\n              var declaration = getClassLikeDeclarationOfSymbol(symbol);\n\n              if (declaration && declaration.flags & 128\n              /* Abstract */\n              ) {\n                  return true;\n                }\n            }\n        }\n\n      return false;\n    } // Return true if the given type is part of a deeply nested chain of generic instantiations. We consider this to be the case\n    // when structural type comparisons have been started for 10 or more instantiations of the same generic type. It is possible,\n    // though highly unlikely, for this test to be true in a situation where a chain of instantiations is not infinitely expanding.\n    // Effectively, we will generate a false positive when two types are structurally equal to at least 10 levels, but unequal at\n    // some level beyond that.\n\n\n    function isDeeplyNestedGeneric(type, stack, depth) {\n      // We track type references (created by createTypeReference) and instantiated types (created by instantiateType)\n      if (type.flags & (4096\n      /* Reference */\n      | 131072\n      /* Instantiated */\n      ) && depth >= 5) {\n        var symbol = type.symbol;\n        var count = 0;\n\n        for (var i = 0; i < depth; i++) {\n          var t = stack[i];\n\n          if (t.flags & (4096\n          /* Reference */\n          | 131072\n          /* Instantiated */\n          ) && t.symbol === symbol) {\n            count++;\n            if (count >= 5) return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    function isPropertyIdenticalTo(sourceProp, targetProp) {\n      return compareProperties(sourceProp, targetProp, compareTypesIdentical) !== 0\n      /* False */\n      ;\n    }\n\n    function compareProperties(sourceProp, targetProp, compareTypes) {\n      // Two members are considered identical when\n      // - they are public properties with identical names, optionality, and types,\n      // - they are private or protected properties originating in the same declaration and having identical types\n      if (sourceProp === targetProp) {\n        return -1\n        /* True */\n        ;\n      }\n\n      var sourcePropAccessibility = getDeclarationFlagsFromSymbol(sourceProp) & (16\n      /* Private */\n      | 32\n      /* Protected */\n      );\n      var targetPropAccessibility = getDeclarationFlagsFromSymbol(targetProp) & (16\n      /* Private */\n      | 32\n      /* Protected */\n      );\n\n      if (sourcePropAccessibility !== targetPropAccessibility) {\n        return 0\n        /* False */\n        ;\n      }\n\n      if (sourcePropAccessibility) {\n        if (getTargetSymbol(sourceProp) !== getTargetSymbol(targetProp)) {\n          return 0\n          /* False */\n          ;\n        }\n      } else {\n        if ((sourceProp.flags & 536870912\n        /* Optional */\n        ) !== (targetProp.flags & 536870912\n        /* Optional */\n        )) {\n            return 0\n            /* False */\n            ;\n          }\n      }\n\n      return compareTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));\n    }\n\n    function isMatchingSignature(source, target, partialMatch) {\n      // A source signature matches a target signature if the two signatures have the same number of required,\n      // optional, and rest parameters.\n      if (source.parameters.length === target.parameters.length && source.minArgumentCount === target.minArgumentCount && source.hasRestParameter === target.hasRestParameter) {\n        return true;\n      } // A source signature partially matches a target signature if the target signature has no fewer required\n      // parameters and no more overall parameters than the source signature (where a signature with a rest\n      // parameter is always considered to have more overall parameters than one without).\n\n\n      if (partialMatch && source.minArgumentCount <= target.minArgumentCount && (source.hasRestParameter && !target.hasRestParameter || source.hasRestParameter === target.hasRestParameter && source.parameters.length >= target.parameters.length)) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\n     * See signatureRelatedTo, compareSignaturesIdentical\n     */\n\n\n    function compareSignaturesIdentical(source, target, partialMatch, ignoreReturnTypes, compareTypes) {\n      // TODO (drosen): De-duplicate code between related functions.\n      if (source === target) {\n        return -1\n        /* True */\n        ;\n      }\n\n      if (!isMatchingSignature(source, target, partialMatch)) {\n        return 0\n        /* False */\n        ;\n      } // Check that the two signatures have the same number of type parameters. We might consider\n      // also checking that any type parameter constraints match, but that would require instantiating\n      // the constraints with a common set of type arguments to get relatable entities in places where\n      // type parameters occur in the constraints. The complexity of doing that doesn't seem worthwhile,\n      // particularly as we're comparing erased versions of the signatures below.\n\n\n      if ((source.typeParameters ? source.typeParameters.length : 0) !== (target.typeParameters ? target.typeParameters.length : 0)) {\n        return 0\n        /* False */\n        ;\n      } // Spec 1.0 Section 3.8.3 & 3.8.4:\n      // M and N (the signatures) are instantiated using type Any as the type argument for all type parameters declared by M and N\n\n\n      source = getErasedSignature(source);\n      target = getErasedSignature(target);\n      var result = -1\n      /* True */\n      ;\n      var targetLen = target.parameters.length;\n\n      for (var i = 0; i < targetLen; i++) {\n        var s = isRestParameterIndex(source, i) ? getRestTypeOfSignature(source) : getTypeOfSymbol(source.parameters[i]);\n        var t = isRestParameterIndex(target, i) ? getRestTypeOfSignature(target) : getTypeOfSymbol(target.parameters[i]);\n        var related = compareTypes(s, t);\n\n        if (!related) {\n          return 0\n          /* False */\n          ;\n        }\n\n        result &= related;\n      }\n\n      if (!ignoreReturnTypes) {\n        result &= compareTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));\n      }\n\n      return result;\n    }\n\n    function isRestParameterIndex(signature, parameterIndex) {\n      return signature.hasRestParameter && parameterIndex >= signature.parameters.length - 1;\n    }\n\n    function isSupertypeOfEach(candidate, types) {\n      for (var _i = 0, types_6 = types; _i < types_6.length; _i++) {\n        var type = types_6[_i];\n        if (candidate !== type && !isTypeSubtypeOf(type, candidate)) return false;\n      }\n\n      return true;\n    }\n\n    function getCommonSupertype(types) {\n      return ts.forEach(types, function (t) {\n        return isSupertypeOfEach(t, types) ? t : undefined;\n      });\n    }\n\n    function reportNoCommonSupertypeError(types, errorLocation, errorMessageChainHead) {\n      // The downfallType/bestSupertypeDownfallType is the first type that caused a particular candidate\n      // to not be the common supertype. So if it weren't for this one downfallType (and possibly others),\n      // the type in question could have been the common supertype.\n      var bestSupertype;\n      var bestSupertypeDownfallType;\n      var bestSupertypeScore = 0;\n\n      for (var i = 0; i < types.length; i++) {\n        var score = 0;\n        var downfallType = undefined;\n\n        for (var j = 0; j < types.length; j++) {\n          if (isTypeSubtypeOf(types[j], types[i])) {\n            score++;\n          } else if (!downfallType) {\n            downfallType = types[j];\n          }\n        }\n\n        ts.Debug.assert(!!downfallType, \"If there is no common supertype, each type should have a downfallType\");\n\n        if (score > bestSupertypeScore) {\n          bestSupertype = types[i];\n          bestSupertypeDownfallType = downfallType;\n          bestSupertypeScore = score;\n        } // types.length - 1 is the maximum score, given that getCommonSupertype returned false\n\n\n        if (bestSupertypeScore === types.length - 1) {\n          break;\n        }\n      } // In the following errors, the {1} slot is before the {0} slot because checkTypeSubtypeOf supplies the\n      // subtype as the first argument to the error\n\n\n      checkTypeSubtypeOf(bestSupertypeDownfallType, bestSupertype, errorLocation, ts.Diagnostics.Type_argument_candidate_1_is_not_a_valid_type_argument_because_it_is_not_a_supertype_of_candidate_0, errorMessageChainHead);\n    }\n\n    function isArrayType(type) {\n      return type.flags & 4096\n      /* Reference */\n      && type.target === globalArrayType;\n    }\n\n    function isArrayLikeType(type) {\n      // A type is array-like if it is not the undefined or null type and if it is assignable to any[]\n      return !(type.flags & (32\n      /* Undefined */\n      | 64\n      /* Null */\n      )) && isTypeAssignableTo(type, anyArrayType);\n    }\n\n    function isTupleLikeType(type) {\n      return !!getPropertyOfType(type, \"0\");\n    }\n\n    function isStringLiteralType(type) {\n      return type.flags & 256\n      /* StringLiteral */\n      ;\n    }\n    /**\n     * Check if a Type was written as a tuple type literal.\n     * Prefer using isTupleLikeType() unless the use of `elementTypes` is required.\n     */\n\n\n    function isTupleType(type) {\n      return !!(type.flags & 8192\n      /* Tuple */\n      );\n    }\n\n    function getRegularTypeOfObjectLiteral(type) {\n      if (type.flags & 1048576\n      /* FreshObjectLiteral */\n      ) {\n          var regularType = type.regularType;\n\n          if (!regularType) {\n            regularType = createType(type.flags & ~1048576\n            /* FreshObjectLiteral */\n            );\n            regularType.symbol = type.symbol;\n            regularType.members = type.members;\n            regularType.properties = type.properties;\n            regularType.callSignatures = type.callSignatures;\n            regularType.constructSignatures = type.constructSignatures;\n            regularType.stringIndexType = type.stringIndexType;\n            regularType.numberIndexType = type.numberIndexType;\n            type.regularType = regularType;\n          }\n\n          return regularType;\n        }\n\n      return type;\n    }\n\n    function getWidenedTypeOfObjectLiteral(type) {\n      var properties = getPropertiesOfObjectType(type);\n      var members = {};\n      ts.forEach(properties, function (p) {\n        var propType = getTypeOfSymbol(p);\n        var widenedType = getWidenedType(propType);\n\n        if (propType !== widenedType) {\n          var symbol = createSymbol(p.flags | 67108864\n          /* Transient */\n          , p.name);\n          symbol.declarations = p.declarations;\n          symbol.parent = p.parent;\n          symbol.type = widenedType;\n          symbol.target = p;\n          if (p.valueDeclaration) symbol.valueDeclaration = p.valueDeclaration;\n          p = symbol;\n        }\n\n        members[p.name] = p;\n      });\n      var stringIndexType = getIndexTypeOfType(type, 0\n      /* String */\n      );\n      var numberIndexType = getIndexTypeOfType(type, 1\n      /* Number */\n      );\n      if (stringIndexType) stringIndexType = getWidenedType(stringIndexType);\n      if (numberIndexType) numberIndexType = getWidenedType(numberIndexType);\n      return createAnonymousType(type.symbol, members, emptyArray, emptyArray, stringIndexType, numberIndexType);\n    }\n\n    function getWidenedType(type) {\n      if (type.flags & 6291456\n      /* RequiresWidening */\n      ) {\n          if (type.flags & (32\n          /* Undefined */\n          | 64\n          /* Null */\n          )) {\n            return anyType;\n          }\n\n          if (type.flags & 524288\n          /* ObjectLiteral */\n          ) {\n              return getWidenedTypeOfObjectLiteral(type);\n            }\n\n          if (type.flags & 16384\n          /* Union */\n          ) {\n              return getUnionType(ts.map(type.types, getWidenedType),\n              /*noSubtypeReduction*/\n              true);\n            }\n\n          if (isArrayType(type)) {\n            return createArrayType(getWidenedType(type.typeArguments[0]));\n          }\n\n          if (isTupleType(type)) {\n            return createTupleType(ts.map(type.elementTypes, getWidenedType));\n          }\n        }\n\n      return type;\n    }\n    /**\n     * Reports implicit any errors that occur as a result of widening 'null' and 'undefined'\n     * to 'any'. A call to reportWideningErrorsInType is normally accompanied by a call to\n     * getWidenedType. But in some cases getWidenedType is called without reporting errors\n     * (type argument inference is an example).\n     *\n     * The return value indicates whether an error was in fact reported. The particular circumstances\n     * are on a best effort basis. Currently, if the null or undefined that causes widening is inside\n     * an object literal property (arbitrarily deeply), this function reports an error. If no error is\n     * reported, reportImplicitAnyError is a suitable fallback to report a general error.\n     */\n\n\n    function reportWideningErrorsInType(type) {\n      var errorReported = false;\n\n      if (type.flags & 16384\n      /* Union */\n      ) {\n          for (var _i = 0, _a = type.types; _i < _a.length; _i++) {\n            var t = _a[_i];\n\n            if (reportWideningErrorsInType(t)) {\n              errorReported = true;\n            }\n          }\n        }\n\n      if (isArrayType(type)) {\n        return reportWideningErrorsInType(type.typeArguments[0]);\n      }\n\n      if (isTupleType(type)) {\n        for (var _b = 0, _c = type.elementTypes; _b < _c.length; _b++) {\n          var t = _c[_b];\n\n          if (reportWideningErrorsInType(t)) {\n            errorReported = true;\n          }\n        }\n      }\n\n      if (type.flags & 524288\n      /* ObjectLiteral */\n      ) {\n          for (var _d = 0, _e = getPropertiesOfObjectType(type); _d < _e.length; _d++) {\n            var p = _e[_d];\n            var t = getTypeOfSymbol(p);\n\n            if (t.flags & 2097152\n            /* ContainsUndefinedOrNull */\n            ) {\n                if (!reportWideningErrorsInType(t)) {\n                  error(p.valueDeclaration, ts.Diagnostics.Object_literal_s_property_0_implicitly_has_an_1_type, p.name, typeToString(getWidenedType(t)));\n                }\n\n                errorReported = true;\n              }\n          }\n        }\n\n      return errorReported;\n    }\n\n    function reportImplicitAnyError(declaration, type) {\n      var typeAsString = typeToString(getWidenedType(type));\n      var diagnostic;\n\n      switch (declaration.kind) {\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n          diagnostic = ts.Diagnostics.Member_0_implicitly_has_an_1_type;\n          break;\n\n        case 139\n        /* Parameter */\n        :\n          diagnostic = declaration.dotDotDotToken ? ts.Diagnostics.Rest_parameter_0_implicitly_has_an_any_type : ts.Diagnostics.Parameter_0_implicitly_has_an_1_type;\n          break;\n\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          if (!declaration.name) {\n            error(declaration, ts.Diagnostics.Function_expression_which_lacks_return_type_annotation_implicitly_has_an_0_return_type, typeAsString);\n            return;\n          }\n\n          diagnostic = ts.Diagnostics._0_which_lacks_return_type_annotation_implicitly_has_an_1_return_type;\n          break;\n\n        default:\n          diagnostic = ts.Diagnostics.Variable_0_implicitly_has_an_1_type;\n      }\n\n      error(declaration, diagnostic, ts.declarationNameToString(declaration.name), typeAsString);\n    }\n\n    function reportErrorsFromWidening(declaration, type) {\n      if (produceDiagnostics && compilerOptions.noImplicitAny && type.flags & 2097152\n      /* ContainsUndefinedOrNull */\n      ) {\n          // Report implicit any error within type if possible, otherwise report error on declaration\n          if (!reportWideningErrorsInType(type)) {\n            reportImplicitAnyError(declaration, type);\n          }\n        }\n    }\n\n    function forEachMatchingParameterType(source, target, callback) {\n      var sourceMax = source.parameters.length;\n      var targetMax = target.parameters.length;\n      var count;\n\n      if (source.hasRestParameter && target.hasRestParameter) {\n        count = sourceMax > targetMax ? sourceMax : targetMax;\n        sourceMax--;\n        targetMax--;\n      } else if (source.hasRestParameter) {\n        sourceMax--;\n        count = targetMax;\n      } else if (target.hasRestParameter) {\n        targetMax--;\n        count = sourceMax;\n      } else {\n        count = sourceMax < targetMax ? sourceMax : targetMax;\n      }\n\n      for (var i = 0; i < count; i++) {\n        var s = i < sourceMax ? getTypeOfSymbol(source.parameters[i]) : getRestTypeOfSignature(source);\n        var t = i < targetMax ? getTypeOfSymbol(target.parameters[i]) : getRestTypeOfSignature(target);\n        callback(s, t);\n      }\n    }\n\n    function createInferenceContext(typeParameters, inferUnionTypes) {\n      var inferences = ts.map(typeParameters, createTypeInferencesObject);\n      return {\n        typeParameters: typeParameters,\n        inferUnionTypes: inferUnionTypes,\n        inferences: inferences,\n        inferredTypes: new Array(typeParameters.length)\n      };\n    }\n\n    function createTypeInferencesObject() {\n      return {\n        primary: undefined,\n        secondary: undefined,\n        isFixed: false\n      };\n    }\n\n    function inferTypes(context, source, target) {\n      var sourceStack;\n      var targetStack;\n      var maxDepth = 5;\n      var depth = 0;\n      var inferiority = 0;\n      var visited = {};\n      inferFromTypes(source, target);\n\n      function isInProcess(source, target) {\n        for (var i = 0; i < depth; i++) {\n          if (source === sourceStack[i] && target === targetStack[i]) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      function inferFromTypes(source, target) {\n        if (source.flags & 16384\n        /* Union */\n        && target.flags & 16384\n        /* Union */\n        || source.flags & 32768\n        /* Intersection */\n        && target.flags & 32768\n        /* Intersection */\n        ) {\n            // Source and target are both unions or both intersections. First, find each\n            // target constituent type that has an identically matching source constituent\n            // type, and for each such target constituent type infer from the type to itself.\n            // When inferring from a type to itself we effectively find all type parameter\n            // occurrences within that type and infer themselves as their type arguments.\n            var matchingTypes = void 0;\n\n            for (var _i = 0, _a = target.types; _i < _a.length; _i++) {\n              var t = _a[_i];\n\n              if (typeIdenticalToSomeType(t, source.types)) {\n                (matchingTypes || (matchingTypes = [])).push(t);\n                inferFromTypes(t, t);\n              }\n            } // Next, to improve the quality of inferences, reduce the source and target types by\n            // removing the identically matched constituents. For example, when inferring from\n            // 'string | string[]' to 'string | T' we reduce the types to 'string[]' and 'T'.\n\n\n            if (matchingTypes) {\n              source = removeTypesFromUnionOrIntersection(source, matchingTypes);\n              target = removeTypesFromUnionOrIntersection(target, matchingTypes);\n            }\n          }\n\n        if (target.flags & 512\n        /* TypeParameter */\n        ) {\n            // If target is a type parameter, make an inference, unless the source type contains\n            // the anyFunctionType (the wildcard type that's used to avoid contextually typing functions).\n            // Because the anyFunctionType is internal, it should not be exposed to the user by adding\n            // it as an inference candidate. Hopefully, a better candidate will come along that does\n            // not contain anyFunctionType when we come back to this argument for its second round\n            // of inference.\n            if (source.flags & 8388608\n            /* ContainsAnyFunctionType */\n            ) {\n                return;\n              }\n\n            var typeParameters = context.typeParameters;\n\n            for (var i = 0; i < typeParameters.length; i++) {\n              if (target === typeParameters[i]) {\n                var inferences = context.inferences[i];\n\n                if (!inferences.isFixed) {\n                  // Any inferences that are made to a type parameter in a union type are inferior\n                  // to inferences made to a flat (non-union) type. This is because if we infer to\n                  // T | string[], we really don't know if we should be inferring to T or not (because\n                  // the correct constituent on the target side could be string[]). Therefore, we put\n                  // such inferior inferences into a secondary bucket, and only use them if the primary\n                  // bucket is empty.\n                  var candidates = inferiority ? inferences.secondary || (inferences.secondary = []) : inferences.primary || (inferences.primary = []);\n\n                  if (!ts.contains(candidates, source)) {\n                    candidates.push(source);\n                  }\n                }\n\n                return;\n              }\n            }\n          } else if (source.flags & 4096\n        /* Reference */\n        && target.flags & 4096\n        /* Reference */\n        && source.target === target.target) {\n          // If source and target are references to the same generic type, infer from type arguments\n          var sourceTypes = source.typeArguments || emptyArray;\n          var targetTypes = target.typeArguments || emptyArray;\n          var count = sourceTypes.length < targetTypes.length ? sourceTypes.length : targetTypes.length;\n\n          for (var i = 0; i < count; i++) {\n            inferFromTypes(sourceTypes[i], targetTypes[i]);\n          }\n        } else if (source.flags & 8192\n        /* Tuple */\n        && target.flags & 8192\n        /* Tuple */\n        && source.elementTypes.length === target.elementTypes.length) {\n          // If source and target are tuples of the same size, infer from element types\n          var sourceTypes = source.elementTypes;\n          var targetTypes = target.elementTypes;\n\n          for (var i = 0; i < sourceTypes.length; i++) {\n            inferFromTypes(sourceTypes[i], targetTypes[i]);\n          }\n        } else if (target.flags & 49152\n        /* UnionOrIntersection */\n        ) {\n            var targetTypes = target.types;\n            var typeParameterCount = 0;\n            var typeParameter = void 0; // First infer to each type in union or intersection that isn't a type parameter\n\n            for (var _b = 0, targetTypes_2 = targetTypes; _b < targetTypes_2.length; _b++) {\n              var t = targetTypes_2[_b];\n\n              if (t.flags & 512\n              /* TypeParameter */\n              && ts.contains(context.typeParameters, t)) {\n                typeParameter = t;\n                typeParameterCount++;\n              } else {\n                inferFromTypes(source, t);\n              }\n            } // Next, if target is a union type containing a single naked type parameter, make a\n            // secondary inference to that type parameter. We don't do this for intersection types\n            // because in a target type like Foo & T we don't know how which parts of the source type\n            // should be matched by Foo and which should be inferred to T.\n\n\n            if (target.flags & 16384\n            /* Union */\n            && typeParameterCount === 1) {\n              inferiority++;\n              inferFromTypes(source, typeParameter);\n              inferiority--;\n            }\n          } else if (source.flags & 49152\n        /* UnionOrIntersection */\n        ) {\n            // Source is a union or intersection type, infer from each consituent type\n            var sourceTypes = source.types;\n\n            for (var _c = 0, sourceTypes_3 = sourceTypes; _c < sourceTypes_3.length; _c++) {\n              var sourceType = sourceTypes_3[_c];\n              inferFromTypes(sourceType, target);\n            }\n          } else {\n          source = getApparentType(source);\n\n          if (source.flags & 80896\n          /* ObjectType */\n          && (target.flags & 4096\n          /* Reference */\n          && target.typeArguments || target.flags & 8192\n          /* Tuple */\n          || target.flags & 65536\n          /* Anonymous */\n          && target.symbol && target.symbol.flags & (8192\n          /* Method */\n          | 2048\n          /* TypeLiteral */\n          | 32\n          /* Class */\n          ))) {\n            // If source is an object type, and target is a type reference with type arguments, a tuple type,\n            // the type of a method, or a type literal, infer from members\n            if (isInProcess(source, target)) {\n              return;\n            } // we delibirately limit the depth we examine to infer types: this speeds up the overall inference process\n            // and user rarely expects inferences to be made from the deeply nested constituents.\n\n\n            if (depth > maxDepth) {\n              return;\n            }\n\n            if (isDeeplyNestedGeneric(source, sourceStack, depth) && isDeeplyNestedGeneric(target, targetStack, depth)) {\n              return;\n            }\n\n            var key = source.id + \",\" + target.id;\n\n            if (ts.hasProperty(visited, key)) {\n              return;\n            }\n\n            visited[key] = true;\n\n            if (depth === 0) {\n              sourceStack = [];\n              targetStack = [];\n            }\n\n            sourceStack[depth] = source;\n            targetStack[depth] = target;\n            depth++;\n            inferFromProperties(source, target);\n            inferFromSignatures(source, target, 0\n            /* Call */\n            );\n            inferFromSignatures(source, target, 1\n            /* Construct */\n            );\n            inferFromIndexTypes(source, target, 0\n            /* String */\n            , 0\n            /* String */\n            );\n            inferFromIndexTypes(source, target, 1\n            /* Number */\n            , 1\n            /* Number */\n            );\n            inferFromIndexTypes(source, target, 0\n            /* String */\n            , 1\n            /* Number */\n            );\n            depth--;\n          }\n        }\n      }\n\n      function inferFromProperties(source, target) {\n        var properties = getPropertiesOfObjectType(target);\n\n        for (var _i = 0, properties_2 = properties; _i < properties_2.length; _i++) {\n          var targetProp = properties_2[_i];\n          var sourceProp = getPropertyOfObjectType(source, targetProp.name);\n\n          if (sourceProp) {\n            inferFromTypes(getTypeOfSymbol(sourceProp), getTypeOfSymbol(targetProp));\n          }\n        }\n      }\n\n      function inferFromSignatures(source, target, kind) {\n        var sourceSignatures = getSignaturesOfType(source, kind);\n        var targetSignatures = getSignaturesOfType(target, kind);\n        var sourceLen = sourceSignatures.length;\n        var targetLen = targetSignatures.length;\n        var len = sourceLen < targetLen ? sourceLen : targetLen;\n\n        for (var i = 0; i < len; i++) {\n          inferFromSignature(getErasedSignature(sourceSignatures[sourceLen - len + i]), getErasedSignature(targetSignatures[targetLen - len + i]));\n        }\n      }\n\n      function inferFromSignature(source, target) {\n        forEachMatchingParameterType(source, target, inferFromTypes);\n\n        if (source.typePredicate && target.typePredicate && source.typePredicate.kind === target.typePredicate.kind) {\n          inferFromTypes(source.typePredicate.type, target.typePredicate.type);\n        } else {\n          inferFromTypes(getReturnTypeOfSignature(source), getReturnTypeOfSignature(target));\n        }\n      }\n\n      function inferFromIndexTypes(source, target, sourceKind, targetKind) {\n        var targetIndexType = getIndexTypeOfType(target, targetKind);\n\n        if (targetIndexType) {\n          var sourceIndexType = getIndexTypeOfType(source, sourceKind);\n\n          if (sourceIndexType) {\n            inferFromTypes(sourceIndexType, targetIndexType);\n          }\n        }\n      }\n    }\n\n    function typeIdenticalToSomeType(type, types) {\n      for (var _i = 0, types_7 = types; _i < types_7.length; _i++) {\n        var t = types_7[_i];\n\n        if (isTypeIdenticalTo(t, type)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Return a new union or intersection type computed by removing a given set of types\n     * from a given union or intersection type.\n     */\n\n\n    function removeTypesFromUnionOrIntersection(type, typesToRemove) {\n      var reducedTypes = [];\n\n      for (var _i = 0, _a = type.types; _i < _a.length; _i++) {\n        var t = _a[_i];\n\n        if (!typeIdenticalToSomeType(t, typesToRemove)) {\n          reducedTypes.push(t);\n        }\n      }\n\n      return type.flags & 16384\n      /* Union */\n      ? getUnionType(reducedTypes,\n      /*noSubtypeReduction*/\n      true) : getIntersectionType(reducedTypes);\n    }\n\n    function getInferenceCandidates(context, index) {\n      var inferences = context.inferences[index];\n      return inferences.primary || inferences.secondary || emptyArray;\n    }\n\n    function getInferredType(context, index) {\n      var inferredType = context.inferredTypes[index];\n      var inferenceSucceeded;\n\n      if (!inferredType) {\n        var inferences = getInferenceCandidates(context, index);\n\n        if (inferences.length) {\n          // Infer widened union or supertype, or the unknown type for no common supertype\n          var unionOrSuperType = context.inferUnionTypes ? getUnionType(inferences) : getCommonSupertype(inferences);\n          inferredType = unionOrSuperType ? getWidenedType(unionOrSuperType) : unknownType;\n          inferenceSucceeded = !!unionOrSuperType;\n        } else {\n          // Infer the empty object type when no inferences were made. It is important to remember that\n          // in this case, inference still succeeds, meaning there is no error for not having inference\n          // candidates. An inference error only occurs when there are *conflicting* candidates, i.e.\n          // candidates with no common supertype.\n          inferredType = emptyObjectType;\n          inferenceSucceeded = true;\n        }\n\n        context.inferredTypes[index] = inferredType; // Only do the constraint check if inference succeeded (to prevent cascading errors)\n\n        if (inferenceSucceeded) {\n          var constraint = getConstraintOfTypeParameter(context.typeParameters[index]);\n\n          if (constraint) {\n            var instantiatedConstraint = instantiateType(constraint, getInferenceMapper(context));\n\n            if (!isTypeAssignableTo(inferredType, getTypeWithThisArgument(instantiatedConstraint, inferredType))) {\n              context.inferredTypes[index] = inferredType = instantiatedConstraint;\n            }\n          }\n        } else if (context.failedTypeParameterIndex === undefined || context.failedTypeParameterIndex > index) {\n          // If inference failed, it is necessary to record the index of the failed type parameter (the one we are on).\n          // It might be that inference has already failed on a later type parameter on a previous call to inferTypeArguments.\n          // So if this failure is on preceding type parameter, this type parameter is the new failure index.\n          context.failedTypeParameterIndex = index;\n        }\n      }\n\n      return inferredType;\n    }\n\n    function getInferredTypes(context) {\n      for (var i = 0; i < context.inferredTypes.length; i++) {\n        getInferredType(context, i);\n      }\n\n      return context.inferredTypes;\n    } // EXPRESSION TYPE CHECKING\n\n\n    function getResolvedSymbol(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedSymbol) {\n        links.resolvedSymbol = !ts.nodeIsMissing(node) && resolveName(node, node.text, 107455\n        /* Value */\n        | 1048576\n        /* ExportValue */\n        , ts.Diagnostics.Cannot_find_name_0, node) || unknownSymbol;\n      }\n\n      return links.resolvedSymbol;\n    }\n\n    function isInTypeQuery(node) {\n      // TypeScript 1.0 spec (April 2014): 3.6.3\n      // A type query consists of the keyword typeof followed by an expression.\n      // The expression is restricted to a single identifier or a sequence of identifiers separated by periods\n      while (node) {\n        switch (node.kind) {\n          case 155\n          /* TypeQuery */\n          :\n            return true;\n\n          case 69\n          /* Identifier */\n          :\n          case 136\n          /* QualifiedName */\n          :\n            node = node.parent;\n            continue;\n\n          default:\n            return false;\n        }\n      }\n\n      ts.Debug.fail(\"should not get here\");\n    }\n\n    function hasInitializer(node) {\n      return !!(node.initializer || ts.isBindingPattern(node.parent) && hasInitializer(node.parent.parent));\n    } // Check if a given variable is assigned within a given syntax node\n\n\n    function isVariableAssignedWithin(symbol, node) {\n      var links = getNodeLinks(node);\n\n      if (links.assignmentChecks) {\n        var cachedResult = links.assignmentChecks[symbol.id];\n\n        if (cachedResult !== undefined) {\n          return cachedResult;\n        }\n      } else {\n        links.assignmentChecks = {};\n      }\n\n      return links.assignmentChecks[symbol.id] = isAssignedIn(node);\n\n      function isAssignedInBinaryExpression(node) {\n        if (node.operatorToken.kind >= 56\n        /* FirstAssignment */\n        && node.operatorToken.kind <= 68\n        /* LastAssignment */\n        ) {\n            var n = skipParenthesizedNodes(node.left);\n\n            if (n.kind === 69\n            /* Identifier */\n            && getResolvedSymbol(n) === symbol) {\n              return true;\n            }\n          }\n\n        return ts.forEachChild(node, isAssignedIn);\n      }\n\n      function isAssignedInVariableDeclaration(node) {\n        if (!ts.isBindingPattern(node.name) && getSymbolOfNode(node) === symbol && hasInitializer(node)) {\n          return true;\n        }\n\n        return ts.forEachChild(node, isAssignedIn);\n      }\n\n      function isAssignedIn(node) {\n        switch (node.kind) {\n          case 184\n          /* BinaryExpression */\n          :\n            return isAssignedInBinaryExpression(node);\n\n          case 214\n          /* VariableDeclaration */\n          :\n          case 166\n          /* BindingElement */\n          :\n            return isAssignedInVariableDeclaration(node);\n\n          case 164\n          /* ObjectBindingPattern */\n          :\n          case 165\n          /* ArrayBindingPattern */\n          :\n          case 167\n          /* ArrayLiteralExpression */\n          :\n          case 168\n          /* ObjectLiteralExpression */\n          :\n          case 169\n          /* PropertyAccessExpression */\n          :\n          case 170\n          /* ElementAccessExpression */\n          :\n          case 171\n          /* CallExpression */\n          :\n          case 172\n          /* NewExpression */\n          :\n          case 174\n          /* TypeAssertionExpression */\n          :\n          case 192\n          /* AsExpression */\n          :\n          case 175\n          /* ParenthesizedExpression */\n          :\n          case 182\n          /* PrefixUnaryExpression */\n          :\n          case 178\n          /* DeleteExpression */\n          :\n          case 181\n          /* AwaitExpression */\n          :\n          case 179\n          /* TypeOfExpression */\n          :\n          case 180\n          /* VoidExpression */\n          :\n          case 183\n          /* PostfixUnaryExpression */\n          :\n          case 187\n          /* YieldExpression */\n          :\n          case 185\n          /* ConditionalExpression */\n          :\n          case 188\n          /* SpreadElementExpression */\n          :\n          case 195\n          /* Block */\n          :\n          case 196\n          /* VariableStatement */\n          :\n          case 198\n          /* ExpressionStatement */\n          :\n          case 199\n          /* IfStatement */\n          :\n          case 200\n          /* DoStatement */\n          :\n          case 201\n          /* WhileStatement */\n          :\n          case 202\n          /* ForStatement */\n          :\n          case 203\n          /* ForInStatement */\n          :\n          case 204\n          /* ForOfStatement */\n          :\n          case 207\n          /* ReturnStatement */\n          :\n          case 208\n          /* WithStatement */\n          :\n          case 209\n          /* SwitchStatement */\n          :\n          case 244\n          /* CaseClause */\n          :\n          case 245\n          /* DefaultClause */\n          :\n          case 210\n          /* LabeledStatement */\n          :\n          case 211\n          /* ThrowStatement */\n          :\n          case 212\n          /* TryStatement */\n          :\n          case 247\n          /* CatchClause */\n          :\n          case 236\n          /* JsxElement */\n          :\n          case 237\n          /* JsxSelfClosingElement */\n          :\n          case 241\n          /* JsxAttribute */\n          :\n          case 242\n          /* JsxSpreadAttribute */\n          :\n          case 238\n          /* JsxOpeningElement */\n          :\n          case 243\n          /* JsxExpression */\n          :\n            return ts.forEachChild(node, isAssignedIn);\n        }\n\n        return false;\n      }\n    } // Get the narrowed type of a given symbol at a given location\n\n\n    function getNarrowedTypeOfSymbol(symbol, node) {\n      var type = getTypeOfSymbol(symbol); // Only narrow when symbol is variable of type any or an object, union, or type parameter type\n\n      if (node && symbol.flags & 3\n      /* Variable */\n      ) {\n          if (isTypeAny(type) || type.flags & (80896\n          /* ObjectType */\n          | 16384\n          /* Union */\n          | 512\n          /* TypeParameter */\n          )) {\n            var declaration = ts.getDeclarationOfKind(symbol, 214\n            /* VariableDeclaration */\n            );\n            var top_1 = declaration && getDeclarationContainer(declaration);\n            var originalType = type;\n            var nodeStack = [];\n\n            loop: while (node.parent) {\n              var child = node;\n              node = node.parent;\n\n              switch (node.kind) {\n                case 199\n                /* IfStatement */\n                :\n                case 185\n                /* ConditionalExpression */\n                :\n                case 184\n                /* BinaryExpression */\n                :\n                  nodeStack.push({\n                    node: node,\n                    child: child\n                  });\n                  break;\n\n                case 251\n                /* SourceFile */\n                :\n                case 221\n                /* ModuleDeclaration */\n                :\n                  // Stop at the first containing file or module declaration\n                  break loop;\n              }\n\n              if (node === top_1) {\n                break;\n              }\n            }\n\n            var nodes = void 0;\n\n            while (nodes = nodeStack.pop()) {\n              var node_1 = nodes.node,\n                  child = nodes.child;\n\n              switch (node_1.kind) {\n                case 199\n                /* IfStatement */\n                :\n                  // In a branch of an if statement, narrow based on controlling expression\n                  if (child !== node_1.expression) {\n                    type = narrowType(type, node_1.expression,\n                    /*assumeTrue*/\n                    child === node_1.thenStatement);\n                  }\n\n                  break;\n\n                case 185\n                /* ConditionalExpression */\n                :\n                  // In a branch of a conditional expression, narrow based on controlling condition\n                  if (child !== node_1.condition) {\n                    type = narrowType(type, node_1.condition,\n                    /*assumeTrue*/\n                    child === node_1.whenTrue);\n                  }\n\n                  break;\n\n                case 184\n                /* BinaryExpression */\n                :\n                  // In the right operand of an && or ||, narrow based on left operand\n                  if (child === node_1.right) {\n                    if (node_1.operatorToken.kind === 51\n                    /* AmpersandAmpersandToken */\n                    ) {\n                        type = narrowType(type, node_1.left,\n                        /*assumeTrue*/\n                        true);\n                      } else if (node_1.operatorToken.kind === 52\n                    /* BarBarToken */\n                    ) {\n                        type = narrowType(type, node_1.left,\n                        /*assumeTrue*/\n                        false);\n                      }\n                  }\n\n                  break;\n\n                default:\n                  ts.Debug.fail(\"Unreachable!\");\n              } // Use original type if construct contains assignments to variable\n\n\n              if (type !== originalType && isVariableAssignedWithin(symbol, node_1)) {\n                type = originalType;\n              }\n            } // Preserve old top-level behavior - if the branch is really an empty set, revert to prior type\n\n\n            if (type === emptyUnionType) {\n              type = originalType;\n            }\n          }\n        }\n\n      return type;\n\n      function narrowTypeByEquality(type, expr, assumeTrue) {\n        // Check that we have 'typeof <symbol>' on the left and string literal on the right\n        if (expr.left.kind !== 179\n        /* TypeOfExpression */\n        || expr.right.kind !== 9\n        /* StringLiteral */\n        ) {\n            return type;\n          }\n\n        var left = expr.left;\n        var right = expr.right;\n\n        if (left.expression.kind !== 69\n        /* Identifier */\n        || getResolvedSymbol(left.expression) !== symbol) {\n          return type;\n        }\n\n        if (expr.operatorToken.kind === 33\n        /* ExclamationEqualsEqualsToken */\n        ) {\n            assumeTrue = !assumeTrue;\n          }\n\n        var typeInfo = primitiveTypeInfo[right.text]; // Don't narrow `undefined`\n\n        if (typeInfo && typeInfo.type === undefinedType) {\n          return type;\n        }\n\n        var flags;\n\n        if (typeInfo) {\n          flags = typeInfo.flags;\n        } else {\n          assumeTrue = !assumeTrue;\n          flags = 132\n          /* NumberLike */\n          | 258\n          /* StringLike */\n          | 16777216\n          /* ESSymbol */\n          | 8\n          /* Boolean */\n          ;\n        } // At this point we can bail if it's not a union\n\n\n        if (!(type.flags & 16384\n        /* Union */\n        )) {\n          // If we're on the true branch and the type is a subtype, we should return the primitive type\n          if (assumeTrue && typeInfo && isTypeSubtypeOf(typeInfo.type, type)) {\n            return typeInfo.type;\n          } // If the active non-union type would be removed from a union by this type guard, return an empty union\n\n\n          return filterUnion(type) ? type : emptyUnionType;\n        }\n\n        return getUnionType(ts.filter(type.types, filterUnion),\n        /*noSubtypeReduction*/\n        true);\n\n        function filterUnion(type) {\n          return assumeTrue === !!(type.flags & flags);\n        }\n      }\n\n      function narrowTypeByAnd(type, expr, assumeTrue) {\n        if (assumeTrue) {\n          // The assumed result is true, therefore we narrow assuming each operand to be true.\n          return narrowType(narrowType(type, expr.left,\n          /*assumeTrue*/\n          true), expr.right,\n          /*assumeTrue*/\n          true);\n        } else {\n          // The assumed result is false. This means either the first operand was false, or the first operand was true\n          // and the second operand was false. We narrow with those assumptions and union the two resulting types.\n          return getUnionType([narrowType(type, expr.left,\n          /*assumeTrue*/\n          false), narrowType(type, expr.right,\n          /*assumeTrue*/\n          false)]);\n        }\n      }\n\n      function narrowTypeByOr(type, expr, assumeTrue) {\n        if (assumeTrue) {\n          // The assumed result is true. This means either the first operand was true, or the first operand was false\n          // and the second operand was true. We narrow with those assumptions and union the two resulting types.\n          return getUnionType([narrowType(type, expr.left,\n          /*assumeTrue*/\n          true), narrowType(type, expr.right,\n          /*assumeTrue*/\n          true)]);\n        } else {\n          // The assumed result is false, therefore we narrow assuming each operand to be false.\n          return narrowType(narrowType(type, expr.left,\n          /*assumeTrue*/\n          false), expr.right,\n          /*assumeTrue*/\n          false);\n        }\n      }\n\n      function narrowTypeByInstanceof(type, expr, assumeTrue) {\n        // Check that type is not any, assumed result is true, and we have variable symbol on the left\n        if (isTypeAny(type) || expr.left.kind !== 69\n        /* Identifier */\n        || getResolvedSymbol(expr.left) !== symbol) {\n          return type;\n        } // Check that right operand is a function type with a prototype property\n\n\n        var rightType = checkExpression(expr.right);\n\n        if (!isTypeSubtypeOf(rightType, globalFunctionType)) {\n          return type;\n        }\n\n        var targetType;\n        var prototypeProperty = getPropertyOfType(rightType, \"prototype\");\n\n        if (prototypeProperty) {\n          // Target type is type of the prototype property\n          var prototypePropertyType = getTypeOfSymbol(prototypeProperty);\n\n          if (!isTypeAny(prototypePropertyType)) {\n            targetType = prototypePropertyType;\n          }\n        }\n\n        if (!targetType) {\n          // Target type is type of construct signature\n          var constructSignatures = void 0;\n\n          if (rightType.flags & 2048\n          /* Interface */\n          ) {\n              constructSignatures = resolveDeclaredMembers(rightType).declaredConstructSignatures;\n            } else if (rightType.flags & 65536\n          /* Anonymous */\n          ) {\n              constructSignatures = getSignaturesOfType(rightType, 1\n              /* Construct */\n              );\n            }\n\n          if (constructSignatures && constructSignatures.length) {\n            targetType = getUnionType(ts.map(constructSignatures, function (signature) {\n              return getReturnTypeOfSignature(getErasedSignature(signature));\n            }));\n          }\n        }\n\n        if (targetType) {\n          return getNarrowedType(type, targetType, assumeTrue);\n        }\n\n        return type;\n      }\n\n      function getNarrowedType(originalType, narrowedTypeCandidate, assumeTrue) {\n        if (!assumeTrue) {\n          if (originalType.flags & 16384\n          /* Union */\n          ) {\n              return getUnionType(ts.filter(originalType.types, function (t) {\n                return !isTypeSubtypeOf(t, narrowedTypeCandidate);\n              }));\n            }\n\n          return originalType;\n        } // If the current type is a union type, remove all constituents that aren't assignable to target. If that produces\n        // 0 candidates, fall back to the assignability check\n\n\n        if (originalType.flags & 16384\n        /* Union */\n        ) {\n            var assignableConstituents = ts.filter(originalType.types, function (t) {\n              return isTypeAssignableTo(t, narrowedTypeCandidate);\n            });\n\n            if (assignableConstituents.length) {\n              return getUnionType(assignableConstituents);\n            }\n          }\n\n        if (isTypeAssignableTo(narrowedTypeCandidate, originalType)) {\n          // Narrow to the target type if it's assignable to the current type\n          return narrowedTypeCandidate;\n        }\n\n        return originalType;\n      }\n\n      function narrowTypeByTypePredicate(type, callExpression, assumeTrue) {\n        if (type.flags & 1\n        /* Any */\n        ) {\n            return type;\n          }\n\n        var signature = getResolvedSignature(callExpression);\n        var predicate = signature.typePredicate;\n\n        if (!predicate) {\n          return type;\n        }\n\n        if (ts.isIdentifierTypePredicate(predicate)) {\n          if (callExpression.arguments[predicate.parameterIndex] && getSymbolAtTypePredicatePosition(callExpression.arguments[predicate.parameterIndex]) === symbol) {\n            return getNarrowedType(type, predicate.type, assumeTrue);\n          }\n        } else {\n          var invokedExpression = skipParenthesizedNodes(callExpression.expression);\n          return narrowTypeByThisTypePredicate(type, predicate, invokedExpression, assumeTrue);\n        }\n\n        return type;\n      }\n\n      function narrowTypeByThisTypePredicate(type, predicate, invokedExpression, assumeTrue) {\n        if (invokedExpression.kind === 170\n        /* ElementAccessExpression */\n        || invokedExpression.kind === 169\n        /* PropertyAccessExpression */\n        ) {\n            var accessExpression = invokedExpression;\n            var possibleIdentifier = skipParenthesizedNodes(accessExpression.expression);\n\n            if (possibleIdentifier.kind === 69\n            /* Identifier */\n            && getSymbolAtTypePredicatePosition(possibleIdentifier) === symbol) {\n              return getNarrowedType(type, predicate.type, assumeTrue);\n            }\n          }\n\n        return type;\n      }\n\n      function getSymbolAtTypePredicatePosition(expr) {\n        expr = skipParenthesizedNodes(expr);\n\n        switch (expr.kind) {\n          case 69\n          /* Identifier */\n          :\n          case 169\n          /* PropertyAccessExpression */\n          :\n            return getSymbolOfEntityNameOrPropertyAccessExpression(expr);\n        }\n      } // Narrow the given type based on the given expression having the assumed boolean value. The returned type\n      // will be a subtype or the same type as the argument.\n\n\n      function narrowType(type, expr, assumeTrue) {\n        switch (expr.kind) {\n          case 171\n          /* CallExpression */\n          :\n            return narrowTypeByTypePredicate(type, expr, assumeTrue);\n\n          case 175\n          /* ParenthesizedExpression */\n          :\n            return narrowType(type, expr.expression, assumeTrue);\n\n          case 184\n          /* BinaryExpression */\n          :\n            var operator = expr.operatorToken.kind;\n\n            if (operator === 32\n            /* EqualsEqualsEqualsToken */\n            || operator === 33\n            /* ExclamationEqualsEqualsToken */\n            ) {\n                return narrowTypeByEquality(type, expr, assumeTrue);\n              } else if (operator === 51\n            /* AmpersandAmpersandToken */\n            ) {\n                return narrowTypeByAnd(type, expr, assumeTrue);\n              } else if (operator === 52\n            /* BarBarToken */\n            ) {\n                return narrowTypeByOr(type, expr, assumeTrue);\n              } else if (operator === 91\n            /* InstanceOfKeyword */\n            ) {\n                return narrowTypeByInstanceof(type, expr, assumeTrue);\n              }\n\n            break;\n\n          case 182\n          /* PrefixUnaryExpression */\n          :\n            if (expr.operator === 49\n            /* ExclamationToken */\n            ) {\n                return narrowType(type, expr.operand, !assumeTrue);\n              }\n\n            break;\n        }\n\n        return type;\n      }\n    }\n\n    function skipParenthesizedNodes(expression) {\n      while (expression.kind === 175\n      /* ParenthesizedExpression */\n      ) {\n        expression = expression.expression;\n      }\n\n      return expression;\n    }\n\n    function checkIdentifier(node) {\n      var symbol = getResolvedSymbol(node); // As noted in ECMAScript 6 language spec, arrow functions never have an arguments objects.\n      // Although in down-level emit of arrow function, we emit it using function expression which means that\n      // arguments objects will be bound to the inner object; emitting arrow function natively in ES6, arguments objects\n      // will be bound to non-arrow function that contain this arrow function. This results in inconsistent behavior.\n      // To avoid that we will give an error to users if they use arguments objects in arrow function so that they\n      // can explicitly bound arguments objects\n\n      if (symbol === argumentsSymbol) {\n        var container = ts.getContainingFunction(node);\n\n        if (container.kind === 177\n        /* ArrowFunction */\n        ) {\n            if (languageVersion < 2\n            /* ES6 */\n            ) {\n                error(node, ts.Diagnostics.The_arguments_object_cannot_be_referenced_in_an_arrow_function_in_ES3_and_ES5_Consider_using_a_standard_function_expression);\n              }\n          }\n\n        if (node.parserContextFlags & 8\n        /* Await */\n        ) {\n            getNodeLinks(container).flags |= 8192\n            /* CaptureArguments */\n            ;\n          }\n      }\n\n      if (symbol.flags & 8388608\n      /* Alias */\n      && !isInTypeQuery(node) && !isConstEnumOrConstEnumOnlyModule(resolveAlias(symbol))) {\n        markAliasSymbolAsReferenced(symbol);\n      }\n\n      var localOrExportSymbol = getExportSymbolOfValueSymbolIfExported(symbol); // Due to the emit for class decorators, any reference to the class from inside of the class body\n      // must instead be rewritten to point to a temporary variable to avoid issues with the double-bind\n      // behavior of class names in ES6.\n\n      if (languageVersion === 2\n      /* ES6 */\n      && localOrExportSymbol.flags & 32\n      /* Class */\n      && localOrExportSymbol.valueDeclaration.kind === 217\n      /* ClassDeclaration */\n      && ts.nodeIsDecorated(localOrExportSymbol.valueDeclaration)) {\n        var container = ts.getContainingClass(node);\n\n        while (container !== undefined) {\n          if (container === localOrExportSymbol.valueDeclaration && container.name !== node) {\n            getNodeLinks(container).flags |= 524288\n            /* ClassWithBodyScopedClassBinding */\n            ;\n            getNodeLinks(node).flags |= 1048576\n            /* BodyScopedClassBinding */\n            ;\n            break;\n          }\n\n          container = ts.getContainingClass(container);\n        }\n      }\n\n      checkCollisionWithCapturedSuperVariable(node, node);\n      checkCollisionWithCapturedThisVariable(node, node);\n      checkNestedBlockScopedBinding(node, symbol);\n      return getNarrowedTypeOfSymbol(localOrExportSymbol, node);\n    }\n\n    function isInsideFunction(node, threshold) {\n      var current = node;\n\n      while (current && current !== threshold) {\n        if (ts.isFunctionLike(current)) {\n          return true;\n        }\n\n        current = current.parent;\n      }\n\n      return false;\n    }\n\n    function checkNestedBlockScopedBinding(node, symbol) {\n      if (languageVersion >= 2\n      /* ES6 */\n      || (symbol.flags & (2\n      /* BlockScopedVariable */\n      | 32\n      /* Class */\n      )) === 0 || symbol.valueDeclaration.parent.kind === 247\n      /* CatchClause */\n      ) {\n          return;\n        } // 1. walk from the use site up to the declaration and check\n      // if there is anything function like between declaration and use-site (is binding/class is captured in function).\n      // 2. walk from the declaration up to the boundary of lexical environment and check\n      // if there is an iteration statement in between declaration and boundary (is binding/class declared inside iteration statement)\n\n\n      var container = ts.getEnclosingBlockScopeContainer(symbol.valueDeclaration);\n      var usedInFunction = isInsideFunction(node.parent, container);\n      var current = container;\n      var containedInIterationStatement = false;\n\n      while (current && !ts.nodeStartsNewLexicalEnvironment(current)) {\n        if (ts.isIterationStatement(current,\n        /*lookInLabeledStatements*/\n        false)) {\n          containedInIterationStatement = true;\n          break;\n        }\n\n        current = current.parent;\n      }\n\n      if (containedInIterationStatement) {\n        if (usedInFunction) {\n          // mark iteration statement as containing block-scoped binding captured in some function\n          getNodeLinks(current).flags |= 65536\n          /* LoopWithCapturedBlockScopedBinding */\n          ;\n        } // mark variables that are declared in loop initializer and reassigned inside the body of ForStatement.\n        // if body of ForStatement will be converted to function then we'll need a extra machinery to propagate reassigned values back.\n\n\n        if (container.kind === 202\n        /* ForStatement */\n        && ts.getAncestor(symbol.valueDeclaration, 215\n        /* VariableDeclarationList */\n        ).parent === container && isAssignedInBodyOfForStatement(node, container)) {\n          getNodeLinks(symbol.valueDeclaration).flags |= 2097152\n          /* NeedsLoopOutParameter */\n          ;\n        } // set 'declared inside loop' bit on the block-scoped binding\n\n\n        getNodeLinks(symbol.valueDeclaration).flags |= 262144\n        /* BlockScopedBindingInLoop */\n        ;\n      }\n\n      if (usedInFunction) {\n        getNodeLinks(symbol.valueDeclaration).flags |= 131072\n        /* CapturedBlockScopedBinding */\n        ;\n      }\n    }\n\n    function isAssignedInBodyOfForStatement(node, container) {\n      var current = node; // skip parenthesized nodes\n\n      while (current.parent.kind === 175\n      /* ParenthesizedExpression */\n      ) {\n        current = current.parent;\n      } // check if node is used as LHS in some assignment expression\n\n\n      var isAssigned = false;\n\n      if (current.parent.kind === 184\n      /* BinaryExpression */\n      ) {\n          isAssigned = current.parent.left === current && ts.isAssignmentOperator(current.parent.operatorToken.kind);\n        }\n\n      if (current.parent.kind === 182\n      /* PrefixUnaryExpression */\n      || current.parent.kind === 183\n      /* PostfixUnaryExpression */\n      ) {\n          var expr = current.parent;\n          isAssigned = expr.operator === 41\n          /* PlusPlusToken */\n          || expr.operator === 42\n          /* MinusMinusToken */\n          ;\n        }\n\n      if (!isAssigned) {\n        return false;\n      } // at this point we know that node is the target of assignment\n      // now check that modification happens inside the statement part of the ForStatement\n\n\n      while (current !== container) {\n        if (current === container.statement) {\n          return true;\n        } else {\n          current = current.parent;\n        }\n      }\n\n      return false;\n    }\n\n    function captureLexicalThis(node, container) {\n      getNodeLinks(node).flags |= 2\n      /* LexicalThis */\n      ;\n\n      if (container.kind === 142\n      /* PropertyDeclaration */\n      || container.kind === 145\n      /* Constructor */\n      ) {\n          var classNode = container.parent;\n          getNodeLinks(classNode).flags |= 4\n          /* CaptureThis */\n          ;\n        } else {\n        getNodeLinks(container).flags |= 4\n        /* CaptureThis */\n        ;\n      }\n    }\n\n    function findFirstSuperCall(n) {\n      if (ts.isSuperCallExpression(n)) {\n        return n;\n      } else if (ts.isFunctionLike(n)) {\n        return undefined;\n      }\n\n      return ts.forEachChild(n, findFirstSuperCall);\n    }\n    /**\n     * Return a cached result if super-statement is already found.\n     * Otherwise, find a super statement in a given constructor function and cache the result in the node-links of the constructor\n     *\n     * @param constructor constructor-function to look for super statement\n     */\n\n\n    function getSuperCallInConstructor(constructor) {\n      var links = getNodeLinks(constructor); // Only trying to find super-call if we haven't yet tried to find one.  Once we try, we will record the result\n\n      if (links.hasSuperCall === undefined) {\n        links.superCall = findFirstSuperCall(constructor.body);\n        links.hasSuperCall = links.superCall ? true : false;\n      }\n\n      return links.superCall;\n    }\n    /**\n     * Check if the given class-declaration extends null then return true.\n     * Otherwise, return false\n     * @param classDecl a class declaration to check if it extends null\n     */\n\n\n    function classDeclarationExtendsNull(classDecl) {\n      var classSymbol = getSymbolOfNode(classDecl);\n      var classInstanceType = getDeclaredTypeOfSymbol(classSymbol);\n      var baseConstructorType = getBaseConstructorTypeOfClass(classInstanceType);\n      return baseConstructorType === nullType;\n    }\n\n    function checkThisExpression(node) {\n      // Stop at the first arrow function so that we can\n      // tell whether 'this' needs to be captured.\n      var container = ts.getThisContainer(node,\n      /* includeArrowFunctions */\n      true);\n      var needToCaptureLexicalThis = false;\n\n      if (container.kind === 145\n      /* Constructor */\n      ) {\n          var containingClassDecl = container.parent;\n          var baseTypeNode = ts.getClassExtendsHeritageClauseElement(containingClassDecl); // If a containing class does not have extends clause or the class extends null\n          // skip checking whether super statement is called before \"this\" accessing.\n\n          if (baseTypeNode && !classDeclarationExtendsNull(containingClassDecl)) {\n            var superCall = getSuperCallInConstructor(container); // We should give an error in the following cases:\n            //      - No super-call\n            //      - \"this\" is accessing before super-call.\n            //          i.e super(this)\n            //              this.x; super();\n            // We want to make sure that super-call is done before accessing \"this\" so that\n            // \"this\" is not accessed as a parameter of the super-call.\n\n            if (!superCall || superCall.end > node.pos) {\n              // In ES6, super inside constructor of class-declaration has to precede \"this\" accessing\n              error(node, ts.Diagnostics.super_must_be_called_before_accessing_this_in_the_constructor_of_a_derived_class);\n            }\n          }\n        } // Now skip arrow functions to get the \"real\" owner of 'this'.\n\n\n      if (container.kind === 177\n      /* ArrowFunction */\n      ) {\n          container = ts.getThisContainer(container,\n          /* includeArrowFunctions */\n          false); // When targeting es6, arrow function lexically bind \"this\" so we do not need to do the work of binding \"this\" in emitted code\n\n          needToCaptureLexicalThis = languageVersion < 2\n          /* ES6 */\n          ;\n        }\n\n      switch (container.kind) {\n        case 221\n        /* ModuleDeclaration */\n        :\n          error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_module_or_namespace_body); // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\n\n          break;\n\n        case 220\n        /* EnumDeclaration */\n        :\n          error(node, ts.Diagnostics.this_cannot_be_referenced_in_current_location); // do not return here so in case if lexical this is captured - it will be reflected in flags on NodeLinks\n\n          break;\n\n        case 145\n        /* Constructor */\n        :\n          if (isInConstructorArgumentInitializer(node, container)) {\n            error(node, ts.Diagnostics.this_cannot_be_referenced_in_constructor_arguments);\n          }\n\n          break;\n\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n          if (container.flags & 64\n          /* Static */\n          ) {\n              error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_static_property_initializer);\n            }\n\n          break;\n\n        case 137\n        /* ComputedPropertyName */\n        :\n          error(node, ts.Diagnostics.this_cannot_be_referenced_in_a_computed_property_name);\n          break;\n      }\n\n      if (needToCaptureLexicalThis) {\n        captureLexicalThis(node, container);\n      }\n\n      if (ts.isClassLike(container.parent)) {\n        var symbol = getSymbolOfNode(container.parent);\n        return container.flags & 64\n        /* Static */\n        ? getTypeOfSymbol(symbol) : getDeclaredTypeOfSymbol(symbol).thisType;\n      }\n\n      if (ts.isInJavaScriptFile(node)) {\n        var type = getTypeForThisExpressionFromJSDoc(container);\n\n        if (type && type !== unknownType) {\n          return type;\n        } // If this is a function in a JS file, it might be a class method. Check if it's the RHS\n        // of a x.prototype.y = function [name]() { .... }\n\n\n        if (container.kind === 176\n        /* FunctionExpression */\n        ) {\n            if (ts.getSpecialPropertyAssignmentKind(container.parent) === 3\n            /* PrototypeProperty */\n            ) {\n                // Get the 'x' of 'x.prototype.y = f' (here, 'f' is 'container')\n                var className = container.parent // x.protoype.y = f\n                .left // x.prototype.y\n                .expression // x.prototype\n                .expression; // x\n\n                var classSymbol = checkExpression(className).symbol;\n\n                if (classSymbol && classSymbol.members && classSymbol.flags & 16\n                /* Function */\n                ) {\n                  return getInferredClassType(classSymbol);\n                }\n              }\n          }\n      }\n\n      return anyType;\n    }\n\n    function getTypeForThisExpressionFromJSDoc(node) {\n      var typeTag = ts.getJSDocTypeTag(node);\n\n      if (typeTag && typeTag.typeExpression && typeTag.typeExpression.type && typeTag.typeExpression.type.kind === 264\n      /* JSDocFunctionType */\n      ) {\n          var jsDocFunctionType = typeTag.typeExpression.type;\n\n          if (jsDocFunctionType.parameters.length > 0 && jsDocFunctionType.parameters[0].type.kind === 267\n          /* JSDocThisType */\n          ) {\n              return getTypeFromTypeNode(jsDocFunctionType.parameters[0].type);\n            }\n        }\n    }\n\n    function isInConstructorArgumentInitializer(node, constructorDecl) {\n      for (var n = node; n && n !== constructorDecl; n = n.parent) {\n        if (n.kind === 139\n        /* Parameter */\n        ) {\n            return true;\n          }\n      }\n\n      return false;\n    }\n\n    function checkSuperExpression(node) {\n      var isCallExpression = node.parent.kind === 171\n      /* CallExpression */\n      && node.parent.expression === node;\n      var container = ts.getSuperContainer(node,\n      /*stopOnFunctions*/\n      true);\n      var needToCaptureLexicalThis = false;\n\n      if (!isCallExpression) {\n        // adjust the container reference in case if super is used inside arrow functions with arbitrary deep nesting\n        while (container && container.kind === 177\n        /* ArrowFunction */\n        ) {\n          container = ts.getSuperContainer(container,\n          /*stopOnFunctions*/\n          true);\n          needToCaptureLexicalThis = languageVersion < 2\n          /* ES6 */\n          ;\n        }\n      }\n\n      var canUseSuperExpression = isLegalUsageOfSuperExpression(container);\n      var nodeCheckFlag = 0;\n\n      if (!canUseSuperExpression) {\n        // issue more specific error if super is used in computed property name\n        // class A { foo() { return \"1\" }}\n        // class B {\n        //     [super.foo()]() {}\n        // }\n        var current = node;\n\n        while (current && current !== container && current.kind !== 137\n        /* ComputedPropertyName */\n        ) {\n          current = current.parent;\n        }\n\n        if (current && current.kind === 137\n        /* ComputedPropertyName */\n        ) {\n            error(node, ts.Diagnostics.super_cannot_be_referenced_in_a_computed_property_name);\n          } else if (isCallExpression) {\n          error(node, ts.Diagnostics.Super_calls_are_not_permitted_outside_constructors_or_in_nested_functions_inside_constructors);\n        } else if (!container || !container.parent || !(ts.isClassLike(container.parent) || container.parent.kind === 168\n        /* ObjectLiteralExpression */\n        )) {\n          error(node, ts.Diagnostics.super_can_only_be_referenced_in_members_of_derived_classes_or_object_literal_expressions);\n        } else {\n          error(node, ts.Diagnostics.super_property_access_is_permitted_only_in_a_constructor_member_function_or_member_accessor_of_a_derived_class);\n        }\n\n        return unknownType;\n      }\n\n      if (container.flags & 64\n      /* Static */\n      || isCallExpression) {\n        nodeCheckFlag = 512\n        /* SuperStatic */\n        ;\n      } else {\n        nodeCheckFlag = 256\n        /* SuperInstance */\n        ;\n      }\n\n      getNodeLinks(node).flags |= nodeCheckFlag; // Due to how we emit async functions, we need to specialize the emit for an async method that contains a `super` reference.\n      // This is due to the fact that we emit the body of an async function inside of a generator function. As generator\n      // functions cannot reference `super`, we emit a helper inside of the method body, but outside of the generator. This helper\n      // uses an arrow function, which is permitted to reference `super`.\n      //\n      // There are two primary ways we can access `super` from within an async method. The first is getting the value of a property\n      // or indexed access on super, either as part of a right-hand-side expression or call expression. The second is when setting the value\n      // of a property or indexed access, either as part of an assignment expression or destructuring assignment.\n      //\n      // The simplest case is reading a value, in which case we will emit something like the following:\n      //\n      //  // ts\n      //  ...\n      //  async asyncMethod() {\n      //    let x = await super.asyncMethod();\n      //    return x;\n      //  }\n      //  ...\n      //\n      //  // js\n      //  ...\n      //  asyncMethod() {\n      //      const _super = name => super[name];\n      //      return __awaiter(this, arguments, Promise, function *() {\n      //          let x = yield _super(\"asyncMethod\").call(this);\n      //          return x;\n      //      });\n      //  }\n      //  ...\n      //\n      // The more complex case is when we wish to assign a value, especially as part of a destructuring assignment. As both cases\n      // are legal in ES6, but also likely less frequent, we emit the same more complex helper for both scenarios:\n      //\n      //  // ts\n      //  ...\n      //  async asyncMethod(ar: Promise<any[]>) {\n      //      [super.a, super.b] = await ar;\n      //  }\n      //  ...\n      //\n      //  // js\n      //  ...\n      //  asyncMethod(ar) {\n      //      const _super = (function (geti, seti) {\n      //          const cache = Object.create(null);\n      //          return name => cache[name] || (cache[name] = { get value() { return geti(name); }, set value(v) { seti(name, v); } });\n      //      })(name => super[name], (name, value) => super[name] = value);\n      //      return __awaiter(this, arguments, Promise, function *() {\n      //          [_super(\"a\").value, _super(\"b\").value] = yield ar;\n      //      });\n      //  }\n      //  ...\n      //\n      // This helper creates an object with a \"value\" property that wraps the `super` property or indexed access for both get and set.\n      // This is required for destructuring assignments, as a call expression cannot be used as the target of a destructuring assignment\n      // while a property access can.\n\n      if (container.kind === 144\n      /* MethodDeclaration */\n      && container.flags & 256\n      /* Async */\n      ) {\n          if (ts.isSuperPropertyOrElementAccess(node.parent) && isAssignmentTarget(node.parent)) {\n            getNodeLinks(container).flags |= 4096\n            /* AsyncMethodWithSuperBinding */\n            ;\n          } else {\n            getNodeLinks(container).flags |= 2048\n            /* AsyncMethodWithSuper */\n            ;\n          }\n        }\n\n      if (needToCaptureLexicalThis) {\n        // call expressions are allowed only in constructors so they should always capture correct 'this'\n        // super property access expressions can also appear in arrow functions -\n        // in this case they should also use correct lexical this\n        captureLexicalThis(node.parent, container);\n      }\n\n      if (container.parent.kind === 168\n      /* ObjectLiteralExpression */\n      ) {\n          if (languageVersion < 2\n          /* ES6 */\n          ) {\n              error(node, ts.Diagnostics.super_is_only_allowed_in_members_of_object_literal_expressions_when_option_target_is_ES2015_or_higher);\n              return unknownType;\n            } else {\n            // for object literal assume that type of 'super' is 'any'\n            return anyType;\n          }\n        } // at this point the only legal case for parent is ClassLikeDeclaration\n\n\n      var classLikeDeclaration = container.parent;\n      var classType = getDeclaredTypeOfSymbol(getSymbolOfNode(classLikeDeclaration));\n      var baseClassType = classType && getBaseTypes(classType)[0];\n\n      if (!baseClassType) {\n        if (!ts.getClassExtendsHeritageClauseElement(classLikeDeclaration)) {\n          error(node, ts.Diagnostics.super_can_only_be_referenced_in_a_derived_class);\n        }\n\n        return unknownType;\n      }\n\n      if (container.kind === 145\n      /* Constructor */\n      && isInConstructorArgumentInitializer(node, container)) {\n        // issue custom error message for super property access in constructor arguments (to be aligned with old compiler)\n        error(node, ts.Diagnostics.super_cannot_be_referenced_in_constructor_arguments);\n        return unknownType;\n      }\n\n      return nodeCheckFlag === 512\n      /* SuperStatic */\n      ? getBaseConstructorTypeOfClass(classType) : baseClassType;\n\n      function isLegalUsageOfSuperExpression(container) {\n        if (!container) {\n          return false;\n        }\n\n        if (isCallExpression) {\n          // TS 1.0 SPEC (April 2014): 4.8.1\n          // Super calls are only permitted in constructors of derived classes\n          return container.kind === 145\n          /* Constructor */\n          ;\n        } else {\n          // TS 1.0 SPEC (April 2014)\n          // 'super' property access is allowed\n          // - In a constructor, instance member function, instance member accessor, or instance member variable initializer where this references a derived class instance\n          // - In a static member function or static member accessor\n          // topmost container must be something that is directly nested in the class declaration\\object literal expression\n          if (ts.isClassLike(container.parent) || container.parent.kind === 168\n          /* ObjectLiteralExpression */\n          ) {\n              if (container.flags & 64\n              /* Static */\n              ) {\n                  return container.kind === 144\n                  /* MethodDeclaration */\n                  || container.kind === 143\n                  /* MethodSignature */\n                  || container.kind === 146\n                  /* GetAccessor */\n                  || container.kind === 147\n                  /* SetAccessor */\n                  ;\n                } else {\n                return container.kind === 144\n                /* MethodDeclaration */\n                || container.kind === 143\n                /* MethodSignature */\n                || container.kind === 146\n                /* GetAccessor */\n                || container.kind === 147\n                /* SetAccessor */\n                || container.kind === 142\n                /* PropertyDeclaration */\n                || container.kind === 141\n                /* PropertySignature */\n                || container.kind === 145\n                /* Constructor */\n                ;\n              }\n            }\n        }\n\n        return false;\n      }\n    } // Return contextual type of parameter or undefined if no contextual type is available\n\n\n    function getContextuallyTypedParameterType(parameter) {\n      var func = parameter.parent;\n\n      if (isFunctionExpressionOrArrowFunction(func) || ts.isObjectLiteralMethod(func)) {\n        if (isContextSensitive(func)) {\n          var contextualSignature = getContextualSignature(func);\n\n          if (contextualSignature) {\n            var funcHasRestParameters = ts.hasRestParameter(func);\n            var len = func.parameters.length - (funcHasRestParameters ? 1 : 0);\n            var indexOfParameter = ts.indexOf(func.parameters, parameter);\n\n            if (indexOfParameter < len) {\n              return getTypeAtPosition(contextualSignature, indexOfParameter);\n            } // If last parameter is contextually rest parameter get its type\n\n\n            if (funcHasRestParameters && indexOfParameter === func.parameters.length - 1 && isRestParameterIndex(contextualSignature, func.parameters.length - 1)) {\n              return getTypeOfSymbol(ts.lastOrUndefined(contextualSignature.parameters));\n            }\n          }\n        }\n      }\n\n      return undefined;\n    } // In a variable, parameter or property declaration with a type annotation, the contextual type of an initializer\n    // expression is the type of the variable, parameter or property. Otherwise, in a parameter declaration of a\n    // contextually typed function expression, the contextual type of an initializer expression is the contextual type\n    // of the parameter. Otherwise, in a variable or parameter declaration with a binding pattern name, the contextual\n    // type of an initializer expression is the type implied by the binding pattern.\n\n\n    function getContextualTypeForInitializerExpression(node) {\n      var declaration = node.parent;\n\n      if (node === declaration.initializer) {\n        if (declaration.type) {\n          return getTypeFromTypeNode(declaration.type);\n        }\n\n        if (declaration.kind === 139\n        /* Parameter */\n        ) {\n            var type = getContextuallyTypedParameterType(declaration);\n\n            if (type) {\n              return type;\n            }\n          }\n\n        if (ts.isBindingPattern(declaration.name)) {\n          return getTypeFromBindingPattern(declaration.name,\n          /*includePatternInType*/\n          true);\n        }\n      }\n\n      return undefined;\n    }\n\n    function getContextualTypeForReturnExpression(node) {\n      var func = ts.getContainingFunction(node);\n\n      if (func && !func.asteriskToken) {\n        return getContextualReturnType(func);\n      }\n\n      return undefined;\n    }\n\n    function getContextualTypeForYieldOperand(node) {\n      var func = ts.getContainingFunction(node);\n\n      if (func) {\n        var contextualReturnType = getContextualReturnType(func);\n\n        if (contextualReturnType) {\n          return node.asteriskToken ? contextualReturnType : getElementTypeOfIterableIterator(contextualReturnType);\n        }\n      }\n\n      return undefined;\n    }\n\n    function isInParameterInitializerBeforeContainingFunction(node) {\n      while (node.parent && !ts.isFunctionLike(node.parent)) {\n        if (node.parent.kind === 139\n        /* Parameter */\n        && node.parent.initializer === node) {\n          return true;\n        }\n\n        node = node.parent;\n      }\n\n      return false;\n    }\n\n    function getContextualReturnType(functionDecl) {\n      // If the containing function has a return type annotation, is a constructor, or is a get accessor whose\n      // corresponding set accessor has a type annotation, return statements in the function are contextually typed\n      if (functionDecl.type || functionDecl.kind === 145\n      /* Constructor */\n      || functionDecl.kind === 146\n      /* GetAccessor */\n      && ts.getSetAccessorTypeAnnotationNode(ts.getDeclarationOfKind(functionDecl.symbol, 147\n      /* SetAccessor */\n      ))) {\n        return getReturnTypeOfSignature(getSignatureFromDeclaration(functionDecl));\n      } // Otherwise, if the containing function is contextually typed by a function type with exactly one call signature\n      // and that call signature is non-generic, return statements are contextually typed by the return type of the signature\n\n\n      var signature = getContextualSignatureForFunctionLikeDeclaration(functionDecl);\n\n      if (signature) {\n        return getReturnTypeOfSignature(signature);\n      }\n\n      return undefined;\n    } // In a typed function call, an argument or substitution expression is contextually typed by the type of the corresponding parameter.\n\n\n    function getContextualTypeForArgument(callTarget, arg) {\n      var args = getEffectiveCallArguments(callTarget);\n      var argIndex = ts.indexOf(args, arg);\n\n      if (argIndex >= 0) {\n        var signature = getResolvedSignature(callTarget);\n        return getTypeAtPosition(signature, argIndex);\n      }\n\n      return undefined;\n    }\n\n    function getContextualTypeForSubstitutionExpression(template, substitutionExpression) {\n      if (template.parent.kind === 173\n      /* TaggedTemplateExpression */\n      ) {\n          return getContextualTypeForArgument(template.parent, substitutionExpression);\n        }\n\n      return undefined;\n    }\n\n    function getContextualTypeForBinaryOperand(node) {\n      var binaryExpression = node.parent;\n      var operator = binaryExpression.operatorToken.kind;\n\n      if (operator >= 56\n      /* FirstAssignment */\n      && operator <= 68\n      /* LastAssignment */\n      ) {\n          // In an assignment expression, the right operand is contextually typed by the type of the left operand.\n          if (node === binaryExpression.right) {\n            return checkExpression(binaryExpression.left);\n          }\n        } else if (operator === 52\n      /* BarBarToken */\n      ) {\n          // When an || expression has a contextual type, the operands are contextually typed by that type. When an ||\n          // expression has no contextual type, the right operand is contextually typed by the type of the left operand.\n          var type = getContextualType(binaryExpression);\n\n          if (!type && node === binaryExpression.right) {\n            type = checkExpression(binaryExpression.left);\n          }\n\n          return type;\n        } else if (operator === 51\n      /* AmpersandAmpersandToken */\n      || operator === 24\n      /* CommaToken */\n      ) {\n          if (node === binaryExpression.right) {\n            return getContextualType(binaryExpression);\n          }\n        }\n\n      return undefined;\n    } // Apply a mapping function to a contextual type and return the resulting type. If the contextual type\n    // is a union type, the mapping function is applied to each constituent type and a union of the resulting\n    // types is returned.\n\n\n    function applyToContextualType(type, mapper) {\n      if (!(type.flags & 16384\n      /* Union */\n      )) {\n        return mapper(type);\n      }\n\n      var types = type.types;\n      var mappedType;\n      var mappedTypes;\n\n      for (var _i = 0, types_8 = types; _i < types_8.length; _i++) {\n        var current = types_8[_i];\n        var t = mapper(current);\n\n        if (t) {\n          if (!mappedType) {\n            mappedType = t;\n          } else if (!mappedTypes) {\n            mappedTypes = [mappedType, t];\n          } else {\n            mappedTypes.push(t);\n          }\n        }\n      }\n\n      return mappedTypes ? getUnionType(mappedTypes) : mappedType;\n    }\n\n    function getTypeOfPropertyOfContextualType(type, name) {\n      return applyToContextualType(type, function (t) {\n        var prop = t.flags & 130048\n        /* StructuredType */\n        ? getPropertyOfType(t, name) : undefined;\n        return prop ? getTypeOfSymbol(prop) : undefined;\n      });\n    }\n\n    function getIndexTypeOfContextualType(type, kind) {\n      return applyToContextualType(type, function (t) {\n        return getIndexTypeOfStructuredType(t, kind);\n      });\n    }\n\n    function contextualTypeIsStringLiteralType(type) {\n      return !!(type.flags & 16384\n      /* Union */\n      ? ts.forEach(type.types, isStringLiteralType) : isStringLiteralType(type));\n    } // Return true if the given contextual type is a tuple-like type\n\n\n    function contextualTypeIsTupleLikeType(type) {\n      return !!(type.flags & 16384\n      /* Union */\n      ? ts.forEach(type.types, isTupleLikeType) : isTupleLikeType(type));\n    } // Return true if the given contextual type provides an index signature of the given kind\n\n\n    function contextualTypeHasIndexSignature(type, kind) {\n      return !!(type.flags & 16384\n      /* Union */\n      ? ts.forEach(type.types, function (t) {\n        return getIndexTypeOfStructuredType(t, kind);\n      }) : getIndexTypeOfStructuredType(type, kind));\n    } // In an object literal contextually typed by a type T, the contextual type of a property assignment is the type of\n    // the matching property in T, if one exists. Otherwise, it is the type of the numeric index signature in T, if one\n    // exists. Otherwise, it is the type of the string index signature in T, if one exists.\n\n\n    function getContextualTypeForObjectLiteralMethod(node) {\n      ts.Debug.assert(ts.isObjectLiteralMethod(node));\n\n      if (isInsideWithStatementBody(node)) {\n        // We cannot answer semantic questions within a with block, do not proceed any further\n        return undefined;\n      }\n\n      return getContextualTypeForObjectLiteralElement(node);\n    }\n\n    function getContextualTypeForObjectLiteralElement(element) {\n      var objectLiteral = element.parent;\n      var type = getApparentTypeOfContextualType(objectLiteral);\n\n      if (type) {\n        if (!ts.hasDynamicName(element)) {\n          // For a (non-symbol) computed property, there is no reason to look up the name\n          // in the type. It will just be \"__computed\", which does not appear in any\n          // SymbolTable.\n          var symbolName = getSymbolOfNode(element).name;\n          var propertyType = getTypeOfPropertyOfContextualType(type, symbolName);\n\n          if (propertyType) {\n            return propertyType;\n          }\n        }\n\n        return isNumericName(element.name) && getIndexTypeOfContextualType(type, 1\n        /* Number */\n        ) || getIndexTypeOfContextualType(type, 0\n        /* String */\n        );\n      }\n\n      return undefined;\n    } // In an array literal contextually typed by a type T, the contextual type of an element expression at index N is\n    // the type of the property with the numeric name N in T, if one exists. Otherwise, if T has a numeric index signature,\n    // it is the type of the numeric index signature in T. Otherwise, in ES6 and higher, the contextual type is the iterated\n    // type of T.\n\n\n    function getContextualTypeForElementExpression(node) {\n      var arrayLiteral = node.parent;\n      var type = getApparentTypeOfContextualType(arrayLiteral);\n\n      if (type) {\n        var index = ts.indexOf(arrayLiteral.elements, node);\n        return getTypeOfPropertyOfContextualType(type, \"\" + index) || getIndexTypeOfContextualType(type, 1\n        /* Number */\n        ) || (languageVersion >= 2\n        /* ES6 */\n        ? getElementTypeOfIterable(type,\n        /*errorNode*/\n        undefined) : undefined);\n      }\n\n      return undefined;\n    } // In a contextually typed conditional expression, the true/false expressions are contextually typed by the same type.\n\n\n    function getContextualTypeForConditionalOperand(node) {\n      var conditional = node.parent;\n      return node === conditional.whenTrue || node === conditional.whenFalse ? getContextualType(conditional) : undefined;\n    }\n\n    function getContextualTypeForJsxAttribute(attribute) {\n      var kind = attribute.kind;\n      var jsxElement = attribute.parent;\n      var attrsType = getJsxElementAttributesType(jsxElement);\n\n      if (attribute.kind === 241\n      /* JsxAttribute */\n      ) {\n          if (!attrsType || isTypeAny(attrsType)) {\n            return undefined;\n          }\n\n          return getTypeOfPropertyOfType(attrsType, attribute.name.text);\n        } else if (attribute.kind === 242\n      /* JsxSpreadAttribute */\n      ) {\n          return attrsType;\n        }\n\n      ts.Debug.fail(\"Expected JsxAttribute or JsxSpreadAttribute, got ts.SyntaxKind[\" + kind + \"]\");\n    } // Return the contextual type for a given expression node. During overload resolution, a contextual type may temporarily\n    // be \"pushed\" onto a node using the contextualType property.\n\n\n    function getApparentTypeOfContextualType(node) {\n      var type = getContextualType(node);\n      return type && getApparentType(type);\n    }\n    /**\n     * Woah! Do you really want to use this function?\n     *\n     * Unless you're trying to get the *non-apparent* type for a\n     * value-literal type or you're authoring relevant portions of this algorithm,\n     * you probably meant to use 'getApparentTypeOfContextualType'.\n     * Otherwise this may not be very useful.\n     *\n     * In cases where you *are* working on this function, you should understand\n     * when it is appropriate to use 'getContextualType' and 'getApparentTypeOfContetxualType'.\n     *\n     *   - Use 'getContextualType' when you are simply going to propagate the result to the expression.\n     *   - Use 'getApparentTypeOfContextualType' when you're going to need the members of the type.\n     *\n     * @param node the expression whose contextual type will be returned.\n     * @returns the contextual type of an expression.\n     */\n\n\n    function getContextualType(node) {\n      if (isInsideWithStatementBody(node)) {\n        // We cannot answer semantic questions within a with block, do not proceed any further\n        return undefined;\n      }\n\n      if (node.contextualType) {\n        return node.contextualType;\n      }\n\n      var parent = node.parent;\n\n      switch (parent.kind) {\n        case 214\n        /* VariableDeclaration */\n        :\n        case 139\n        /* Parameter */\n        :\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n        case 166\n        /* BindingElement */\n        :\n          return getContextualTypeForInitializerExpression(node);\n\n        case 177\n        /* ArrowFunction */\n        :\n        case 207\n        /* ReturnStatement */\n        :\n          return getContextualTypeForReturnExpression(node);\n\n        case 187\n        /* YieldExpression */\n        :\n          return getContextualTypeForYieldOperand(parent);\n\n        case 171\n        /* CallExpression */\n        :\n        case 172\n        /* NewExpression */\n        :\n          return getContextualTypeForArgument(parent, node);\n\n        case 174\n        /* TypeAssertionExpression */\n        :\n        case 192\n        /* AsExpression */\n        :\n          return getTypeFromTypeNode(parent.type);\n\n        case 184\n        /* BinaryExpression */\n        :\n          return getContextualTypeForBinaryOperand(node);\n\n        case 248\n        /* PropertyAssignment */\n        :\n          return getContextualTypeForObjectLiteralElement(parent);\n\n        case 167\n        /* ArrayLiteralExpression */\n        :\n          return getContextualTypeForElementExpression(node);\n\n        case 185\n        /* ConditionalExpression */\n        :\n          return getContextualTypeForConditionalOperand(node);\n\n        case 193\n        /* TemplateSpan */\n        :\n          ts.Debug.assert(parent.parent.kind === 186\n          /* TemplateExpression */\n          );\n          return getContextualTypeForSubstitutionExpression(parent.parent, node);\n\n        case 175\n        /* ParenthesizedExpression */\n        :\n          return getContextualType(parent);\n\n        case 243\n        /* JsxExpression */\n        :\n          return getContextualType(parent);\n\n        case 241\n        /* JsxAttribute */\n        :\n        case 242\n        /* JsxSpreadAttribute */\n        :\n          return getContextualTypeForJsxAttribute(parent);\n      }\n\n      return undefined;\n    } // If the given type is an object or union type, if that type has a single signature, and if\n    // that signature is non-generic, return the signature. Otherwise return undefined.\n\n\n    function getNonGenericSignature(type) {\n      var signatures = getSignaturesOfStructuredType(type, 0\n      /* Call */\n      );\n\n      if (signatures.length === 1) {\n        var signature = signatures[0];\n\n        if (!signature.typeParameters) {\n          return signature;\n        }\n      }\n    }\n\n    function isFunctionExpressionOrArrowFunction(node) {\n      return node.kind === 176\n      /* FunctionExpression */\n      || node.kind === 177\n      /* ArrowFunction */\n      ;\n    }\n\n    function getContextualSignatureForFunctionLikeDeclaration(node) {\n      // Only function expressions, arrow functions, and object literal methods are contextually typed.\n      return isFunctionExpressionOrArrowFunction(node) || ts.isObjectLiteralMethod(node) ? getContextualSignature(node) : undefined;\n    } // Return the contextual signature for a given expression node. A contextual type provides a\n    // contextual signature if it has a single call signature and if that call signature is non-generic.\n    // If the contextual type is a union type, get the signature from each type possible and if they are\n    // all identical ignoring their return type, the result is same signature but with return type as\n    // union type of return types from these signatures\n\n\n    function getContextualSignature(node) {\n      ts.Debug.assert(node.kind !== 144\n      /* MethodDeclaration */\n      || ts.isObjectLiteralMethod(node));\n      var type = ts.isObjectLiteralMethod(node) ? getContextualTypeForObjectLiteralMethod(node) : getApparentTypeOfContextualType(node);\n\n      if (!type) {\n        return undefined;\n      }\n\n      if (!(type.flags & 16384\n      /* Union */\n      )) {\n        return getNonGenericSignature(type);\n      }\n\n      var signatureList;\n      var types = type.types;\n\n      for (var _i = 0, types_9 = types; _i < types_9.length; _i++) {\n        var current = types_9[_i];\n        var signature = getNonGenericSignature(current);\n\n        if (signature) {\n          if (!signatureList) {\n            // This signature will contribute to contextual union signature\n            signatureList = [signature];\n          } else if (!compareSignaturesIdentical(signatureList[0], signature,\n          /*partialMatch*/\n          false,\n          /*ignoreReturnTypes*/\n          true, compareTypesIdentical)) {\n            // Signatures aren't identical, do not use\n            return undefined;\n          } else {\n            // Use this signature for contextual union signature\n            signatureList.push(signature);\n          }\n        }\n      } // Result is union of signatures collected (return type is union of return types of this signature set)\n\n\n      var result;\n\n      if (signatureList) {\n        result = cloneSignature(signatureList[0]); // Clear resolved return type we possibly got from cloneSignature\n\n        result.resolvedReturnType = undefined;\n        result.unionSignatures = signatureList;\n      }\n\n      return result;\n    }\n    /**\n     * Detect if the mapper implies an inference context. Specifically, there are 4 possible values\n     * for a mapper. Let's go through each one of them:\n     *\n     *    1. undefined - this means we are not doing inferential typing, but we may do contextual typing,\n     *       which could cause us to assign a parameter a type\n     *    2. identityMapper - means we want to avoid assigning a parameter a type, whether or not we are in\n     *       inferential typing (context is undefined for the identityMapper)\n     *    3. a mapper created by createInferenceMapper - we are doing inferential typing, we want to assign\n     *       types to parameters and fix type parameters (context is defined)\n     *    4. an instantiation mapper created by createTypeMapper or createTypeEraser - this should never be\n     *       passed as the contextual mapper when checking an expression (context is undefined for these)\n     *\n     * isInferentialContext is detecting if we are in case 3\n     */\n\n\n    function isInferentialContext(mapper) {\n      return mapper && mapper.context;\n    } // A node is an assignment target if it is on the left hand side of an '=' token, if it is parented by a property\n    // assignment in an object literal that is an assignment target, or if it is parented by an array literal that is\n    // an assignment target. Examples include 'a = xxx', '{ p: a } = xxx', '[{ p: a}] = xxx'.\n\n\n    function isAssignmentTarget(node) {\n      var parent = node.parent;\n\n      if (parent.kind === 184\n      /* BinaryExpression */\n      && parent.operatorToken.kind === 56\n      /* EqualsToken */\n      && parent.left === node) {\n        return true;\n      }\n\n      if (parent.kind === 248\n      /* PropertyAssignment */\n      ) {\n          return isAssignmentTarget(parent.parent);\n        }\n\n      if (parent.kind === 167\n      /* ArrayLiteralExpression */\n      ) {\n          return isAssignmentTarget(parent);\n        }\n\n      return false;\n    }\n\n    function checkSpreadElementExpression(node, contextualMapper) {\n      // It is usually not safe to call checkExpressionCached if we can be contextually typing.\n      // You can tell that we are contextually typing because of the contextualMapper parameter.\n      // While it is true that a spread element can have a contextual type, it does not do anything\n      // with this type. It is neither affected by it, nor does it propagate it to its operand.\n      // So the fact that contextualMapper is passed is not important, because the operand of a spread\n      // element is not contextually typed.\n      var arrayOrIterableType = checkExpressionCached(node.expression, contextualMapper);\n      return checkIteratedTypeOrElementType(arrayOrIterableType, node.expression,\n      /*allowStringInput*/\n      false);\n    }\n\n    function hasDefaultValue(node) {\n      return node.kind === 166\n      /* BindingElement */\n      && !!node.initializer || node.kind === 184\n      /* BinaryExpression */\n      && node.operatorToken.kind === 56\n      /* EqualsToken */\n      ;\n    }\n\n    function checkArrayLiteral(node, contextualMapper) {\n      var elements = node.elements;\n      var hasSpreadElement = false;\n      var elementTypes = [];\n      var inDestructuringPattern = isAssignmentTarget(node);\n\n      for (var _i = 0, elements_1 = elements; _i < elements_1.length; _i++) {\n        var e = elements_1[_i];\n\n        if (inDestructuringPattern && e.kind === 188\n        /* SpreadElementExpression */\n        ) {\n            // Given the following situation:\n            //    var c: {};\n            //    [...c] = [\"\", 0];\n            //\n            // c is represented in the tree as a spread element in an array literal.\n            // But c really functions as a rest element, and its purpose is to provide\n            // a contextual type for the right hand side of the assignment. Therefore,\n            // instead of calling checkExpression on \"...c\", which will give an error\n            // if c is not iterable/array-like, we need to act as if we are trying to\n            // get the contextual element type from it. So we do something similar to\n            // getContextualTypeForElementExpression, which will crucially not error\n            // if there is no index type / iterated type.\n            var restArrayType = checkExpression(e.expression, contextualMapper);\n            var restElementType = getIndexTypeOfType(restArrayType, 1\n            /* Number */\n            ) || (languageVersion >= 2\n            /* ES6 */\n            ? getElementTypeOfIterable(restArrayType,\n            /*errorNode*/\n            undefined) : undefined);\n\n            if (restElementType) {\n              elementTypes.push(restElementType);\n            }\n          } else {\n          var type = checkExpression(e, contextualMapper);\n          elementTypes.push(type);\n        }\n\n        hasSpreadElement = hasSpreadElement || e.kind === 188\n        /* SpreadElementExpression */\n        ;\n      }\n\n      if (!hasSpreadElement) {\n        // If array literal is actually a destructuring pattern, mark it as an implied type. We do this such\n        // that we get the same behavior for \"var [x, y] = []\" and \"[x, y] = []\".\n        if (inDestructuringPattern && elementTypes.length) {\n          var type = createNewTupleType(elementTypes);\n          type.pattern = node;\n          return type;\n        }\n\n        var contextualType = getApparentTypeOfContextualType(node);\n\n        if (contextualType && contextualTypeIsTupleLikeType(contextualType)) {\n          var pattern = contextualType.pattern; // If array literal is contextually typed by a binding pattern or an assignment pattern, pad the resulting\n          // tuple type with the corresponding binding or assignment element types to make the lengths equal.\n\n          if (pattern && (pattern.kind === 165\n          /* ArrayBindingPattern */\n          || pattern.kind === 167\n          /* ArrayLiteralExpression */\n          )) {\n            var patternElements = pattern.elements;\n\n            for (var i = elementTypes.length; i < patternElements.length; i++) {\n              var patternElement = patternElements[i];\n\n              if (hasDefaultValue(patternElement)) {\n                elementTypes.push(contextualType.elementTypes[i]);\n              } else {\n                if (patternElement.kind !== 190\n                /* OmittedExpression */\n                ) {\n                    error(patternElement, ts.Diagnostics.Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value);\n                  }\n\n                elementTypes.push(unknownType);\n              }\n            }\n          }\n\n          if (elementTypes.length) {\n            return createTupleType(elementTypes);\n          }\n        }\n      }\n\n      return createArrayType(elementTypes.length ? getUnionType(elementTypes) : undefinedType);\n    }\n\n    function isNumericName(name) {\n      return name.kind === 137\n      /* ComputedPropertyName */\n      ? isNumericComputedName(name) : isNumericLiteralName(name.text);\n    }\n\n    function isNumericComputedName(name) {\n      // It seems odd to consider an expression of type Any to result in a numeric name,\n      // but this behavior is consistent with checkIndexedAccess\n      return isTypeAnyOrAllConstituentTypesHaveKind(checkComputedPropertyName(name), 132\n      /* NumberLike */\n      );\n    }\n\n    function isTypeAnyOrAllConstituentTypesHaveKind(type, kind) {\n      return isTypeAny(type) || allConstituentTypesHaveKind(type, kind);\n    }\n\n    function isNumericLiteralName(name) {\n      // The intent of numeric names is that\n      //     - they are names with text in a numeric form, and that\n      //     - setting properties/indexing with them is always equivalent to doing so with the numeric literal 'numLit',\n      //         acquired by applying the abstract 'ToNumber' operation on the name's text.\n      //\n      // The subtlety is in the latter portion, as we cannot reliably say that anything that looks like a numeric literal is a numeric name.\n      // In fact, it is the case that the text of the name must be equal to 'ToString(numLit)' for this to hold.\n      //\n      // Consider the property name '\"0xF00D\"'. When one indexes with '0xF00D', they are actually indexing with the value of 'ToString(0xF00D)'\n      // according to the ECMAScript specification, so it is actually as if the user indexed with the string '\"61453\"'.\n      // Thus, the text of all numeric literals equivalent to '61543' such as '0xF00D', '0xf00D', '0170015', etc. are not valid numeric names\n      // because their 'ToString' representation is not equal to their original text.\n      // This is motivated by ECMA-262 sections 9.3.1, 9.8.1, 11.1.5, and 11.2.1.\n      //\n      // Here, we test whether 'ToString(ToNumber(name))' is exactly equal to 'name'.\n      // The '+' prefix operator is equivalent here to applying the abstract ToNumber operation.\n      // Applying the 'toString()' method on a number gives us the abstract ToString operation on a number.\n      //\n      // Note that this accepts the values 'Infinity', '-Infinity', and 'NaN', and that this is intentional.\n      // This is desired behavior, because when indexing with them as numeric entities, you are indexing\n      // with the strings '\"Infinity\"', '\"-Infinity\"', and '\"NaN\"' respectively.\n      return (+name).toString() === name;\n    }\n\n    function checkComputedPropertyName(node) {\n      var links = getNodeLinks(node.expression);\n\n      if (!links.resolvedType) {\n        links.resolvedType = checkExpression(node.expression); // This will allow types number, string, symbol or any. It will also allow enums, the unknown\n        // type, and any union of these types (like string | number).\n\n        if (!isTypeAnyOrAllConstituentTypesHaveKind(links.resolvedType, 132\n        /* NumberLike */\n        | 258\n        /* StringLike */\n        | 16777216\n        /* ESSymbol */\n        )) {\n          error(node, ts.Diagnostics.A_computed_property_name_must_be_of_type_string_number_symbol_or_any);\n        } else {\n          checkThatExpressionIsProperSymbolReference(node.expression, links.resolvedType,\n          /*reportError*/\n          true);\n        }\n      }\n\n      return links.resolvedType;\n    }\n\n    function checkObjectLiteral(node, contextualMapper) {\n      var inDestructuringPattern = isAssignmentTarget(node); // Grammar checking\n\n      checkGrammarObjectLiteralExpression(node, inDestructuringPattern);\n      var propertiesTable = {};\n      var propertiesArray = [];\n      var contextualType = getApparentTypeOfContextualType(node);\n      var contextualTypeHasPattern = contextualType && contextualType.pattern && (contextualType.pattern.kind === 164\n      /* ObjectBindingPattern */\n      || contextualType.pattern.kind === 168\n      /* ObjectLiteralExpression */\n      );\n      var typeFlags = 0;\n      var patternWithComputedProperties = false;\n\n      for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {\n        var memberDecl = _a[_i];\n        var member = memberDecl.symbol;\n\n        if (memberDecl.kind === 248\n        /* PropertyAssignment */\n        || memberDecl.kind === 249\n        /* ShorthandPropertyAssignment */\n        || ts.isObjectLiteralMethod(memberDecl)) {\n          var type = void 0;\n\n          if (memberDecl.kind === 248\n          /* PropertyAssignment */\n          ) {\n              type = checkPropertyAssignment(memberDecl, contextualMapper);\n            } else if (memberDecl.kind === 144\n          /* MethodDeclaration */\n          ) {\n              type = checkObjectLiteralMethod(memberDecl, contextualMapper);\n            } else {\n            ts.Debug.assert(memberDecl.kind === 249\n            /* ShorthandPropertyAssignment */\n            );\n            type = checkExpression(memberDecl.name, contextualMapper);\n          }\n\n          typeFlags |= type.flags;\n          var prop = createSymbol(4\n          /* Property */\n          | 67108864\n          /* Transient */\n          | member.flags, member.name);\n\n          if (inDestructuringPattern) {\n            // If object literal is an assignment pattern and if the assignment pattern specifies a default value\n            // for the property, make the property optional.\n            var isOptional = memberDecl.kind === 248\n            /* PropertyAssignment */\n            && hasDefaultValue(memberDecl.initializer) || memberDecl.kind === 249\n            /* ShorthandPropertyAssignment */\n            && memberDecl.objectAssignmentInitializer;\n\n            if (isOptional) {\n              prop.flags |= 536870912\n              /* Optional */\n              ;\n            }\n\n            if (ts.hasDynamicName(memberDecl)) {\n              patternWithComputedProperties = true;\n            }\n          } else if (contextualTypeHasPattern && !(contextualType.flags & 67108864\n          /* ObjectLiteralPatternWithComputedProperties */\n          )) {\n            // If object literal is contextually typed by the implied type of a binding pattern, and if the\n            // binding pattern specifies a default value for the property, make the property optional.\n            var impliedProp = getPropertyOfType(contextualType, member.name);\n\n            if (impliedProp) {\n              prop.flags |= impliedProp.flags & 536870912\n              /* Optional */\n              ;\n            } else if (!compilerOptions.suppressExcessPropertyErrors) {\n              error(memberDecl.name, ts.Diagnostics.Object_literal_may_only_specify_known_properties_and_0_does_not_exist_in_type_1, symbolToString(member), typeToString(contextualType));\n            }\n          }\n\n          prop.declarations = member.declarations;\n          prop.parent = member.parent;\n\n          if (member.valueDeclaration) {\n            prop.valueDeclaration = member.valueDeclaration;\n          }\n\n          prop.type = type;\n          prop.target = member;\n          member = prop;\n        } else {\n          // TypeScript 1.0 spec (April 2014)\n          // A get accessor declaration is processed in the same manner as\n          // an ordinary function declaration(section 6.1) with no parameters.\n          // A set accessor declaration is processed in the same manner\n          // as an ordinary function declaration with a single parameter and a Void return type.\n          ts.Debug.assert(memberDecl.kind === 146\n          /* GetAccessor */\n          || memberDecl.kind === 147\n          /* SetAccessor */\n          );\n          checkAccessorDeclaration(memberDecl);\n        }\n\n        if (!ts.hasDynamicName(memberDecl)) {\n          propertiesTable[member.name] = member;\n        }\n\n        propertiesArray.push(member);\n      } // If object literal is contextually typed by the implied type of a binding pattern, augment the result\n      // type with those properties for which the binding pattern specifies a default value.\n\n\n      if (contextualTypeHasPattern) {\n        for (var _b = 0, _c = getPropertiesOfType(contextualType); _b < _c.length; _b++) {\n          var prop = _c[_b];\n\n          if (!ts.hasProperty(propertiesTable, prop.name)) {\n            if (!(prop.flags & 536870912\n            /* Optional */\n            )) {\n              error(prop.valueDeclaration || prop.bindingElement, ts.Diagnostics.Initializer_provides_no_value_for_this_binding_element_and_the_binding_element_has_no_default_value);\n            }\n\n            propertiesTable[prop.name] = prop;\n            propertiesArray.push(prop);\n          }\n        }\n      }\n\n      var stringIndexType = getIndexType(0\n      /* String */\n      );\n      var numberIndexType = getIndexType(1\n      /* Number */\n      );\n      var result = createAnonymousType(node.symbol, propertiesTable, emptyArray, emptyArray, stringIndexType, numberIndexType);\n      var freshObjectLiteralFlag = compilerOptions.suppressExcessPropertyErrors ? 0 : 1048576\n      /* FreshObjectLiteral */\n      ;\n      result.flags |= 524288\n      /* ObjectLiteral */\n      | 4194304\n      /* ContainsObjectLiteral */\n      | freshObjectLiteralFlag | typeFlags & 14680064\n      /* PropagatingFlags */\n      | (patternWithComputedProperties ? 67108864\n      /* ObjectLiteralPatternWithComputedProperties */\n      : 0);\n\n      if (inDestructuringPattern) {\n        result.pattern = node;\n      }\n\n      return result;\n\n      function getIndexType(kind) {\n        if (contextualType && contextualTypeHasIndexSignature(contextualType, kind)) {\n          var propTypes = [];\n\n          for (var i = 0; i < propertiesArray.length; i++) {\n            var propertyDecl = node.properties[i];\n\n            if (kind === 0\n            /* String */\n            || isNumericName(propertyDecl.name)) {\n              // Do not call getSymbolOfNode(propertyDecl), as that will get the\n              // original symbol for the node. We actually want to get the symbol\n              // created by checkObjectLiteral, since that will be appropriately\n              // contextually typed and resolved.\n              var type = getTypeOfSymbol(propertiesArray[i]);\n\n              if (!ts.contains(propTypes, type)) {\n                propTypes.push(type);\n              }\n            }\n          }\n\n          var result_1 = propTypes.length ? getUnionType(propTypes) : undefinedType;\n          typeFlags |= result_1.flags;\n          return result_1;\n        }\n\n        return undefined;\n      }\n    }\n\n    function checkJsxSelfClosingElement(node) {\n      checkJsxOpeningLikeElement(node);\n      return jsxElementType || anyType;\n    }\n\n    function checkJsxElement(node) {\n      // Check attributes\n      checkJsxOpeningLikeElement(node.openingElement); // Perform resolution on the closing tag so that rename/go to definition/etc work\n\n      getJsxElementTagSymbol(node.closingElement); // Check children\n\n      for (var _i = 0, _a = node.children; _i < _a.length; _i++) {\n        var child = _a[_i];\n\n        switch (child.kind) {\n          case 243\n          /* JsxExpression */\n          :\n            checkJsxExpression(child);\n            break;\n\n          case 236\n          /* JsxElement */\n          :\n            checkJsxElement(child);\n            break;\n\n          case 237\n          /* JsxSelfClosingElement */\n          :\n            checkJsxSelfClosingElement(child);\n            break;\n        }\n      }\n\n      return jsxElementType || anyType;\n    }\n    /**\n     * Returns true iff the JSX element name would be a valid JS identifier, ignoring restrictions about keywords not being identifiers\n     */\n\n\n    function isUnhyphenatedJsxName(name) {\n      // - is the only character supported in JSX attribute names that isn't valid in JavaScript identifiers\n      return name.indexOf(\"-\") < 0;\n    }\n    /**\n     * Returns true iff React would emit this tag name as a string rather than an identifier or qualified name\n     */\n\n\n    function isJsxIntrinsicIdentifier(tagName) {\n      if (tagName.kind === 136\n      /* QualifiedName */\n      ) {\n          return false;\n        } else {\n        return ts.isIntrinsicJsxName(tagName.text);\n      }\n    }\n\n    function checkJsxAttribute(node, elementAttributesType, nameTable) {\n      var correspondingPropType = undefined; // Look up the corresponding property for this attribute\n\n      if (elementAttributesType === emptyObjectType && isUnhyphenatedJsxName(node.name.text)) {\n        // If there is no 'props' property, you may not have non-\"data-\" attributes\n        error(node.parent, ts.Diagnostics.JSX_element_class_does_not_support_attributes_because_it_does_not_have_a_0_property, getJsxElementPropertiesName());\n      } else if (elementAttributesType && !isTypeAny(elementAttributesType)) {\n        var correspondingPropSymbol = getPropertyOfType(elementAttributesType, node.name.text);\n        correspondingPropType = correspondingPropSymbol && getTypeOfSymbol(correspondingPropSymbol);\n\n        if (isUnhyphenatedJsxName(node.name.text)) {\n          // Maybe there's a string indexer?\n          var indexerType = getIndexTypeOfType(elementAttributesType, 0\n          /* String */\n          );\n\n          if (indexerType) {\n            correspondingPropType = indexerType;\n          } else {\n            // If there's no corresponding property with this name, error\n            if (!correspondingPropType) {\n              error(node.name, ts.Diagnostics.Property_0_does_not_exist_on_type_1, node.name.text, typeToString(elementAttributesType));\n              return unknownType;\n            }\n          }\n        }\n      }\n\n      var exprType;\n\n      if (node.initializer) {\n        exprType = checkExpression(node.initializer);\n      } else {\n        // <Elem attr /> is sugar for <Elem attr={true} />\n        exprType = booleanType;\n      }\n\n      if (correspondingPropType) {\n        checkTypeAssignableTo(exprType, correspondingPropType, node);\n      }\n\n      nameTable[node.name.text] = true;\n      return exprType;\n    }\n\n    function checkJsxSpreadAttribute(node, elementAttributesType, nameTable) {\n      var type = checkExpression(node.expression);\n      var props = getPropertiesOfType(type);\n\n      for (var _i = 0, props_2 = props; _i < props_2.length; _i++) {\n        var prop = props_2[_i]; // Is there a corresponding property in the element attributes type? Skip checking of properties\n        // that have already been assigned to, as these are not actually pushed into the resulting type\n\n        if (!nameTable[prop.name]) {\n          var targetPropSym = getPropertyOfType(elementAttributesType, prop.name);\n\n          if (targetPropSym) {\n            var msg = ts.chainDiagnosticMessages(undefined, ts.Diagnostics.Property_0_of_JSX_spread_attribute_is_not_assignable_to_target_property, prop.name);\n            checkTypeAssignableTo(getTypeOfSymbol(prop), getTypeOfSymbol(targetPropSym), node, undefined, msg);\n          }\n\n          nameTable[prop.name] = true;\n        }\n      }\n\n      return type;\n    }\n\n    function getJsxType(name) {\n      if (jsxTypes[name] === undefined) {\n        return jsxTypes[name] = getExportedTypeFromNamespace(JsxNames.JSX, name) || unknownType;\n      }\n\n      return jsxTypes[name];\n    } /// Given a JSX opening element or self-closing element, return the symbol of the property that the tag name points to if\n    /// this is an intrinsic tag. This might be a named\n    /// property of the IntrinsicElements interface, or its string indexer.\n    /// If this is a class-based tag (otherwise returns undefined), returns the symbol of the class\n    /// type or factory function.\n    /// Otherwise, returns unknownSymbol.\n\n\n    function getJsxElementTagSymbol(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedSymbol) {\n        if (isJsxIntrinsicIdentifier(node.tagName)) {\n          links.resolvedSymbol = lookupIntrinsicTag(node);\n        } else {\n          links.resolvedSymbol = lookupClassTag(node);\n        }\n      }\n\n      return links.resolvedSymbol;\n\n      function lookupIntrinsicTag(node) {\n        var intrinsicElementsType = getJsxType(JsxNames.IntrinsicElements);\n\n        if (intrinsicElementsType !== unknownType) {\n          // Property case\n          var intrinsicProp = getPropertyOfType(intrinsicElementsType, node.tagName.text);\n\n          if (intrinsicProp) {\n            links.jsxFlags |= 1\n            /* IntrinsicNamedElement */\n            ;\n            return intrinsicProp;\n          } // Intrinsic string indexer case\n\n\n          var indexSignatureType = getIndexTypeOfType(intrinsicElementsType, 0\n          /* String */\n          );\n\n          if (indexSignatureType) {\n            links.jsxFlags |= 2\n            /* IntrinsicIndexedElement */\n            ;\n            return intrinsicElementsType.symbol;\n          } // Wasn't found\n\n\n          error(node, ts.Diagnostics.Property_0_does_not_exist_on_type_1, node.tagName.text, \"JSX.\" + JsxNames.IntrinsicElements);\n          return unknownSymbol;\n        } else {\n          if (compilerOptions.noImplicitAny) {\n            error(node, ts.Diagnostics.JSX_element_implicitly_has_type_any_because_no_interface_JSX_0_exists, JsxNames.IntrinsicElements);\n          }\n\n          return unknownSymbol;\n        }\n      }\n\n      function lookupClassTag(node) {\n        var valueSymbol = resolveJsxTagName(node); // Look up the value in the current scope\n\n        if (valueSymbol && valueSymbol !== unknownSymbol) {\n          links.jsxFlags |= 4\n          /* ValueElement */\n          ;\n\n          if (valueSymbol.flags & 8388608\n          /* Alias */\n          ) {\n              markAliasSymbolAsReferenced(valueSymbol);\n            }\n        }\n\n        return valueSymbol || unknownSymbol;\n      }\n\n      function resolveJsxTagName(node) {\n        if (node.tagName.kind === 69\n        /* Identifier */\n        ) {\n            var tag = node.tagName;\n            var sym = getResolvedSymbol(tag);\n            return sym.exportSymbol || sym;\n          } else {\n          return checkQualifiedName(node.tagName).symbol;\n        }\n      }\n    }\n    /**\n     * Given a JSX element that is a class element, finds the Element Instance Type. If the\n     * element is not a class element, or the class element type cannot be determined, returns 'undefined'.\n     * For example, in the element <MyClass>, the element instance type is `MyClass` (not `typeof MyClass`).\n     */\n\n\n    function getJsxElementInstanceType(node) {\n      // There is no such thing as an instance type for a non-class element. This\n      // line shouldn't be hit.\n      ts.Debug.assert(!!(getNodeLinks(node).jsxFlags & 4\n      /* ValueElement */\n      ), \"Should not call getJsxElementInstanceType on non-class Element\");\n      var classSymbol = getJsxElementTagSymbol(node);\n\n      if (classSymbol === unknownSymbol) {\n        // Couldn't find the class instance type. Error has already been issued\n        return anyType;\n      }\n\n      var valueType = getTypeOfSymbol(classSymbol);\n\n      if (isTypeAny(valueType)) {\n        // Short-circuit if the class tag is using an element type 'any'\n        return anyType;\n      } // Resolve the signatures, preferring constructors\n\n\n      var signatures = getSignaturesOfType(valueType, 1\n      /* Construct */\n      );\n\n      if (signatures.length === 0) {\n        // No construct signatures, try call signatures\n        signatures = getSignaturesOfType(valueType, 0\n        /* Call */\n        );\n\n        if (signatures.length === 0) {\n          // We found no signatures at all, which is an error\n          error(node.tagName, ts.Diagnostics.JSX_element_type_0_does_not_have_any_construct_or_call_signatures, ts.getTextOfNode(node.tagName));\n          return unknownType;\n        }\n      }\n\n      return getUnionType(signatures.map(getReturnTypeOfSignature));\n    } /// e.g. \"props\" for React.d.ts,\n    /// or 'undefined' if ElementAttributesPropery doesn't exist (which means all\n    ///     non-intrinsic elements' attributes type is 'any'),\n    /// or '' if it has 0 properties (which means every\n    ///     non-instrinsic elements' attributes type is the element instance type)\n\n\n    function getJsxElementPropertiesName() {\n      // JSX\n      var jsxNamespace = getGlobalSymbol(JsxNames.JSX, 1536\n      /* Namespace */\n      ,\n      /*diagnosticMessage*/\n      undefined); // JSX.ElementAttributesProperty [symbol]\n\n      var attribsPropTypeSym = jsxNamespace && getSymbol(jsxNamespace.exports, JsxNames.ElementAttributesPropertyNameContainer, 793056\n      /* Type */\n      ); // JSX.ElementAttributesProperty [type]\n\n      var attribPropType = attribsPropTypeSym && getDeclaredTypeOfSymbol(attribsPropTypeSym); // The properites of JSX.ElementAttributesProperty\n\n      var attribProperties = attribPropType && getPropertiesOfType(attribPropType);\n\n      if (attribProperties) {\n        // Element Attributes has zero properties, so the element attributes type will be the class instance type\n        if (attribProperties.length === 0) {\n          return \"\";\n        } else if (attribProperties.length === 1) {\n          return attribProperties[0].name;\n        } else {\n          error(attribsPropTypeSym.declarations[0], ts.Diagnostics.The_global_type_JSX_0_may_not_have_more_than_one_property, JsxNames.ElementAttributesPropertyNameContainer);\n          return undefined;\n        }\n      } else {\n        // No interface exists, so the element attributes type will be an implicit any\n        return undefined;\n      }\n    }\n    /**\n     * Given an opening/self-closing element, get the 'element attributes type', i.e. the type that tells\n     * us which attributes are valid on a given element.\n     */\n\n\n    function getJsxElementAttributesType(node) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedJsxType) {\n        var sym = getJsxElementTagSymbol(node);\n\n        if (links.jsxFlags & 4\n        /* ValueElement */\n        ) {\n            // Get the element instance type (the result of newing or invoking this tag)\n            var elemInstanceType = getJsxElementInstanceType(node);\n            var elemClassType = getJsxGlobalElementClassType();\n\n            if (!elemClassType || !isTypeAssignableTo(elemInstanceType, elemClassType)) {\n              // Is this is a stateless function component? See if its single signature's return type is\n              // assignable to the JSX Element Type\n              var elemType = getTypeOfSymbol(sym);\n              var callSignatures = elemType && getSignaturesOfType(elemType, 0\n              /* Call */\n              );\n              var callSignature = callSignatures && callSignatures.length > 0 && callSignatures[0];\n              var callReturnType = callSignature && getReturnTypeOfSignature(callSignature);\n              var paramType = callReturnType && (callSignature.parameters.length === 0 ? emptyObjectType : getTypeOfSymbol(callSignature.parameters[0]));\n\n              if (callReturnType && isTypeAssignableTo(callReturnType, jsxElementType)) {\n                // Intersect in JSX.IntrinsicAttributes if it exists\n                var intrinsicAttributes = getJsxType(JsxNames.IntrinsicAttributes);\n\n                if (intrinsicAttributes !== unknownType) {\n                  paramType = intersectTypes(intrinsicAttributes, paramType);\n                }\n\n                return links.resolvedJsxType = paramType;\n              }\n            } // Issue an error if this return type isn't assignable to JSX.ElementClass\n\n\n            if (elemClassType) {\n              checkTypeRelatedTo(elemInstanceType, elemClassType, assignableRelation, node, ts.Diagnostics.JSX_element_type_0_is_not_a_constructor_function_for_JSX_elements);\n            }\n\n            if (isTypeAny(elemInstanceType)) {\n              return links.resolvedJsxType = elemInstanceType;\n            }\n\n            var propsName = getJsxElementPropertiesName();\n\n            if (propsName === undefined) {\n              // There is no type ElementAttributesProperty, return 'any'\n              return links.resolvedJsxType = anyType;\n            } else if (propsName === \"\") {\n              // If there is no e.g. 'props' member in ElementAttributesProperty, use the element class type instead\n              return links.resolvedJsxType = elemInstanceType;\n            } else {\n              var attributesType = getTypeOfPropertyOfType(elemInstanceType, propsName);\n\n              if (!attributesType) {\n                // There is no property named 'props' on this instance type\n                return links.resolvedJsxType = emptyObjectType;\n              } else if (isTypeAny(attributesType) || attributesType === unknownType) {\n                // Props is of type 'any' or unknown\n                return links.resolvedJsxType = attributesType;\n              } else if (attributesType.flags & 16384\n              /* Union */\n              ) {\n                  // Props cannot be a union type\n                  error(node.tagName, ts.Diagnostics.JSX_element_attributes_type_0_may_not_be_a_union_type, typeToString(attributesType));\n                  return links.resolvedJsxType = anyType;\n                } else {\n                // Normal case -- add in IntrinsicClassElements<T> and IntrinsicElements\n                var apparentAttributesType = attributesType;\n                var intrinsicClassAttribs = getJsxType(JsxNames.IntrinsicClassAttributes);\n\n                if (intrinsicClassAttribs !== unknownType) {\n                  var typeParams = getLocalTypeParametersOfClassOrInterfaceOrTypeAlias(intrinsicClassAttribs.symbol);\n\n                  if (typeParams) {\n                    if (typeParams.length === 1) {\n                      apparentAttributesType = intersectTypes(createTypeReference(intrinsicClassAttribs, [elemInstanceType]), apparentAttributesType);\n                    }\n                  } else {\n                    apparentAttributesType = intersectTypes(attributesType, intrinsicClassAttribs);\n                  }\n                }\n\n                var intrinsicAttribs = getJsxType(JsxNames.IntrinsicAttributes);\n\n                if (intrinsicAttribs !== unknownType) {\n                  apparentAttributesType = intersectTypes(intrinsicAttribs, apparentAttributesType);\n                }\n\n                return links.resolvedJsxType = apparentAttributesType;\n              }\n            }\n          } else if (links.jsxFlags & 1\n        /* IntrinsicNamedElement */\n        ) {\n            return links.resolvedJsxType = getTypeOfSymbol(sym);\n          } else if (links.jsxFlags & 2\n        /* IntrinsicIndexedElement */\n        ) {\n            return links.resolvedJsxType = getIndexTypeOfSymbol(sym, 0\n            /* String */\n            );\n          } else {\n          // Resolution failed, so we don't know\n          return links.resolvedJsxType = anyType;\n        }\n      }\n\n      return links.resolvedJsxType;\n    }\n    /**\n     * Given a JSX attribute, returns the symbol for the corresponds property\n     * of the element attributes type. Will return unknownSymbol for attributes\n     * that have no matching element attributes type property.\n     */\n\n\n    function getJsxAttributePropertySymbol(attrib) {\n      var attributesType = getJsxElementAttributesType(attrib.parent);\n      var prop = getPropertyOfType(attributesType, attrib.name.text);\n      return prop || unknownSymbol;\n    }\n\n    function getJsxGlobalElementClassType() {\n      if (!jsxElementClassType) {\n        jsxElementClassType = getExportedTypeFromNamespace(JsxNames.JSX, JsxNames.ElementClass);\n      }\n\n      return jsxElementClassType;\n    } /// Returns all the properties of the Jsx.IntrinsicElements interface\n\n\n    function getJsxIntrinsicTagNames() {\n      var intrinsics = getJsxType(JsxNames.IntrinsicElements);\n      return intrinsics ? getPropertiesOfType(intrinsics) : emptyArray;\n    }\n\n    function checkJsxPreconditions(errorNode) {\n      // Preconditions for using JSX\n      if ((compilerOptions.jsx || 0\n      /* None */\n      ) === 0\n      /* None */\n      ) {\n          error(errorNode, ts.Diagnostics.Cannot_use_JSX_unless_the_jsx_flag_is_provided);\n        }\n\n      if (jsxElementType === undefined) {\n        if (compilerOptions.noImplicitAny) {\n          error(errorNode, ts.Diagnostics.JSX_element_implicitly_has_type_any_because_the_global_type_JSX_Element_does_not_exist);\n        }\n      }\n    }\n\n    function checkJsxOpeningLikeElement(node) {\n      checkGrammarJsxElement(node);\n      checkJsxPreconditions(node); // The reactNamespace symbol should be marked as 'used' so we don't incorrectly elide its import. And if there\n      // is no reactNamespace symbol in scope when targeting React emit, we should issue an error.\n\n      var reactRefErr = compilerOptions.jsx === 2\n      /* React */\n      ? ts.Diagnostics.Cannot_find_name_0 : undefined;\n      var reactNamespace = compilerOptions.reactNamespace ? compilerOptions.reactNamespace : \"React\";\n      var reactSym = resolveName(node.tagName, reactNamespace, 107455\n      /* Value */\n      , reactRefErr, reactNamespace);\n\n      if (reactSym) {\n        getSymbolLinks(reactSym).referenced = true;\n      }\n\n      var targetAttributesType = getJsxElementAttributesType(node);\n      var nameTable = {}; // Process this array in right-to-left order so we know which\n      // attributes (mostly from spreads) are being overwritten and\n      // thus should have their types ignored\n\n      var sawSpreadedAny = false;\n\n      for (var i = node.attributes.length - 1; i >= 0; i--) {\n        if (node.attributes[i].kind === 241\n        /* JsxAttribute */\n        ) {\n            checkJsxAttribute(node.attributes[i], targetAttributesType, nameTable);\n          } else {\n          ts.Debug.assert(node.attributes[i].kind === 242\n          /* JsxSpreadAttribute */\n          );\n          var spreadType = checkJsxSpreadAttribute(node.attributes[i], targetAttributesType, nameTable);\n\n          if (isTypeAny(spreadType)) {\n            sawSpreadedAny = true;\n          }\n        }\n      } // Check that all required properties have been provided. If an 'any'\n      // was spreaded in, though, assume that it provided all required properties\n\n\n      if (targetAttributesType && !sawSpreadedAny) {\n        var targetProperties = getPropertiesOfType(targetAttributesType);\n\n        for (var i = 0; i < targetProperties.length; i++) {\n          if (!(targetProperties[i].flags & 536870912\n          /* Optional */\n          ) && nameTable[targetProperties[i].name] === undefined) {\n            error(node, ts.Diagnostics.Property_0_is_missing_in_type_1, targetProperties[i].name, typeToString(targetAttributesType));\n          }\n        }\n      }\n    }\n\n    function checkJsxExpression(node) {\n      if (node.expression) {\n        return checkExpression(node.expression);\n      } else {\n        return unknownType;\n      }\n    } // If a symbol is a synthesized symbol with no value declaration, we assume it is a property. Example of this are the synthesized\n    // '.prototype' property as well as synthesized tuple index properties.\n\n\n    function getDeclarationKindFromSymbol(s) {\n      return s.valueDeclaration ? s.valueDeclaration.kind : 142\n      /* PropertyDeclaration */\n      ;\n    }\n\n    function getDeclarationFlagsFromSymbol(s) {\n      return s.valueDeclaration ? ts.getCombinedNodeFlags(s.valueDeclaration) : s.flags & 134217728\n      /* Prototype */\n      ? 8\n      /* Public */\n      | 64\n      /* Static */\n      : 0;\n    }\n    /**\n     * Check whether the requested property access is valid.\n     * Returns true if node is a valid property access, and false otherwise.\n     * @param node The node to be checked.\n     * @param left The left hand side of the property access (e.g.: the super in `super.foo`).\n     * @param type The type of left.\n     * @param prop The symbol for the right hand side of the property access.\n     */\n\n\n    function checkClassPropertyAccess(node, left, type, prop) {\n      var flags = getDeclarationFlagsFromSymbol(prop);\n      var declaringClass = getDeclaredTypeOfSymbol(getParentOfSymbol(prop));\n\n      if (left.kind === 95\n      /* SuperKeyword */\n      ) {\n          var errorNode = node.kind === 169\n          /* PropertyAccessExpression */\n          ? node.name : node.right; // TS 1.0 spec (April 2014): 4.8.2\n          // - In a constructor, instance member function, instance member accessor, or\n          //   instance member variable initializer where this references a derived class instance,\n          //   a super property access is permitted and must specify a public instance member function of the base class.\n          // - In a static member function or static member accessor\n          //   where this references the constructor function object of a derived class,\n          //   a super property access is permitted and must specify a public static member function of the base class.\n\n          if (languageVersion < 2\n          /* ES6 */\n          && getDeclarationKindFromSymbol(prop) !== 144\n          /* MethodDeclaration */\n          ) {\n              // `prop` refers to a *property* declared in the super class\n              // rather than a *method*, so it does not satisfy the above criteria.\n              error(errorNode, ts.Diagnostics.Only_public_and_protected_methods_of_the_base_class_are_accessible_via_the_super_keyword);\n              return false;\n            }\n\n          if (flags & 128\n          /* Abstract */\n          ) {\n              // A method cannot be accessed in a super property access if the method is abstract.\n              // This error could mask a private property access error. But, a member\n              // cannot simultaneously be private and abstract, so this will trigger an\n              // additional error elsewhere.\n              error(errorNode, ts.Diagnostics.Abstract_method_0_in_class_1_cannot_be_accessed_via_super_expression, symbolToString(prop), typeToString(declaringClass));\n              return false;\n            }\n        } // Public properties are otherwise accessible.\n\n\n      if (!(flags & (16\n      /* Private */\n      | 32\n      /* Protected */\n      ))) {\n        return true;\n      } // Property is known to be private or protected at this point\n      // Get the declaring and enclosing class instance types\n\n\n      var enclosingClassDeclaration = ts.getContainingClass(node);\n      var enclosingClass = enclosingClassDeclaration ? getDeclaredTypeOfSymbol(getSymbolOfNode(enclosingClassDeclaration)) : undefined; // Private property is accessible if declaring and enclosing class are the same\n\n      if (flags & 16\n      /* Private */\n      ) {\n          if (declaringClass !== enclosingClass) {\n            error(node, ts.Diagnostics.Property_0_is_private_and_only_accessible_within_class_1, symbolToString(prop), typeToString(declaringClass));\n            return false;\n          }\n\n          return true;\n        } // Property is known to be protected at this point\n      // All protected properties of a supertype are accessible in a super access\n\n\n      if (left.kind === 95\n      /* SuperKeyword */\n      ) {\n          return true;\n        } // A protected property is accessible in the declaring class and classes derived from it\n\n\n      if (!enclosingClass || !hasBaseType(enclosingClass, declaringClass)) {\n        error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_within_class_1_and_its_subclasses, symbolToString(prop), typeToString(declaringClass));\n        return false;\n      } // No further restrictions for static properties\n\n\n      if (flags & 64\n      /* Static */\n      ) {\n          return true;\n        } // An instance property must be accessed through an instance of the enclosing class\n\n\n      if (type.flags & 33554432\n      /* ThisType */\n      ) {\n          // get the original type -- represented as the type constraint of the 'this' type\n          type = getConstraintOfTypeParameter(type);\n        } // TODO: why is the first part of this check here?\n\n\n      if (!(getTargetType(type).flags & (1024\n      /* Class */\n      | 2048\n      /* Interface */\n      ) && hasBaseType(type, enclosingClass))) {\n        error(node, ts.Diagnostics.Property_0_is_protected_and_only_accessible_through_an_instance_of_class_1, symbolToString(prop), typeToString(enclosingClass));\n        return false;\n      }\n\n      return true;\n    }\n\n    function checkPropertyAccessExpression(node) {\n      return checkPropertyAccessExpressionOrQualifiedName(node, node.expression, node.name);\n    }\n\n    function checkQualifiedName(node) {\n      return checkPropertyAccessExpressionOrQualifiedName(node, node.left, node.right);\n    }\n\n    function checkPropertyAccessExpressionOrQualifiedName(node, left, right) {\n      var type = checkExpression(left);\n\n      if (isTypeAny(type)) {\n        return type;\n      }\n\n      var apparentType = getApparentType(getWidenedType(type));\n\n      if (apparentType === unknownType) {\n        // handle cases when type is Type parameter with invalid constraint\n        return unknownType;\n      }\n\n      var prop = getPropertyOfType(apparentType, right.text);\n\n      if (!prop) {\n        if (right.text) {\n          error(right, ts.Diagnostics.Property_0_does_not_exist_on_type_1, ts.declarationNameToString(right), typeToString(type.flags & 33554432\n          /* ThisType */\n          ? apparentType : type));\n        }\n\n        return unknownType;\n      }\n\n      getNodeLinks(node).resolvedSymbol = prop;\n\n      if (prop.parent && prop.parent.flags & 32\n      /* Class */\n      ) {\n          checkClassPropertyAccess(node, left, apparentType, prop);\n        }\n\n      return getTypeOfSymbol(prop);\n    }\n\n    function isValidPropertyAccess(node, propertyName) {\n      var left = node.kind === 169\n      /* PropertyAccessExpression */\n      ? node.expression : node.left;\n      var type = checkExpression(left);\n\n      if (type !== unknownType && !isTypeAny(type)) {\n        var prop = getPropertyOfType(getWidenedType(type), propertyName);\n\n        if (prop && prop.parent && prop.parent.flags & 32\n        /* Class */\n        ) {\n            return checkClassPropertyAccess(node, left, type, prop);\n          }\n      }\n\n      return true;\n    }\n    /**\n     * Return the symbol of the for-in variable declared or referenced by the given for-in statement.\n     */\n\n\n    function getForInVariableSymbol(node) {\n      var initializer = node.initializer;\n\n      if (initializer.kind === 215\n      /* VariableDeclarationList */\n      ) {\n          var variable = initializer.declarations[0];\n\n          if (variable && !ts.isBindingPattern(variable.name)) {\n            return getSymbolOfNode(variable);\n          }\n        } else if (initializer.kind === 69\n      /* Identifier */\n      ) {\n          return getResolvedSymbol(initializer);\n        }\n\n      return undefined;\n    }\n    /**\n     * Return true if the given type is considered to have numeric property names.\n     */\n\n\n    function hasNumericPropertyNames(type) {\n      return getIndexTypeOfType(type, 1\n      /* Number */\n      ) && !getIndexTypeOfType(type, 0\n      /* String */\n      );\n    }\n    /**\n     * Return true if given node is an expression consisting of an identifier (possibly parenthesized)\n     * that references a for-in variable for an object with numeric property names.\n     */\n\n\n    function isForInVariableForNumericPropertyNames(expr) {\n      var e = skipParenthesizedNodes(expr);\n\n      if (e.kind === 69\n      /* Identifier */\n      ) {\n          var symbol = getResolvedSymbol(e);\n\n          if (symbol.flags & 3\n          /* Variable */\n          ) {\n              var child = expr;\n              var node = expr.parent;\n\n              while (node) {\n                if (node.kind === 203\n                /* ForInStatement */\n                && child === node.statement && getForInVariableSymbol(node) === symbol && hasNumericPropertyNames(checkExpression(node.expression))) {\n                  return true;\n                }\n\n                child = node;\n                node = node.parent;\n              }\n            }\n        }\n\n      return false;\n    }\n\n    function checkIndexedAccess(node) {\n      // Grammar checking\n      if (!node.argumentExpression) {\n        var sourceFile = ts.getSourceFileOfNode(node);\n\n        if (node.parent.kind === 172\n        /* NewExpression */\n        && node.parent.expression === node) {\n          var start = ts.skipTrivia(sourceFile.text, node.expression.end);\n          var end = node.end;\n          grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.new_T_cannot_be_used_to_create_an_array_Use_new_Array_T_instead);\n        } else {\n          var start = node.end - \"]\".length;\n          var end = node.end;\n          grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.Expression_expected);\n        }\n      } // Obtain base constraint such that we can bail out if the constraint is an unknown type\n\n\n      var objectType = getApparentType(checkExpression(node.expression));\n      var indexType = node.argumentExpression ? checkExpression(node.argumentExpression) : unknownType;\n\n      if (objectType === unknownType) {\n        return unknownType;\n      }\n\n      var isConstEnum = isConstEnumObjectType(objectType);\n\n      if (isConstEnum && (!node.argumentExpression || node.argumentExpression.kind !== 9\n      /* StringLiteral */\n      )) {\n        error(node.argumentExpression, ts.Diagnostics.A_const_enum_member_can_only_be_accessed_using_a_string_literal);\n        return unknownType;\n      } // TypeScript 1.0 spec (April 2014): 4.10 Property Access\n      // - If IndexExpr is a string literal or a numeric literal and ObjExpr's apparent type has a property with the name\n      //    given by that literal(converted to its string representation in the case of a numeric literal), the property access is of the type of that property.\n      // - Otherwise, if ObjExpr's apparent type has a numeric index signature and IndexExpr is of type Any, the Number primitive type, or an enum type,\n      //    the property access is of the type of that index signature.\n      // - Otherwise, if ObjExpr's apparent type has a string index signature and IndexExpr is of type Any, the String or Number primitive type, or an enum type,\n      //    the property access is of the type of that index signature.\n      // - Otherwise, if IndexExpr is of type Any, the String or Number primitive type, or an enum type, the property access is of type Any.\n      // See if we can index as a property.\n\n\n      if (node.argumentExpression) {\n        var name_11 = getPropertyNameForIndexedAccess(node.argumentExpression, indexType);\n\n        if (name_11 !== undefined) {\n          var prop = getPropertyOfType(objectType, name_11);\n\n          if (prop) {\n            getNodeLinks(node).resolvedSymbol = prop;\n            return getTypeOfSymbol(prop);\n          } else if (isConstEnum) {\n            error(node.argumentExpression, ts.Diagnostics.Property_0_does_not_exist_on_const_enum_1, name_11, symbolToString(objectType.symbol));\n            return unknownType;\n          }\n        }\n      } // Check for compatible indexer types.\n\n\n      if (isTypeAnyOrAllConstituentTypesHaveKind(indexType, 258\n      /* StringLike */\n      | 132\n      /* NumberLike */\n      | 16777216\n      /* ESSymbol */\n      )) {\n        // Try to use a number indexer.\n        if (isTypeAnyOrAllConstituentTypesHaveKind(indexType, 132\n        /* NumberLike */\n        ) || isForInVariableForNumericPropertyNames(node.argumentExpression)) {\n          var numberIndexType = getIndexTypeOfType(objectType, 1\n          /* Number */\n          );\n\n          if (numberIndexType) {\n            return numberIndexType;\n          }\n        } // Try to use string indexing.\n\n\n        var stringIndexType = getIndexTypeOfType(objectType, 0\n        /* String */\n        );\n\n        if (stringIndexType) {\n          return stringIndexType;\n        } // Fall back to any.\n\n\n        if (compilerOptions.noImplicitAny && !compilerOptions.suppressImplicitAnyIndexErrors && !isTypeAny(objectType)) {\n          error(node, getIndexTypeOfType(objectType, 1\n          /* Number */\n          ) ? ts.Diagnostics.Element_implicitly_has_an_any_type_because_index_expression_is_not_of_type_number : ts.Diagnostics.Index_signature_of_object_type_implicitly_has_an_any_type);\n        }\n\n        return anyType;\n      } // REVIEW: Users should know the type that was actually used.\n\n\n      error(node, ts.Diagnostics.An_index_expression_argument_must_be_of_type_string_number_symbol_or_any);\n      return unknownType;\n    }\n    /**\n     * If indexArgumentExpression is a string literal or number literal, returns its text.\n     * If indexArgumentExpression is a constant value, returns its string value.\n     * If indexArgumentExpression is a well known symbol, returns the property name corresponding\n     *    to this symbol, as long as it is a proper symbol reference.\n     * Otherwise, returns undefined.\n     */\n\n\n    function getPropertyNameForIndexedAccess(indexArgumentExpression, indexArgumentType) {\n      if (indexArgumentExpression.kind === 9\n      /* StringLiteral */\n      || indexArgumentExpression.kind === 8\n      /* NumericLiteral */\n      ) {\n          return indexArgumentExpression.text;\n        }\n\n      if (indexArgumentExpression.kind === 170\n      /* ElementAccessExpression */\n      || indexArgumentExpression.kind === 169\n      /* PropertyAccessExpression */\n      ) {\n          var value = getConstantValue(indexArgumentExpression);\n\n          if (value !== undefined) {\n            return value.toString();\n          }\n        }\n\n      if (checkThatExpressionIsProperSymbolReference(indexArgumentExpression, indexArgumentType,\n      /*reportError*/\n      false)) {\n        var rightHandSideName = indexArgumentExpression.name.text;\n        return ts.getPropertyNameForKnownSymbolName(rightHandSideName);\n      }\n\n      return undefined;\n    }\n    /**\n     * A proper symbol reference requires the following:\n     *   1. The property access denotes a property that exists\n     *   2. The expression is of the form Symbol.<identifier>\n     *   3. The property access is of the primitive type symbol.\n     *   4. Symbol in this context resolves to the global Symbol object\n     */\n\n\n    function checkThatExpressionIsProperSymbolReference(expression, expressionType, reportError) {\n      if (expressionType === unknownType) {\n        // There is already an error, so no need to report one.\n        return false;\n      }\n\n      if (!ts.isWellKnownSymbolSyntactically(expression)) {\n        return false;\n      } // Make sure the property type is the primitive symbol type\n\n\n      if ((expressionType.flags & 16777216\n      /* ESSymbol */\n      ) === 0) {\n        if (reportError) {\n          error(expression, ts.Diagnostics.A_computed_property_name_of_the_form_0_must_be_of_type_symbol, ts.getTextOfNode(expression));\n        }\n\n        return false;\n      } // The name is Symbol.<someName>, so make sure Symbol actually resolves to the\n      // global Symbol object\n\n\n      var leftHandSide = expression.expression;\n      var leftHandSideSymbol = getResolvedSymbol(leftHandSide);\n\n      if (!leftHandSideSymbol) {\n        return false;\n      }\n\n      var globalESSymbol = getGlobalESSymbolConstructorSymbol();\n\n      if (!globalESSymbol) {\n        // Already errored when we tried to look up the symbol\n        return false;\n      }\n\n      if (leftHandSideSymbol !== globalESSymbol) {\n        if (reportError) {\n          error(leftHandSide, ts.Diagnostics.Symbol_reference_does_not_refer_to_the_global_Symbol_constructor_object);\n        }\n\n        return false;\n      }\n\n      return true;\n    }\n\n    function resolveUntypedCall(node) {\n      if (node.kind === 173\n      /* TaggedTemplateExpression */\n      ) {\n          checkExpression(node.template);\n        } else if (node.kind !== 140\n      /* Decorator */\n      ) {\n          ts.forEach(node.arguments, function (argument) {\n            checkExpression(argument);\n          });\n        }\n\n      return anySignature;\n    }\n\n    function resolveErrorCall(node) {\n      resolveUntypedCall(node);\n      return unknownSignature;\n    } // Re-order candidate signatures into the result array. Assumes the result array to be empty.\n    // The candidate list orders groups in reverse, but within a group signatures are kept in declaration order\n    // A nit here is that we reorder only signatures that belong to the same symbol,\n    // so order how inherited signatures are processed is still preserved.\n    // interface A { (x: string): void }\n    // interface B extends A { (x: 'foo'): string }\n    // const b: B;\n    // b('foo') // <- here overloads should be processed as [(x:'foo'): string, (x: string): void]\n\n\n    function reorderCandidates(signatures, result) {\n      var lastParent;\n      var lastSymbol;\n      var cutoffIndex = 0;\n      var index;\n      var specializedIndex = -1;\n      var spliceIndex;\n      ts.Debug.assert(!result.length);\n\n      for (var _i = 0, signatures_2 = signatures; _i < signatures_2.length; _i++) {\n        var signature = signatures_2[_i];\n        var symbol = signature.declaration && getSymbolOfNode(signature.declaration);\n        var parent_6 = signature.declaration && signature.declaration.parent;\n\n        if (!lastSymbol || symbol === lastSymbol) {\n          if (lastParent && parent_6 === lastParent) {\n            index++;\n          } else {\n            lastParent = parent_6;\n            index = cutoffIndex;\n          }\n        } else {\n          // current declaration belongs to a different symbol\n          // set cutoffIndex so re-orderings in the future won't change result set from 0 to cutoffIndex\n          index = cutoffIndex = result.length;\n          lastParent = parent_6;\n        }\n\n        lastSymbol = symbol; // specialized signatures always need to be placed before non-specialized signatures regardless\n        // of the cutoff position; see GH#1133\n\n        if (signature.hasStringLiterals) {\n          specializedIndex++;\n          spliceIndex = specializedIndex; // The cutoff index always needs to be greater than or equal to the specialized signature index\n          // in order to prevent non-specialized signatures from being added before a specialized\n          // signature.\n\n          cutoffIndex++;\n        } else {\n          spliceIndex = index;\n        }\n\n        result.splice(spliceIndex, 0, signature);\n      }\n    }\n\n    function getSpreadArgumentIndex(args) {\n      for (var i = 0; i < args.length; i++) {\n        var arg = args[i];\n\n        if (arg && arg.kind === 188\n        /* SpreadElementExpression */\n        ) {\n            return i;\n          }\n      }\n\n      return -1;\n    }\n\n    function hasCorrectArity(node, args, signature) {\n      var adjustedArgCount; // Apparent number of arguments we will have in this call\n\n      var typeArguments; // Type arguments (undefined if none)\n\n      var callIsIncomplete; // In incomplete call we want to be lenient when we have too few arguments\n\n      var isDecorator;\n      var spreadArgIndex = -1;\n\n      if (node.kind === 173\n      /* TaggedTemplateExpression */\n      ) {\n          var tagExpression = node; // Even if the call is incomplete, we'll have a missing expression as our last argument,\n          // so we can say the count is just the arg list length\n\n          adjustedArgCount = args.length;\n          typeArguments = undefined;\n\n          if (tagExpression.template.kind === 186\n          /* TemplateExpression */\n          ) {\n              // If a tagged template expression lacks a tail literal, the call is incomplete.\n              // Specifically, a template only can end in a TemplateTail or a Missing literal.\n              var templateExpression = tagExpression.template;\n              var lastSpan = ts.lastOrUndefined(templateExpression.templateSpans);\n              ts.Debug.assert(lastSpan !== undefined); // we should always have at least one span.\n\n              callIsIncomplete = ts.nodeIsMissing(lastSpan.literal) || !!lastSpan.literal.isUnterminated;\n            } else {\n            // If the template didn't end in a backtick, or its beginning occurred right prior to EOF,\n            // then this might actually turn out to be a TemplateHead in the future;\n            // so we consider the call to be incomplete.\n            var templateLiteral = tagExpression.template;\n            ts.Debug.assert(templateLiteral.kind === 11\n            /* NoSubstitutionTemplateLiteral */\n            );\n            callIsIncomplete = !!templateLiteral.isUnterminated;\n          }\n        } else if (node.kind === 140\n      /* Decorator */\n      ) {\n          isDecorator = true;\n          typeArguments = undefined;\n          adjustedArgCount = getEffectiveArgumentCount(node,\n          /*args*/\n          undefined, signature);\n        } else {\n        var callExpression = node;\n\n        if (!callExpression.arguments) {\n          // This only happens when we have something of the form: 'new C'\n          ts.Debug.assert(callExpression.kind === 172\n          /* NewExpression */\n          );\n          return signature.minArgumentCount === 0;\n        } // For IDE scenarios we may have an incomplete call, so a trailing comma is tantamount to adding another argument.\n\n\n        adjustedArgCount = callExpression.arguments.hasTrailingComma ? args.length + 1 : args.length; // If we are missing the close paren, the call is incomplete.\n\n        callIsIncomplete = callExpression.arguments.end === callExpression.end;\n        typeArguments = callExpression.typeArguments;\n        spreadArgIndex = getSpreadArgumentIndex(args);\n      } // If the user supplied type arguments, but the number of type arguments does not match\n      // the declared number of type parameters, the call has an incorrect arity.\n\n\n      var hasRightNumberOfTypeArgs = !typeArguments || signature.typeParameters && typeArguments.length === signature.typeParameters.length;\n\n      if (!hasRightNumberOfTypeArgs) {\n        return false;\n      } // If spread arguments are present, check that they correspond to a rest parameter. If so, no\n      // further checking is necessary.\n\n\n      if (spreadArgIndex >= 0) {\n        return isRestParameterIndex(signature, spreadArgIndex);\n      } // Too many arguments implies incorrect arity.\n\n\n      if (!signature.hasRestParameter && adjustedArgCount > signature.parameters.length) {\n        return false;\n      } // If the call is incomplete, we should skip the lower bound check.\n\n\n      var hasEnoughArguments = adjustedArgCount >= signature.minArgumentCount;\n      return callIsIncomplete || hasEnoughArguments;\n    } // If type has a single call signature and no other members, return that signature. Otherwise, return undefined.\n\n\n    function getSingleCallSignature(type) {\n      if (type.flags & 80896\n      /* ObjectType */\n      ) {\n          var resolved = resolveStructuredTypeMembers(type);\n\n          if (resolved.callSignatures.length === 1 && resolved.constructSignatures.length === 0 && resolved.properties.length === 0 && !resolved.stringIndexType && !resolved.numberIndexType) {\n            return resolved.callSignatures[0];\n          }\n        }\n\n      return undefined;\n    } // Instantiate a generic signature in the context of a non-generic signature (section 3.8.5 in TypeScript spec)\n\n\n    function instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper) {\n      var context = createInferenceContext(signature.typeParameters,\n      /*inferUnionTypes*/\n      true);\n      forEachMatchingParameterType(contextualSignature, signature, function (source, target) {\n        // Type parameters from outer context referenced by source type are fixed by instantiation of the source type\n        inferTypes(context, instantiateType(source, contextualMapper), target);\n      });\n      return getSignatureInstantiation(signature, getInferredTypes(context));\n    }\n\n    function inferTypeArguments(node, signature, args, excludeArgument, context) {\n      var typeParameters = signature.typeParameters;\n      var inferenceMapper = getInferenceMapper(context); // Clear out all the inference results from the last time inferTypeArguments was called on this context\n\n      for (var i = 0; i < typeParameters.length; i++) {\n        // As an optimization, we don't have to clear (and later recompute) inferred types\n        // for type parameters that have already been fixed on the previous call to inferTypeArguments.\n        // It would be just as correct to reset all of them. But then we'd be repeating the same work\n        // for the type parameters that were fixed, namely the work done by getInferredType.\n        if (!context.inferences[i].isFixed) {\n          context.inferredTypes[i] = undefined;\n        }\n      } // On this call to inferTypeArguments, we may get more inferences for certain type parameters that were not\n      // fixed last time. This means that a type parameter that failed inference last time may succeed this time,\n      // or vice versa. Therefore, the failedTypeParameterIndex is useless if it points to an unfixed type parameter,\n      // because it may change. So here we reset it. However, getInferredType will not revisit any type parameters\n      // that were previously fixed. So if a fixed type parameter failed previously, it will fail again because\n      // it will contain the exact same set of inferences. So if we reset the index from a fixed type parameter,\n      // we will lose information that we won't recover this time around.\n\n\n      if (context.failedTypeParameterIndex !== undefined && !context.inferences[context.failedTypeParameterIndex].isFixed) {\n        context.failedTypeParameterIndex = undefined;\n      } // We perform two passes over the arguments. In the first pass we infer from all arguments, but use\n      // wildcards for all context sensitive function expressions.\n\n\n      var argCount = getEffectiveArgumentCount(node, args, signature);\n\n      for (var i = 0; i < argCount; i++) {\n        var arg = getEffectiveArgument(node, args, i); // If the effective argument is 'undefined', then it is an argument that is present but is synthetic.\n\n        if (arg === undefined || arg.kind !== 190\n        /* OmittedExpression */\n        ) {\n            var paramType = getTypeAtPosition(signature, i);\n            var argType = getEffectiveArgumentType(node, i, arg); // If the effective argument type is 'undefined', there is no synthetic type\n            // for the argument. In that case, we should check the argument.\n\n            if (argType === undefined) {\n              // For context sensitive arguments we pass the identityMapper, which is a signal to treat all\n              // context sensitive function expressions as wildcards\n              var mapper = excludeArgument && excludeArgument[i] !== undefined ? identityMapper : inferenceMapper;\n              argType = checkExpressionWithContextualType(arg, paramType, mapper);\n            }\n\n            inferTypes(context, argType, paramType);\n          }\n      } // In the second pass we visit only context sensitive arguments, and only those that aren't excluded, this\n      // time treating function expressions normally (which may cause previously inferred type arguments to be fixed\n      // as we construct types for contextually typed parameters)\n      // Decorators will not have `excludeArgument`, as their arguments cannot be contextually typed.\n      // Tagged template expressions will always have `undefined` for `excludeArgument[0]`.\n\n\n      if (excludeArgument) {\n        for (var i = 0; i < argCount; i++) {\n          // No need to check for omitted args and template expressions, their exlusion value is always undefined\n          if (excludeArgument[i] === false) {\n            var arg = args[i];\n            var paramType = getTypeAtPosition(signature, i);\n            inferTypes(context, checkExpressionWithContextualType(arg, paramType, inferenceMapper), paramType);\n          }\n        }\n      }\n\n      getInferredTypes(context);\n    }\n\n    function checkTypeArguments(signature, typeArgumentNodes, typeArgumentTypes, reportErrors, headMessage) {\n      var typeParameters = signature.typeParameters;\n      var typeArgumentsAreAssignable = true;\n      var mapper;\n\n      for (var i = 0; i < typeParameters.length; i++) {\n        if (typeArgumentsAreAssignable\n        /* so far */\n        ) {\n            var constraint = getConstraintOfTypeParameter(typeParameters[i]);\n\n            if (constraint) {\n              var errorInfo = void 0;\n              var typeArgumentHeadMessage = ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1;\n\n              if (reportErrors && headMessage) {\n                errorInfo = ts.chainDiagnosticMessages(errorInfo, typeArgumentHeadMessage);\n                typeArgumentHeadMessage = headMessage;\n              }\n\n              if (!mapper) {\n                mapper = createTypeMapper(typeParameters, typeArgumentTypes);\n              }\n\n              var typeArgument = typeArgumentTypes[i];\n              typeArgumentsAreAssignable = checkTypeAssignableTo(typeArgument, getTypeWithThisArgument(instantiateType(constraint, mapper), typeArgument), reportErrors ? typeArgumentNodes[i] : undefined, typeArgumentHeadMessage, errorInfo);\n            }\n          }\n      }\n\n      return typeArgumentsAreAssignable;\n    }\n\n    function checkApplicableSignature(node, args, signature, relation, excludeArgument, reportErrors) {\n      var argCount = getEffectiveArgumentCount(node, args, signature);\n\n      for (var i = 0; i < argCount; i++) {\n        var arg = getEffectiveArgument(node, args, i); // If the effective argument is 'undefined', then it is an argument that is present but is synthetic.\n\n        if (arg === undefined || arg.kind !== 190\n        /* OmittedExpression */\n        ) {\n            // Check spread elements against rest type (from arity check we know spread argument corresponds to a rest parameter)\n            var paramType = getTypeAtPosition(signature, i);\n            var argType = getEffectiveArgumentType(node, i, arg); // If the effective argument type is 'undefined', there is no synthetic type\n            // for the argument. In that case, we should check the argument.\n\n            if (argType === undefined) {\n              argType = arg.kind === 9\n              /* StringLiteral */\n              && !reportErrors ? getStringLiteralTypeForText(arg.text) : checkExpressionWithContextualType(arg, paramType, excludeArgument && excludeArgument[i] ? identityMapper : undefined);\n            } // Use argument expression as error location when reporting errors\n\n\n            var errorNode = reportErrors ? getEffectiveArgumentErrorNode(node, i, arg) : undefined;\n            var headMessage = ts.Diagnostics.Argument_of_type_0_is_not_assignable_to_parameter_of_type_1;\n\n            if (!checkTypeRelatedTo(argType, paramType, relation, errorNode, headMessage)) {\n              return false;\n            }\n          }\n      }\n\n      return true;\n    }\n    /**\n     * Returns the effective arguments for an expression that works like a function invocation.\n     *\n     * If 'node' is a CallExpression or a NewExpression, then its argument list is returned.\n     * If 'node' is a TaggedTemplateExpression, a new argument list is constructed from the substitution\n     *    expressions, where the first element of the list is `undefined`.\n     * If 'node' is a Decorator, the argument list will be `undefined`, and its arguments and types\n     *    will be supplied from calls to `getEffectiveArgumentCount` and `getEffectiveArgumentType`.\n     */\n\n\n    function getEffectiveCallArguments(node) {\n      var args;\n\n      if (node.kind === 173\n      /* TaggedTemplateExpression */\n      ) {\n          var template = node.template;\n          args = [undefined];\n\n          if (template.kind === 186\n          /* TemplateExpression */\n          ) {\n              ts.forEach(template.templateSpans, function (span) {\n                args.push(span.expression);\n              });\n            }\n        } else if (node.kind === 140\n      /* Decorator */\n      ) {\n          // For a decorator, we return undefined as we will determine\n          // the number and types of arguments for a decorator using\n          // `getEffectiveArgumentCount` and `getEffectiveArgumentType` below.\n          return undefined;\n        } else {\n        args = node.arguments || emptyArray;\n      }\n\n      return args;\n    }\n    /**\n      * Returns the effective argument count for a node that works like a function invocation.\n      * If 'node' is a Decorator, the number of arguments is derived from the decoration\n      *    target and the signature:\n      *    If 'node.target' is a class declaration or class expression, the effective argument\n      *       count is 1.\n      *    If 'node.target' is a parameter declaration, the effective argument count is 3.\n      *    If 'node.target' is a property declaration, the effective argument count is 2.\n      *    If 'node.target' is a method or accessor declaration, the effective argument count\n      *       is 3, although it can be 2 if the signature only accepts two arguments, allowing\n      *       us to match a property decorator.\n      * Otherwise, the argument count is the length of the 'args' array.\n      */\n\n\n    function getEffectiveArgumentCount(node, args, signature) {\n      if (node.kind === 140\n      /* Decorator */\n      ) {\n          switch (node.parent.kind) {\n            case 217\n            /* ClassDeclaration */\n            :\n            case 189\n            /* ClassExpression */\n            :\n              // A class decorator will have one argument (see `ClassDecorator` in core.d.ts)\n              return 1;\n\n            case 142\n            /* PropertyDeclaration */\n            :\n              // A property declaration decorator will have two arguments (see\n              // `PropertyDecorator` in core.d.ts)\n              return 2;\n\n            case 144\n            /* MethodDeclaration */\n            :\n            case 146\n            /* GetAccessor */\n            :\n            case 147\n            /* SetAccessor */\n            :\n              // A method or accessor declaration decorator will have two or three arguments (see\n              // `PropertyDecorator` and `MethodDecorator` in core.d.ts)\n              // If we are emitting decorators for ES3, we will only pass two arguments.\n              if (languageVersion === 0\n              /* ES3 */\n              ) {\n                  return 2;\n                } // If the method decorator signature only accepts a target and a key, we will only\n              // type check those arguments.\n\n\n              return signature.parameters.length >= 3 ? 3 : 2;\n\n            case 139\n            /* Parameter */\n            :\n              // A parameter declaration decorator will have three arguments (see\n              // `ParameterDecorator` in core.d.ts)\n              return 3;\n          }\n        } else {\n        return args.length;\n      }\n    }\n    /**\n      * Returns the effective type of the first argument to a decorator.\n      * If 'node' is a class declaration or class expression, the effective argument type\n      *    is the type of the static side of the class.\n      * If 'node' is a parameter declaration, the effective argument type is either the type\n      *    of the static or instance side of the class for the parameter's parent method,\n      *    depending on whether the method is declared static.\n      *    For a constructor, the type is always the type of the static side of the class.\n      * If 'node' is a property, method, or accessor declaration, the effective argument\n      *    type is the type of the static or instance side of the parent class for class\n      *    element, depending on whether the element is declared static.\n      */\n\n\n    function getEffectiveDecoratorFirstArgumentType(node) {\n      // The first argument to a decorator is its `target`.\n      if (node.kind === 217\n      /* ClassDeclaration */\n      ) {\n          // For a class decorator, the `target` is the type of the class (e.g. the\n          // \"static\" or \"constructor\" side of the class)\n          var classSymbol = getSymbolOfNode(node);\n          return getTypeOfSymbol(classSymbol);\n        }\n\n      if (node.kind === 139\n      /* Parameter */\n      ) {\n          // For a parameter decorator, the `target` is the parent type of the\n          // parameter's containing method.\n          node = node.parent;\n\n          if (node.kind === 145\n          /* Constructor */\n          ) {\n              var classSymbol = getSymbolOfNode(node);\n              return getTypeOfSymbol(classSymbol);\n            }\n        }\n\n      if (node.kind === 142\n      /* PropertyDeclaration */\n      || node.kind === 144\n      /* MethodDeclaration */\n      || node.kind === 146\n      /* GetAccessor */\n      || node.kind === 147\n      /* SetAccessor */\n      ) {\n          // For a property or method decorator, the `target` is the\n          // \"static\"-side type of the parent of the member if the member is\n          // declared \"static\"; otherwise, it is the \"instance\"-side type of the\n          // parent of the member.\n          return getParentTypeOfClassElement(node);\n        }\n\n      ts.Debug.fail(\"Unsupported decorator target.\");\n      return unknownType;\n    }\n    /**\n      * Returns the effective type for the second argument to a decorator.\n      * If 'node' is a parameter, its effective argument type is one of the following:\n      *    If 'node.parent' is a constructor, the effective argument type is 'any', as we\n      *       will emit `undefined`.\n      *    If 'node.parent' is a member with an identifier, numeric, or string literal name,\n      *       the effective argument type will be a string literal type for the member name.\n      *    If 'node.parent' is a computed property name, the effective argument type will\n      *       either be a symbol type or the string type.\n      * If 'node' is a member with an identifier, numeric, or string literal name, the\n      *    effective argument type will be a string literal type for the member name.\n      * If 'node' is a computed property name, the effective argument type will either\n      *    be a symbol type or the string type.\n      * A class decorator does not have a second argument type.\n      */\n\n\n    function getEffectiveDecoratorSecondArgumentType(node) {\n      // The second argument to a decorator is its `propertyKey`\n      if (node.kind === 217\n      /* ClassDeclaration */\n      ) {\n          ts.Debug.fail(\"Class decorators should not have a second synthetic argument.\");\n          return unknownType;\n        }\n\n      if (node.kind === 139\n      /* Parameter */\n      ) {\n          node = node.parent;\n\n          if (node.kind === 145\n          /* Constructor */\n          ) {\n              // For a constructor parameter decorator, the `propertyKey` will be `undefined`.\n              return anyType;\n            }\n        }\n\n      if (node.kind === 142\n      /* PropertyDeclaration */\n      || node.kind === 144\n      /* MethodDeclaration */\n      || node.kind === 146\n      /* GetAccessor */\n      || node.kind === 147\n      /* SetAccessor */\n      ) {\n          // The `propertyKey` for a property or method decorator will be a\n          // string literal type if the member name is an identifier, number, or string;\n          // otherwise, if the member name is a computed property name it will\n          // be either string or symbol.\n          var element = node;\n\n          switch (element.name.kind) {\n            case 69\n            /* Identifier */\n            :\n            case 8\n            /* NumericLiteral */\n            :\n            case 9\n            /* StringLiteral */\n            :\n              return getStringLiteralTypeForText(element.name.text);\n\n            case 137\n            /* ComputedPropertyName */\n            :\n              var nameType = checkComputedPropertyName(element.name);\n\n              if (allConstituentTypesHaveKind(nameType, 16777216\n              /* ESSymbol */\n              )) {\n                return nameType;\n              } else {\n                return stringType;\n              }\n\n            default:\n              ts.Debug.fail(\"Unsupported property name.\");\n              return unknownType;\n          }\n        }\n\n      ts.Debug.fail(\"Unsupported decorator target.\");\n      return unknownType;\n    }\n    /**\n      * Returns the effective argument type for the third argument to a decorator.\n      * If 'node' is a parameter, the effective argument type is the number type.\n      * If 'node' is a method or accessor, the effective argument type is a\n      *    `TypedPropertyDescriptor<T>` instantiated with the type of the member.\n      * Class and property decorators do not have a third effective argument.\n      */\n\n\n    function getEffectiveDecoratorThirdArgumentType(node) {\n      // The third argument to a decorator is either its `descriptor` for a method decorator\n      // or its `parameterIndex` for a paramter decorator\n      if (node.kind === 217\n      /* ClassDeclaration */\n      ) {\n          ts.Debug.fail(\"Class decorators should not have a third synthetic argument.\");\n          return unknownType;\n        }\n\n      if (node.kind === 139\n      /* Parameter */\n      ) {\n          // The `parameterIndex` for a parameter decorator is always a number\n          return numberType;\n        }\n\n      if (node.kind === 142\n      /* PropertyDeclaration */\n      ) {\n          ts.Debug.fail(\"Property decorators should not have a third synthetic argument.\");\n          return unknownType;\n        }\n\n      if (node.kind === 144\n      /* MethodDeclaration */\n      || node.kind === 146\n      /* GetAccessor */\n      || node.kind === 147\n      /* SetAccessor */\n      ) {\n          // The `descriptor` for a method decorator will be a `TypedPropertyDescriptor<T>`\n          // for the type of the member.\n          var propertyType = getTypeOfNode(node);\n          return createTypedPropertyDescriptorType(propertyType);\n        }\n\n      ts.Debug.fail(\"Unsupported decorator target.\");\n      return unknownType;\n    }\n    /**\n      * Returns the effective argument type for the provided argument to a decorator.\n      */\n\n\n    function getEffectiveDecoratorArgumentType(node, argIndex) {\n      if (argIndex === 0) {\n        return getEffectiveDecoratorFirstArgumentType(node.parent);\n      } else if (argIndex === 1) {\n        return getEffectiveDecoratorSecondArgumentType(node.parent);\n      } else if (argIndex === 2) {\n        return getEffectiveDecoratorThirdArgumentType(node.parent);\n      }\n\n      ts.Debug.fail(\"Decorators should not have a fourth synthetic argument.\");\n      return unknownType;\n    }\n    /**\n      * Gets the effective argument type for an argument in a call expression.\n      */\n\n\n    function getEffectiveArgumentType(node, argIndex, arg) {\n      // Decorators provide special arguments, a tagged template expression provides\n      // a special first argument, and string literals get string literal types\n      // unless we're reporting errors\n      if (node.kind === 140\n      /* Decorator */\n      ) {\n          return getEffectiveDecoratorArgumentType(node, argIndex);\n        } else if (argIndex === 0 && node.kind === 173\n      /* TaggedTemplateExpression */\n      ) {\n          return globalTemplateStringsArrayType;\n        } // This is not a synthetic argument, so we return 'undefined'\n      // to signal that the caller needs to check the argument.\n\n\n      return undefined;\n    }\n    /**\n      * Gets the effective argument expression for an argument in a call expression.\n      */\n\n\n    function getEffectiveArgument(node, args, argIndex) {\n      // For a decorator or the first argument of a tagged template expression we return undefined.\n      if (node.kind === 140\n      /* Decorator */\n      || argIndex === 0 && node.kind === 173\n      /* TaggedTemplateExpression */\n      ) {\n        return undefined;\n      }\n\n      return args[argIndex];\n    }\n    /**\n      * Gets the error node to use when reporting errors for an effective argument.\n      */\n\n\n    function getEffectiveArgumentErrorNode(node, argIndex, arg) {\n      if (node.kind === 140\n      /* Decorator */\n      ) {\n          // For a decorator, we use the expression of the decorator for error reporting.\n          return node.expression;\n        } else if (argIndex === 0 && node.kind === 173\n      /* TaggedTemplateExpression */\n      ) {\n          // For a the first argument of a tagged template expression, we use the template of the tag for error reporting.\n          return node.template;\n        } else {\n        return arg;\n      }\n    }\n\n    function resolveCall(node, signatures, candidatesOutArray, headMessage) {\n      var isTaggedTemplate = node.kind === 173\n      /* TaggedTemplateExpression */\n      ;\n      var isDecorator = node.kind === 140\n      /* Decorator */\n      ;\n      var typeArguments;\n\n      if (!isTaggedTemplate && !isDecorator) {\n        typeArguments = node.typeArguments; // We already perform checking on the type arguments on the class declaration itself.\n\n        if (node.expression.kind !== 95\n        /* SuperKeyword */\n        ) {\n            ts.forEach(typeArguments, checkSourceElement);\n          }\n      }\n\n      var candidates = candidatesOutArray || []; // reorderCandidates fills up the candidates array directly\n\n      reorderCandidates(signatures, candidates);\n\n      if (!candidates.length) {\n        reportError(ts.Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);\n        return resolveErrorCall(node);\n      }\n\n      var args = getEffectiveCallArguments(node); // The following applies to any value of 'excludeArgument[i]':\n      //    - true:      the argument at 'i' is susceptible to a one-time permanent contextual typing.\n      //    - undefined: the argument at 'i' is *not* susceptible to permanent contextual typing.\n      //    - false:     the argument at 'i' *was* and *has been* permanently contextually typed.\n      //\n      // The idea is that we will perform type argument inference & assignability checking once\n      // without using the susceptible parameters that are functions, and once more for each of those\n      // parameters, contextually typing each as we go along.\n      //\n      // For a tagged template, then the first argument be 'undefined' if necessary\n      // because it represents a TemplateStringsArray.\n      //\n      // For a decorator, no arguments are susceptible to contextual typing due to the fact\n      // decorators are applied to a declaration by the emitter, and not to an expression.\n\n      var excludeArgument;\n\n      if (!isDecorator) {\n        // We do not need to call `getEffectiveArgumentCount` here as it only\n        // applies when calculating the number of arguments for a decorator.\n        for (var i = isTaggedTemplate ? 1 : 0; i < args.length; i++) {\n          if (isContextSensitive(args[i])) {\n            if (!excludeArgument) {\n              excludeArgument = new Array(args.length);\n            }\n\n            excludeArgument[i] = true;\n          }\n        }\n      } // The following variables are captured and modified by calls to chooseOverload.\n      // If overload resolution or type argument inference fails, we want to report the\n      // best error possible. The best error is one which says that an argument was not\n      // assignable to a parameter. This implies that everything else about the overload\n      // was fine. So if there is any overload that is only incorrect because of an\n      // argument, we will report an error on that one.\n      //\n      //     function foo(s: string) {}\n      //     function foo(n: number) {} // Report argument error on this overload\n      //     function foo() {}\n      //     foo(true);\n      //\n      // If none of the overloads even made it that far, there are two possibilities.\n      // There was a problem with type arguments for some overload, in which case\n      // report an error on that. Or none of the overloads even had correct arity,\n      // in which case give an arity error.\n      //\n      //     function foo<T>(x: T, y: T) {} // Report type argument inference error\n      //     function foo() {}\n      //     foo(0, true);\n      //\n\n\n      var candidateForArgumentError;\n      var candidateForTypeArgumentError;\n      var resultOfFailedInference;\n      var result; // Section 4.12.1:\n      // if the candidate list contains one or more signatures for which the type of each argument\n      // expression is a subtype of each corresponding parameter type, the return type of the first\n      // of those signatures becomes the return type of the function call.\n      // Otherwise, the return type of the first signature in the candidate list becomes the return\n      // type of the function call.\n      //\n      // Whether the call is an error is determined by assignability of the arguments. The subtype pass\n      // is just important for choosing the best signature. So in the case where there is only one\n      // signature, the subtype pass is useless. So skipping it is an optimization.\n\n      if (candidates.length > 1) {\n        result = chooseOverload(candidates, subtypeRelation);\n      }\n\n      if (!result) {\n        // Reinitialize these pointers for round two\n        candidateForArgumentError = undefined;\n        candidateForTypeArgumentError = undefined;\n        resultOfFailedInference = undefined;\n        result = chooseOverload(candidates, assignableRelation);\n      }\n\n      if (result) {\n        return result;\n      } // No signatures were applicable. Now report errors based on the last applicable signature with\n      // no arguments excluded from assignability checks.\n      // If candidate is undefined, it means that no candidates had a suitable arity. In that case,\n      // skip the checkApplicableSignature check.\n\n\n      if (candidateForArgumentError) {\n        // excludeArgument is undefined, in this case also equivalent to [undefined, undefined, ...]\n        // The importance of excludeArgument is to prevent us from typing function expression parameters\n        // in arguments too early. If possible, we'd like to only type them once we know the correct\n        // overload. However, this matters for the case where the call is correct. When the call is\n        // an error, we don't need to exclude any arguments, although it would cause no harm to do so.\n        checkApplicableSignature(node, args, candidateForArgumentError, assignableRelation,\n        /*excludeArgument*/\n        undefined,\n        /*reportErrors*/\n        true);\n      } else if (candidateForTypeArgumentError) {\n        if (!isTaggedTemplate && !isDecorator && typeArguments) {\n          var typeArguments_2 = node.typeArguments;\n          checkTypeArguments(candidateForTypeArgumentError, typeArguments_2, ts.map(typeArguments_2, getTypeFromTypeNode),\n          /*reportErrors*/\n          true, headMessage);\n        } else {\n          ts.Debug.assert(resultOfFailedInference.failedTypeParameterIndex >= 0);\n          var failedTypeParameter = candidateForTypeArgumentError.typeParameters[resultOfFailedInference.failedTypeParameterIndex];\n          var inferenceCandidates = getInferenceCandidates(resultOfFailedInference, resultOfFailedInference.failedTypeParameterIndex);\n          var diagnosticChainHead = ts.chainDiagnosticMessages(\n          /*details*/\n          undefined, // details will be provided by call to reportNoCommonSupertypeError\n          ts.Diagnostics.The_type_argument_for_type_parameter_0_cannot_be_inferred_from_the_usage_Consider_specifying_the_type_arguments_explicitly, typeToString(failedTypeParameter));\n\n          if (headMessage) {\n            diagnosticChainHead = ts.chainDiagnosticMessages(diagnosticChainHead, headMessage);\n          }\n\n          reportNoCommonSupertypeError(inferenceCandidates, node.expression || node.tag, diagnosticChainHead);\n        }\n      } else {\n        reportError(ts.Diagnostics.Supplied_parameters_do_not_match_any_signature_of_call_target);\n      } // No signature was applicable. We have already reported the errors for the invalid signature.\n      // If this is a type resolution session, e.g. Language Service, try to get better information that anySignature.\n      // Pick the first candidate that matches the arity. This way we can get a contextual type for cases like:\n      //  declare function f(a: { xa: number; xb: number; });\n      //  f({ |\n\n\n      if (!produceDiagnostics) {\n        for (var _i = 0, candidates_1 = candidates; _i < candidates_1.length; _i++) {\n          var candidate = candidates_1[_i];\n\n          if (hasCorrectArity(node, args, candidate)) {\n            if (candidate.typeParameters && typeArguments) {\n              candidate = getSignatureInstantiation(candidate, ts.map(typeArguments, getTypeFromTypeNode));\n            }\n\n            return candidate;\n          }\n        }\n      }\n\n      return resolveErrorCall(node);\n\n      function reportError(message, arg0, arg1, arg2) {\n        var errorInfo;\n        errorInfo = ts.chainDiagnosticMessages(errorInfo, message, arg0, arg1, arg2);\n\n        if (headMessage) {\n          errorInfo = ts.chainDiagnosticMessages(errorInfo, headMessage);\n        }\n\n        diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(node, errorInfo));\n      }\n\n      function chooseOverload(candidates, relation) {\n        for (var _i = 0, candidates_2 = candidates; _i < candidates_2.length; _i++) {\n          var originalCandidate = candidates_2[_i];\n\n          if (!hasCorrectArity(node, args, originalCandidate)) {\n            continue;\n          }\n\n          var candidate = void 0;\n          var typeArgumentsAreValid = void 0;\n          var inferenceContext = originalCandidate.typeParameters ? createInferenceContext(originalCandidate.typeParameters,\n          /*inferUnionTypes*/\n          false) : undefined;\n\n          while (true) {\n            candidate = originalCandidate;\n\n            if (candidate.typeParameters) {\n              var typeArgumentTypes = void 0;\n\n              if (typeArguments) {\n                typeArgumentTypes = ts.map(typeArguments, getTypeFromTypeNode);\n                typeArgumentsAreValid = checkTypeArguments(candidate, typeArguments, typeArgumentTypes,\n                /*reportErrors*/\n                false);\n              } else {\n                inferTypeArguments(node, candidate, args, excludeArgument, inferenceContext);\n                typeArgumentsAreValid = inferenceContext.failedTypeParameterIndex === undefined;\n                typeArgumentTypes = inferenceContext.inferredTypes;\n              }\n\n              if (!typeArgumentsAreValid) {\n                break;\n              }\n\n              candidate = getSignatureInstantiation(candidate, typeArgumentTypes);\n            }\n\n            if (!checkApplicableSignature(node, args, candidate, relation, excludeArgument,\n            /*reportErrors*/\n            false)) {\n              break;\n            }\n\n            var index = excludeArgument ? ts.indexOf(excludeArgument, true) : -1;\n\n            if (index < 0) {\n              return candidate;\n            }\n\n            excludeArgument[index] = false;\n          } // A post-mortem of this iteration of the loop. The signature was not applicable,\n          // so we want to track it as a candidate for reporting an error. If the candidate\n          // had no type parameters, or had no issues related to type arguments, we can\n          // report an error based on the arguments. If there was an issue with type\n          // arguments, then we can only report an error based on the type arguments.\n\n\n          if (originalCandidate.typeParameters) {\n            var instantiatedCandidate = candidate;\n\n            if (typeArgumentsAreValid) {\n              candidateForArgumentError = instantiatedCandidate;\n            } else {\n              candidateForTypeArgumentError = originalCandidate;\n\n              if (!typeArguments) {\n                resultOfFailedInference = inferenceContext;\n              }\n            }\n          } else {\n            ts.Debug.assert(originalCandidate === candidate);\n            candidateForArgumentError = originalCandidate;\n          }\n        }\n\n        return undefined;\n      }\n    }\n\n    function resolveCallExpression(node, candidatesOutArray) {\n      if (node.expression.kind === 95\n      /* SuperKeyword */\n      ) {\n          var superType = checkSuperExpression(node.expression);\n\n          if (superType !== unknownType) {\n            // In super call, the candidate signatures are the matching arity signatures of the base constructor function instantiated\n            // with the type arguments specified in the extends clause.\n            var baseTypeNode = ts.getClassExtendsHeritageClauseElement(ts.getContainingClass(node));\n            var baseConstructors = getInstantiatedConstructorsForTypeArguments(superType, baseTypeNode.typeArguments);\n            return resolveCall(node, baseConstructors, candidatesOutArray);\n          }\n\n          return resolveUntypedCall(node);\n        }\n\n      var funcType = checkExpression(node.expression);\n      var apparentType = getApparentType(funcType);\n\n      if (apparentType === unknownType) {\n        // Another error has already been reported\n        return resolveErrorCall(node);\n      } // Technically, this signatures list may be incomplete. We are taking the apparent type,\n      // but we are not including call signatures that may have been added to the Object or\n      // Function interface, since they have none by default. This is a bit of a leap of faith\n      // that the user will not add any.\n\n\n      var callSignatures = getSignaturesOfType(apparentType, 0\n      /* Call */\n      );\n      var constructSignatures = getSignaturesOfType(apparentType, 1\n      /* Construct */\n      ); // TS 1.0 spec: 4.12\n      // If FuncExpr is of type Any, or of an object type that has no call or construct signatures\n      // but is a subtype of the Function interface, the call is an untyped function call. In an\n      // untyped function call no TypeArgs are permitted, Args can be any argument list, no contextual\n      // types are provided for the argument expressions, and the result is always of type Any.\n      // We exclude union types because we may have a union of function types that happen to have\n      // no common signatures.\n\n      if (isTypeAny(funcType) || !callSignatures.length && !constructSignatures.length && !(funcType.flags & 16384\n      /* Union */\n      ) && isTypeAssignableTo(funcType, globalFunctionType)) {\n        // The unknownType indicates that an error already occured (and was reported).  No\n        // need to report another error in this case.\n        if (funcType !== unknownType && node.typeArguments) {\n          error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);\n        }\n\n        return resolveUntypedCall(node);\n      } // If FuncExpr's apparent type(section 3.8.1) is a function type, the call is a typed function call.\n      // TypeScript employs overload resolution in typed function calls in order to support functions\n      // with multiple call signatures.\n\n\n      if (!callSignatures.length) {\n        if (constructSignatures.length) {\n          error(node, ts.Diagnostics.Value_of_type_0_is_not_callable_Did_you_mean_to_include_new, typeToString(funcType));\n        } else {\n          error(node, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);\n        }\n\n        return resolveErrorCall(node);\n      }\n\n      return resolveCall(node, callSignatures, candidatesOutArray);\n    }\n\n    function resolveNewExpression(node, candidatesOutArray) {\n      if (node.arguments && languageVersion < 1\n      /* ES5 */\n      ) {\n          var spreadIndex = getSpreadArgumentIndex(node.arguments);\n\n          if (spreadIndex >= 0) {\n            error(node.arguments[spreadIndex], ts.Diagnostics.Spread_operator_in_new_expressions_is_only_available_when_targeting_ECMAScript_5_and_higher);\n          }\n        }\n\n      var expressionType = checkExpression(node.expression); // If expressionType's apparent type(section 3.8.1) is an object type with one or\n      // more construct signatures, the expression is processed in the same manner as a\n      // function call, but using the construct signatures as the initial set of candidate\n      // signatures for overload resolution. The result type of the function call becomes\n      // the result type of the operation.\n\n      expressionType = getApparentType(expressionType);\n\n      if (expressionType === unknownType) {\n        // Another error has already been reported\n        return resolveErrorCall(node);\n      } // If the expression is a class of abstract type, then it cannot be instantiated.\n      // Note, only class declarations can be declared abstract.\n      // In the case of a merged class-module or class-interface declaration,\n      // only the class declaration node will have the Abstract flag set.\n\n\n      var valueDecl = expressionType.symbol && getClassLikeDeclarationOfSymbol(expressionType.symbol);\n\n      if (valueDecl && valueDecl.flags & 128\n      /* Abstract */\n      ) {\n          error(node, ts.Diagnostics.Cannot_create_an_instance_of_the_abstract_class_0, ts.declarationNameToString(valueDecl.name));\n          return resolveErrorCall(node);\n        } // TS 1.0 spec: 4.11\n      // If expressionType is of type Any, Args can be any argument\n      // list and the result of the operation is of type Any.\n\n\n      if (isTypeAny(expressionType)) {\n        if (node.typeArguments) {\n          error(node, ts.Diagnostics.Untyped_function_calls_may_not_accept_type_arguments);\n        }\n\n        return resolveUntypedCall(node);\n      } // Technically, this signatures list may be incomplete. We are taking the apparent type,\n      // but we are not including construct signatures that may have been added to the Object or\n      // Function interface, since they have none by default. This is a bit of a leap of faith\n      // that the user will not add any.\n\n\n      var constructSignatures = getSignaturesOfType(expressionType, 1\n      /* Construct */\n      );\n\n      if (constructSignatures.length) {\n        return resolveCall(node, constructSignatures, candidatesOutArray);\n      } // If expressionType's apparent type is an object type with no construct signatures but\n      // one or more call signatures, the expression is processed as a function call. A compile-time\n      // error occurs if the result of the function call is not Void. The type of the result of the\n      // operation is Any.\n\n\n      var callSignatures = getSignaturesOfType(expressionType, 0\n      /* Call */\n      );\n\n      if (callSignatures.length) {\n        var signature = resolveCall(node, callSignatures, candidatesOutArray);\n\n        if (getReturnTypeOfSignature(signature) !== voidType) {\n          error(node, ts.Diagnostics.Only_a_void_function_can_be_called_with_the_new_keyword);\n        }\n\n        return signature;\n      }\n\n      error(node, ts.Diagnostics.Cannot_use_new_with_an_expression_whose_type_lacks_a_call_or_construct_signature);\n      return resolveErrorCall(node);\n    }\n\n    function resolveTaggedTemplateExpression(node, candidatesOutArray) {\n      var tagType = checkExpression(node.tag);\n      var apparentType = getApparentType(tagType);\n\n      if (apparentType === unknownType) {\n        // Another error has already been reported\n        return resolveErrorCall(node);\n      }\n\n      var callSignatures = getSignaturesOfType(apparentType, 0\n      /* Call */\n      );\n\n      if (isTypeAny(tagType) || !callSignatures.length && !(tagType.flags & 16384\n      /* Union */\n      ) && isTypeAssignableTo(tagType, globalFunctionType)) {\n        return resolveUntypedCall(node);\n      }\n\n      if (!callSignatures.length) {\n        error(node, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);\n        return resolveErrorCall(node);\n      }\n\n      return resolveCall(node, callSignatures, candidatesOutArray);\n    }\n    /**\n      * Gets the localized diagnostic head message to use for errors when resolving a decorator as a call expression.\n      */\n\n\n    function getDiagnosticHeadMessageForDecoratorResolution(node) {\n      switch (node.parent.kind) {\n        case 217\n        /* ClassDeclaration */\n        :\n        case 189\n        /* ClassExpression */\n        :\n          return ts.Diagnostics.Unable_to_resolve_signature_of_class_decorator_when_called_as_an_expression;\n\n        case 139\n        /* Parameter */\n        :\n          return ts.Diagnostics.Unable_to_resolve_signature_of_parameter_decorator_when_called_as_an_expression;\n\n        case 142\n        /* PropertyDeclaration */\n        :\n          return ts.Diagnostics.Unable_to_resolve_signature_of_property_decorator_when_called_as_an_expression;\n\n        case 144\n        /* MethodDeclaration */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n          return ts.Diagnostics.Unable_to_resolve_signature_of_method_decorator_when_called_as_an_expression;\n      }\n    }\n    /**\n      * Resolves a decorator as if it were a call expression.\n      */\n\n\n    function resolveDecorator(node, candidatesOutArray) {\n      var funcType = checkExpression(node.expression);\n      var apparentType = getApparentType(funcType);\n\n      if (apparentType === unknownType) {\n        return resolveErrorCall(node);\n      }\n\n      var callSignatures = getSignaturesOfType(apparentType, 0\n      /* Call */\n      );\n\n      if (funcType === anyType || !callSignatures.length && !(funcType.flags & 16384\n      /* Union */\n      ) && isTypeAssignableTo(funcType, globalFunctionType)) {\n        return resolveUntypedCall(node);\n      }\n\n      var headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);\n\n      if (!callSignatures.length) {\n        var errorInfo = void 0;\n        errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Cannot_invoke_an_expression_whose_type_lacks_a_call_signature);\n        errorInfo = ts.chainDiagnosticMessages(errorInfo, headMessage);\n        diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(node, errorInfo));\n        return resolveErrorCall(node);\n      }\n\n      return resolveCall(node, callSignatures, candidatesOutArray, headMessage);\n    } // candidatesOutArray is passed by signature help in the language service, and collectCandidates\n    // must fill it up with the appropriate candidate signatures\n\n\n    function getResolvedSignature(node, candidatesOutArray) {\n      var links = getNodeLinks(node); // If getResolvedSignature has already been called, we will have cached the resolvedSignature.\n      // However, it is possible that either candidatesOutArray was not passed in the first time,\n      // or that a different candidatesOutArray was passed in. Therefore, we need to redo the work\n      // to correctly fill the candidatesOutArray.\n\n      if (!links.resolvedSignature || candidatesOutArray) {\n        links.resolvedSignature = anySignature;\n\n        if (node.kind === 171\n        /* CallExpression */\n        ) {\n            links.resolvedSignature = resolveCallExpression(node, candidatesOutArray);\n          } else if (node.kind === 172\n        /* NewExpression */\n        ) {\n            links.resolvedSignature = resolveNewExpression(node, candidatesOutArray);\n          } else if (node.kind === 173\n        /* TaggedTemplateExpression */\n        ) {\n            links.resolvedSignature = resolveTaggedTemplateExpression(node, candidatesOutArray);\n          } else if (node.kind === 140\n        /* Decorator */\n        ) {\n            links.resolvedSignature = resolveDecorator(node, candidatesOutArray);\n          } else {\n          ts.Debug.fail(\"Branch in 'getResolvedSignature' should be unreachable.\");\n        }\n      }\n\n      return links.resolvedSignature;\n    }\n\n    function getInferredClassType(symbol) {\n      var links = getSymbolLinks(symbol);\n\n      if (!links.inferredClassType) {\n        links.inferredClassType = createAnonymousType(undefined, symbol.members, emptyArray, emptyArray,\n        /*stringIndexType*/\n        undefined,\n        /*numberIndexType*/\n        undefined);\n      }\n\n      return links.inferredClassType;\n    }\n    /**\n     * Syntactically and semantically checks a call or new expression.\n     * @param node The call/new expression to be checked.\n     * @returns On success, the expression's signature's return type. On failure, anyType.\n     */\n\n\n    function checkCallExpression(node) {\n      // Grammar checking; stop grammar-checking if checkGrammarTypeArguments return true\n      checkGrammarTypeArguments(node, node.typeArguments) || checkGrammarArguments(node, node.arguments);\n      var signature = getResolvedSignature(node);\n\n      if (node.expression.kind === 95\n      /* SuperKeyword */\n      ) {\n          return voidType;\n        }\n\n      if (node.kind === 172\n      /* NewExpression */\n      ) {\n          var declaration = signature.declaration;\n\n          if (declaration && declaration.kind !== 145\n          /* Constructor */\n          && declaration.kind !== 149\n          /* ConstructSignature */\n          && declaration.kind !== 154\n          /* ConstructorType */\n          && !ts.isJSDocConstructSignature(declaration)) {\n            // When resolved signature is a call signature (and not a construct signature) the result type is any, unless\n            // the declaring function had members created through 'x.prototype.y = expr' or 'this.y = expr' psuedodeclarations\n            // in a JS file\n            var funcSymbol = checkExpression(node.expression).symbol;\n\n            if (funcSymbol && funcSymbol.members && funcSymbol.flags & 16\n            /* Function */\n            ) {\n              return getInferredClassType(funcSymbol);\n            } else if (compilerOptions.noImplicitAny) {\n              error(node, ts.Diagnostics.new_expression_whose_target_lacks_a_construct_signature_implicitly_has_an_any_type);\n            }\n\n            return anyType;\n          }\n        } // In JavaScript files, calls to any identifier 'require' are treated as external module imports\n\n\n      if (ts.isInJavaScriptFile(node) && ts.isRequireCall(node,\n      /*checkArgumentIsStringLiteral*/\n      true)) {\n        return resolveExternalModuleTypeByLiteral(node.arguments[0]);\n      }\n\n      return getReturnTypeOfSignature(signature);\n    }\n\n    function checkTaggedTemplateExpression(node) {\n      return getReturnTypeOfSignature(getResolvedSignature(node));\n    }\n\n    function checkAssertion(node) {\n      var exprType = getRegularTypeOfObjectLiteral(checkExpression(node.expression));\n      var targetType = getTypeFromTypeNode(node.type);\n\n      if (produceDiagnostics && targetType !== unknownType) {\n        var widenedType = getWidenedType(exprType); // Permit 'number[] | \"foo\"' to be asserted to 'string'.\n\n        var bothAreStringLike = someConstituentTypeHasKind(targetType, 258\n        /* StringLike */\n        ) && someConstituentTypeHasKind(widenedType, 258\n        /* StringLike */\n        );\n\n        if (!bothAreStringLike && !isTypeAssignableTo(targetType, widenedType)) {\n          checkTypeAssignableTo(exprType, targetType, node, ts.Diagnostics.Neither_type_0_nor_type_1_is_assignable_to_the_other);\n        }\n      }\n\n      return targetType;\n    }\n\n    function getTypeAtPosition(signature, pos) {\n      return signature.hasRestParameter ? pos < signature.parameters.length - 1 ? getTypeOfSymbol(signature.parameters[pos]) : getRestTypeOfSignature(signature) : pos < signature.parameters.length ? getTypeOfSymbol(signature.parameters[pos]) : anyType;\n    }\n\n    function assignContextualParameterTypes(signature, context, mapper) {\n      var len = signature.parameters.length - (signature.hasRestParameter ? 1 : 0);\n\n      for (var i = 0; i < len; i++) {\n        var parameter = signature.parameters[i];\n        var contextualParameterType = getTypeAtPosition(context, i);\n        assignTypeToParameterAndFixTypeParameters(parameter, contextualParameterType, mapper);\n      }\n\n      if (signature.hasRestParameter && isRestParameterIndex(context, signature.parameters.length - 1)) {\n        var parameter = ts.lastOrUndefined(signature.parameters);\n        var contextualParameterType = getTypeOfSymbol(ts.lastOrUndefined(context.parameters));\n        assignTypeToParameterAndFixTypeParameters(parameter, contextualParameterType, mapper);\n      }\n    } // When contextual typing assigns a type to a parameter that contains a binding pattern, we also need to push\n    // the destructured type into the contained binding elements.\n\n\n    function assignBindingElementTypes(node) {\n      if (ts.isBindingPattern(node.name)) {\n        for (var _i = 0, _a = node.name.elements; _i < _a.length; _i++) {\n          var element = _a[_i];\n\n          if (element.kind !== 190\n          /* OmittedExpression */\n          ) {\n              if (element.name.kind === 69\n              /* Identifier */\n              ) {\n                  getSymbolLinks(getSymbolOfNode(element)).type = getTypeForBindingElement(element);\n                }\n\n              assignBindingElementTypes(element);\n            }\n        }\n      }\n    }\n\n    function assignTypeToParameterAndFixTypeParameters(parameter, contextualType, mapper) {\n      var links = getSymbolLinks(parameter);\n\n      if (!links.type) {\n        links.type = instantiateType(contextualType, mapper);\n        assignBindingElementTypes(parameter.valueDeclaration);\n      } else if (isInferentialContext(mapper)) {\n        // Even if the parameter already has a type, it might be because it was given a type while\n        // processing the function as an argument to a prior signature during overload resolution.\n        // If this was the case, it may have caused some type parameters to be fixed. So here,\n        // we need to ensure that type parameters at the same positions get fixed again. This is\n        // done by calling instantiateType to attach the mapper to the contextualType, and then\n        // calling inferTypes to force a walk of contextualType so that all the correct fixing\n        // happens. The choice to pass in links.type may seem kind of arbitrary, but it serves\n        // to make sure that all the correct positions in contextualType are reached by the walk.\n        // Here is an example:\n        //\n        //      interface Base {\n        //          baseProp;\n        //      }\n        //      interface Derived extends Base {\n        //          toBase(): Base;\n        //      }\n        //\n        //      var derived: Derived;\n        //\n        //      declare function foo<T>(x: T, func: (p: T) => T): T;\n        //      declare function foo<T>(x: T, func: (p: T) => T): T;\n        //\n        //      var result = foo(derived, d => d.toBase());\n        //\n        // We are typing d while checking the second overload. But we've already given d\n        // a type (Derived) from the first overload. However, we still want to fix the\n        // T in the second overload so that we do not infer Base as a candidate for T\n        // (inferring Base would make type argument inference inconsistent between the two\n        // overloads).\n        inferTypes(mapper.context, links.type, instantiateType(contextualType, mapper));\n      }\n    }\n\n    function getReturnTypeFromJSDocComment(func) {\n      var returnTag = ts.getJSDocReturnTag(func);\n\n      if (returnTag && returnTag.typeExpression) {\n        return getTypeFromTypeNode(returnTag.typeExpression.type);\n      }\n\n      return undefined;\n    }\n\n    function createPromiseType(promisedType) {\n      // creates a `Promise<T>` type where `T` is the promisedType argument\n      var globalPromiseType = getGlobalPromiseType();\n\n      if (globalPromiseType !== emptyGenericType) {\n        // if the promised type is itself a promise, get the underlying type; otherwise, fallback to the promised type\n        promisedType = getAwaitedType(promisedType);\n        return createTypeReference(globalPromiseType, [promisedType]);\n      }\n\n      return emptyObjectType;\n    }\n\n    function getReturnTypeFromBody(func, contextualMapper) {\n      var contextualSignature = getContextualSignatureForFunctionLikeDeclaration(func);\n\n      if (!func.body) {\n        return unknownType;\n      }\n\n      var isAsync = ts.isAsyncFunctionLike(func);\n      var type;\n\n      if (func.body.kind !== 195\n      /* Block */\n      ) {\n          type = checkExpressionCached(func.body, contextualMapper);\n\n          if (isAsync) {\n            // From within an async function you can return either a non-promise value or a promise. Any\n            // Promise/A+ compatible implementation will always assimilate any foreign promise, so the\n            // return type of the body should be unwrapped to its awaited type, which we will wrap in\n            // the native Promise<T> type later in this function.\n            type = checkAwaitedType(type, func, ts.Diagnostics.Return_expression_in_async_function_does_not_have_a_valid_callable_then_member);\n          }\n        } else {\n        var types = void 0;\n        var funcIsGenerator = !!func.asteriskToken;\n\n        if (funcIsGenerator) {\n          types = checkAndAggregateYieldOperandTypes(func.body, contextualMapper);\n\n          if (types.length === 0) {\n            var iterableIteratorAny = createIterableIteratorType(anyType);\n\n            if (compilerOptions.noImplicitAny) {\n              error(func.asteriskToken, ts.Diagnostics.Generator_implicitly_has_type_0_because_it_does_not_yield_any_values_Consider_supplying_a_return_type, typeToString(iterableIteratorAny));\n            }\n\n            return iterableIteratorAny;\n          }\n        } else {\n          types = checkAndAggregateReturnExpressionTypes(func.body, contextualMapper, isAsync);\n\n          if (types.length === 0) {\n            if (isAsync) {\n              // For an async function, the return type will not be void, but rather a Promise for void.\n              var promiseType = createPromiseType(voidType);\n\n              if (promiseType === emptyObjectType) {\n                error(func, ts.Diagnostics.An_async_function_or_method_must_have_a_valid_awaitable_return_type);\n                return unknownType;\n              }\n\n              return promiseType;\n            } else {\n              return voidType;\n            }\n          }\n        } // When yield/return statements are contextually typed we allow the return type to be a union type.\n        // Otherwise we require the yield/return expressions to have a best common supertype.\n\n\n        type = contextualSignature ? getUnionType(types) : getCommonSupertype(types);\n\n        if (!type) {\n          if (funcIsGenerator) {\n            error(func, ts.Diagnostics.No_best_common_type_exists_among_yield_expressions);\n            return createIterableIteratorType(unknownType);\n          } else {\n            error(func, ts.Diagnostics.No_best_common_type_exists_among_return_expressions); // Defer to unioning the return types so we get a) downstream errors earlier and b) better Salsa experience\n\n            return getUnionType(types);\n          }\n        }\n\n        if (funcIsGenerator) {\n          type = createIterableIteratorType(type);\n        }\n      }\n\n      if (!contextualSignature) {\n        reportErrorsFromWidening(func, type);\n      }\n\n      var widenedType = getWidenedType(type);\n\n      if (isAsync) {\n        // From within an async function you can return either a non-promise value or a promise. Any\n        // Promise/A+ compatible implementation will always assimilate any foreign promise, so the\n        // return type of the body is awaited type of the body, wrapped in a native Promise<T> type.\n        var promiseType = createPromiseType(widenedType);\n\n        if (promiseType === emptyObjectType) {\n          error(func, ts.Diagnostics.An_async_function_or_method_must_have_a_valid_awaitable_return_type);\n          return unknownType;\n        }\n\n        return promiseType;\n      } else {\n        return widenedType;\n      }\n    }\n\n    function checkAndAggregateYieldOperandTypes(body, contextualMapper) {\n      var aggregatedTypes = [];\n      ts.forEachYieldExpression(body, function (yieldExpression) {\n        var expr = yieldExpression.expression;\n\n        if (expr) {\n          var type = checkExpressionCached(expr, contextualMapper);\n\n          if (yieldExpression.asteriskToken) {\n            // A yield* expression effectively yields everything that its operand yields\n            type = checkElementTypeOfIterable(type, yieldExpression.expression);\n          }\n\n          if (!ts.contains(aggregatedTypes, type)) {\n            aggregatedTypes.push(type);\n          }\n        }\n      });\n      return aggregatedTypes;\n    }\n\n    function checkAndAggregateReturnExpressionTypes(body, contextualMapper, isAsync) {\n      var aggregatedTypes = [];\n      ts.forEachReturnStatement(body, function (returnStatement) {\n        var expr = returnStatement.expression;\n\n        if (expr) {\n          var type = checkExpressionCached(expr, contextualMapper);\n\n          if (isAsync) {\n            // From within an async function you can return either a non-promise value or a promise. Any\n            // Promise/A+ compatible implementation will always assimilate any foreign promise, so the\n            // return type of the body should be unwrapped to its awaited type, which should be wrapped in\n            // the native Promise<T> type by the caller.\n            type = checkAwaitedType(type, body.parent, ts.Diagnostics.Return_expression_in_async_function_does_not_have_a_valid_callable_then_member);\n          }\n\n          if (!ts.contains(aggregatedTypes, type)) {\n            aggregatedTypes.push(type);\n          }\n        }\n      });\n      return aggregatedTypes;\n    }\n    /**\n     * TypeScript Specification 1.0 (6.3) - July 2014\n     *   An explicitly typed function whose return type isn't the Void type,\n     *   the Any type, or a union type containing the Void or Any type as a constituent\n     *   must have at least one return statement somewhere in its body.\n     *   An exception to this rule is if the function implementation consists of a single 'throw' statement.\n     *\n     * @param returnType - return type of the function, can be undefined if return type is not explicitly specified\n     */\n\n\n    function checkAllCodePathsInNonVoidFunctionReturnOrThrow(func, returnType) {\n      if (!produceDiagnostics) {\n        return;\n      } // Functions with with an explicitly specified 'void' or 'any' return type don't need any return expressions.\n\n\n      if (returnType === voidType || isTypeAny(returnType) || returnType && returnType.flags & 16384\n      /* Union */\n      && someConstituentTypeHasKind(returnType, 1\n      /* Any */\n      | 16\n      /* Void */\n      )) {\n        return;\n      } // If all we have is a function signature, or an arrow function with an expression body, then there is nothing to check.\n      // also if HasImplicitReturn flag is not set this means that all codepaths in function body end with return or throw\n\n\n      if (ts.nodeIsMissing(func.body) || func.body.kind !== 195\n      /* Block */\n      || !(func.flags & 524288\n      /* HasImplicitReturn */\n      )) {\n        return;\n      }\n\n      var hasExplicitReturn = func.flags & 1048576\n      /* HasExplicitReturn */\n      ;\n\n      if (returnType && !hasExplicitReturn) {\n        // minimal check: function has syntactic return type annotation and no explicit return statements in the body\n        // this function does not conform to the specification.\n        // NOTE: having returnType !== undefined is a precondition for entering this branch so func.type will always be present\n        error(func.type, ts.Diagnostics.A_function_whose_declared_type_is_neither_void_nor_any_must_return_a_value);\n      } else if (compilerOptions.noImplicitReturns) {\n        if (!returnType) {\n          // If return type annotation is omitted check if function has any explicit return statements.\n          // If it does not have any - its inferred return type is void - don't do any checks.\n          // Otherwise get inferred return type from function body and report error only if it is not void / anytype\n          var inferredReturnType = hasExplicitReturn ? getReturnTypeOfSignature(getSignatureFromDeclaration(func)) : voidType;\n\n          if (inferredReturnType === voidType || isTypeAny(inferredReturnType)) {\n            return;\n          }\n        }\n\n        error(func.type || func, ts.Diagnostics.Not_all_code_paths_return_a_value);\n      }\n    }\n\n    function checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper) {\n      ts.Debug.assert(node.kind !== 144\n      /* MethodDeclaration */\n      || ts.isObjectLiteralMethod(node)); // Grammar checking\n\n      var hasGrammarError = checkGrammarFunctionLikeDeclaration(node);\n\n      if (!hasGrammarError && node.kind === 176\n      /* FunctionExpression */\n      ) {\n          checkGrammarForGenerator(node);\n        } // The identityMapper object is used to indicate that function expressions are wildcards\n\n\n      if (contextualMapper === identityMapper && isContextSensitive(node)) {\n        checkNodeDeferred(node);\n        return anyFunctionType;\n      }\n\n      var links = getNodeLinks(node);\n      var type = getTypeOfSymbol(node.symbol);\n      var contextSensitive = isContextSensitive(node);\n      var mightFixTypeParameters = contextSensitive && isInferentialContext(contextualMapper); // Check if function expression is contextually typed and assign parameter types if so.\n      // See the comment in assignTypeToParameterAndFixTypeParameters to understand why we need to\n      // check mightFixTypeParameters.\n\n      if (mightFixTypeParameters || !(links.flags & 1024\n      /* ContextChecked */\n      )) {\n        var contextualSignature = getContextualSignature(node); // If a type check is started at a function expression that is an argument of a function call, obtaining the\n        // contextual type may recursively get back to here during overload resolution of the call. If so, we will have\n        // already assigned contextual types.\n\n        var contextChecked = !!(links.flags & 1024\n        /* ContextChecked */\n        );\n\n        if (mightFixTypeParameters || !contextChecked) {\n          links.flags |= 1024\n          /* ContextChecked */\n          ;\n\n          if (contextualSignature) {\n            var signature = getSignaturesOfType(type, 0\n            /* Call */\n            )[0];\n\n            if (contextSensitive) {\n              assignContextualParameterTypes(signature, contextualSignature, contextualMapper || identityMapper);\n            }\n\n            if (mightFixTypeParameters || !node.type && !signature.resolvedReturnType) {\n              var returnType = getReturnTypeFromBody(node, contextualMapper);\n\n              if (!signature.resolvedReturnType) {\n                signature.resolvedReturnType = returnType;\n              }\n            }\n          }\n\n          if (!contextChecked) {\n            checkSignatureDeclaration(node);\n            checkNodeDeferred(node);\n          }\n        }\n      }\n\n      if (produceDiagnostics && node.kind !== 144\n      /* MethodDeclaration */\n      && node.kind !== 143\n      /* MethodSignature */\n      ) {\n          checkCollisionWithCapturedSuperVariable(node, node.name);\n          checkCollisionWithCapturedThisVariable(node, node.name);\n        }\n\n      return type;\n    }\n\n    function checkFunctionExpressionOrObjectLiteralMethodDeferred(node) {\n      ts.Debug.assert(node.kind !== 144\n      /* MethodDeclaration */\n      || ts.isObjectLiteralMethod(node));\n      var isAsync = ts.isAsyncFunctionLike(node);\n      var returnOrPromisedType = node.type && (isAsync ? checkAsyncFunctionReturnType(node) : getTypeFromTypeNode(node.type));\n\n      if (!node.asteriskToken) {\n        // return is not necessary in the body of generators\n        checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnOrPromisedType);\n      }\n\n      if (node.body) {\n        if (!node.type) {\n          // There are some checks that are only performed in getReturnTypeFromBody, that may produce errors\n          // we need. An example is the noImplicitAny errors resulting from widening the return expression\n          // of a function. Because checking of function expression bodies is deferred, there was never an\n          // appropriate time to do this during the main walk of the file (see the comment at the top of\n          // checkFunctionExpressionBodies). So it must be done now.\n          getReturnTypeOfSignature(getSignatureFromDeclaration(node));\n        }\n\n        if (node.body.kind === 195\n        /* Block */\n        ) {\n            checkSourceElement(node.body);\n          } else {\n          // From within an async function you can return either a non-promise value or a promise. Any\n          // Promise/A+ compatible implementation will always assimilate any foreign promise, so we\n          // should not be checking assignability of a promise to the return type. Instead, we need to\n          // check assignability of the awaited type of the expression body against the promised type of\n          // its return type annotation.\n          var exprType = checkExpression(node.body);\n\n          if (returnOrPromisedType) {\n            if (isAsync) {\n              var awaitedType = checkAwaitedType(exprType, node.body, ts.Diagnostics.Expression_body_for_async_arrow_function_does_not_have_a_valid_callable_then_member);\n              checkTypeAssignableTo(awaitedType, returnOrPromisedType, node.body);\n            } else {\n              checkTypeAssignableTo(exprType, returnOrPromisedType, node.body);\n            }\n          }\n        }\n      }\n    }\n\n    function checkArithmeticOperandType(operand, type, diagnostic) {\n      if (!isTypeAnyOrAllConstituentTypesHaveKind(type, 132\n      /* NumberLike */\n      )) {\n        error(operand, diagnostic);\n        return false;\n      }\n\n      return true;\n    }\n\n    function checkReferenceExpression(n, invalidReferenceMessage, constantVariableMessage) {\n      function findSymbol(n) {\n        var symbol = getNodeLinks(n).resolvedSymbol; // Because we got the symbol from the resolvedSymbol property, it might be of kind\n        // SymbolFlags.ExportValue. In this case it is necessary to get the actual export\n        // symbol, which will have the correct flags set on it.\n\n        return symbol && getExportSymbolOfValueSymbolIfExported(symbol);\n      }\n\n      function isReferenceOrErrorExpression(n) {\n        // TypeScript 1.0 spec (April 2014):\n        // Expressions are classified as values or references.\n        // References are the subset of expressions that are permitted as the target of an assignment.\n        // Specifically, references are combinations of identifiers(section 4.3), parentheses(section 4.7),\n        // and property accesses(section 4.10).\n        // All other expression constructs described in this chapter are classified as values.\n        switch (n.kind) {\n          case 69\n          /* Identifier */\n          :\n            {\n              var symbol = findSymbol(n); // TypeScript 1.0 spec (April 2014): 4.3\n              // An identifier expression that references a variable or parameter is classified as a reference.\n              // An identifier expression that references any other kind of entity is classified as a value(and therefore cannot be the target of an assignment).\n\n              return !symbol || symbol === unknownSymbol || symbol === argumentsSymbol || (symbol.flags & 3\n              /* Variable */\n              ) !== 0;\n            }\n\n          case 169\n          /* PropertyAccessExpression */\n          :\n            {\n              var symbol = findSymbol(n); // TypeScript 1.0 spec (April 2014): 4.10\n              // A property access expression is always classified as a reference.\n              // NOTE (not in spec): assignment to enum members should not be allowed\n\n              return !symbol || symbol === unknownSymbol || (symbol.flags & ~8\n              /* EnumMember */\n              ) !== 0;\n            }\n\n          case 170\n          /* ElementAccessExpression */\n          :\n            //  old compiler doesn't check indexed access\n            return true;\n\n          case 175\n          /* ParenthesizedExpression */\n          :\n            return isReferenceOrErrorExpression(n.expression);\n\n          default:\n            return false;\n        }\n      }\n\n      function isConstVariableReference(n) {\n        switch (n.kind) {\n          case 69\n          /* Identifier */\n          :\n          case 169\n          /* PropertyAccessExpression */\n          :\n            {\n              var symbol = findSymbol(n);\n              return symbol && (symbol.flags & 3\n              /* Variable */\n              ) !== 0 && (getDeclarationFlagsFromSymbol(symbol) & 16384\n              /* Const */\n              ) !== 0;\n            }\n\n          case 170\n          /* ElementAccessExpression */\n          :\n            {\n              var index = n.argumentExpression;\n              var symbol = findSymbol(n.expression);\n\n              if (symbol && index && index.kind === 9\n              /* StringLiteral */\n              ) {\n                  var name_12 = index.text;\n                  var prop = getPropertyOfType(getTypeOfSymbol(symbol), name_12);\n                  return prop && (prop.flags & 3\n                  /* Variable */\n                  ) !== 0 && (getDeclarationFlagsFromSymbol(prop) & 16384\n                  /* Const */\n                  ) !== 0;\n                }\n\n              return false;\n            }\n\n          case 175\n          /* ParenthesizedExpression */\n          :\n            return isConstVariableReference(n.expression);\n\n          default:\n            return false;\n        }\n      }\n\n      if (!isReferenceOrErrorExpression(n)) {\n        error(n, invalidReferenceMessage);\n        return false;\n      }\n\n      if (isConstVariableReference(n)) {\n        error(n, constantVariableMessage);\n        return false;\n      }\n\n      return true;\n    }\n\n    function checkDeleteExpression(node) {\n      checkExpression(node.expression);\n      return booleanType;\n    }\n\n    function checkTypeOfExpression(node) {\n      checkExpression(node.expression);\n      return stringType;\n    }\n\n    function checkVoidExpression(node) {\n      checkExpression(node.expression);\n      return undefinedType;\n    }\n\n    function checkAwaitExpression(node) {\n      // Grammar checking\n      if (produceDiagnostics) {\n        if (!(node.parserContextFlags & 8\n        /* Await */\n        )) {\n          grammarErrorOnFirstToken(node, ts.Diagnostics.await_expression_is_only_allowed_within_an_async_function);\n        }\n\n        if (isInParameterInitializerBeforeContainingFunction(node)) {\n          error(node, ts.Diagnostics.await_expressions_cannot_be_used_in_a_parameter_initializer);\n        }\n      }\n\n      var operandType = checkExpression(node.expression);\n      return checkAwaitedType(operandType, node);\n    }\n\n    function checkPrefixUnaryExpression(node) {\n      var operandType = checkExpression(node.operand);\n\n      switch (node.operator) {\n        case 35\n        /* PlusToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n        case 50\n        /* TildeToken */\n        :\n          if (someConstituentTypeHasKind(operandType, 16777216\n          /* ESSymbol */\n          )) {\n            error(node.operand, ts.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, ts.tokenToString(node.operator));\n          }\n\n          return numberType;\n\n        case 49\n        /* ExclamationToken */\n        :\n          return booleanType;\n\n        case 41\n        /* PlusPlusToken */\n        :\n        case 42\n        /* MinusMinusToken */\n        :\n          var ok = checkArithmeticOperandType(node.operand, operandType, ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);\n\n          if (ok) {\n            // run check only if former checks succeeded to avoid reporting cascading errors\n            checkReferenceExpression(node.operand, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);\n          }\n\n          return numberType;\n      }\n\n      return unknownType;\n    }\n\n    function checkPostfixUnaryExpression(node) {\n      var operandType = checkExpression(node.operand);\n      var ok = checkArithmeticOperandType(node.operand, operandType, ts.Diagnostics.An_arithmetic_operand_must_be_of_type_any_number_or_an_enum_type);\n\n      if (ok) {\n        // run check only if former checks succeeded to avoid reporting cascading errors\n        checkReferenceExpression(node.operand, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_must_be_a_variable_property_or_indexer, ts.Diagnostics.The_operand_of_an_increment_or_decrement_operator_cannot_be_a_constant);\n      }\n\n      return numberType;\n    } // Just like isTypeOfKind below, except that it returns true if *any* constituent\n    // has this kind.\n\n\n    function someConstituentTypeHasKind(type, kind) {\n      if (type.flags & kind) {\n        return true;\n      }\n\n      if (type.flags & 49152\n      /* UnionOrIntersection */\n      ) {\n          var types = type.types;\n\n          for (var _i = 0, types_10 = types; _i < types_10.length; _i++) {\n            var current = types_10[_i];\n\n            if (current.flags & kind) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n\n      return false;\n    } // Return true if type has the given flags, or is a union or intersection type composed of types that all have those flags.\n\n\n    function allConstituentTypesHaveKind(type, kind) {\n      if (type.flags & kind) {\n        return true;\n      }\n\n      if (type.flags & 49152\n      /* UnionOrIntersection */\n      ) {\n          var types = type.types;\n\n          for (var _i = 0, types_11 = types; _i < types_11.length; _i++) {\n            var current = types_11[_i];\n\n            if (!(current.flags & kind)) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n\n      return false;\n    }\n\n    function isConstEnumObjectType(type) {\n      return type.flags & (80896\n      /* ObjectType */\n      | 65536\n      /* Anonymous */\n      ) && type.symbol && isConstEnumSymbol(type.symbol);\n    }\n\n    function isConstEnumSymbol(symbol) {\n      return (symbol.flags & 128\n      /* ConstEnum */\n      ) !== 0;\n    }\n\n    function checkInstanceOfExpression(left, right, leftType, rightType) {\n      // TypeScript 1.0 spec (April 2014): 4.15.4\n      // The instanceof operator requires the left operand to be of type Any, an object type, or a type parameter type,\n      // and the right operand to be of type Any or a subtype of the 'Function' interface type.\n      // The result is always of the Boolean primitive type.\n      // NOTE: do not raise error if leftType is unknown as related error was already reported\n      if (allConstituentTypesHaveKind(leftType, 16777726\n      /* Primitive */\n      )) {\n        error(left, ts.Diagnostics.The_left_hand_side_of_an_instanceof_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);\n      } // NOTE: do not raise error if right is unknown as related error was already reported\n\n\n      if (!(isTypeAny(rightType) || isTypeSubtypeOf(rightType, globalFunctionType))) {\n        error(right, ts.Diagnostics.The_right_hand_side_of_an_instanceof_expression_must_be_of_type_any_or_of_a_type_assignable_to_the_Function_interface_type);\n      }\n\n      return booleanType;\n    }\n\n    function checkInExpression(left, right, leftType, rightType) {\n      // TypeScript 1.0 spec (April 2014): 4.15.5\n      // The in operator requires the left operand to be of type Any, the String primitive type, or the Number primitive type,\n      // and the right operand to be of type Any, an object type, or a type parameter type.\n      // The result is always of the Boolean primitive type.\n      if (!isTypeAnyOrAllConstituentTypesHaveKind(leftType, 258\n      /* StringLike */\n      | 132\n      /* NumberLike */\n      | 16777216\n      /* ESSymbol */\n      )) {\n        error(left, ts.Diagnostics.The_left_hand_side_of_an_in_expression_must_be_of_type_any_string_number_or_symbol);\n      }\n\n      if (!isTypeAnyOrAllConstituentTypesHaveKind(rightType, 80896\n      /* ObjectType */\n      | 512\n      /* TypeParameter */\n      )) {\n        error(right, ts.Diagnostics.The_right_hand_side_of_an_in_expression_must_be_of_type_any_an_object_type_or_a_type_parameter);\n      }\n\n      return booleanType;\n    }\n\n    function checkObjectLiteralAssignment(node, sourceType, contextualMapper) {\n      var properties = node.properties;\n\n      for (var _i = 0, properties_3 = properties; _i < properties_3.length; _i++) {\n        var p = properties_3[_i];\n\n        if (p.kind === 248\n        /* PropertyAssignment */\n        || p.kind === 249\n        /* ShorthandPropertyAssignment */\n        ) {\n            var name_13 = p.name;\n\n            if (name_13.kind === 137\n            /* ComputedPropertyName */\n            ) {\n                checkComputedPropertyName(name_13);\n              }\n\n            if (isComputedNonLiteralName(name_13)) {\n              continue;\n            }\n\n            var text = getTextOfPropertyName(name_13);\n            var type = isTypeAny(sourceType) ? sourceType : getTypeOfPropertyOfType(sourceType, text) || isNumericLiteralName(text) && getIndexTypeOfType(sourceType, 1\n            /* Number */\n            ) || getIndexTypeOfType(sourceType, 0\n            /* String */\n            );\n\n            if (type) {\n              if (p.kind === 249\n              /* ShorthandPropertyAssignment */\n              ) {\n                  checkDestructuringAssignment(p, type);\n                } else {\n                // non-shorthand property assignments should always have initializers\n                checkDestructuringAssignment(p.initializer, type);\n              }\n            } else {\n              error(name_13, ts.Diagnostics.Type_0_has_no_property_1_and_no_string_index_signature, typeToString(sourceType), ts.declarationNameToString(name_13));\n            }\n          } else {\n          error(p, ts.Diagnostics.Property_assignment_expected);\n        }\n      }\n\n      return sourceType;\n    }\n\n    function checkArrayLiteralAssignment(node, sourceType, contextualMapper) {\n      // This elementType will be used if the specific property corresponding to this index is not\n      // present (aka the tuple element property). This call also checks that the parentType is in\n      // fact an iterable or array (depending on target language).\n      var elementType = checkIteratedTypeOrElementType(sourceType, node,\n      /*allowStringInput*/\n      false) || unknownType;\n      var elements = node.elements;\n\n      for (var i = 0; i < elements.length; i++) {\n        var e = elements[i];\n\n        if (e.kind !== 190\n        /* OmittedExpression */\n        ) {\n            if (e.kind !== 188\n            /* SpreadElementExpression */\n            ) {\n                var propName = \"\" + i;\n                var type = isTypeAny(sourceType) ? sourceType : isTupleLikeType(sourceType) ? getTypeOfPropertyOfType(sourceType, propName) : elementType;\n\n                if (type) {\n                  checkDestructuringAssignment(e, type, contextualMapper);\n                } else {\n                  if (isTupleType(sourceType)) {\n                    error(e, ts.Diagnostics.Tuple_type_0_with_length_1_cannot_be_assigned_to_tuple_with_length_2, typeToString(sourceType), sourceType.elementTypes.length, elements.length);\n                  } else {\n                    error(e, ts.Diagnostics.Type_0_has_no_property_1, typeToString(sourceType), propName);\n                  }\n                }\n              } else {\n              if (i < elements.length - 1) {\n                error(e, ts.Diagnostics.A_rest_element_must_be_last_in_an_array_destructuring_pattern);\n              } else {\n                var restExpression = e.expression;\n\n                if (restExpression.kind === 184\n                /* BinaryExpression */\n                && restExpression.operatorToken.kind === 56\n                /* EqualsToken */\n                ) {\n                    error(restExpression.operatorToken, ts.Diagnostics.A_rest_element_cannot_have_an_initializer);\n                  } else {\n                  checkDestructuringAssignment(restExpression, createArrayType(elementType), contextualMapper);\n                }\n              }\n            }\n          }\n      }\n\n      return sourceType;\n    }\n\n    function checkDestructuringAssignment(exprOrAssignment, sourceType, contextualMapper) {\n      var target;\n\n      if (exprOrAssignment.kind === 249\n      /* ShorthandPropertyAssignment */\n      ) {\n          var prop = exprOrAssignment;\n\n          if (prop.objectAssignmentInitializer) {\n            checkBinaryLikeExpression(prop.name, prop.equalsToken, prop.objectAssignmentInitializer, contextualMapper);\n          }\n\n          target = exprOrAssignment.name;\n        } else {\n        target = exprOrAssignment;\n      }\n\n      if (target.kind === 184\n      /* BinaryExpression */\n      && target.operatorToken.kind === 56\n      /* EqualsToken */\n      ) {\n          checkBinaryExpression(target, contextualMapper);\n          target = target.left;\n        }\n\n      if (target.kind === 168\n      /* ObjectLiteralExpression */\n      ) {\n          return checkObjectLiteralAssignment(target, sourceType, contextualMapper);\n        }\n\n      if (target.kind === 167\n      /* ArrayLiteralExpression */\n      ) {\n          return checkArrayLiteralAssignment(target, sourceType, contextualMapper);\n        }\n\n      return checkReferenceAssignment(target, sourceType, contextualMapper);\n    }\n\n    function checkReferenceAssignment(target, sourceType, contextualMapper) {\n      var targetType = checkExpression(target, contextualMapper);\n\n      if (checkReferenceExpression(target, ts.Diagnostics.Invalid_left_hand_side_of_assignment_expression, ts.Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant)) {\n        checkTypeAssignableTo(sourceType, targetType, target,\n        /*headMessage*/\n        undefined);\n      }\n\n      return sourceType;\n    }\n\n    function checkBinaryExpression(node, contextualMapper) {\n      return checkBinaryLikeExpression(node.left, node.operatorToken, node.right, contextualMapper, node);\n    }\n\n    function checkBinaryLikeExpression(left, operatorToken, right, contextualMapper, errorNode) {\n      var operator = operatorToken.kind;\n\n      if (operator === 56\n      /* EqualsToken */\n      && (left.kind === 168\n      /* ObjectLiteralExpression */\n      || left.kind === 167\n      /* ArrayLiteralExpression */\n      )) {\n        return checkDestructuringAssignment(left, checkExpression(right, contextualMapper), contextualMapper);\n      }\n\n      var leftType = checkExpression(left, contextualMapper);\n      var rightType = checkExpression(right, contextualMapper);\n\n      switch (operator) {\n        case 37\n        /* AsteriskToken */\n        :\n        case 38\n        /* AsteriskAsteriskToken */\n        :\n        case 59\n        /* AsteriskEqualsToken */\n        :\n        case 60\n        /* AsteriskAsteriskEqualsToken */\n        :\n        case 39\n        /* SlashToken */\n        :\n        case 61\n        /* SlashEqualsToken */\n        :\n        case 40\n        /* PercentToken */\n        :\n        case 62\n        /* PercentEqualsToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n        case 58\n        /* MinusEqualsToken */\n        :\n        case 43\n        /* LessThanLessThanToken */\n        :\n        case 63\n        /* LessThanLessThanEqualsToken */\n        :\n        case 44\n        /* GreaterThanGreaterThanToken */\n        :\n        case 64\n        /* GreaterThanGreaterThanEqualsToken */\n        :\n        case 45\n        /* GreaterThanGreaterThanGreaterThanToken */\n        :\n        case 65\n        /* GreaterThanGreaterThanGreaterThanEqualsToken */\n        :\n        case 47\n        /* BarToken */\n        :\n        case 67\n        /* BarEqualsToken */\n        :\n        case 48\n        /* CaretToken */\n        :\n        case 68\n        /* CaretEqualsToken */\n        :\n        case 46\n        /* AmpersandToken */\n        :\n        case 66\n        /* AmpersandEqualsToken */\n        :\n          // TypeScript 1.0 spec (April 2014): 4.19.1\n          // These operators require their operands to be of type Any, the Number primitive type,\n          // or an enum type. Operands of an enum type are treated\n          // as having the primitive type Number. If one operand is the null or undefined value,\n          // it is treated as having the type of the other operand.\n          // The result is always of the Number primitive type.\n          if (leftType.flags & (32\n          /* Undefined */\n          | 64\n          /* Null */\n          )) leftType = rightType;\n          if (rightType.flags & (32\n          /* Undefined */\n          | 64\n          /* Null */\n          )) rightType = leftType;\n          var suggestedOperator = void 0; // if a user tries to apply a bitwise operator to 2 boolean operands\n          // try and return them a helpful suggestion\n\n          if (leftType.flags & 8\n          /* Boolean */\n          && rightType.flags & 8\n          /* Boolean */\n          && (suggestedOperator = getSuggestedBooleanOperator(operatorToken.kind)) !== undefined) {\n            error(errorNode || operatorToken, ts.Diagnostics.The_0_operator_is_not_allowed_for_boolean_types_Consider_using_1_instead, ts.tokenToString(operatorToken.kind), ts.tokenToString(suggestedOperator));\n          } else {\n            // otherwise just check each operand separately and report errors as normal\n            var leftOk = checkArithmeticOperandType(left, leftType, ts.Diagnostics.The_left_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);\n            var rightOk = checkArithmeticOperandType(right, rightType, ts.Diagnostics.The_right_hand_side_of_an_arithmetic_operation_must_be_of_type_any_number_or_an_enum_type);\n\n            if (leftOk && rightOk) {\n              checkAssignmentOperator(numberType);\n            }\n          }\n\n          return numberType;\n\n        case 35\n        /* PlusToken */\n        :\n        case 57\n        /* PlusEqualsToken */\n        :\n          // TypeScript 1.0 spec (April 2014): 4.19.2\n          // The binary + operator requires both operands to be of the Number primitive type or an enum type,\n          // or at least one of the operands to be of type Any or the String primitive type.\n          // If one operand is the null or undefined value, it is treated as having the type of the other operand.\n          if (leftType.flags & (32\n          /* Undefined */\n          | 64\n          /* Null */\n          )) leftType = rightType;\n          if (rightType.flags & (32\n          /* Undefined */\n          | 64\n          /* Null */\n          )) rightType = leftType;\n          var resultType = void 0;\n\n          if (allConstituentTypesHaveKind(leftType, 132\n          /* NumberLike */\n          ) && allConstituentTypesHaveKind(rightType, 132\n          /* NumberLike */\n          )) {\n            // Operands of an enum type are treated as having the primitive type Number.\n            // If both operands are of the Number primitive type, the result is of the Number primitive type.\n            resultType = numberType;\n          } else {\n            if (allConstituentTypesHaveKind(leftType, 258\n            /* StringLike */\n            ) || allConstituentTypesHaveKind(rightType, 258\n            /* StringLike */\n            )) {\n              // If one or both operands are of the String primitive type, the result is of the String primitive type.\n              resultType = stringType;\n            } else if (isTypeAny(leftType) || isTypeAny(rightType)) {\n              // Otherwise, the result is of type Any.\n              // NOTE: unknown type here denotes error type. Old compiler treated this case as any type so do we.\n              resultType = leftType === unknownType || rightType === unknownType ? unknownType : anyType;\n            } // Symbols are not allowed at all in arithmetic expressions\n\n\n            if (resultType && !checkForDisallowedESSymbolOperand(operator)) {\n              return resultType;\n            }\n          }\n\n          if (!resultType) {\n            reportOperatorError();\n            return anyType;\n          }\n\n          if (operator === 57\n          /* PlusEqualsToken */\n          ) {\n              checkAssignmentOperator(resultType);\n            }\n\n          return resultType;\n\n        case 25\n        /* LessThanToken */\n        :\n        case 27\n        /* GreaterThanToken */\n        :\n        case 28\n        /* LessThanEqualsToken */\n        :\n        case 29\n        /* GreaterThanEqualsToken */\n        :\n          if (!checkForDisallowedESSymbolOperand(operator)) {\n            return booleanType;\n          }\n\n        // Fall through\n\n        case 30\n        /* EqualsEqualsToken */\n        :\n        case 31\n        /* ExclamationEqualsToken */\n        :\n        case 32\n        /* EqualsEqualsEqualsToken */\n        :\n        case 33\n        /* ExclamationEqualsEqualsToken */\n        :\n          // Permit 'number[] | \"foo\"' to be asserted to 'string'.\n          if (someConstituentTypeHasKind(leftType, 258\n          /* StringLike */\n          ) && someConstituentTypeHasKind(rightType, 258\n          /* StringLike */\n          )) {\n            return booleanType;\n          }\n\n          if (!isTypeAssignableTo(leftType, rightType) && !isTypeAssignableTo(rightType, leftType)) {\n            reportOperatorError();\n          }\n\n          return booleanType;\n\n        case 91\n        /* InstanceOfKeyword */\n        :\n          return checkInstanceOfExpression(left, right, leftType, rightType);\n\n        case 90\n        /* InKeyword */\n        :\n          return checkInExpression(left, right, leftType, rightType);\n\n        case 51\n        /* AmpersandAmpersandToken */\n        :\n          return rightType;\n\n        case 52\n        /* BarBarToken */\n        :\n          return getUnionType([leftType, rightType]);\n\n        case 56\n        /* EqualsToken */\n        :\n          checkAssignmentOperator(rightType);\n          return getRegularTypeOfObjectLiteral(rightType);\n\n        case 24\n        /* CommaToken */\n        :\n          return rightType;\n      } // Return true if there was no error, false if there was an error.\n\n\n      function checkForDisallowedESSymbolOperand(operator) {\n        var offendingSymbolOperand = someConstituentTypeHasKind(leftType, 16777216\n        /* ESSymbol */\n        ) ? left : someConstituentTypeHasKind(rightType, 16777216\n        /* ESSymbol */\n        ) ? right : undefined;\n\n        if (offendingSymbolOperand) {\n          error(offendingSymbolOperand, ts.Diagnostics.The_0_operator_cannot_be_applied_to_type_symbol, ts.tokenToString(operator));\n          return false;\n        }\n\n        return true;\n      }\n\n      function getSuggestedBooleanOperator(operator) {\n        switch (operator) {\n          case 47\n          /* BarToken */\n          :\n          case 67\n          /* BarEqualsToken */\n          :\n            return 52\n            /* BarBarToken */\n            ;\n\n          case 48\n          /* CaretToken */\n          :\n          case 68\n          /* CaretEqualsToken */\n          :\n            return 33\n            /* ExclamationEqualsEqualsToken */\n            ;\n\n          case 46\n          /* AmpersandToken */\n          :\n          case 66\n          /* AmpersandEqualsToken */\n          :\n            return 51\n            /* AmpersandAmpersandToken */\n            ;\n\n          default:\n            return undefined;\n        }\n      }\n\n      function checkAssignmentOperator(valueType) {\n        if (produceDiagnostics && operator >= 56\n        /* FirstAssignment */\n        && operator <= 68\n        /* LastAssignment */\n        ) {\n            // TypeScript 1.0 spec (April 2014): 4.17\n            // An assignment of the form\n            //    VarExpr = ValueExpr\n            // requires VarExpr to be classified as a reference\n            // A compound assignment furthermore requires VarExpr to be classified as a reference (section 4.1)\n            // and the type of the non - compound operation to be assignable to the type of VarExpr.\n            var ok = checkReferenceExpression(left, ts.Diagnostics.Invalid_left_hand_side_of_assignment_expression, ts.Diagnostics.Left_hand_side_of_assignment_expression_cannot_be_a_constant); // Use default messages\n\n            if (ok) {\n              // to avoid cascading errors check assignability only if 'isReference' check succeeded and no errors were reported\n              checkTypeAssignableTo(valueType, leftType, left,\n              /*headMessage*/\n              undefined);\n            }\n          }\n      }\n\n      function reportOperatorError() {\n        error(errorNode || operatorToken, ts.Diagnostics.Operator_0_cannot_be_applied_to_types_1_and_2, ts.tokenToString(operatorToken.kind), typeToString(leftType), typeToString(rightType));\n      }\n    }\n\n    function isYieldExpressionInClass(node) {\n      var current = node;\n      var parent = node.parent;\n\n      while (parent) {\n        if (ts.isFunctionLike(parent) && current === parent.body) {\n          return false;\n        } else if (ts.isClassLike(current)) {\n          return true;\n        }\n\n        current = parent;\n        parent = parent.parent;\n      }\n\n      return false;\n    }\n\n    function checkYieldExpression(node) {\n      // Grammar checking\n      if (produceDiagnostics) {\n        if (!(node.parserContextFlags & 2\n        /* Yield */\n        ) || isYieldExpressionInClass(node)) {\n          grammarErrorOnFirstToken(node, ts.Diagnostics.A_yield_expression_is_only_allowed_in_a_generator_body);\n        }\n\n        if (isInParameterInitializerBeforeContainingFunction(node)) {\n          error(node, ts.Diagnostics.yield_expressions_cannot_be_used_in_a_parameter_initializer);\n        }\n      }\n\n      if (node.expression) {\n        var func = ts.getContainingFunction(node); // If the user's code is syntactically correct, the func should always have a star. After all,\n        // we are in a yield context.\n\n        if (func && func.asteriskToken) {\n          var expressionType = checkExpressionCached(node.expression,\n          /*contextualMapper*/\n          undefined);\n          var expressionElementType = void 0;\n          var nodeIsYieldStar = !!node.asteriskToken;\n\n          if (nodeIsYieldStar) {\n            expressionElementType = checkElementTypeOfIterable(expressionType, node.expression);\n          } // There is no point in doing an assignability check if the function\n          // has no explicit return type because the return type is directly computed\n          // from the yield expressions.\n\n\n          if (func.type) {\n            var signatureElementType = getElementTypeOfIterableIterator(getTypeFromTypeNode(func.type)) || anyType;\n\n            if (nodeIsYieldStar) {\n              checkTypeAssignableTo(expressionElementType, signatureElementType, node.expression,\n              /*headMessage*/\n              undefined);\n            } else {\n              checkTypeAssignableTo(expressionType, signatureElementType, node.expression,\n              /*headMessage*/\n              undefined);\n            }\n          }\n        }\n      } // Both yield and yield* expressions have type 'any'\n\n\n      return anyType;\n    }\n\n    function checkConditionalExpression(node, contextualMapper) {\n      checkExpression(node.condition);\n      var type1 = checkExpression(node.whenTrue, contextualMapper);\n      var type2 = checkExpression(node.whenFalse, contextualMapper);\n      return getUnionType([type1, type2]);\n    }\n\n    function checkStringLiteralExpression(node) {\n      var contextualType = getContextualType(node);\n\n      if (contextualType && contextualTypeIsStringLiteralType(contextualType)) {\n        return getStringLiteralTypeForText(node.text);\n      }\n\n      return stringType;\n    }\n\n    function checkTemplateExpression(node) {\n      // We just want to check each expressions, but we are unconcerned with\n      // the type of each expression, as any value may be coerced into a string.\n      // It is worth asking whether this is what we really want though.\n      // A place where we actually *are* concerned with the expressions' types are\n      // in tagged templates.\n      ts.forEach(node.templateSpans, function (templateSpan) {\n        checkExpression(templateSpan.expression);\n      });\n      return stringType;\n    }\n\n    function checkExpressionWithContextualType(node, contextualType, contextualMapper) {\n      var saveContextualType = node.contextualType;\n      node.contextualType = contextualType;\n      var result = checkExpression(node, contextualMapper);\n      node.contextualType = saveContextualType;\n      return result;\n    }\n\n    function checkExpressionCached(node, contextualMapper) {\n      var links = getNodeLinks(node);\n\n      if (!links.resolvedType) {\n        links.resolvedType = checkExpression(node, contextualMapper);\n      }\n\n      return links.resolvedType;\n    }\n\n    function checkPropertyAssignment(node, contextualMapper) {\n      // Do not use hasDynamicName here, because that returns false for well known symbols.\n      // We want to perform checkComputedPropertyName for all computed properties, including\n      // well known symbols.\n      if (node.name.kind === 137\n      /* ComputedPropertyName */\n      ) {\n          checkComputedPropertyName(node.name);\n        }\n\n      return checkExpression(node.initializer, contextualMapper);\n    }\n\n    function checkObjectLiteralMethod(node, contextualMapper) {\n      // Grammar checking\n      checkGrammarMethod(node); // Do not use hasDynamicName here, because that returns false for well known symbols.\n      // We want to perform checkComputedPropertyName for all computed properties, including\n      // well known symbols.\n\n      if (node.name.kind === 137\n      /* ComputedPropertyName */\n      ) {\n          checkComputedPropertyName(node.name);\n        }\n\n      var uninstantiatedType = checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper);\n      return instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, contextualMapper);\n    }\n\n    function instantiateTypeWithSingleGenericCallSignature(node, type, contextualMapper) {\n      if (isInferentialContext(contextualMapper)) {\n        var signature = getSingleCallSignature(type);\n\n        if (signature && signature.typeParameters) {\n          var contextualType = getApparentTypeOfContextualType(node);\n\n          if (contextualType) {\n            var contextualSignature = getSingleCallSignature(contextualType);\n\n            if (contextualSignature && !contextualSignature.typeParameters) {\n              return getOrCreateTypeFromSignature(instantiateSignatureInContextOf(signature, contextualSignature, contextualMapper));\n            }\n          }\n        }\n      }\n\n      return type;\n    } // Checks an expression and returns its type. The contextualMapper parameter serves two purposes: When\n    // contextualMapper is not undefined and not equal to the identityMapper function object it indicates that the\n    // expression is being inferentially typed (section 4.12.2 in spec) and provides the type mapper to use in\n    // conjunction with the generic contextual type. When contextualMapper is equal to the identityMapper function\n    // object, it serves as an indicator that all contained function and arrow expressions should be considered to\n    // have the wildcard function type; this form of type check is used during overload resolution to exclude\n    // contextually typed function and arrow expressions in the initial phase.\n\n\n    function checkExpression(node, contextualMapper) {\n      var type;\n\n      if (node.kind === 136\n      /* QualifiedName */\n      ) {\n          type = checkQualifiedName(node);\n        } else {\n        var uninstantiatedType = checkExpressionWorker(node, contextualMapper);\n        type = instantiateTypeWithSingleGenericCallSignature(node, uninstantiatedType, contextualMapper);\n      }\n\n      if (isConstEnumObjectType(type)) {\n        // enum object type for const enums are only permitted in:\n        // - 'left' in property access\n        // - 'object' in indexed access\n        // - target in rhs of import statement\n        var ok = node.parent.kind === 169\n        /* PropertyAccessExpression */\n        && node.parent.expression === node || node.parent.kind === 170\n        /* ElementAccessExpression */\n        && node.parent.expression === node || (node.kind === 69\n        /* Identifier */\n        || node.kind === 136\n        /* QualifiedName */\n        ) && isInRightSideOfImportOrExportAssignment(node);\n\n        if (!ok) {\n          error(node, ts.Diagnostics.const_enums_can_only_be_used_in_property_or_index_access_expressions_or_the_right_hand_side_of_an_import_declaration_or_export_assignment);\n        }\n      }\n\n      return type;\n    }\n\n    function checkNumericLiteral(node) {\n      // Grammar checking\n      checkGrammarNumericLiteral(node);\n      return numberType;\n    }\n\n    function checkExpressionWorker(node, contextualMapper) {\n      switch (node.kind) {\n        case 69\n        /* Identifier */\n        :\n          return checkIdentifier(node);\n\n        case 97\n        /* ThisKeyword */\n        :\n          return checkThisExpression(node);\n\n        case 95\n        /* SuperKeyword */\n        :\n          return checkSuperExpression(node);\n\n        case 93\n        /* NullKeyword */\n        :\n          return nullType;\n\n        case 99\n        /* TrueKeyword */\n        :\n        case 84\n        /* FalseKeyword */\n        :\n          return booleanType;\n\n        case 8\n        /* NumericLiteral */\n        :\n          return checkNumericLiteral(node);\n\n        case 186\n        /* TemplateExpression */\n        :\n          return checkTemplateExpression(node);\n\n        case 9\n        /* StringLiteral */\n        :\n          return checkStringLiteralExpression(node);\n\n        case 11\n        /* NoSubstitutionTemplateLiteral */\n        :\n          return stringType;\n\n        case 10\n        /* RegularExpressionLiteral */\n        :\n          return globalRegExpType;\n\n        case 167\n        /* ArrayLiteralExpression */\n        :\n          return checkArrayLiteral(node, contextualMapper);\n\n        case 168\n        /* ObjectLiteralExpression */\n        :\n          return checkObjectLiteral(node, contextualMapper);\n\n        case 169\n        /* PropertyAccessExpression */\n        :\n          return checkPropertyAccessExpression(node);\n\n        case 170\n        /* ElementAccessExpression */\n        :\n          return checkIndexedAccess(node);\n\n        case 171\n        /* CallExpression */\n        :\n        case 172\n        /* NewExpression */\n        :\n          return checkCallExpression(node);\n\n        case 173\n        /* TaggedTemplateExpression */\n        :\n          return checkTaggedTemplateExpression(node);\n\n        case 175\n        /* ParenthesizedExpression */\n        :\n          return checkExpression(node.expression, contextualMapper);\n\n        case 189\n        /* ClassExpression */\n        :\n          return checkClassExpression(node);\n\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          return checkFunctionExpressionOrObjectLiteralMethod(node, contextualMapper);\n\n        case 179\n        /* TypeOfExpression */\n        :\n          return checkTypeOfExpression(node);\n\n        case 174\n        /* TypeAssertionExpression */\n        :\n        case 192\n        /* AsExpression */\n        :\n          return checkAssertion(node);\n\n        case 178\n        /* DeleteExpression */\n        :\n          return checkDeleteExpression(node);\n\n        case 180\n        /* VoidExpression */\n        :\n          return checkVoidExpression(node);\n\n        case 181\n        /* AwaitExpression */\n        :\n          return checkAwaitExpression(node);\n\n        case 182\n        /* PrefixUnaryExpression */\n        :\n          return checkPrefixUnaryExpression(node);\n\n        case 183\n        /* PostfixUnaryExpression */\n        :\n          return checkPostfixUnaryExpression(node);\n\n        case 184\n        /* BinaryExpression */\n        :\n          return checkBinaryExpression(node, contextualMapper);\n\n        case 185\n        /* ConditionalExpression */\n        :\n          return checkConditionalExpression(node, contextualMapper);\n\n        case 188\n        /* SpreadElementExpression */\n        :\n          return checkSpreadElementExpression(node, contextualMapper);\n\n        case 190\n        /* OmittedExpression */\n        :\n          return undefinedType;\n\n        case 187\n        /* YieldExpression */\n        :\n          return checkYieldExpression(node);\n\n        case 243\n        /* JsxExpression */\n        :\n          return checkJsxExpression(node);\n\n        case 236\n        /* JsxElement */\n        :\n          return checkJsxElement(node);\n\n        case 237\n        /* JsxSelfClosingElement */\n        :\n          return checkJsxSelfClosingElement(node);\n\n        case 238\n        /* JsxOpeningElement */\n        :\n          ts.Debug.fail(\"Shouldn't ever directly check a JsxOpeningElement\");\n      }\n\n      return unknownType;\n    } // DECLARATION AND STATEMENT TYPE CHECKING\n\n\n    function checkTypeParameter(node) {\n      // Grammar Checking\n      if (node.expression) {\n        grammarErrorOnFirstToken(node.expression, ts.Diagnostics.Type_expected);\n      }\n\n      checkSourceElement(node.constraint);\n      getConstraintOfTypeParameter(getDeclaredTypeOfTypeParameter(getSymbolOfNode(node)));\n\n      if (produceDiagnostics) {\n        checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_parameter_name_cannot_be_0);\n      }\n    }\n\n    function checkParameter(node) {\n      // Grammar checking\n      // It is a SyntaxError if the Identifier \"eval\" or the Identifier \"arguments\" occurs as the\n      // Identifier in a PropertySetParameterList of a PropertyAssignment that is contained in strict code\n      // or if its FunctionBody is strict code(11.1.5).\n      // Grammar checking\n      checkGrammarDecorators(node) || checkGrammarModifiers(node);\n      checkVariableLikeDeclaration(node);\n      var func = ts.getContainingFunction(node);\n\n      if (node.flags & 56\n      /* AccessibilityModifier */\n      ) {\n          func = ts.getContainingFunction(node);\n\n          if (!(func.kind === 145\n          /* Constructor */\n          && ts.nodeIsPresent(func.body))) {\n            error(node, ts.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);\n          }\n        }\n\n      if (node.questionToken && ts.isBindingPattern(node.name) && func.body) {\n        error(node, ts.Diagnostics.A_binding_pattern_parameter_cannot_be_optional_in_an_implementation_signature);\n      } // Only check rest parameter type if it's not a binding pattern. Since binding patterns are\n      // not allowed in a rest parameter, we already have an error from checkGrammarParameterList.\n\n\n      if (node.dotDotDotToken && !ts.isBindingPattern(node.name) && !isArrayType(getTypeOfSymbol(node.symbol))) {\n        error(node, ts.Diagnostics.A_rest_parameter_must_be_of_an_array_type);\n      }\n    }\n\n    function isSyntacticallyValidGenerator(node) {\n      if (!node.asteriskToken || !node.body) {\n        return false;\n      }\n\n      return node.kind === 144\n      /* MethodDeclaration */\n      || node.kind === 216\n      /* FunctionDeclaration */\n      || node.kind === 176\n      /* FunctionExpression */\n      ;\n    }\n\n    function getTypePredicateParameterIndex(parameterList, parameter) {\n      if (parameterList) {\n        for (var i = 0; i < parameterList.length; i++) {\n          var param = parameterList[i];\n\n          if (param.name.kind === 69\n          /* Identifier */\n          && param.name.text === parameter.text) {\n            return i;\n          }\n        }\n      }\n\n      return -1;\n    }\n\n    function checkTypePredicate(node) {\n      var parent = getTypePredicateParent(node);\n\n      if (!parent) {\n        // The parent must not be valid.\n        error(node, ts.Diagnostics.A_type_predicate_is_only_allowed_in_return_type_position_for_functions_and_methods);\n        return;\n      }\n\n      var typePredicate = getSignatureFromDeclaration(parent).typePredicate;\n\n      if (!typePredicate) {\n        return;\n      }\n\n      var parameterName = node.parameterName;\n\n      if (ts.isThisTypePredicate(typePredicate)) {\n        getTypeFromThisTypeNode(parameterName);\n      } else {\n        if (typePredicate.parameterIndex >= 0) {\n          if (parent.parameters[typePredicate.parameterIndex].dotDotDotToken) {\n            error(parameterName, ts.Diagnostics.A_type_predicate_cannot_reference_a_rest_parameter);\n          } else {\n            checkTypeAssignableTo(typePredicate.type, getTypeOfNode(parent.parameters[typePredicate.parameterIndex]), node.type);\n          }\n        } else if (parameterName) {\n          var hasReportedError = false;\n\n          for (var _i = 0, _a = parent.parameters; _i < _a.length; _i++) {\n            var name_14 = _a[_i].name;\n\n            if (ts.isBindingPattern(name_14) && checkIfTypePredicateVariableIsDeclaredInBindingPattern(name_14, parameterName, typePredicate.parameterName)) {\n              hasReportedError = true;\n              break;\n            }\n          }\n\n          if (!hasReportedError) {\n            error(node.parameterName, ts.Diagnostics.Cannot_find_parameter_0, typePredicate.parameterName);\n          }\n        }\n      }\n    }\n\n    function getTypePredicateParent(node) {\n      switch (node.parent.kind) {\n        case 177\n        /* ArrowFunction */\n        :\n        case 148\n        /* CallSignature */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 153\n        /* FunctionType */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n          var parent_7 = node.parent;\n\n          if (node === parent_7.type) {\n            return parent_7;\n          }\n\n      }\n    }\n\n    function checkIfTypePredicateVariableIsDeclaredInBindingPattern(pattern, predicateVariableNode, predicateVariableName) {\n      for (var _i = 0, _a = pattern.elements; _i < _a.length; _i++) {\n        var name_15 = _a[_i].name;\n\n        if (name_15.kind === 69\n        /* Identifier */\n        && name_15.text === predicateVariableName) {\n          error(predicateVariableNode, ts.Diagnostics.A_type_predicate_cannot_reference_element_0_in_a_binding_pattern, predicateVariableName);\n          return true;\n        } else if (name_15.kind === 165\n        /* ArrayBindingPattern */\n        || name_15.kind === 164\n        /* ObjectBindingPattern */\n        ) {\n            if (checkIfTypePredicateVariableIsDeclaredInBindingPattern(name_15, predicateVariableNode, predicateVariableName)) {\n              return true;\n            }\n          }\n      }\n    }\n\n    function checkSignatureDeclaration(node) {\n      // Grammar checking\n      if (node.kind === 150\n      /* IndexSignature */\n      ) {\n          checkGrammarIndexSignature(node);\n        } else if (node.kind === 153\n      /* FunctionType */\n      || node.kind === 216\n      /* FunctionDeclaration */\n      || node.kind === 154\n      /* ConstructorType */\n      || node.kind === 148\n      /* CallSignature */\n      || node.kind === 145\n      /* Constructor */\n      || node.kind === 149\n      /* ConstructSignature */\n      ) {\n          checkGrammarFunctionLikeDeclaration(node);\n        }\n\n      checkTypeParameters(node.typeParameters);\n      ts.forEach(node.parameters, checkParameter);\n\n      if (node.type) {\n        checkSourceElement(node.type);\n      }\n\n      if (produceDiagnostics) {\n        checkCollisionWithArgumentsInGeneratedCode(node);\n\n        if (compilerOptions.noImplicitAny && !node.type) {\n          switch (node.kind) {\n            case 149\n            /* ConstructSignature */\n            :\n              error(node, ts.Diagnostics.Construct_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);\n              break;\n\n            case 148\n            /* CallSignature */\n            :\n              error(node, ts.Diagnostics.Call_signature_which_lacks_return_type_annotation_implicitly_has_an_any_return_type);\n              break;\n          }\n        }\n\n        if (node.type) {\n          if (languageVersion >= 2\n          /* ES6 */\n          && isSyntacticallyValidGenerator(node)) {\n            var returnType = getTypeFromTypeNode(node.type);\n\n            if (returnType === voidType) {\n              error(node.type, ts.Diagnostics.A_generator_cannot_have_a_void_type_annotation);\n            } else {\n              var generatorElementType = getElementTypeOfIterableIterator(returnType) || anyType;\n              var iterableIteratorInstantiation = createIterableIteratorType(generatorElementType); // Naively, one could check that IterableIterator<any> is assignable to the return type annotation.\n              // However, that would not catch the error in the following case.\n              //\n              //    interface BadGenerator extends Iterable<number>, Iterator<string> { }\n              //    function* g(): BadGenerator { } // Iterable and Iterator have different types!\n              //\n\n              checkTypeAssignableTo(iterableIteratorInstantiation, returnType, node.type);\n            }\n          } else if (ts.isAsyncFunctionLike(node)) {\n            checkAsyncFunctionReturnType(node);\n          }\n        }\n      }\n\n      checkSpecializedSignatureDeclaration(node);\n    }\n\n    function checkTypeForDuplicateIndexSignatures(node) {\n      if (node.kind === 218\n      /* InterfaceDeclaration */\n      ) {\n          var nodeSymbol = getSymbolOfNode(node); // in case of merging interface declaration it is possible that we'll enter this check procedure several times for every declaration\n          // to prevent this run check only for the first declaration of a given kind\n\n          if (nodeSymbol.declarations.length > 0 && nodeSymbol.declarations[0] !== node) {\n            return;\n          }\n        } // TypeScript 1.0 spec (April 2014)\n      // 3.7.4: An object type can contain at most one string index signature and one numeric index signature.\n      // 8.5: A class declaration can have at most one string index member declaration and one numeric index member declaration\n\n\n      var indexSymbol = getIndexSymbol(getSymbolOfNode(node));\n\n      if (indexSymbol) {\n        var seenNumericIndexer = false;\n        var seenStringIndexer = false;\n\n        for (var _i = 0, _a = indexSymbol.declarations; _i < _a.length; _i++) {\n          var decl = _a[_i];\n          var declaration = decl;\n\n          if (declaration.parameters.length === 1 && declaration.parameters[0].type) {\n            switch (declaration.parameters[0].type.kind) {\n              case 130\n              /* StringKeyword */\n              :\n                if (!seenStringIndexer) {\n                  seenStringIndexer = true;\n                } else {\n                  error(declaration, ts.Diagnostics.Duplicate_string_index_signature);\n                }\n\n                break;\n\n              case 128\n              /* NumberKeyword */\n              :\n                if (!seenNumericIndexer) {\n                  seenNumericIndexer = true;\n                } else {\n                  error(declaration, ts.Diagnostics.Duplicate_number_index_signature);\n                }\n\n                break;\n            }\n          }\n        }\n      }\n    }\n\n    function checkPropertyDeclaration(node) {\n      // Grammar checking\n      checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarProperty(node) || checkGrammarComputedPropertyName(node.name);\n      checkVariableLikeDeclaration(node);\n    }\n\n    function checkMethodDeclaration(node) {\n      // Grammar checking\n      checkGrammarMethod(node) || checkGrammarComputedPropertyName(node.name); // Grammar checking for modifiers is done inside the function checkGrammarFunctionLikeDeclaration\n\n      checkFunctionOrMethodDeclaration(node); // Abstract methods cannot have an implementation.\n      // Extra checks are to avoid reporting multiple errors relating to the \"abstractness\" of the node.\n\n      if (node.flags & 128\n      /* Abstract */\n      && node.body) {\n        error(node, ts.Diagnostics.Method_0_cannot_have_an_implementation_because_it_is_marked_abstract, ts.declarationNameToString(node.name));\n      }\n    }\n\n    function checkConstructorDeclaration(node) {\n      // Grammar check on signature of constructor and modifier of the constructor is done in checkSignatureDeclaration function.\n      checkSignatureDeclaration(node); // Grammar check for checking only related to constructoDeclaration\n\n      checkGrammarConstructorTypeParameters(node) || checkGrammarConstructorTypeAnnotation(node);\n      checkSourceElement(node.body);\n      var symbol = getSymbolOfNode(node);\n      var firstDeclaration = ts.getDeclarationOfKind(symbol, node.kind); // Only type check the symbol once\n\n      if (node === firstDeclaration) {\n        checkFunctionOrConstructorSymbol(symbol);\n      } // exit early in the case of signature - super checks are not relevant to them\n\n\n      if (ts.nodeIsMissing(node.body)) {\n        return;\n      }\n\n      if (!produceDiagnostics) {\n        return;\n      }\n\n      function markThisReferencesAsErrors(n) {\n        if (n.kind === 97\n        /* ThisKeyword */\n        ) {\n            error(n, ts.Diagnostics.this_cannot_be_referenced_in_current_location);\n          } else if (n.kind !== 176\n        /* FunctionExpression */\n        && n.kind !== 216\n        /* FunctionDeclaration */\n        ) {\n            ts.forEachChild(n, markThisReferencesAsErrors);\n          }\n      }\n\n      function isInstancePropertyWithInitializer(n) {\n        return n.kind === 142\n        /* PropertyDeclaration */\n        && !(n.flags & 64\n        /* Static */\n        ) && !!n.initializer;\n      } // TS 1.0 spec (April 2014): 8.3.2\n      // Constructors of classes with no extends clause may not contain super calls, whereas\n      // constructors of derived classes must contain at least one super call somewhere in their function body.\n\n\n      var containingClassDecl = node.parent;\n\n      if (ts.getClassExtendsHeritageClauseElement(containingClassDecl)) {\n        var classExtendsNull = classDeclarationExtendsNull(containingClassDecl);\n        var superCall = getSuperCallInConstructor(node);\n\n        if (superCall) {\n          if (classExtendsNull) {\n            error(superCall, ts.Diagnostics.A_constructor_cannot_contain_a_super_call_when_its_class_extends_null);\n          } // The first statement in the body of a constructor (excluding prologue directives) must be a super call\n          // if both of the following are true:\n          // - The containing class is a derived class.\n          // - The constructor declares parameter properties\n          //   or the containing class declares instance member variables with initializers.\n\n\n          var superCallShouldBeFirst = ts.forEach(node.parent.members, isInstancePropertyWithInitializer) || ts.forEach(node.parameters, function (p) {\n            return p.flags & (8\n            /* Public */\n            | 16\n            /* Private */\n            | 32\n            /* Protected */\n            );\n          }); // Skip past any prologue directives to find the first statement\n          // to ensure that it was a super call.\n\n          if (superCallShouldBeFirst) {\n            var statements = node.body.statements;\n            var superCallStatement = void 0;\n\n            for (var _i = 0, statements_2 = statements; _i < statements_2.length; _i++) {\n              var statement = statements_2[_i];\n\n              if (statement.kind === 198\n              /* ExpressionStatement */\n              && ts.isSuperCallExpression(statement.expression)) {\n                superCallStatement = statement;\n                break;\n              }\n\n              if (!ts.isPrologueDirective(statement)) {\n                break;\n              }\n            }\n\n            if (!superCallStatement) {\n              error(node, ts.Diagnostics.A_super_call_must_be_the_first_statement_in_the_constructor_when_a_class_contains_initialized_properties_or_has_parameter_properties);\n            }\n          }\n        } else if (!classExtendsNull) {\n          error(node, ts.Diagnostics.Constructors_for_derived_classes_must_contain_a_super_call);\n        }\n      }\n    }\n\n    function checkAccessorDeclaration(node) {\n      if (produceDiagnostics) {\n        // Grammar checking accessors\n        checkGrammarFunctionLikeDeclaration(node) || checkGrammarAccessor(node) || checkGrammarComputedPropertyName(node.name);\n        checkDecorators(node);\n        checkSignatureDeclaration(node);\n\n        if (node.kind === 146\n        /* GetAccessor */\n        ) {\n            if (!ts.isInAmbientContext(node) && ts.nodeIsPresent(node.body) && node.flags & 524288\n            /* HasImplicitReturn */\n            ) {\n              if (node.flags & 1048576\n              /* HasExplicitReturn */\n              ) {\n                  if (compilerOptions.noImplicitReturns) {\n                    error(node.name, ts.Diagnostics.Not_all_code_paths_return_a_value);\n                  }\n                } else {\n                error(node.name, ts.Diagnostics.A_get_accessor_must_return_a_value);\n              }\n            }\n          } // Do not use hasDynamicName here, because that returns false for well known symbols.\n        // We want to perform checkComputedPropertyName for all computed properties, including\n        // well known symbols.\n\n\n        if (node.name.kind === 137\n        /* ComputedPropertyName */\n        ) {\n            checkComputedPropertyName(node.name);\n          }\n\n        if (!ts.hasDynamicName(node)) {\n          // TypeScript 1.0 spec (April 2014): 8.4.3\n          // Accessors for the same member name must specify the same accessibility.\n          var otherKind = node.kind === 146\n          /* GetAccessor */\n          ? 147\n          /* SetAccessor */\n          : 146\n          /* GetAccessor */\n          ;\n          var otherAccessor = ts.getDeclarationOfKind(node.symbol, otherKind);\n\n          if (otherAccessor) {\n            if ((node.flags & 56\n            /* AccessibilityModifier */\n            ) !== (otherAccessor.flags & 56\n            /* AccessibilityModifier */\n            )) {\n              error(node.name, ts.Diagnostics.Getter_and_setter_accessors_do_not_agree_in_visibility);\n            }\n\n            var currentAccessorType = getAnnotatedAccessorType(node);\n            var otherAccessorType = getAnnotatedAccessorType(otherAccessor); // TypeScript 1.0 spec (April 2014): 4.5\n            // If both accessors include type annotations, the specified types must be identical.\n\n            if (currentAccessorType && otherAccessorType) {\n              if (!isTypeIdenticalTo(currentAccessorType, otherAccessorType)) {\n                error(node, ts.Diagnostics.get_and_set_accessor_must_have_the_same_type);\n              }\n            }\n          }\n        }\n\n        getTypeOfAccessors(getSymbolOfNode(node));\n      }\n\n      if (node.parent.kind !== 168\n      /* ObjectLiteralExpression */\n      ) {\n          checkSourceElement(node.body);\n        } else {\n        checkNodeDeferred(node);\n      }\n    }\n\n    function checkAccessorDeferred(node) {\n      checkSourceElement(node.body);\n    }\n\n    function checkMissingDeclaration(node) {\n      checkDecorators(node);\n    }\n\n    function checkTypeArgumentConstraints(typeParameters, typeArgumentNodes) {\n      var typeArguments;\n      var mapper;\n      var result = true;\n\n      for (var i = 0; i < typeParameters.length; i++) {\n        var constraint = getConstraintOfTypeParameter(typeParameters[i]);\n\n        if (constraint) {\n          if (!typeArguments) {\n            typeArguments = ts.map(typeArgumentNodes, getTypeFromTypeNode);\n            mapper = createTypeMapper(typeParameters, typeArguments);\n          }\n\n          var typeArgument = typeArguments[i];\n          result = result && checkTypeAssignableTo(typeArgument, getTypeWithThisArgument(instantiateType(constraint, mapper), typeArgument), typeArgumentNodes[i], ts.Diagnostics.Type_0_does_not_satisfy_the_constraint_1);\n        }\n      }\n\n      return result;\n    }\n\n    function checkTypeReferenceNode(node) {\n      checkGrammarTypeArguments(node, node.typeArguments);\n      var type = getTypeFromTypeReference(node);\n\n      if (type !== unknownType && node.typeArguments) {\n        // Do type argument local checks only if referenced type is successfully resolved\n        ts.forEach(node.typeArguments, checkSourceElement);\n\n        if (produceDiagnostics) {\n          var symbol = getNodeLinks(node).resolvedSymbol;\n          var typeParameters = symbol.flags & 524288\n          /* TypeAlias */\n          ? getSymbolLinks(symbol).typeParameters : type.target.localTypeParameters;\n          checkTypeArgumentConstraints(typeParameters, node.typeArguments);\n        }\n      }\n    }\n\n    function checkTypeQuery(node) {\n      getTypeFromTypeQueryNode(node);\n    }\n\n    function checkTypeLiteral(node) {\n      ts.forEach(node.members, checkSourceElement);\n\n      if (produceDiagnostics) {\n        var type = getTypeFromTypeLiteralOrFunctionOrConstructorTypeNode(node);\n        checkIndexConstraints(type);\n        checkTypeForDuplicateIndexSignatures(node);\n      }\n    }\n\n    function checkArrayType(node) {\n      checkSourceElement(node.elementType);\n    }\n\n    function checkTupleType(node) {\n      // Grammar checking\n      var hasErrorFromDisallowedTrailingComma = checkGrammarForDisallowedTrailingComma(node.elementTypes);\n\n      if (!hasErrorFromDisallowedTrailingComma && node.elementTypes.length === 0) {\n        grammarErrorOnNode(node, ts.Diagnostics.A_tuple_type_element_list_cannot_be_empty);\n      }\n\n      ts.forEach(node.elementTypes, checkSourceElement);\n    }\n\n    function checkUnionOrIntersectionType(node) {\n      ts.forEach(node.types, checkSourceElement);\n    }\n\n    function isPrivateWithinAmbient(node) {\n      return node.flags & 16\n      /* Private */\n      && ts.isInAmbientContext(node);\n    }\n\n    function checkSpecializedSignatureDeclaration(signatureDeclarationNode) {\n      if (!produceDiagnostics) {\n        return;\n      }\n\n      var signature = getSignatureFromDeclaration(signatureDeclarationNode);\n\n      if (!signature.hasStringLiterals) {\n        return;\n      } // TypeScript 1.0 spec (April 2014): 3.7.2.2\n      // Specialized signatures are not permitted in conjunction with a function body\n\n\n      if (ts.nodeIsPresent(signatureDeclarationNode.body)) {\n        error(signatureDeclarationNode, ts.Diagnostics.A_signature_with_an_implementation_cannot_use_a_string_literal_type);\n        return;\n      } // TypeScript 1.0 spec (April 2014): 3.7.2.4\n      // Every specialized call or construct signature in an object type must be assignable\n      // to at least one non-specialized call or construct signature in the same object type\n\n\n      var signaturesToCheck; // Unnamed (call\\construct) signatures in interfaces are inherited and not shadowed so examining just node symbol won't give complete answer.\n      // Use declaring type to obtain full list of signatures.\n\n      if (!signatureDeclarationNode.name && signatureDeclarationNode.parent && signatureDeclarationNode.parent.kind === 218\n      /* InterfaceDeclaration */\n      ) {\n          ts.Debug.assert(signatureDeclarationNode.kind === 148\n          /* CallSignature */\n          || signatureDeclarationNode.kind === 149\n          /* ConstructSignature */\n          );\n          var signatureKind = signatureDeclarationNode.kind === 148\n          /* CallSignature */\n          ? 0\n          /* Call */\n          : 1\n          /* Construct */\n          ;\n          var containingSymbol = getSymbolOfNode(signatureDeclarationNode.parent);\n          var containingType = getDeclaredTypeOfSymbol(containingSymbol);\n          signaturesToCheck = getSignaturesOfType(containingType, signatureKind);\n        } else {\n        signaturesToCheck = getSignaturesOfSymbol(getSymbolOfNode(signatureDeclarationNode));\n      }\n\n      for (var _i = 0, signaturesToCheck_1 = signaturesToCheck; _i < signaturesToCheck_1.length; _i++) {\n        var otherSignature = signaturesToCheck_1[_i];\n\n        if (!otherSignature.hasStringLiterals && isSignatureAssignableTo(signature, otherSignature,\n        /*ignoreReturnTypes*/\n        false)) {\n          return;\n        }\n      }\n\n      error(signatureDeclarationNode, ts.Diagnostics.Specialized_overload_signature_is_not_assignable_to_any_non_specialized_signature);\n    }\n\n    function getEffectiveDeclarationFlags(n, flagsToCheck) {\n      var flags = ts.getCombinedNodeFlags(n); // children of classes (even ambient classes) should not be marked as ambient or export\n      // because those flags have no useful semantics there.\n\n      if (n.parent.kind !== 218\n      /* InterfaceDeclaration */\n      && n.parent.kind !== 217\n      /* ClassDeclaration */\n      && n.parent.kind !== 189\n      /* ClassExpression */\n      && ts.isInAmbientContext(n)) {\n        if (!(flags & 4\n        /* Ambient */\n        )) {\n          // It is nested in an ambient context, which means it is automatically exported\n          flags |= 2\n          /* Export */\n          ;\n        }\n\n        flags |= 4\n        /* Ambient */\n        ;\n      }\n\n      return flags & flagsToCheck;\n    }\n\n    function checkFunctionOrConstructorSymbol(symbol) {\n      if (!produceDiagnostics) {\n        return;\n      }\n\n      function getCanonicalOverload(overloads, implementation) {\n        // Consider the canonical set of flags to be the flags of the bodyDeclaration or the first declaration\n        // Error on all deviations from this canonical set of flags\n        // The caveat is that if some overloads are defined in lib.d.ts, we don't want to\n        // report the errors on those. To achieve this, we will say that the implementation is\n        // the canonical signature only if it is in the same container as the first overload\n        var implementationSharesContainerWithFirstOverload = implementation !== undefined && implementation.parent === overloads[0].parent;\n        return implementationSharesContainerWithFirstOverload ? implementation : overloads[0];\n      }\n\n      function checkFlagAgreementBetweenOverloads(overloads, implementation, flagsToCheck, someOverloadFlags, allOverloadFlags) {\n        // Error if some overloads have a flag that is not shared by all overloads. To find the\n        // deviations, we XOR someOverloadFlags with allOverloadFlags\n        var someButNotAllOverloadFlags = someOverloadFlags ^ allOverloadFlags;\n\n        if (someButNotAllOverloadFlags !== 0) {\n          var canonicalFlags_1 = getEffectiveDeclarationFlags(getCanonicalOverload(overloads, implementation), flagsToCheck);\n          ts.forEach(overloads, function (o) {\n            var deviation = getEffectiveDeclarationFlags(o, flagsToCheck) ^ canonicalFlags_1;\n\n            if (deviation & 2\n            /* Export */\n            ) {\n                error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_exported_or_not_exported);\n              } else if (deviation & 4\n            /* Ambient */\n            ) {\n                error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_ambient_or_non_ambient);\n              } else if (deviation & (16\n            /* Private */\n            | 32\n            /* Protected */\n            )) {\n              error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_public_private_or_protected);\n            } else if (deviation & 128\n            /* Abstract */\n            ) {\n                error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_abstract_or_not_abstract);\n              }\n          });\n        }\n      }\n\n      function checkQuestionTokenAgreementBetweenOverloads(overloads, implementation, someHaveQuestionToken, allHaveQuestionToken) {\n        if (someHaveQuestionToken !== allHaveQuestionToken) {\n          var canonicalHasQuestionToken_1 = ts.hasQuestionToken(getCanonicalOverload(overloads, implementation));\n          ts.forEach(overloads, function (o) {\n            var deviation = ts.hasQuestionToken(o) !== canonicalHasQuestionToken_1;\n\n            if (deviation) {\n              error(o.name, ts.Diagnostics.Overload_signatures_must_all_be_optional_or_required);\n            }\n          });\n        }\n      }\n\n      var flagsToCheck = 2\n      /* Export */\n      | 4\n      /* Ambient */\n      | 16\n      /* Private */\n      | 32\n      /* Protected */\n      | 128\n      /* Abstract */\n      ;\n      var someNodeFlags = 0;\n      var allNodeFlags = flagsToCheck;\n      var someHaveQuestionToken = false;\n      var allHaveQuestionToken = true;\n      var hasOverloads = false;\n      var bodyDeclaration;\n      var lastSeenNonAmbientDeclaration;\n      var previousDeclaration;\n      var declarations = symbol.declarations;\n      var isConstructor = (symbol.flags & 16384\n      /* Constructor */\n      ) !== 0;\n\n      function reportImplementationExpectedError(node) {\n        if (node.name && ts.nodeIsMissing(node.name)) {\n          return;\n        }\n\n        var seen = false;\n        var subsequentNode = ts.forEachChild(node.parent, function (c) {\n          if (seen) {\n            return c;\n          } else {\n            seen = c === node;\n          }\n        }); // We may be here because of some extra junk between overloads that could not be parsed into a valid node.\n        // In this case the subsequent node is not really consecutive (.pos !== node.end), and we must ignore it here.\n\n        if (subsequentNode && subsequentNode.pos === node.end) {\n          if (subsequentNode.kind === node.kind) {\n            var errorNode_1 = subsequentNode.name || subsequentNode; // TODO(jfreeman): These are methods, so handle computed name case\n\n            if (node.name && subsequentNode.name && node.name.text === subsequentNode.name.text) {\n              var reportError = (node.kind === 144\n              /* MethodDeclaration */\n              || node.kind === 143\n              /* MethodSignature */\n              ) && (node.flags & 64\n              /* Static */\n              ) !== (subsequentNode.flags & 64\n              /* Static */\n              ); // we can get here in two cases\n              // 1. mixed static and instance class members\n              // 2. something with the same name was defined before the set of overloads that prevents them from merging\n              // here we'll report error only for the first case since for second we should already report error in binder\n\n              if (reportError) {\n                var diagnostic = node.flags & 64\n                /* Static */\n                ? ts.Diagnostics.Function_overload_must_be_static : ts.Diagnostics.Function_overload_must_not_be_static;\n                error(errorNode_1, diagnostic);\n              }\n\n              return;\n            } else if (ts.nodeIsPresent(subsequentNode.body)) {\n              error(errorNode_1, ts.Diagnostics.Function_implementation_name_must_be_0, ts.declarationNameToString(node.name));\n              return;\n            }\n          }\n        }\n\n        var errorNode = node.name || node;\n\n        if (isConstructor) {\n          error(errorNode, ts.Diagnostics.Constructor_implementation_is_missing);\n        } else {\n          // Report different errors regarding non-consecutive blocks of declarations depending on whether\n          // the node in question is abstract.\n          if (node.flags & 128\n          /* Abstract */\n          ) {\n              error(errorNode, ts.Diagnostics.All_declarations_of_an_abstract_method_must_be_consecutive);\n            } else {\n            error(errorNode, ts.Diagnostics.Function_implementation_is_missing_or_not_immediately_following_the_declaration);\n          }\n        }\n      } // when checking exported function declarations across modules check only duplicate implementations\n      // names and consistency of modifiers are verified when we check local symbol\n\n\n      var isExportSymbolInsideModule = symbol.parent && symbol.parent.flags & 1536\n      /* Module */\n      ;\n      var duplicateFunctionDeclaration = false;\n      var multipleConstructorImplementation = false;\n\n      for (var _i = 0, declarations_4 = declarations; _i < declarations_4.length; _i++) {\n        var current = declarations_4[_i];\n        var node = current;\n        var inAmbientContext = ts.isInAmbientContext(node);\n        var inAmbientContextOrInterface = node.parent.kind === 218\n        /* InterfaceDeclaration */\n        || node.parent.kind === 156\n        /* TypeLiteral */\n        || inAmbientContext;\n\n        if (inAmbientContextOrInterface) {\n          // check if declarations are consecutive only if they are non-ambient\n          // 1. ambient declarations can be interleaved\n          // i.e. this is legal\n          //     declare function foo();\n          //     declare function bar();\n          //     declare function foo();\n          // 2. mixing ambient and non-ambient declarations is a separate error that will be reported - do not want to report an extra one\n          previousDeclaration = undefined;\n        }\n\n        if (node.kind === 216\n        /* FunctionDeclaration */\n        || node.kind === 144\n        /* MethodDeclaration */\n        || node.kind === 143\n        /* MethodSignature */\n        || node.kind === 145\n        /* Constructor */\n        ) {\n            var currentNodeFlags = getEffectiveDeclarationFlags(node, flagsToCheck);\n            someNodeFlags |= currentNodeFlags;\n            allNodeFlags &= currentNodeFlags;\n            someHaveQuestionToken = someHaveQuestionToken || ts.hasQuestionToken(node);\n            allHaveQuestionToken = allHaveQuestionToken && ts.hasQuestionToken(node);\n\n            if (ts.nodeIsPresent(node.body) && bodyDeclaration) {\n              if (isConstructor) {\n                multipleConstructorImplementation = true;\n              } else {\n                duplicateFunctionDeclaration = true;\n              }\n            } else if (!isExportSymbolInsideModule && previousDeclaration && previousDeclaration.parent === node.parent && previousDeclaration.end !== node.pos) {\n              reportImplementationExpectedError(previousDeclaration);\n            }\n\n            if (ts.nodeIsPresent(node.body)) {\n              if (!bodyDeclaration) {\n                bodyDeclaration = node;\n              }\n            } else {\n              hasOverloads = true;\n            }\n\n            previousDeclaration = node;\n\n            if (!inAmbientContextOrInterface) {\n              lastSeenNonAmbientDeclaration = node;\n            }\n          }\n      }\n\n      if (multipleConstructorImplementation) {\n        ts.forEach(declarations, function (declaration) {\n          error(declaration, ts.Diagnostics.Multiple_constructor_implementations_are_not_allowed);\n        });\n      }\n\n      if (duplicateFunctionDeclaration) {\n        ts.forEach(declarations, function (declaration) {\n          error(declaration.name, ts.Diagnostics.Duplicate_function_implementation);\n        });\n      } // Abstract methods can't have an implementation -- in particular, they don't need one.\n\n\n      if (!isExportSymbolInsideModule && lastSeenNonAmbientDeclaration && !lastSeenNonAmbientDeclaration.body && !(lastSeenNonAmbientDeclaration.flags & 128\n      /* Abstract */\n      )) {\n        reportImplementationExpectedError(lastSeenNonAmbientDeclaration);\n      }\n\n      if (hasOverloads) {\n        checkFlagAgreementBetweenOverloads(declarations, bodyDeclaration, flagsToCheck, someNodeFlags, allNodeFlags);\n        checkQuestionTokenAgreementBetweenOverloads(declarations, bodyDeclaration, someHaveQuestionToken, allHaveQuestionToken);\n\n        if (bodyDeclaration) {\n          var signatures = getSignaturesOfSymbol(symbol);\n          var bodySignature = getSignatureFromDeclaration(bodyDeclaration); // If the implementation signature has string literals, we will have reported an error in\n          // checkSpecializedSignatureDeclaration\n\n          if (!bodySignature.hasStringLiterals) {\n            // TypeScript 1.0 spec (April 2014): 6.1\n            // If a function declaration includes overloads, the overloads determine the call\n            // signatures of the type given to the function object\n            // and the function implementation signature must be assignable to that type\n            //\n            // TypeScript 1.0 spec (April 2014): 3.8.4\n            // Note that specialized call and construct signatures (section 3.7.2.4) are not significant when determining assignment compatibility\n            // Consider checking against specialized signatures too. Not doing so creates a type hole:\n            //\n            // function g(x: \"hi\", y: boolean);\n            // function g(x: string, y: {});\n            // function g(x: string, y: string) { }\n            //\n            // The implementation is completely unrelated to the specialized signature, yet we do not check this.\n            for (var _a = 0, signatures_3 = signatures; _a < signatures_3.length; _a++) {\n              var signature = signatures_3[_a];\n\n              if (!signature.hasStringLiterals && !isImplementationCompatibleWithOverload(bodySignature, signature)) {\n                error(signature.declaration, ts.Diagnostics.Overload_signature_is_not_compatible_with_function_implementation);\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n\n    function checkExportsOnMergedDeclarations(node) {\n      if (!produceDiagnostics) {\n        return;\n      } // if localSymbol is defined on node then node itself is exported - check is required\n\n\n      var symbol = node.localSymbol;\n\n      if (!symbol) {\n        // local symbol is undefined => this declaration is non-exported.\n        // however symbol might contain other declarations that are exported\n        symbol = getSymbolOfNode(node);\n\n        if (!(symbol.flags & 7340032\n        /* Export */\n        )) {\n          // this is a pure local symbol (all declarations are non-exported) - no need to check anything\n          return;\n        }\n      } // run the check only for the first declaration in the list\n\n\n      if (ts.getDeclarationOfKind(symbol, node.kind) !== node) {\n        return;\n      } // we use SymbolFlags.ExportValue, SymbolFlags.ExportType and SymbolFlags.ExportNamespace\n      // to denote disjoint declarationSpaces (without making new enum type).\n\n\n      var exportedDeclarationSpaces = 0\n      /* None */\n      ;\n      var nonExportedDeclarationSpaces = 0\n      /* None */\n      ;\n      var defaultExportedDeclarationSpaces = 0\n      /* None */\n      ;\n\n      for (var _i = 0, _a = symbol.declarations; _i < _a.length; _i++) {\n        var d = _a[_i];\n        var declarationSpaces = getDeclarationSpaces(d);\n        var effectiveDeclarationFlags = getEffectiveDeclarationFlags(d, 2\n        /* Export */\n        | 512\n        /* Default */\n        );\n\n        if (effectiveDeclarationFlags & 2\n        /* Export */\n        ) {\n            if (effectiveDeclarationFlags & 512\n            /* Default */\n            ) {\n                defaultExportedDeclarationSpaces |= declarationSpaces;\n              } else {\n              exportedDeclarationSpaces |= declarationSpaces;\n            }\n          } else {\n          nonExportedDeclarationSpaces |= declarationSpaces;\n        }\n      } // Spaces for anyting not declared a 'default export'.\n\n\n      var nonDefaultExportedDeclarationSpaces = exportedDeclarationSpaces | nonExportedDeclarationSpaces;\n      var commonDeclarationSpacesForExportsAndLocals = exportedDeclarationSpaces & nonExportedDeclarationSpaces;\n      var commonDeclarationSpacesForDefaultAndNonDefault = defaultExportedDeclarationSpaces & nonDefaultExportedDeclarationSpaces;\n\n      if (commonDeclarationSpacesForExportsAndLocals || commonDeclarationSpacesForDefaultAndNonDefault) {\n        // declaration spaces for exported and non-exported declarations intersect\n        for (var _b = 0, _c = symbol.declarations; _b < _c.length; _b++) {\n          var d = _c[_b];\n          var declarationSpaces = getDeclarationSpaces(d); // Only error on the declarations that conributed to the intersecting spaces.\n\n          if (declarationSpaces & commonDeclarationSpacesForDefaultAndNonDefault) {\n            error(d.name, ts.Diagnostics.Merged_declaration_0_cannot_include_a_default_export_declaration_Consider_adding_a_separate_export_default_0_declaration_instead, ts.declarationNameToString(d.name));\n          } else if (declarationSpaces & commonDeclarationSpacesForExportsAndLocals) {\n            error(d.name, ts.Diagnostics.Individual_declarations_in_merged_declaration_0_must_be_all_exported_or_all_local, ts.declarationNameToString(d.name));\n          }\n        }\n      }\n\n      function getDeclarationSpaces(d) {\n        switch (d.kind) {\n          case 218\n          /* InterfaceDeclaration */\n          :\n            return 2097152\n            /* ExportType */\n            ;\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            return ts.isAmbientModule(d) || ts.getModuleInstanceState(d) !== 0\n            /* NonInstantiated */\n            ? 4194304\n            /* ExportNamespace */\n            | 1048576\n            /* ExportValue */\n            : 4194304\n            /* ExportNamespace */\n            ;\n\n          case 217\n          /* ClassDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n            return 2097152\n            /* ExportType */\n            | 1048576\n            /* ExportValue */\n            ;\n\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n            var result_2 = 0;\n            var target = resolveAlias(getSymbolOfNode(d));\n            ts.forEach(target.declarations, function (d) {\n              result_2 |= getDeclarationSpaces(d);\n            });\n            return result_2;\n\n          default:\n            return 1048576\n            /* ExportValue */\n            ;\n        }\n      }\n    }\n\n    function checkNonThenableType(type, location, message) {\n      type = getWidenedType(type);\n\n      if (!isTypeAny(type) && isTypeAssignableTo(type, getGlobalThenableType())) {\n        if (location) {\n          if (!message) {\n            message = ts.Diagnostics.Operand_for_await_does_not_have_a_valid_callable_then_member;\n          }\n\n          error(location, message);\n        }\n\n        return unknownType;\n      }\n\n      return type;\n    }\n    /**\n      * Gets the \"promised type\" of a promise.\n      * @param type The type of the promise.\n      * @remarks The \"promised type\" of a type is the type of the \"value\" parameter of the \"onfulfilled\" callback.\n      */\n\n\n    function getPromisedType(promise) {\n      //\n      //  { // promise\n      //      then( // thenFunction\n      //          onfulfilled: ( // onfulfilledParameterType\n      //              value: T // valueParameterType\n      //          ) => any\n      //      ): any;\n      //  }\n      //\n      if (promise.flags & 1\n      /* Any */\n      ) {\n          return undefined;\n        }\n\n      if (promise.flags & 4096\n      /* Reference */\n      && promise.target === tryGetGlobalPromiseType()) {\n        return promise.typeArguments[0];\n      }\n\n      var globalPromiseLikeType = getInstantiatedGlobalPromiseLikeType();\n\n      if (globalPromiseLikeType === emptyObjectType || !isTypeAssignableTo(promise, globalPromiseLikeType)) {\n        return undefined;\n      }\n\n      var thenFunction = getTypeOfPropertyOfType(promise, \"then\");\n\n      if (thenFunction && thenFunction.flags & 1\n      /* Any */\n      ) {\n        return undefined;\n      }\n\n      var thenSignatures = thenFunction ? getSignaturesOfType(thenFunction, 0\n      /* Call */\n      ) : emptyArray;\n\n      if (thenSignatures.length === 0) {\n        return undefined;\n      }\n\n      var onfulfilledParameterType = getUnionType(ts.map(thenSignatures, getTypeOfFirstParameterOfSignature));\n\n      if (onfulfilledParameterType.flags & 1\n      /* Any */\n      ) {\n          return undefined;\n        }\n\n      var onfulfilledParameterSignatures = getSignaturesOfType(onfulfilledParameterType, 0\n      /* Call */\n      );\n\n      if (onfulfilledParameterSignatures.length === 0) {\n        return undefined;\n      }\n\n      var valueParameterType = getUnionType(ts.map(onfulfilledParameterSignatures, getTypeOfFirstParameterOfSignature));\n      return valueParameterType;\n    }\n\n    function getTypeOfFirstParameterOfSignature(signature) {\n      return getTypeAtPosition(signature, 0);\n    }\n    /**\n      * Gets the \"awaited type\" of a type.\n      * @param type The type to await.\n      * @remarks The \"awaited type\" of an expression is its \"promised type\" if the expression is a\n      * Promise-like type; otherwise, it is the type of the expression. This is used to reflect\n      * The runtime behavior of the `await` keyword.\n      */\n\n\n    function getAwaitedType(type) {\n      return checkAwaitedType(type,\n      /*location*/\n      undefined,\n      /*message*/\n      undefined);\n    }\n\n    function checkAwaitedType(type, location, message) {\n      return checkAwaitedTypeWorker(type);\n\n      function checkAwaitedTypeWorker(type) {\n        if (type.flags & 16384\n        /* Union */\n        ) {\n            var types = [];\n\n            for (var _i = 0, _a = type.types; _i < _a.length; _i++) {\n              var constituentType = _a[_i];\n              types.push(checkAwaitedTypeWorker(constituentType));\n            }\n\n            return getUnionType(types);\n          } else {\n          var promisedType = getPromisedType(type);\n\n          if (promisedType === undefined) {\n            // The type was not a PromiseLike, so it could not be unwrapped any further.\n            // As long as the type does not have a callable \"then\" property, it is\n            // safe to return the type; otherwise, an error will have been reported in\n            // the call to checkNonThenableType and we will return unknownType.\n            //\n            // An example of a non-promise \"thenable\" might be:\n            //\n            //  await { then(): void {} }\n            //\n            // The \"thenable\" does not match the minimal definition for a PromiseLike. When\n            // a Promise/A+-compatible or ES6 promise tries to adopt this value, the promise\n            // will never settle. We treat this as an error to help flag an early indicator\n            // of a runtime problem. If the user wants to return this value from an async\n            // function, they would need to wrap it in some other value. If they want it to\n            // be treated as a promise, they can cast to <any>.\n            return checkNonThenableType(type, location, message);\n          } else {\n            if (type.id === promisedType.id || awaitedTypeStack.indexOf(promisedType.id) >= 0) {\n              // We have a bad actor in the form of a promise whose promised type is\n              // the same promise type, or a mutually recursive promise. Return the\n              // unknown type as we cannot guess the shape. If this were the actual\n              // case in the JavaScript, this Promise would never resolve.\n              //\n              // An example of a bad actor with a singly-recursive promise type might\n              // be:\n              //\n              //  interface BadPromise {\n              //      then(\n              //          onfulfilled: (value: BadPromise) => any,\n              //          onrejected: (error: any) => any): BadPromise;\n              //  }\n              //\n              // The above interface will pass the PromiseLike check, and return a\n              // promised type of `BadPromise`. Since this is a self reference, we\n              // don't want to keep recursing ad infinitum.\n              //\n              // An example of a bad actor in the form of a mutually-recursive\n              // promise type might be:\n              //\n              //  interface BadPromiseA {\n              //      then(\n              //          onfulfilled: (value: BadPromiseB) => any,\n              //          onrejected: (error: any) => any): BadPromiseB;\n              //  }\n              //\n              //  interface BadPromiseB {\n              //      then(\n              //          onfulfilled: (value: BadPromiseA) => any,\n              //          onrejected: (error: any) => any): BadPromiseA;\n              //  }\n              //\n              if (location) {\n                error(location, ts.Diagnostics._0_is_referenced_directly_or_indirectly_in_the_fulfillment_callback_of_its_own_then_method, symbolToString(type.symbol));\n              }\n\n              return unknownType;\n            } // Keep track of the type we're about to unwrap to avoid bad recursive promise types.\n            // See the comments above for more information.\n\n\n            awaitedTypeStack.push(type.id);\n            var awaitedType = checkAwaitedTypeWorker(promisedType);\n            awaitedTypeStack.pop();\n            return awaitedType;\n          }\n        }\n      }\n    }\n    /**\n     * Checks that the return type provided is an instantiation of the global Promise<T> type\n     * and returns the awaited type of the return type.\n     *\n     * @param returnType The return type of a FunctionLikeDeclaration\n     * @param location The node on which to report the error.\n     */\n\n\n    function checkCorrectPromiseType(returnType, location) {\n      if (returnType === unknownType) {\n        // The return type already had some other error, so we ignore and return\n        // the unknown type.\n        return unknownType;\n      }\n\n      var globalPromiseType = getGlobalPromiseType();\n\n      if (globalPromiseType === emptyGenericType || globalPromiseType === getTargetType(returnType)) {\n        // Either we couldn't resolve the global promise type, which would have already\n        // reported an error, or we could resolve it and the return type is a valid type\n        // reference to the global type. In either case, we return the awaited type for\n        // the return type.\n        return checkAwaitedType(returnType, location, ts.Diagnostics.An_async_function_or_method_must_have_a_valid_awaitable_return_type);\n      } // The promise type was not a valid type reference to the global promise type, so we\n      // report an error and return the unknown type.\n\n\n      error(location, ts.Diagnostics.The_return_type_of_an_async_function_or_method_must_be_the_global_Promise_T_type);\n      return unknownType;\n    }\n    /**\n      * Checks the return type of an async function to ensure it is a compatible\n      * Promise implementation.\n      * @param node The signature to check\n      * @param returnType The return type for the function\n      * @remarks\n      * This checks that an async function has a valid Promise-compatible return type,\n      * and returns the *awaited type* of the promise. An async function has a valid\n      * Promise-compatible return type if the resolved value of the return type has a\n      * construct signature that takes in an `initializer` function that in turn supplies\n      * a `resolve` function as one of its arguments and results in an object with a\n      * callable `then` signature.\n      */\n\n\n    function checkAsyncFunctionReturnType(node) {\n      if (compilerOptions.noCustomAsyncPromise && languageVersion >= 2\n      /* ES6 */\n      ) {\n          var returnType = getTypeFromTypeNode(node.type);\n          return checkCorrectPromiseType(returnType, node.type);\n        }\n\n      var globalPromiseConstructorLikeType = getGlobalPromiseConstructorLikeType();\n\n      if (globalPromiseConstructorLikeType === emptyObjectType) {\n        // If we couldn't resolve the global PromiseConstructorLike type we cannot verify\n        // compatibility with __awaiter.\n        return unknownType;\n      } // As part of our emit for an async function, we will need to emit the entity name of\n      // the return type annotation as an expression. To meet the necessary runtime semantics\n      // for __awaiter, we must also check that the type of the declaration (e.g. the static\n      // side or \"constructor\" of the promise type) is compatible `PromiseConstructorLike`.\n      //\n      // An example might be (from lib.es6.d.ts):\n      //\n      //  interface Promise<T> { ... }\n      //  interface PromiseConstructor {\n      //      new <T>(...): Promise<T>;\n      //  }\n      //  declare var Promise: PromiseConstructor;\n      //\n      // When an async function declares a return type annotation of `Promise<T>`, we\n      // need to get the type of the `Promise` variable declaration above, which would\n      // be `PromiseConstructor`.\n      //\n      // The same case applies to a class:\n      //\n      //  declare class Promise<T> {\n      //      constructor(...);\n      //      then<U>(...): Promise<U>;\n      //  }\n      //\n      // When we get the type of the `Promise` symbol here, we get the type of the static\n      // side of the `Promise` class, which would be `{ new <T>(...): Promise<T> }`.\n\n\n      var promiseType = getTypeFromTypeNode(node.type);\n\n      if (promiseType === unknownType && compilerOptions.isolatedModules) {\n        // If we are compiling with isolatedModules, we may not be able to resolve the\n        // type as a value. As such, we will just return unknownType;\n        return unknownType;\n      }\n\n      var promiseConstructor = getNodeLinks(node.type).resolvedSymbol;\n\n      if (!promiseConstructor || !symbolIsValue(promiseConstructor)) {\n        var typeName = promiseConstructor ? symbolToString(promiseConstructor) : typeToString(promiseType);\n        error(node, ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type, typeName);\n        return unknownType;\n      } // If the Promise constructor, resolved locally, is an alias symbol we should mark it as referenced.\n\n\n      checkReturnTypeAnnotationAsExpression(node); // Validate the promise constructor type.\n\n      var promiseConstructorType = getTypeOfSymbol(promiseConstructor);\n\n      if (!checkTypeAssignableTo(promiseConstructorType, globalPromiseConstructorLikeType, node, ts.Diagnostics.Type_0_is_not_a_valid_async_function_return_type)) {\n        return unknownType;\n      } // Verify there is no local declaration that could collide with the promise constructor.\n\n\n      var promiseName = ts.getEntityNameFromTypeNode(node.type);\n      var promiseNameOrNamespaceRoot = getFirstIdentifier(promiseName);\n      var rootSymbol = getSymbol(node.locals, promiseNameOrNamespaceRoot.text, 107455\n      /* Value */\n      );\n\n      if (rootSymbol) {\n        error(rootSymbol.valueDeclaration, ts.Diagnostics.Duplicate_identifier_0_Compiler_uses_declaration_1_to_support_async_functions, promiseNameOrNamespaceRoot.text, getFullyQualifiedName(promiseConstructor));\n        return unknownType;\n      } // Get and return the awaited type of the return type.\n\n\n      return checkAwaitedType(promiseType, node, ts.Diagnostics.An_async_function_or_method_must_have_a_valid_awaitable_return_type);\n    }\n    /** Check a decorator */\n\n\n    function checkDecorator(node) {\n      var signature = getResolvedSignature(node);\n      var returnType = getReturnTypeOfSignature(signature);\n\n      if (returnType.flags & 1\n      /* Any */\n      ) {\n          return;\n        }\n\n      var expectedReturnType;\n      var headMessage = getDiagnosticHeadMessageForDecoratorResolution(node);\n      var errorInfo;\n\n      switch (node.parent.kind) {\n        case 217\n        /* ClassDeclaration */\n        :\n          var classSymbol = getSymbolOfNode(node.parent);\n          var classConstructorType = getTypeOfSymbol(classSymbol);\n          expectedReturnType = getUnionType([classConstructorType, voidType]);\n          break;\n\n        case 139\n        /* Parameter */\n        :\n          expectedReturnType = voidType;\n          errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_return_type_of_a_parameter_decorator_function_must_be_either_void_or_any);\n          break;\n\n        case 142\n        /* PropertyDeclaration */\n        :\n          expectedReturnType = voidType;\n          errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.The_return_type_of_a_property_decorator_function_must_be_either_void_or_any);\n          break;\n\n        case 144\n        /* MethodDeclaration */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n          var methodType = getTypeOfNode(node.parent);\n          var descriptorType = createTypedPropertyDescriptorType(methodType);\n          expectedReturnType = getUnionType([descriptorType, voidType]);\n          break;\n      }\n\n      checkTypeAssignableTo(returnType, expectedReturnType, node, headMessage, errorInfo);\n    }\n    /** Checks a type reference node as an expression. */\n\n\n    function checkTypeNodeAsExpression(node) {\n      // When we are emitting type metadata for decorators, we need to try to check the type\n      // as if it were an expression so that we can emit the type in a value position when we\n      // serialize the type metadata.\n      if (node && node.kind === 152\n      /* TypeReference */\n      ) {\n          var root = getFirstIdentifier(node.typeName);\n          var meaning = root.parent.kind === 152\n          /* TypeReference */\n          ? 793056\n          /* Type */\n          : 1536\n          /* Namespace */\n          ; // Resolve type so we know which symbol is referenced\n\n          var rootSymbol = resolveName(root, root.text, meaning | 8388608\n          /* Alias */\n          ,\n          /*nameNotFoundMessage*/\n          undefined,\n          /*nameArg*/\n          undefined); // Resolved symbol is alias\n\n          if (rootSymbol && rootSymbol.flags & 8388608\n          /* Alias */\n          ) {\n              var aliasTarget = resolveAlias(rootSymbol); // If alias has value symbol - mark alias as referenced\n\n              if (aliasTarget.flags & 107455\n              /* Value */\n              && !isConstEnumOrConstEnumOnlyModule(resolveAlias(rootSymbol))) {\n                markAliasSymbolAsReferenced(rootSymbol);\n              }\n            }\n        }\n    }\n    /**\n      * Checks the type annotation of an accessor declaration or property declaration as\n      * an expression if it is a type reference to a type with a value declaration.\n      */\n\n\n    function checkTypeAnnotationAsExpression(node) {\n      checkTypeNodeAsExpression(node.type);\n    }\n\n    function checkReturnTypeAnnotationAsExpression(node) {\n      checkTypeNodeAsExpression(node.type);\n    }\n    /** Checks the type annotation of the parameters of a function/method or the constructor of a class as expressions */\n\n\n    function checkParameterTypeAnnotationsAsExpressions(node) {\n      // ensure all type annotations with a value declaration are checked as an expression\n      for (var _i = 0, _a = node.parameters; _i < _a.length; _i++) {\n        var parameter = _a[_i];\n        checkTypeAnnotationAsExpression(parameter);\n      }\n    }\n    /** Check the decorators of a node */\n\n\n    function checkDecorators(node) {\n      if (!node.decorators) {\n        return;\n      } // skip this check for nodes that cannot have decorators. These should have already had an error reported by\n      // checkGrammarDecorators.\n\n\n      if (!ts.nodeCanBeDecorated(node)) {\n        return;\n      }\n\n      if (!compilerOptions.experimentalDecorators) {\n        error(node, ts.Diagnostics.Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Set_the_experimentalDecorators_option_to_remove_this_warning);\n      }\n\n      if (compilerOptions.emitDecoratorMetadata) {\n        // we only need to perform these checks if we are emitting serialized type metadata for the target of a decorator.\n        switch (node.kind) {\n          case 217\n          /* ClassDeclaration */\n          :\n            var constructor = ts.getFirstConstructorWithBody(node);\n\n            if (constructor) {\n              checkParameterTypeAnnotationsAsExpressions(constructor);\n            }\n\n            break;\n\n          case 144\n          /* MethodDeclaration */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            checkParameterTypeAnnotationsAsExpressions(node);\n            checkReturnTypeAnnotationAsExpression(node);\n            break;\n\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 139\n          /* Parameter */\n          :\n            checkTypeAnnotationAsExpression(node);\n            break;\n        }\n      }\n\n      ts.forEach(node.decorators, checkDecorator);\n    }\n\n    function checkFunctionDeclaration(node) {\n      if (produceDiagnostics) {\n        checkFunctionOrMethodDeclaration(node) || checkGrammarForGenerator(node);\n        checkCollisionWithCapturedSuperVariable(node, node.name);\n        checkCollisionWithCapturedThisVariable(node, node.name);\n        checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\n        checkCollisionWithGlobalPromiseInGeneratedCode(node, node.name);\n      }\n    }\n\n    function checkFunctionOrMethodDeclaration(node) {\n      checkDecorators(node);\n      checkSignatureDeclaration(node);\n      var isAsync = ts.isAsyncFunctionLike(node); // Do not use hasDynamicName here, because that returns false for well known symbols.\n      // We want to perform checkComputedPropertyName for all computed properties, including\n      // well known symbols.\n\n      if (node.name && node.name.kind === 137\n      /* ComputedPropertyName */\n      ) {\n          // This check will account for methods in class/interface declarations,\n          // as well as accessors in classes/object literals\n          checkComputedPropertyName(node.name);\n        }\n\n      if (!ts.hasDynamicName(node)) {\n        // first we want to check the local symbol that contain this declaration\n        // - if node.localSymbol !== undefined - this is current declaration is exported and localSymbol points to the local symbol\n        // - if node.localSymbol === undefined - this node is non-exported so we can just pick the result of getSymbolOfNode\n        var symbol = getSymbolOfNode(node);\n        var localSymbol = node.localSymbol || symbol; // Since the javascript won't do semantic analysis like typescript,\n        // if the javascript file comes before the typescript file and both contain same name functions,\n        // checkFunctionOrConstructorSymbol wouldn't be called if we didnt ignore javascript function.\n\n        var firstDeclaration = ts.forEach(localSymbol.declarations, // Get first non javascript function declaration\n        function (declaration) {\n          return declaration.kind === node.kind && !ts.isSourceFileJavaScript(ts.getSourceFileOfNode(declaration)) ? declaration : undefined;\n        }); // Only type check the symbol once\n\n        if (node === firstDeclaration) {\n          checkFunctionOrConstructorSymbol(localSymbol);\n        }\n\n        if (symbol.parent) {\n          // run check once for the first declaration\n          if (ts.getDeclarationOfKind(symbol, node.kind) === node) {\n            // run check on export symbol to check that modifiers agree across all exported declarations\n            checkFunctionOrConstructorSymbol(symbol);\n          }\n        }\n      }\n\n      checkSourceElement(node.body);\n\n      if (!node.asteriskToken) {\n        var returnOrPromisedType = node.type && (isAsync ? checkAsyncFunctionReturnType(node) : getTypeFromTypeNode(node.type));\n        checkAllCodePathsInNonVoidFunctionReturnOrThrow(node, returnOrPromisedType);\n      }\n\n      if (produceDiagnostics && !node.type) {\n        // Report an implicit any error if there is no body, no explicit return type, and node is not a private method\n        // in an ambient context\n        if (compilerOptions.noImplicitAny && ts.nodeIsMissing(node.body) && !isPrivateWithinAmbient(node)) {\n          reportImplicitAnyError(node, anyType);\n        }\n\n        if (node.asteriskToken && ts.nodeIsPresent(node.body)) {\n          // A generator with a body and no type annotation can still cause errors. It can error if the\n          // yielded values have no common supertype, or it can give an implicit any error if it has no\n          // yielded values. The only way to trigger these errors is to try checking its return type.\n          getReturnTypeOfSignature(getSignatureFromDeclaration(node));\n        }\n      }\n    }\n\n    function checkBlock(node) {\n      // Grammar checking for SyntaxKind.Block\n      if (node.kind === 195\n      /* Block */\n      ) {\n          checkGrammarStatementInAmbientContext(node);\n        }\n\n      ts.forEach(node.statements, checkSourceElement);\n    }\n\n    function checkCollisionWithArgumentsInGeneratedCode(node) {\n      // no rest parameters \\ declaration context \\ overload - no codegen impact\n      if (!ts.hasRestParameter(node) || ts.isInAmbientContext(node) || ts.nodeIsMissing(node.body)) {\n        return;\n      }\n\n      ts.forEach(node.parameters, function (p) {\n        if (p.name && !ts.isBindingPattern(p.name) && p.name.text === argumentsSymbol.name) {\n          error(p, ts.Diagnostics.Duplicate_identifier_arguments_Compiler_uses_arguments_to_initialize_rest_parameters);\n        }\n      });\n    }\n\n    function needCollisionCheckForIdentifier(node, identifier, name) {\n      if (!(identifier && identifier.text === name)) {\n        return false;\n      }\n\n      if (node.kind === 142\n      /* PropertyDeclaration */\n      || node.kind === 141\n      /* PropertySignature */\n      || node.kind === 144\n      /* MethodDeclaration */\n      || node.kind === 143\n      /* MethodSignature */\n      || node.kind === 146\n      /* GetAccessor */\n      || node.kind === 147\n      /* SetAccessor */\n      ) {\n          // it is ok to have member named '_super' or '_this' - member access is always qualified\n          return false;\n        }\n\n      if (ts.isInAmbientContext(node)) {\n        // ambient context - no codegen impact\n        return false;\n      }\n\n      var root = ts.getRootDeclaration(node);\n\n      if (root.kind === 139\n      /* Parameter */\n      && ts.nodeIsMissing(root.parent.body)) {\n        // just an overload - no codegen impact\n        return false;\n      }\n\n      return true;\n    }\n\n    function checkCollisionWithCapturedThisVariable(node, name) {\n      if (needCollisionCheckForIdentifier(node, name, \"_this\")) {\n        potentialThisCollisions.push(node);\n      }\n    } // this function will run after checking the source file so 'CaptureThis' is correct for all nodes\n\n\n    function checkIfThisIsCapturedInEnclosingScope(node) {\n      var current = node;\n\n      while (current) {\n        if (getNodeCheckFlags(current) & 4\n        /* CaptureThis */\n        ) {\n            var isDeclaration_1 = node.kind !== 69\n            /* Identifier */\n            ;\n\n            if (isDeclaration_1) {\n              error(node.name, ts.Diagnostics.Duplicate_identifier_this_Compiler_uses_variable_declaration_this_to_capture_this_reference);\n            } else {\n              error(node, ts.Diagnostics.Expression_resolves_to_variable_declaration_this_that_compiler_uses_to_capture_this_reference);\n            }\n\n            return;\n          }\n\n        current = current.parent;\n      }\n    }\n\n    function checkCollisionWithCapturedSuperVariable(node, name) {\n      if (!needCollisionCheckForIdentifier(node, name, \"_super\")) {\n        return;\n      } // bubble up and find containing type\n\n\n      var enclosingClass = ts.getContainingClass(node); // if containing type was not found or it is ambient - exit (no codegen)\n\n      if (!enclosingClass || ts.isInAmbientContext(enclosingClass)) {\n        return;\n      }\n\n      if (ts.getClassExtendsHeritageClauseElement(enclosingClass)) {\n        var isDeclaration_2 = node.kind !== 69\n        /* Identifier */\n        ;\n\n        if (isDeclaration_2) {\n          error(node, ts.Diagnostics.Duplicate_identifier_super_Compiler_uses_super_to_capture_base_class_reference);\n        } else {\n          error(node, ts.Diagnostics.Expression_resolves_to_super_that_compiler_uses_to_capture_base_class_reference);\n        }\n      }\n    }\n\n    function checkCollisionWithRequireExportsInGeneratedCode(node, name) {\n      if (!needCollisionCheckForIdentifier(node, name, \"require\") && !needCollisionCheckForIdentifier(node, name, \"exports\")) {\n        return;\n      } // Uninstantiated modules shouldnt do this check\n\n\n      if (node.kind === 221\n      /* ModuleDeclaration */\n      && ts.getModuleInstanceState(node) !== 1\n      /* Instantiated */\n      ) {\n          return;\n        } // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent\n\n\n      var parent = getDeclarationContainer(node);\n\n      if (parent.kind === 251\n      /* SourceFile */\n      && ts.isExternalOrCommonJsModule(parent)) {\n        // If the declaration happens to be in external module, report error that require and exports are reserved keywords\n        error(name, ts.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module, ts.declarationNameToString(name), ts.declarationNameToString(name));\n      }\n    }\n\n    function checkCollisionWithGlobalPromiseInGeneratedCode(node, name) {\n      if (!compilerOptions.noCustomAsyncPromise) {\n        return;\n      }\n\n      if (!needCollisionCheckForIdentifier(node, name, \"Promise\")) {\n        return;\n      } // Uninstantiated modules shouldnt do this check\n\n\n      if (node.kind === 221\n      /* ModuleDeclaration */\n      && ts.getModuleInstanceState(node) !== 1\n      /* Instantiated */\n      ) {\n          return;\n        } // In case of variable declaration, node.parent is variable statement so look at the variable statement's parent\n\n\n      var parent = getDeclarationContainer(node);\n\n      if (parent.kind === 251\n      /* SourceFile */\n      && ts.isExternalOrCommonJsModule(parent) && parent.flags & 33554432\n      /* HasAsyncFunctions */\n      ) {\n          // If the declaration happens to be in external module, report error that Promise is a reserved identifier.\n          error(name, ts.Diagnostics.Duplicate_identifier_0_Compiler_reserves_name_1_in_top_level_scope_of_a_module_containing_async_functions, ts.declarationNameToString(name), ts.declarationNameToString(name));\n        }\n    }\n\n    function checkVarDeclaredNamesNotShadowed(node) {\n      // - ScriptBody : StatementList\n      // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList\n      // also occurs in the VarDeclaredNames of StatementList.\n      // - Block : { StatementList }\n      // It is a Syntax Error if any element of the LexicallyDeclaredNames of StatementList\n      // also occurs in the VarDeclaredNames of StatementList.\n      // Variable declarations are hoisted to the top of their function scope. They can shadow\n      // block scoped declarations, which bind tighter. this will not be flagged as duplicate definition\n      // by the binder as the declaration scope is different.\n      // A non-initialized declaration is a no-op as the block declaration will resolve before the var\n      // declaration. the problem is if the declaration has an initializer. this will act as a write to the\n      // block declared value. this is fine for let, but not const.\n      // Only consider declarations with initializers, uninitialized const declarations will not\n      // step on a let/const variable.\n      // Do not consider const and const declarations, as duplicate block-scoped declarations\n      // are handled by the binder.\n      // We are only looking for const declarations that step on let\\const declarations from a\n      // different scope. e.g.:\n      //      {\n      //          const x = 0; // localDeclarationSymbol obtained after name resolution will correspond to this declaration\n      //          const x = 0; // symbol for this declaration will be 'symbol'\n      //      }\n      // skip block-scoped variables and parameters\n      if ((ts.getCombinedNodeFlags(node) & 24576\n      /* BlockScoped */\n      ) !== 0 || ts.isParameterDeclaration(node)) {\n        return;\n      } // skip variable declarations that don't have initializers\n      // NOTE: in ES6 spec initializer is required in variable declarations where name is binding pattern\n      // so we'll always treat binding elements as initialized\n\n\n      if (node.kind === 214\n      /* VariableDeclaration */\n      && !node.initializer) {\n        return;\n      }\n\n      var symbol = getSymbolOfNode(node);\n\n      if (symbol.flags & 1\n      /* FunctionScopedVariable */\n      ) {\n          var localDeclarationSymbol = resolveName(node, node.name.text, 3\n          /* Variable */\n          ,\n          /*nodeNotFoundErrorMessage*/\n          undefined,\n          /*nameArg*/\n          undefined);\n\n          if (localDeclarationSymbol && localDeclarationSymbol !== symbol && localDeclarationSymbol.flags & 2\n          /* BlockScopedVariable */\n          ) {\n              if (getDeclarationFlagsFromSymbol(localDeclarationSymbol) & 24576\n              /* BlockScoped */\n              ) {\n                  var varDeclList = ts.getAncestor(localDeclarationSymbol.valueDeclaration, 215\n                  /* VariableDeclarationList */\n                  );\n                  var container = varDeclList.parent.kind === 196\n                  /* VariableStatement */\n                  && varDeclList.parent.parent ? varDeclList.parent.parent : undefined; // names of block-scoped and function scoped variables can collide only\n                  // if block scoped variable is defined in the function\\module\\source file scope (because of variable hoisting)\n\n                  var namesShareScope = container && (container.kind === 195\n                  /* Block */\n                  && ts.isFunctionLike(container.parent) || container.kind === 222\n                  /* ModuleBlock */\n                  || container.kind === 221\n                  /* ModuleDeclaration */\n                  || container.kind === 251\n                  /* SourceFile */\n                  ); // here we know that function scoped variable is shadowed by block scoped one\n                  // if they are defined in the same scope - binder has already reported redeclaration error\n                  // otherwise if variable has an initializer - show error that initialization will fail\n                  // since LHS will be block scoped name instead of function scoped\n\n                  if (!namesShareScope) {\n                    var name_16 = symbolToString(localDeclarationSymbol);\n                    error(node, ts.Diagnostics.Cannot_initialize_outer_scoped_variable_0_in_the_same_scope_as_block_scoped_declaration_1, name_16, name_16);\n                  }\n                }\n            }\n        }\n    } // Check that a parameter initializer contains no references to parameters declared to the right of itself\n\n\n    function checkParameterInitializer(node) {\n      if (ts.getRootDeclaration(node).kind !== 139\n      /* Parameter */\n      ) {\n          return;\n        }\n\n      var func = ts.getContainingFunction(node);\n      visit(node.initializer);\n\n      function visit(n) {\n        if (n.kind === 69\n        /* Identifier */\n        ) {\n            var referencedSymbol = getNodeLinks(n).resolvedSymbol; // check FunctionLikeDeclaration.locals (stores parameters\\function local variable)\n            // if it contains entry with a specified name and if this entry matches the resolved symbol\n\n            if (referencedSymbol && referencedSymbol !== unknownSymbol && getSymbol(func.locals, referencedSymbol.name, 107455\n            /* Value */\n            ) === referencedSymbol) {\n              if (referencedSymbol.valueDeclaration.kind === 139\n              /* Parameter */\n              ) {\n                  if (referencedSymbol.valueDeclaration === node) {\n                    error(n, ts.Diagnostics.Parameter_0_cannot_be_referenced_in_its_initializer, ts.declarationNameToString(node.name));\n                    return;\n                  }\n\n                  if (referencedSymbol.valueDeclaration.pos < node.pos) {\n                    // legal case - parameter initializer references some parameter strictly on left of current parameter declaration\n                    return;\n                  }\n                }\n\n              error(n, ts.Diagnostics.Initializer_of_parameter_0_cannot_reference_identifier_1_declared_after_it, ts.declarationNameToString(node.name), ts.declarationNameToString(n));\n            }\n          } else {\n          ts.forEachChild(n, visit);\n        }\n      }\n    } // Check variable, parameter, or property declaration\n\n\n    function checkVariableLikeDeclaration(node) {\n      checkDecorators(node);\n      checkSourceElement(node.type); // For a computed property, just check the initializer and exit\n      // Do not use hasDynamicName here, because that returns false for well known symbols.\n      // We want to perform checkComputedPropertyName for all computed properties, including\n      // well known symbols.\n\n      if (node.name.kind === 137\n      /* ComputedPropertyName */\n      ) {\n          checkComputedPropertyName(node.name);\n\n          if (node.initializer) {\n            checkExpressionCached(node.initializer);\n          }\n        }\n\n      if (node.kind === 166\n      /* BindingElement */\n      ) {\n          // check computed properties inside property names of binding elements\n          if (node.propertyName && node.propertyName.kind === 137\n          /* ComputedPropertyName */\n          ) {\n              checkComputedPropertyName(node.propertyName);\n            }\n        } // For a binding pattern, check contained binding elements\n\n\n      if (ts.isBindingPattern(node.name)) {\n        ts.forEach(node.name.elements, checkSourceElement);\n      } // For a parameter declaration with an initializer, error and exit if the containing function doesn't have a body\n\n\n      if (node.initializer && ts.getRootDeclaration(node).kind === 139\n      /* Parameter */\n      && ts.nodeIsMissing(ts.getContainingFunction(node).body)) {\n        error(node, ts.Diagnostics.A_parameter_initializer_is_only_allowed_in_a_function_or_constructor_implementation);\n        return;\n      } // For a binding pattern, validate the initializer and exit\n\n\n      if (ts.isBindingPattern(node.name)) {\n        // Don't validate for-in initializer as it is already an error\n        if (node.initializer && node.parent.parent.kind !== 203\n        /* ForInStatement */\n        ) {\n            checkTypeAssignableTo(checkExpressionCached(node.initializer), getWidenedTypeForVariableLikeDeclaration(node), node,\n            /*headMessage*/\n            undefined);\n            checkParameterInitializer(node);\n          }\n\n        return;\n      }\n\n      var symbol = getSymbolOfNode(node);\n      var type = getTypeOfVariableOrParameterOrProperty(symbol);\n\n      if (node === symbol.valueDeclaration) {\n        // Node is the primary declaration of the symbol, just validate the initializer\n        // Don't validate for-in initializer as it is already an error\n        if (node.initializer && node.parent.parent.kind !== 203\n        /* ForInStatement */\n        ) {\n            checkTypeAssignableTo(checkExpressionCached(node.initializer), type, node,\n            /*headMessage*/\n            undefined);\n            checkParameterInitializer(node);\n          }\n      } else {\n        // Node is a secondary declaration, check that type is identical to primary declaration and check that\n        // initializer is consistent with type associated with the node\n        var declarationType = getWidenedTypeForVariableLikeDeclaration(node);\n\n        if (type !== unknownType && declarationType !== unknownType && !isTypeIdenticalTo(type, declarationType)) {\n          error(node.name, ts.Diagnostics.Subsequent_variable_declarations_must_have_the_same_type_Variable_0_must_be_of_type_1_but_here_has_type_2, ts.declarationNameToString(node.name), typeToString(type), typeToString(declarationType));\n        }\n\n        if (node.initializer) {\n          checkTypeAssignableTo(checkExpressionCached(node.initializer), declarationType, node,\n          /*headMessage*/\n          undefined);\n        }\n      }\n\n      if (node.kind !== 142\n      /* PropertyDeclaration */\n      && node.kind !== 141\n      /* PropertySignature */\n      ) {\n          // We know we don't have a binding pattern or computed name here\n          checkExportsOnMergedDeclarations(node);\n\n          if (node.kind === 214\n          /* VariableDeclaration */\n          || node.kind === 166\n          /* BindingElement */\n          ) {\n              checkVarDeclaredNamesNotShadowed(node);\n            }\n\n          checkCollisionWithCapturedSuperVariable(node, node.name);\n          checkCollisionWithCapturedThisVariable(node, node.name);\n          checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\n          checkCollisionWithGlobalPromiseInGeneratedCode(node, node.name);\n        }\n    }\n\n    function checkVariableDeclaration(node) {\n      checkGrammarVariableDeclaration(node);\n      return checkVariableLikeDeclaration(node);\n    }\n\n    function checkBindingElement(node) {\n      checkGrammarBindingElement(node);\n      return checkVariableLikeDeclaration(node);\n    }\n\n    function checkVariableStatement(node) {\n      // Grammar checking\n      checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarVariableDeclarationList(node.declarationList) || checkGrammarForDisallowedLetOrConstStatement(node);\n      ts.forEach(node.declarationList.declarations, checkSourceElement);\n    }\n\n    function checkGrammarDisallowedModifiersOnObjectLiteralExpressionMethod(node) {\n      // We only disallow modifier on a method declaration if it is a property of object-literal-expression\n      if (node.modifiers && node.parent.kind === 168\n      /* ObjectLiteralExpression */\n      ) {\n          if (ts.isAsyncFunctionLike(node)) {\n            if (node.modifiers.length > 1) {\n              return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);\n            }\n          } else {\n            return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);\n          }\n        }\n    }\n\n    function checkExpressionStatement(node) {\n      // Grammar checking\n      checkGrammarStatementInAmbientContext(node);\n      checkExpression(node.expression);\n    }\n\n    function checkIfStatement(node) {\n      // Grammar checking\n      checkGrammarStatementInAmbientContext(node);\n      checkExpression(node.expression);\n      checkSourceElement(node.thenStatement);\n\n      if (node.thenStatement.kind === 197\n      /* EmptyStatement */\n      ) {\n          error(node.thenStatement, ts.Diagnostics.The_body_of_an_if_statement_cannot_be_the_empty_statement);\n        }\n\n      checkSourceElement(node.elseStatement);\n    }\n\n    function checkDoStatement(node) {\n      // Grammar checking\n      checkGrammarStatementInAmbientContext(node);\n      checkSourceElement(node.statement);\n      checkExpression(node.expression);\n    }\n\n    function checkWhileStatement(node) {\n      // Grammar checking\n      checkGrammarStatementInAmbientContext(node);\n      checkExpression(node.expression);\n      checkSourceElement(node.statement);\n    }\n\n    function checkForStatement(node) {\n      // Grammar checking\n      if (!checkGrammarStatementInAmbientContext(node)) {\n        if (node.initializer && node.initializer.kind === 215\n        /* VariableDeclarationList */\n        ) {\n            checkGrammarVariableDeclarationList(node.initializer);\n          }\n      }\n\n      if (node.initializer) {\n        if (node.initializer.kind === 215\n        /* VariableDeclarationList */\n        ) {\n            ts.forEach(node.initializer.declarations, checkVariableDeclaration);\n          } else {\n          checkExpression(node.initializer);\n        }\n      }\n\n      if (node.condition) checkExpression(node.condition);\n      if (node.incrementor) checkExpression(node.incrementor);\n      checkSourceElement(node.statement);\n    }\n\n    function checkForOfStatement(node) {\n      checkGrammarForInOrForOfStatement(node); // Check the LHS and RHS\n      // If the LHS is a declaration, just check it as a variable declaration, which will in turn check the RHS\n      // via checkRightHandSideOfForOf.\n      // If the LHS is an expression, check the LHS, as a destructuring assignment or as a reference.\n      // Then check that the RHS is assignable to it.\n\n      if (node.initializer.kind === 215\n      /* VariableDeclarationList */\n      ) {\n          checkForInOrForOfVariableDeclaration(node);\n        } else {\n        var varExpr = node.initializer;\n        var iteratedType = checkRightHandSideOfForOf(node.expression); // There may be a destructuring assignment on the left side\n\n        if (varExpr.kind === 167\n        /* ArrayLiteralExpression */\n        || varExpr.kind === 168\n        /* ObjectLiteralExpression */\n        ) {\n            // iteratedType may be undefined. In this case, we still want to check the structure of\n            // varExpr, in particular making sure it's a valid LeftHandSideExpression. But we'd like\n            // to short circuit the type relation checking as much as possible, so we pass the unknownType.\n            checkDestructuringAssignment(varExpr, iteratedType || unknownType);\n          } else {\n          var leftType = checkExpression(varExpr);\n          checkReferenceExpression(varExpr,\n          /*invalidReferenceMessage*/\n          ts.Diagnostics.Invalid_left_hand_side_in_for_of_statement,\n          /*constantVariableMessage*/\n          ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_be_a_previously_defined_constant); // iteratedType will be undefined if the rightType was missing properties/signatures\n          // required to get its iteratedType (like [Symbol.iterator] or next). This may be\n          // because we accessed properties from anyType, or it may have led to an error inside\n          // getElementTypeOfIterable.\n\n          if (iteratedType) {\n            checkTypeAssignableTo(iteratedType, leftType, varExpr,\n            /*headMessage*/\n            undefined);\n          }\n        }\n      }\n\n      checkSourceElement(node.statement);\n    }\n\n    function checkForInStatement(node) {\n      // Grammar checking\n      checkGrammarForInOrForOfStatement(node); // TypeScript 1.0 spec  (April 2014): 5.4\n      // In a 'for-in' statement of the form\n      // for (let VarDecl in Expr) Statement\n      //   VarDecl must be a variable declaration without a type annotation that declares a variable of type Any,\n      //   and Expr must be an expression of type Any, an object type, or a type parameter type.\n\n      if (node.initializer.kind === 215\n      /* VariableDeclarationList */\n      ) {\n          var variable = node.initializer.declarations[0];\n\n          if (variable && ts.isBindingPattern(variable.name)) {\n            error(variable.name, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);\n          }\n\n          checkForInOrForOfVariableDeclaration(node);\n        } else {\n        // In a 'for-in' statement of the form\n        // for (Var in Expr) Statement\n        //   Var must be an expression classified as a reference of type Any or the String primitive type,\n        //   and Expr must be an expression of type Any, an object type, or a type parameter type.\n        var varExpr = node.initializer;\n        var leftType = checkExpression(varExpr);\n\n        if (varExpr.kind === 167\n        /* ArrayLiteralExpression */\n        || varExpr.kind === 168\n        /* ObjectLiteralExpression */\n        ) {\n            error(varExpr, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_destructuring_pattern);\n          } else if (!isTypeAnyOrAllConstituentTypesHaveKind(leftType, 258\n        /* StringLike */\n        )) {\n          error(varExpr, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_must_be_of_type_string_or_any);\n        } else {\n          // run check only former check succeeded to avoid cascading errors\n          checkReferenceExpression(varExpr, ts.Diagnostics.Invalid_left_hand_side_in_for_in_statement, ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_be_a_previously_defined_constant);\n        }\n      }\n\n      var rightType = checkExpression(node.expression); // unknownType is returned i.e. if node.expression is identifier whose name cannot be resolved\n      // in this case error about missing name is already reported - do not report extra one\n\n      if (!isTypeAnyOrAllConstituentTypesHaveKind(rightType, 80896\n      /* ObjectType */\n      | 512\n      /* TypeParameter */\n      )) {\n        error(node.expression, ts.Diagnostics.The_right_hand_side_of_a_for_in_statement_must_be_of_type_any_an_object_type_or_a_type_parameter);\n      }\n\n      checkSourceElement(node.statement);\n    }\n\n    function checkForInOrForOfVariableDeclaration(iterationStatement) {\n      var variableDeclarationList = iterationStatement.initializer; // checkGrammarForInOrForOfStatement will check that there is exactly one declaration.\n\n      if (variableDeclarationList.declarations.length >= 1) {\n        var decl = variableDeclarationList.declarations[0];\n        checkVariableDeclaration(decl);\n      }\n    }\n\n    function checkRightHandSideOfForOf(rhsExpression) {\n      var expressionType = getTypeOfExpression(rhsExpression);\n      return checkIteratedTypeOrElementType(expressionType, rhsExpression,\n      /*allowStringInput*/\n      true);\n    }\n\n    function checkIteratedTypeOrElementType(inputType, errorNode, allowStringInput) {\n      if (isTypeAny(inputType)) {\n        return inputType;\n      }\n\n      if (languageVersion >= 2\n      /* ES6 */\n      ) {\n          return checkElementTypeOfIterable(inputType, errorNode);\n        }\n\n      if (allowStringInput) {\n        return checkElementTypeOfArrayOrString(inputType, errorNode);\n      }\n\n      if (isArrayLikeType(inputType)) {\n        var indexType = getIndexTypeOfType(inputType, 1\n        /* Number */\n        );\n\n        if (indexType) {\n          return indexType;\n        }\n      }\n\n      error(errorNode, ts.Diagnostics.Type_0_is_not_an_array_type, typeToString(inputType));\n      return unknownType;\n    }\n    /**\n     * When errorNode is undefined, it means we should not report any errors.\n     */\n\n\n    function checkElementTypeOfIterable(iterable, errorNode) {\n      var elementType = getElementTypeOfIterable(iterable, errorNode); // Now even though we have extracted the iteratedType, we will have to validate that the type\n      // passed in is actually an Iterable.\n\n      if (errorNode && elementType) {\n        checkTypeAssignableTo(iterable, createIterableType(elementType), errorNode);\n      }\n\n      return elementType || anyType;\n    }\n    /**\n     * We want to treat type as an iterable, and get the type it is an iterable of. The iterable\n     * must have the following structure (annotated with the names of the variables below):\n     *\n     * { // iterable\n     *     [Symbol.iterator]: { // iteratorFunction\n     *         (): Iterator<T>\n     *     }\n     * }\n     *\n     * T is the type we are after. At every level that involves analyzing return types\n     * of signatures, we union the return types of all the signatures.\n     *\n     * Another thing to note is that at any step of this process, we could run into a dead end,\n     * meaning either the property is missing, or we run into the anyType. If either of these things\n     * happens, we return undefined to signal that we could not find the iterated type. If a property\n     * is missing, and the previous step did not result in 'any', then we also give an error if the\n     * caller requested it. Then the caller can decide what to do in the case where there is no iterated\n     * type. This is different from returning anyType, because that would signify that we have matched the\n     * whole pattern and that T (above) is 'any'.\n     */\n\n\n    function getElementTypeOfIterable(type, errorNode) {\n      if (isTypeAny(type)) {\n        return undefined;\n      }\n\n      var typeAsIterable = type;\n\n      if (!typeAsIterable.iterableElementType) {\n        // As an optimization, if the type is instantiated directly using the globalIterableType (Iterable<number>),\n        // then just grab its type argument.\n        if (type.flags & 4096\n        /* Reference */\n        && type.target === globalIterableType) {\n          typeAsIterable.iterableElementType = type.typeArguments[0];\n        } else {\n          var iteratorFunction = getTypeOfPropertyOfType(type, ts.getPropertyNameForKnownSymbolName(\"iterator\"));\n\n          if (isTypeAny(iteratorFunction)) {\n            return undefined;\n          }\n\n          var iteratorFunctionSignatures = iteratorFunction ? getSignaturesOfType(iteratorFunction, 0\n          /* Call */\n          ) : emptyArray;\n\n          if (iteratorFunctionSignatures.length === 0) {\n            if (errorNode) {\n              error(errorNode, ts.Diagnostics.Type_must_have_a_Symbol_iterator_method_that_returns_an_iterator);\n            }\n\n            return undefined;\n          }\n\n          typeAsIterable.iterableElementType = getElementTypeOfIterator(getUnionType(ts.map(iteratorFunctionSignatures, getReturnTypeOfSignature)), errorNode);\n        }\n      }\n\n      return typeAsIterable.iterableElementType;\n    }\n    /**\n     * This function has very similar logic as getElementTypeOfIterable, except that it operates on\n     * Iterators instead of Iterables. Here is the structure:\n     *\n     *  { // iterator\n     *      next: { // iteratorNextFunction\n     *          (): { // iteratorNextResult\n     *              value: T // iteratorNextValue\n     *          }\n     *      }\n     *  }\n     *\n     */\n\n\n    function getElementTypeOfIterator(type, errorNode) {\n      if (isTypeAny(type)) {\n        return undefined;\n      }\n\n      var typeAsIterator = type;\n\n      if (!typeAsIterator.iteratorElementType) {\n        // As an optimization, if the type is instantiated directly using the globalIteratorType (Iterator<number>),\n        // then just grab its type argument.\n        if (type.flags & 4096\n        /* Reference */\n        && type.target === globalIteratorType) {\n          typeAsIterator.iteratorElementType = type.typeArguments[0];\n        } else {\n          var iteratorNextFunction = getTypeOfPropertyOfType(type, \"next\");\n\n          if (isTypeAny(iteratorNextFunction)) {\n            return undefined;\n          }\n\n          var iteratorNextFunctionSignatures = iteratorNextFunction ? getSignaturesOfType(iteratorNextFunction, 0\n          /* Call */\n          ) : emptyArray;\n\n          if (iteratorNextFunctionSignatures.length === 0) {\n            if (errorNode) {\n              error(errorNode, ts.Diagnostics.An_iterator_must_have_a_next_method);\n            }\n\n            return undefined;\n          }\n\n          var iteratorNextResult = getUnionType(ts.map(iteratorNextFunctionSignatures, getReturnTypeOfSignature));\n\n          if (isTypeAny(iteratorNextResult)) {\n            return undefined;\n          }\n\n          var iteratorNextValue = getTypeOfPropertyOfType(iteratorNextResult, \"value\");\n\n          if (!iteratorNextValue) {\n            if (errorNode) {\n              error(errorNode, ts.Diagnostics.The_type_returned_by_the_next_method_of_an_iterator_must_have_a_value_property);\n            }\n\n            return undefined;\n          }\n\n          typeAsIterator.iteratorElementType = iteratorNextValue;\n        }\n      }\n\n      return typeAsIterator.iteratorElementType;\n    }\n\n    function getElementTypeOfIterableIterator(type) {\n      if (isTypeAny(type)) {\n        return undefined;\n      } // As an optimization, if the type is instantiated directly using the globalIterableIteratorType (IterableIterator<number>),\n      // then just grab its type argument.\n\n\n      if (type.flags & 4096\n      /* Reference */\n      && type.target === globalIterableIteratorType) {\n        return type.typeArguments[0];\n      }\n\n      return getElementTypeOfIterable(type,\n      /*errorNode*/\n      undefined) || getElementTypeOfIterator(type,\n      /*errorNode*/\n      undefined);\n    }\n    /**\n     * This function does the following steps:\n     *   1. Break up arrayOrStringType (possibly a union) into its string constituents and array constituents.\n     *   2. Take the element types of the array constituents.\n     *   3. Return the union of the element types, and string if there was a string constitutent.\n     *\n     * For example:\n     *     string -> string\n     *     number[] -> number\n     *     string[] | number[] -> string | number\n     *     string | number[] -> string | number\n     *     string | string[] | number[] -> string | number\n     *\n     * It also errors if:\n     *   1. Some constituent is neither a string nor an array.\n     *   2. Some constituent is a string and target is less than ES5 (because in ES3 string is not indexable).\n     */\n\n\n    function checkElementTypeOfArrayOrString(arrayOrStringType, errorNode) {\n      ts.Debug.assert(languageVersion < 2\n      /* ES6 */\n      ); // After we remove all types that are StringLike, we will know if there was a string constituent\n      // based on whether the remaining type is the same as the initial type.\n\n      var arrayType = arrayOrStringType;\n\n      if (arrayOrStringType.flags & 16384\n      /* Union */\n      ) {\n          arrayType = getUnionType(ts.filter(arrayOrStringType.types, function (t) {\n            return !(t.flags & 258\n            /* StringLike */\n            );\n          }));\n        } else if (arrayOrStringType.flags & 258\n      /* StringLike */\n      ) {\n          arrayType = emptyUnionType;\n        }\n\n      var hasStringConstituent = arrayOrStringType !== arrayType;\n      var reportedError = false;\n\n      if (hasStringConstituent) {\n        if (languageVersion < 1\n        /* ES5 */\n        ) {\n            error(errorNode, ts.Diagnostics.Using_a_string_in_a_for_of_statement_is_only_supported_in_ECMAScript_5_and_higher);\n            reportedError = true;\n          } // Now that we've removed all the StringLike types, if no constituents remain, then the entire\n        // arrayOrStringType was a string.\n\n\n        if (arrayType === emptyObjectType) {\n          return stringType;\n        }\n      }\n\n      if (!isArrayLikeType(arrayType)) {\n        if (!reportedError) {\n          // Which error we report depends on whether there was a string constituent. For example,\n          // if the input type is number | string, we want to say that number is not an array type.\n          // But if the input was just number, we want to say that number is not an array type\n          // or a string type.\n          var diagnostic = hasStringConstituent ? ts.Diagnostics.Type_0_is_not_an_array_type : ts.Diagnostics.Type_0_is_not_an_array_type_or_a_string_type;\n          error(errorNode, diagnostic, typeToString(arrayType));\n        }\n\n        return hasStringConstituent ? stringType : unknownType;\n      }\n\n      var arrayElementType = getIndexTypeOfType(arrayType, 1\n      /* Number */\n      ) || unknownType;\n\n      if (hasStringConstituent) {\n        // This is just an optimization for the case where arrayOrStringType is string | string[]\n        if (arrayElementType.flags & 258\n        /* StringLike */\n        ) {\n            return stringType;\n          }\n\n        return getUnionType([arrayElementType, stringType]);\n      }\n\n      return arrayElementType;\n    }\n\n    function checkBreakOrContinueStatement(node) {\n      // Grammar checking\n      checkGrammarStatementInAmbientContext(node) || checkGrammarBreakOrContinueStatement(node); // TODO: Check that target label is valid\n    }\n\n    function isGetAccessorWithAnnotatatedSetAccessor(node) {\n      return !!(node.kind === 146\n      /* GetAccessor */\n      && ts.getSetAccessorTypeAnnotationNode(ts.getDeclarationOfKind(node.symbol, 147\n      /* SetAccessor */\n      )));\n    }\n\n    function checkReturnStatement(node) {\n      // Grammar checking\n      if (!checkGrammarStatementInAmbientContext(node)) {\n        var functionBlock = ts.getContainingFunction(node);\n\n        if (!functionBlock) {\n          grammarErrorOnFirstToken(node, ts.Diagnostics.A_return_statement_can_only_be_used_within_a_function_body);\n        }\n      }\n\n      if (node.expression) {\n        var func = ts.getContainingFunction(node);\n\n        if (func) {\n          var signature = getSignatureFromDeclaration(func);\n          var returnType = getReturnTypeOfSignature(signature);\n          var exprType = checkExpressionCached(node.expression);\n\n          if (func.asteriskToken) {\n            // A generator does not need its return expressions checked against its return type.\n            // Instead, the yield expressions are checked against the element type.\n            // TODO: Check return expressions of generators when return type tracking is added\n            // for generators.\n            return;\n          }\n\n          if (func.kind === 147\n          /* SetAccessor */\n          ) {\n              error(node.expression, ts.Diagnostics.Setters_cannot_return_a_value);\n            } else if (func.kind === 145\n          /* Constructor */\n          ) {\n              if (!checkTypeAssignableTo(exprType, returnType, node.expression)) {\n                error(node.expression, ts.Diagnostics.Return_type_of_constructor_signature_must_be_assignable_to_the_instance_type_of_the_class);\n              }\n            } else if (func.type || isGetAccessorWithAnnotatatedSetAccessor(func)) {\n            if (ts.isAsyncFunctionLike(func)) {\n              var promisedType = getPromisedType(returnType);\n              var awaitedType = checkAwaitedType(exprType, node.expression, ts.Diagnostics.Return_expression_in_async_function_does_not_have_a_valid_callable_then_member);\n\n              if (promisedType) {\n                // If the function has a return type, but promisedType is\n                // undefined, an error will be reported in checkAsyncFunctionReturnType\n                // so we don't need to report one here.\n                checkTypeAssignableTo(awaitedType, promisedType, node.expression);\n              }\n            } else {\n              checkTypeAssignableTo(exprType, returnType, node.expression);\n            }\n          }\n        }\n      }\n    }\n\n    function checkWithStatement(node) {\n      // Grammar checking for withStatement\n      if (!checkGrammarStatementInAmbientContext(node)) {\n        if (node.parserContextFlags & 8\n        /* Await */\n        ) {\n            grammarErrorOnFirstToken(node, ts.Diagnostics.with_statements_are_not_allowed_in_an_async_function_block);\n          }\n      }\n\n      checkExpression(node.expression);\n      error(node.expression, ts.Diagnostics.All_symbols_within_a_with_block_will_be_resolved_to_any);\n    }\n\n    function checkSwitchStatement(node) {\n      // Grammar checking\n      checkGrammarStatementInAmbientContext(node);\n      var firstDefaultClause;\n      var hasDuplicateDefaultClause = false;\n      var expressionType = checkExpression(node.expression);\n      var expressionTypeIsStringLike = someConstituentTypeHasKind(expressionType, 258\n      /* StringLike */\n      );\n      ts.forEach(node.caseBlock.clauses, function (clause) {\n        // Grammar check for duplicate default clauses, skip if we already report duplicate default clause\n        if (clause.kind === 245\n        /* DefaultClause */\n        && !hasDuplicateDefaultClause) {\n          if (firstDefaultClause === undefined) {\n            firstDefaultClause = clause;\n          } else {\n            var sourceFile = ts.getSourceFileOfNode(node);\n            var start = ts.skipTrivia(sourceFile.text, clause.pos);\n            var end = clause.statements.length > 0 ? clause.statements[0].pos : clause.end;\n            grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.A_default_clause_cannot_appear_more_than_once_in_a_switch_statement);\n            hasDuplicateDefaultClause = true;\n          }\n        }\n\n        if (produceDiagnostics && clause.kind === 244\n        /* CaseClause */\n        ) {\n            var caseClause = clause; // TypeScript 1.0 spec (April 2014):5.9\n            // In a 'switch' statement, each 'case' expression must be of a type that is assignable to or from the type of the 'switch' expression.\n\n            var caseType = checkExpression(caseClause.expression);\n            var expressionTypeIsAssignableToCaseType = // Permit 'number[] | \"foo\"' to be asserted to 'string'.\n            expressionTypeIsStringLike && someConstituentTypeHasKind(caseType, 258\n            /* StringLike */\n            ) || isTypeAssignableTo(expressionType, caseType);\n\n            if (!expressionTypeIsAssignableToCaseType) {\n              // 'expressionType is not assignable to caseType', try the reversed check and report errors if it fails\n              checkTypeAssignableTo(caseType, expressionType, caseClause.expression,\n              /*headMessage*/\n              undefined);\n            }\n          }\n\n        ts.forEach(clause.statements, checkSourceElement);\n      });\n    }\n\n    function checkLabeledStatement(node) {\n      // Grammar checking\n      if (!checkGrammarStatementInAmbientContext(node)) {\n        var current = node.parent;\n\n        while (current) {\n          if (ts.isFunctionLike(current)) {\n            break;\n          }\n\n          if (current.kind === 210\n          /* LabeledStatement */\n          && current.label.text === node.label.text) {\n            var sourceFile = ts.getSourceFileOfNode(node);\n            grammarErrorOnNode(node.label, ts.Diagnostics.Duplicate_label_0, ts.getTextOfNodeFromSourceText(sourceFile.text, node.label));\n            break;\n          }\n\n          current = current.parent;\n        }\n      } // ensure that label is unique\n\n\n      checkSourceElement(node.statement);\n    }\n\n    function checkThrowStatement(node) {\n      // Grammar checking\n      if (!checkGrammarStatementInAmbientContext(node)) {\n        if (node.expression === undefined) {\n          grammarErrorAfterFirstToken(node, ts.Diagnostics.Line_break_not_permitted_here);\n        }\n      }\n\n      if (node.expression) {\n        checkExpression(node.expression);\n      }\n    }\n\n    function checkTryStatement(node) {\n      // Grammar checking\n      checkGrammarStatementInAmbientContext(node);\n      checkBlock(node.tryBlock);\n      var catchClause = node.catchClause;\n\n      if (catchClause) {\n        // Grammar checking\n        if (catchClause.variableDeclaration) {\n          if (catchClause.variableDeclaration.name.kind !== 69\n          /* Identifier */\n          ) {\n              grammarErrorOnFirstToken(catchClause.variableDeclaration.name, ts.Diagnostics.Catch_clause_variable_name_must_be_an_identifier);\n            } else if (catchClause.variableDeclaration.type) {\n            grammarErrorOnFirstToken(catchClause.variableDeclaration.type, ts.Diagnostics.Catch_clause_variable_cannot_have_a_type_annotation);\n          } else if (catchClause.variableDeclaration.initializer) {\n            grammarErrorOnFirstToken(catchClause.variableDeclaration.initializer, ts.Diagnostics.Catch_clause_variable_cannot_have_an_initializer);\n          } else {\n            var identifierName = catchClause.variableDeclaration.name.text;\n            var locals = catchClause.block.locals;\n\n            if (locals && ts.hasProperty(locals, identifierName)) {\n              var localSymbol = locals[identifierName];\n\n              if (localSymbol && (localSymbol.flags & 2\n              /* BlockScopedVariable */\n              ) !== 0) {\n                grammarErrorOnNode(localSymbol.valueDeclaration, ts.Diagnostics.Cannot_redeclare_identifier_0_in_catch_clause, identifierName);\n              }\n            }\n          }\n        }\n\n        checkBlock(catchClause.block);\n      }\n\n      if (node.finallyBlock) {\n        checkBlock(node.finallyBlock);\n      }\n    }\n\n    function checkIndexConstraints(type) {\n      var declaredNumberIndexer = getIndexDeclarationOfSymbol(type.symbol, 1\n      /* Number */\n      );\n      var declaredStringIndexer = getIndexDeclarationOfSymbol(type.symbol, 0\n      /* String */\n      );\n      var stringIndexType = getIndexTypeOfType(type, 0\n      /* String */\n      );\n      var numberIndexType = getIndexTypeOfType(type, 1\n      /* Number */\n      );\n\n      if (stringIndexType || numberIndexType) {\n        ts.forEach(getPropertiesOfObjectType(type), function (prop) {\n          var propType = getTypeOfSymbol(prop);\n          checkIndexConstraintForProperty(prop, propType, type, declaredStringIndexer, stringIndexType, 0\n          /* String */\n          );\n          checkIndexConstraintForProperty(prop, propType, type, declaredNumberIndexer, numberIndexType, 1\n          /* Number */\n          );\n        });\n\n        if (type.flags & 1024\n        /* Class */\n        && ts.isClassLike(type.symbol.valueDeclaration)) {\n          var classDeclaration = type.symbol.valueDeclaration;\n\n          for (var _i = 0, _a = classDeclaration.members; _i < _a.length; _i++) {\n            var member = _a[_i]; // Only process instance properties with computed names here.\n            // Static properties cannot be in conflict with indexers,\n            // and properties with literal names were already checked.\n\n            if (!(member.flags & 64\n            /* Static */\n            ) && ts.hasDynamicName(member)) {\n              var propType = getTypeOfSymbol(member.symbol);\n              checkIndexConstraintForProperty(member.symbol, propType, type, declaredStringIndexer, stringIndexType, 0\n              /* String */\n              );\n              checkIndexConstraintForProperty(member.symbol, propType, type, declaredNumberIndexer, numberIndexType, 1\n              /* Number */\n              );\n            }\n          }\n        }\n      }\n\n      var errorNode;\n\n      if (stringIndexType && numberIndexType) {\n        errorNode = declaredNumberIndexer || declaredStringIndexer; // condition 'errorNode === undefined' may appear if types does not declare nor string neither number indexer\n\n        if (!errorNode && type.flags & 2048\n        /* Interface */\n        ) {\n          var someBaseTypeHasBothIndexers = ts.forEach(getBaseTypes(type), function (base) {\n            return getIndexTypeOfType(base, 0\n            /* String */\n            ) && getIndexTypeOfType(base, 1\n            /* Number */\n            );\n          });\n          errorNode = someBaseTypeHasBothIndexers ? undefined : type.symbol.declarations[0];\n        }\n      }\n\n      if (errorNode && !isTypeAssignableTo(numberIndexType, stringIndexType)) {\n        error(errorNode, ts.Diagnostics.Numeric_index_type_0_is_not_assignable_to_string_index_type_1, typeToString(numberIndexType), typeToString(stringIndexType));\n      }\n\n      function checkIndexConstraintForProperty(prop, propertyType, containingType, indexDeclaration, indexType, indexKind) {\n        if (!indexType) {\n          return;\n        } // index is numeric and property name is not valid numeric literal\n\n\n        if (indexKind === 1\n        /* Number */\n        && !isNumericName(prop.valueDeclaration.name)) {\n          return;\n        } // perform property check if property or indexer is declared in 'type'\n        // this allows to rule out cases when both property and indexer are inherited from the base class\n\n\n        var errorNode;\n\n        if (prop.valueDeclaration.name.kind === 137\n        /* ComputedPropertyName */\n        || prop.parent === containingType.symbol) {\n          errorNode = prop.valueDeclaration;\n        } else if (indexDeclaration) {\n          errorNode = indexDeclaration;\n        } else if (containingType.flags & 2048\n        /* Interface */\n        ) {\n            // for interfaces property and indexer might be inherited from different bases\n            // check if any base class already has both property and indexer.\n            // check should be performed only if 'type' is the first type that brings property\\indexer together\n            var someBaseClassHasBothPropertyAndIndexer = ts.forEach(getBaseTypes(containingType), function (base) {\n              return getPropertyOfObjectType(base, prop.name) && getIndexTypeOfType(base, indexKind);\n            });\n            errorNode = someBaseClassHasBothPropertyAndIndexer ? undefined : containingType.symbol.declarations[0];\n          }\n\n        if (errorNode && !isTypeAssignableTo(propertyType, indexType)) {\n          var errorMessage = indexKind === 0\n          /* String */\n          ? ts.Diagnostics.Property_0_of_type_1_is_not_assignable_to_string_index_type_2 : ts.Diagnostics.Property_0_of_type_1_is_not_assignable_to_numeric_index_type_2;\n          error(errorNode, errorMessage, symbolToString(prop), typeToString(propertyType), typeToString(indexType));\n        }\n      }\n    }\n\n    function checkTypeNameIsReserved(name, message) {\n      // TS 1.0 spec (April 2014): 3.6.1\n      // The predefined type keywords are reserved and cannot be used as names of user defined types.\n      switch (name.text) {\n        case \"any\":\n        case \"number\":\n        case \"boolean\":\n        case \"string\":\n        case \"symbol\":\n        case \"void\":\n          error(name, message, name.text);\n      }\n    } // Check each type parameter and check that list has no duplicate type parameter declarations\n\n\n    function checkTypeParameters(typeParameterDeclarations) {\n      if (typeParameterDeclarations) {\n        for (var i = 0, n = typeParameterDeclarations.length; i < n; i++) {\n          var node = typeParameterDeclarations[i];\n          checkTypeParameter(node);\n\n          if (produceDiagnostics) {\n            for (var j = 0; j < i; j++) {\n              if (typeParameterDeclarations[j].symbol === node.symbol) {\n                error(node.name, ts.Diagnostics.Duplicate_identifier_0, ts.declarationNameToString(node.name));\n              }\n            }\n          }\n        }\n      }\n    }\n\n    function checkClassExpression(node) {\n      checkClassLikeDeclaration(node);\n      checkNodeDeferred(node);\n      return getTypeOfSymbol(getSymbolOfNode(node));\n    }\n\n    function checkClassExpressionDeferred(node) {\n      ts.forEach(node.members, checkSourceElement);\n    }\n\n    function checkClassDeclaration(node) {\n      if (!node.name && !(node.flags & 512\n      /* Default */\n      )) {\n        grammarErrorOnFirstToken(node, ts.Diagnostics.A_class_declaration_without_the_default_modifier_must_have_a_name);\n      }\n\n      checkClassLikeDeclaration(node);\n      ts.forEach(node.members, checkSourceElement);\n    }\n\n    function checkClassLikeDeclaration(node) {\n      checkGrammarClassDeclarationHeritageClauses(node);\n      checkDecorators(node);\n\n      if (node.name) {\n        checkTypeNameIsReserved(node.name, ts.Diagnostics.Class_name_cannot_be_0);\n        checkCollisionWithCapturedThisVariable(node, node.name);\n        checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\n        checkCollisionWithGlobalPromiseInGeneratedCode(node, node.name);\n      }\n\n      checkTypeParameters(node.typeParameters);\n      checkExportsOnMergedDeclarations(node);\n      var symbol = getSymbolOfNode(node);\n      var type = getDeclaredTypeOfSymbol(symbol);\n      var typeWithThis = getTypeWithThisArgument(type);\n      var staticType = getTypeOfSymbol(symbol);\n      var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);\n\n      if (baseTypeNode) {\n        var baseTypes = getBaseTypes(type);\n\n        if (baseTypes.length && produceDiagnostics) {\n          var baseType_1 = baseTypes[0];\n          var staticBaseType = getBaseConstructorTypeOfClass(type);\n          checkSourceElement(baseTypeNode.expression);\n\n          if (baseTypeNode.typeArguments) {\n            ts.forEach(baseTypeNode.typeArguments, checkSourceElement);\n\n            for (var _i = 0, _a = getConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments); _i < _a.length; _i++) {\n              var constructor = _a[_i];\n\n              if (!checkTypeArgumentConstraints(constructor.typeParameters, baseTypeNode.typeArguments)) {\n                break;\n              }\n            }\n          }\n\n          checkTypeAssignableTo(typeWithThis, getTypeWithThisArgument(baseType_1, type.thisType), node.name || node, ts.Diagnostics.Class_0_incorrectly_extends_base_class_1);\n          checkTypeAssignableTo(staticType, getTypeWithoutSignatures(staticBaseType), node.name || node, ts.Diagnostics.Class_static_side_0_incorrectly_extends_base_class_static_side_1);\n\n          if (!(staticBaseType.symbol && staticBaseType.symbol.flags & 32\n          /* Class */\n          )) {\n            // When the static base type is a \"class-like\" constructor function (but not actually a class), we verify\n            // that all instantiated base constructor signatures return the same type. We can simply compare the type\n            // references (as opposed to checking the structure of the types) because elsewhere we have already checked\n            // that the base type is a class or interface type (and not, for example, an anonymous object type).\n            var constructors = getInstantiatedConstructorsForTypeArguments(staticBaseType, baseTypeNode.typeArguments);\n\n            if (ts.forEach(constructors, function (sig) {\n              return getReturnTypeOfSignature(sig) !== baseType_1;\n            })) {\n              error(baseTypeNode.expression, ts.Diagnostics.Base_constructors_must_all_have_the_same_return_type);\n            }\n          }\n\n          checkKindsOfPropertyMemberOverrides(type, baseType_1);\n        }\n      }\n\n      var implementedTypeNodes = ts.getClassImplementsHeritageClauseElements(node);\n\n      if (implementedTypeNodes) {\n        for (var _b = 0, implementedTypeNodes_1 = implementedTypeNodes; _b < implementedTypeNodes_1.length; _b++) {\n          var typeRefNode = implementedTypeNodes_1[_b];\n\n          if (!ts.isSupportedExpressionWithTypeArguments(typeRefNode)) {\n            error(typeRefNode.expression, ts.Diagnostics.A_class_can_only_implement_an_identifier_Slashqualified_name_with_optional_type_arguments);\n          }\n\n          checkTypeReferenceNode(typeRefNode);\n\n          if (produceDiagnostics) {\n            var t = getTypeFromTypeNode(typeRefNode);\n\n            if (t !== unknownType) {\n              var declaredType = t.flags & 4096\n              /* Reference */\n              ? t.target : t;\n\n              if (declaredType.flags & (1024\n              /* Class */\n              | 2048\n              /* Interface */\n              )) {\n                checkTypeAssignableTo(typeWithThis, getTypeWithThisArgument(t, type.thisType), node.name || node, ts.Diagnostics.Class_0_incorrectly_implements_interface_1);\n              } else {\n                error(typeRefNode, ts.Diagnostics.A_class_may_only_implement_another_class_or_interface);\n              }\n            }\n          }\n        }\n      }\n\n      if (produceDiagnostics) {\n        checkIndexConstraints(type);\n        checkTypeForDuplicateIndexSignatures(node);\n      }\n    }\n\n    function getTargetSymbol(s) {\n      // if symbol is instantiated its flags are not copied from the 'target'\n      // so we'll need to get back original 'target' symbol to work with correct set of flags\n      return s.flags & 16777216\n      /* Instantiated */\n      ? getSymbolLinks(s).target : s;\n    }\n\n    function getClassLikeDeclarationOfSymbol(symbol) {\n      return ts.forEach(symbol.declarations, function (d) {\n        return ts.isClassLike(d) ? d : undefined;\n      });\n    }\n\n    function checkKindsOfPropertyMemberOverrides(type, baseType) {\n      // TypeScript 1.0 spec (April 2014): 8.2.3\n      // A derived class inherits all members from its base class it doesn't override.\n      // Inheritance means that a derived class implicitly contains all non - overridden members of the base class.\n      // Both public and private property members are inherited, but only public property members can be overridden.\n      // A property member in a derived class is said to override a property member in a base class\n      // when the derived class property member has the same name and kind(instance or static)\n      // as the base class property member.\n      // The type of an overriding property member must be assignable(section 3.8.4)\n      // to the type of the overridden property member, or otherwise a compile - time error occurs.\n      // Base class instance member functions can be overridden by derived class instance member functions,\n      // but not by other kinds of members.\n      // Base class instance member variables and accessors can be overridden by\n      // derived class instance member variables and accessors, but not by other kinds of members.\n      // NOTE: assignability is checked in checkClassDeclaration\n      var baseProperties = getPropertiesOfObjectType(baseType);\n\n      for (var _i = 0, baseProperties_1 = baseProperties; _i < baseProperties_1.length; _i++) {\n        var baseProperty = baseProperties_1[_i];\n        var base = getTargetSymbol(baseProperty);\n\n        if (base.flags & 134217728\n        /* Prototype */\n        ) {\n            continue;\n          }\n\n        var derived = getTargetSymbol(getPropertyOfObjectType(type, base.name));\n        var baseDeclarationFlags = getDeclarationFlagsFromSymbol(base);\n        ts.Debug.assert(!!derived, \"derived should point to something, even if it is the base class' declaration.\");\n\n        if (derived) {\n          // In order to resolve whether the inherited method was overriden in the base class or not,\n          // we compare the Symbols obtained. Since getTargetSymbol returns the symbol on the *uninstantiated*\n          // type declaration, derived and base resolve to the same symbol even in the case of generic classes.\n          if (derived === base) {\n            // derived class inherits base without override/redeclaration\n            var derivedClassDecl = getClassLikeDeclarationOfSymbol(type.symbol); // It is an error to inherit an abstract member without implementing it or being declared abstract.\n            // If there is no declaration for the derived class (as in the case of class expressions),\n            // then the class cannot be declared abstract.\n\n            if (baseDeclarationFlags & 128\n            /* Abstract */\n            && (!derivedClassDecl || !(derivedClassDecl.flags & 128\n            /* Abstract */\n            ))) {\n              if (derivedClassDecl.kind === 189\n              /* ClassExpression */\n              ) {\n                  error(derivedClassDecl, ts.Diagnostics.Non_abstract_class_expression_does_not_implement_inherited_abstract_member_0_from_class_1, symbolToString(baseProperty), typeToString(baseType));\n                } else {\n                error(derivedClassDecl, ts.Diagnostics.Non_abstract_class_0_does_not_implement_inherited_abstract_member_1_from_class_2, typeToString(type), symbolToString(baseProperty), typeToString(baseType));\n              }\n            }\n          } else {\n            // derived overrides base.\n            var derivedDeclarationFlags = getDeclarationFlagsFromSymbol(derived);\n\n            if (baseDeclarationFlags & 16\n            /* Private */\n            || derivedDeclarationFlags & 16\n            /* Private */\n            ) {\n              // either base or derived property is private - not override, skip it\n              continue;\n            }\n\n            if ((baseDeclarationFlags & 64\n            /* Static */\n            ) !== (derivedDeclarationFlags & 64\n            /* Static */\n            )) {\n              // value of 'static' is not the same for properties - not override, skip it\n              continue;\n            }\n\n            if (base.flags & derived.flags & 8192\n            /* Method */\n            || base.flags & 98308\n            /* PropertyOrAccessor */\n            && derived.flags & 98308\n            /* PropertyOrAccessor */\n            ) {\n              // method is overridden with method or property/accessor is overridden with property/accessor - correct case\n              continue;\n            }\n\n            var errorMessage = void 0;\n\n            if (base.flags & 8192\n            /* Method */\n            ) {\n                if (derived.flags & 98304\n                /* Accessor */\n                ) {\n                    errorMessage = ts.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_accessor;\n                  } else {\n                  ts.Debug.assert((derived.flags & 4\n                  /* Property */\n                  ) !== 0);\n                  errorMessage = ts.Diagnostics.Class_0_defines_instance_member_function_1_but_extended_class_2_defines_it_as_instance_member_property;\n                }\n              } else if (base.flags & 4\n            /* Property */\n            ) {\n                ts.Debug.assert((derived.flags & 8192\n                /* Method */\n                ) !== 0);\n                errorMessage = ts.Diagnostics.Class_0_defines_instance_member_property_1_but_extended_class_2_defines_it_as_instance_member_function;\n              } else {\n              ts.Debug.assert((base.flags & 98304\n              /* Accessor */\n              ) !== 0);\n              ts.Debug.assert((derived.flags & 8192\n              /* Method */\n              ) !== 0);\n              errorMessage = ts.Diagnostics.Class_0_defines_instance_member_accessor_1_but_extended_class_2_defines_it_as_instance_member_function;\n            }\n\n            error(derived.valueDeclaration.name, errorMessage, typeToString(baseType), symbolToString(base), typeToString(type));\n          }\n        }\n      }\n    }\n\n    function isAccessor(kind) {\n      return kind === 146\n      /* GetAccessor */\n      || kind === 147\n      /* SetAccessor */\n      ;\n    }\n\n    function areTypeParametersIdentical(list1, list2) {\n      if (!list1 && !list2) {\n        return true;\n      }\n\n      if (!list1 || !list2 || list1.length !== list2.length) {\n        return false;\n      } // TypeScript 1.0 spec (April 2014):\n      // When a generic interface has multiple declarations,  all declarations must have identical type parameter\n      // lists, i.e. identical type parameter names with identical constraints in identical order.\n\n\n      for (var i = 0, len = list1.length; i < len; i++) {\n        var tp1 = list1[i];\n        var tp2 = list2[i];\n\n        if (tp1.name.text !== tp2.name.text) {\n          return false;\n        }\n\n        if (!tp1.constraint && !tp2.constraint) {\n          continue;\n        }\n\n        if (!tp1.constraint || !tp2.constraint) {\n          return false;\n        }\n\n        if (!isTypeIdenticalTo(getTypeFromTypeNode(tp1.constraint), getTypeFromTypeNode(tp2.constraint))) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function checkInheritedPropertiesAreIdentical(type, typeNode) {\n      var baseTypes = getBaseTypes(type);\n\n      if (baseTypes.length < 2) {\n        return true;\n      }\n\n      var seen = {};\n      ts.forEach(resolveDeclaredMembers(type).declaredProperties, function (p) {\n        seen[p.name] = {\n          prop: p,\n          containingType: type\n        };\n      });\n      var ok = true;\n\n      for (var _i = 0, baseTypes_2 = baseTypes; _i < baseTypes_2.length; _i++) {\n        var base = baseTypes_2[_i];\n        var properties = getPropertiesOfObjectType(getTypeWithThisArgument(base, type.thisType));\n\n        for (var _a = 0, properties_4 = properties; _a < properties_4.length; _a++) {\n          var prop = properties_4[_a];\n\n          if (!ts.hasProperty(seen, prop.name)) {\n            seen[prop.name] = {\n              prop: prop,\n              containingType: base\n            };\n          } else {\n            var existing = seen[prop.name];\n            var isInheritedProperty = existing.containingType !== type;\n\n            if (isInheritedProperty && !isPropertyIdenticalTo(existing.prop, prop)) {\n              ok = false;\n              var typeName1 = typeToString(existing.containingType);\n              var typeName2 = typeToString(base);\n              var errorInfo = ts.chainDiagnosticMessages(undefined, ts.Diagnostics.Named_property_0_of_types_1_and_2_are_not_identical, symbolToString(prop), typeName1, typeName2);\n              errorInfo = ts.chainDiagnosticMessages(errorInfo, ts.Diagnostics.Interface_0_cannot_simultaneously_extend_types_1_and_2, typeToString(type), typeName1, typeName2);\n              diagnostics.add(ts.createDiagnosticForNodeFromMessageChain(typeNode, errorInfo));\n            }\n          }\n        }\n      }\n\n      return ok;\n    }\n\n    function checkInterfaceDeclaration(node) {\n      // Grammar checking\n      checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarInterfaceDeclaration(node);\n      checkTypeParameters(node.typeParameters);\n\n      if (produceDiagnostics) {\n        checkTypeNameIsReserved(node.name, ts.Diagnostics.Interface_name_cannot_be_0);\n        checkExportsOnMergedDeclarations(node);\n        var symbol = getSymbolOfNode(node);\n        var firstInterfaceDecl = ts.getDeclarationOfKind(symbol, 218\n        /* InterfaceDeclaration */\n        );\n\n        if (symbol.declarations.length > 1) {\n          if (node !== firstInterfaceDecl && !areTypeParametersIdentical(firstInterfaceDecl.typeParameters, node.typeParameters)) {\n            error(node.name, ts.Diagnostics.All_declarations_of_an_interface_must_have_identical_type_parameters);\n          }\n        } // Only check this symbol once\n\n\n        if (node === firstInterfaceDecl) {\n          var type = getDeclaredTypeOfSymbol(symbol);\n          var typeWithThis = getTypeWithThisArgument(type); // run subsequent checks only if first set succeeded\n\n          if (checkInheritedPropertiesAreIdentical(type, node.name)) {\n            for (var _i = 0, _a = getBaseTypes(type); _i < _a.length; _i++) {\n              var baseType = _a[_i];\n              checkTypeAssignableTo(typeWithThis, getTypeWithThisArgument(baseType, type.thisType), node.name, ts.Diagnostics.Interface_0_incorrectly_extends_interface_1);\n            }\n\n            checkIndexConstraints(type);\n          }\n        }\n      }\n\n      ts.forEach(ts.getInterfaceBaseTypeNodes(node), function (heritageElement) {\n        if (!ts.isSupportedExpressionWithTypeArguments(heritageElement)) {\n          error(heritageElement.expression, ts.Diagnostics.An_interface_can_only_extend_an_identifier_Slashqualified_name_with_optional_type_arguments);\n        }\n\n        checkTypeReferenceNode(heritageElement);\n      });\n      ts.forEach(node.members, checkSourceElement);\n\n      if (produceDiagnostics) {\n        checkTypeForDuplicateIndexSignatures(node);\n      }\n    }\n\n    function checkTypeAliasDeclaration(node) {\n      // Grammar checking\n      checkGrammarDecorators(node) || checkGrammarModifiers(node);\n      checkTypeNameIsReserved(node.name, ts.Diagnostics.Type_alias_name_cannot_be_0);\n      checkSourceElement(node.type);\n    }\n\n    function computeEnumMemberValues(node) {\n      var nodeLinks = getNodeLinks(node);\n\n      if (!(nodeLinks.flags & 16384\n      /* EnumValuesComputed */\n      )) {\n        var enumSymbol = getSymbolOfNode(node);\n        var enumType = getDeclaredTypeOfSymbol(enumSymbol);\n        var autoValue = 0; // set to undefined when enum member is non-constant\n\n        var ambient = ts.isInAmbientContext(node);\n        var enumIsConst = ts.isConst(node);\n\n        for (var _i = 0, _a = node.members; _i < _a.length; _i++) {\n          var member = _a[_i];\n\n          if (isComputedNonLiteralName(member.name)) {\n            error(member.name, ts.Diagnostics.Computed_property_names_are_not_allowed_in_enums);\n          } else {\n            var text = getTextOfPropertyName(member.name);\n\n            if (isNumericLiteralName(text)) {\n              error(member.name, ts.Diagnostics.An_enum_member_cannot_have_a_numeric_name);\n            }\n          }\n\n          var previousEnumMemberIsNonConstant = autoValue === undefined;\n          var initializer = member.initializer;\n\n          if (initializer) {\n            autoValue = computeConstantValueForEnumMemberInitializer(initializer, enumType, enumIsConst, ambient);\n          } else if (ambient && !enumIsConst) {\n            // In ambient enum declarations that specify no const modifier, enum member declarations\n            // that omit a value are considered computed members (as opposed to having auto-incremented values assigned).\n            autoValue = undefined;\n          } else if (previousEnumMemberIsNonConstant) {\n            // If the member declaration specifies no value, the member is considered a constant enum member.\n            // If the member is the first member in the enum declaration, it is assigned the value zero.\n            // Otherwise, it is assigned the value of the immediately preceding member plus one,\n            // and an error occurs if the immediately preceding member is not a constant enum member\n            error(member.name, ts.Diagnostics.Enum_member_must_have_initializer);\n          }\n\n          if (autoValue !== undefined) {\n            getNodeLinks(member).enumMemberValue = autoValue;\n            autoValue++;\n          }\n        }\n\n        nodeLinks.flags |= 16384\n        /* EnumValuesComputed */\n        ;\n      }\n\n      function computeConstantValueForEnumMemberInitializer(initializer, enumType, enumIsConst, ambient) {\n        // Controls if error should be reported after evaluation of constant value is completed\n        // Can be false if another more precise error was already reported during evaluation.\n        var reportError = true;\n        var value = evalConstant(initializer);\n\n        if (reportError) {\n          if (value === undefined) {\n            if (enumIsConst) {\n              error(initializer, ts.Diagnostics.In_const_enum_declarations_member_initializer_must_be_constant_expression);\n            } else if (ambient) {\n              error(initializer, ts.Diagnostics.In_ambient_enum_declarations_member_initializer_must_be_constant_expression);\n            } else {\n              // Only here do we need to check that the initializer is assignable to the enum type.\n              checkTypeAssignableTo(checkExpression(initializer), enumType, initializer,\n              /*headMessage*/\n              undefined);\n            }\n          } else if (enumIsConst) {\n            if (isNaN(value)) {\n              error(initializer, ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_disallowed_value_NaN);\n            } else if (!isFinite(value)) {\n              error(initializer, ts.Diagnostics.const_enum_member_initializer_was_evaluated_to_a_non_finite_value);\n            }\n          }\n        }\n\n        return value;\n\n        function evalConstant(e) {\n          switch (e.kind) {\n            case 182\n            /* PrefixUnaryExpression */\n            :\n              var value_1 = evalConstant(e.operand);\n\n              if (value_1 === undefined) {\n                return undefined;\n              }\n\n              switch (e.operator) {\n                case 35\n                /* PlusToken */\n                :\n                  return value_1;\n\n                case 36\n                /* MinusToken */\n                :\n                  return -value_1;\n\n                case 50\n                /* TildeToken */\n                :\n                  return ~value_1;\n              }\n\n              return undefined;\n\n            case 184\n            /* BinaryExpression */\n            :\n              var left = evalConstant(e.left);\n\n              if (left === undefined) {\n                return undefined;\n              }\n\n              var right = evalConstant(e.right);\n\n              if (right === undefined) {\n                return undefined;\n              }\n\n              switch (e.operatorToken.kind) {\n                case 47\n                /* BarToken */\n                :\n                  return left | right;\n\n                case 46\n                /* AmpersandToken */\n                :\n                  return left & right;\n\n                case 44\n                /* GreaterThanGreaterThanToken */\n                :\n                  return left >> right;\n\n                case 45\n                /* GreaterThanGreaterThanGreaterThanToken */\n                :\n                  return left >>> right;\n\n                case 43\n                /* LessThanLessThanToken */\n                :\n                  return left << right;\n\n                case 48\n                /* CaretToken */\n                :\n                  return left ^ right;\n\n                case 37\n                /* AsteriskToken */\n                :\n                  return left * right;\n\n                case 39\n                /* SlashToken */\n                :\n                  return left / right;\n\n                case 35\n                /* PlusToken */\n                :\n                  return left + right;\n\n                case 36\n                /* MinusToken */\n                :\n                  return left - right;\n\n                case 40\n                /* PercentToken */\n                :\n                  return left % right;\n              }\n\n              return undefined;\n\n            case 8\n            /* NumericLiteral */\n            :\n              return +e.text;\n\n            case 175\n            /* ParenthesizedExpression */\n            :\n              return evalConstant(e.expression);\n\n            case 69\n            /* Identifier */\n            :\n            case 170\n            /* ElementAccessExpression */\n            :\n            case 169\n            /* PropertyAccessExpression */\n            :\n              var member = initializer.parent;\n              var currentType = getTypeOfSymbol(getSymbolOfNode(member.parent));\n              var enumType_1;\n              var propertyName = void 0;\n\n              if (e.kind === 69\n              /* Identifier */\n              ) {\n                  // unqualified names can refer to member that reside in different declaration of the enum so just doing name resolution won't work.\n                  // instead pick current enum type and later try to fetch member from the type\n                  enumType_1 = currentType;\n                  propertyName = e.text;\n                } else {\n                var expression = void 0;\n\n                if (e.kind === 170\n                /* ElementAccessExpression */\n                ) {\n                    if (e.argumentExpression === undefined || e.argumentExpression.kind !== 9\n                    /* StringLiteral */\n                    ) {\n                        return undefined;\n                      }\n\n                    expression = e.expression;\n                    propertyName = e.argumentExpression.text;\n                  } else {\n                  expression = e.expression;\n                  propertyName = e.name.text;\n                } // expression part in ElementAccess\\PropertyAccess should be either identifier or dottedName\n\n\n                var current = expression;\n\n                while (current) {\n                  if (current.kind === 69\n                  /* Identifier */\n                  ) {\n                      break;\n                    } else if (current.kind === 169\n                  /* PropertyAccessExpression */\n                  ) {\n                      current = current.expression;\n                    } else {\n                    return undefined;\n                  }\n                }\n\n                enumType_1 = checkExpression(expression); // allow references to constant members of other enums\n\n                if (!(enumType_1.symbol && enumType_1.symbol.flags & 384\n                /* Enum */\n                )) {\n                  return undefined;\n                }\n              }\n\n              if (propertyName === undefined) {\n                return undefined;\n              }\n\n              var property = getPropertyOfObjectType(enumType_1, propertyName);\n\n              if (!property || !(property.flags & 8\n              /* EnumMember */\n              )) {\n                return undefined;\n              }\n\n              var propertyDecl = property.valueDeclaration; // self references are illegal\n\n              if (member === propertyDecl) {\n                return undefined;\n              } // illegal case: forward reference\n\n\n              if (!isBlockScopedNameDeclaredBeforeUse(propertyDecl, member)) {\n                reportError = false;\n                error(e, ts.Diagnostics.A_member_initializer_in_a_enum_declaration_cannot_reference_members_declared_after_it_including_members_defined_in_other_enums);\n                return undefined;\n              }\n\n              return getNodeLinks(propertyDecl).enumMemberValue;\n          }\n        }\n      }\n    }\n\n    function checkEnumDeclaration(node) {\n      if (!produceDiagnostics) {\n        return;\n      } // Grammar checking\n\n\n      checkGrammarDecorators(node) || checkGrammarModifiers(node);\n      checkTypeNameIsReserved(node.name, ts.Diagnostics.Enum_name_cannot_be_0);\n      checkCollisionWithCapturedThisVariable(node, node.name);\n      checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\n      checkCollisionWithGlobalPromiseInGeneratedCode(node, node.name);\n      checkExportsOnMergedDeclarations(node);\n      computeEnumMemberValues(node);\n      var enumIsConst = ts.isConst(node);\n\n      if (compilerOptions.isolatedModules && enumIsConst && ts.isInAmbientContext(node)) {\n        error(node.name, ts.Diagnostics.Ambient_const_enums_are_not_allowed_when_the_isolatedModules_flag_is_provided);\n      } // Spec 2014 - Section 9.3:\n      // It isn't possible for one enum declaration to continue the automatic numbering sequence of another,\n      // and when an enum type has multiple declarations, only one declaration is permitted to omit a value\n      // for the first member.\n      //\n      // Only perform this check once per symbol\n\n\n      var enumSymbol = getSymbolOfNode(node);\n      var firstDeclaration = ts.getDeclarationOfKind(enumSymbol, node.kind);\n\n      if (node === firstDeclaration) {\n        if (enumSymbol.declarations.length > 1) {\n          // check that const is placed\\omitted on all enum declarations\n          ts.forEach(enumSymbol.declarations, function (decl) {\n            if (ts.isConstEnumDeclaration(decl) !== enumIsConst) {\n              error(decl.name, ts.Diagnostics.Enum_declarations_must_all_be_const_or_non_const);\n            }\n          });\n        }\n\n        var seenEnumMissingInitialInitializer_1 = false;\n        ts.forEach(enumSymbol.declarations, function (declaration) {\n          // return true if we hit a violation of the rule, false otherwise\n          if (declaration.kind !== 220\n          /* EnumDeclaration */\n          ) {\n              return false;\n            }\n\n          var enumDeclaration = declaration;\n\n          if (!enumDeclaration.members.length) {\n            return false;\n          }\n\n          var firstEnumMember = enumDeclaration.members[0];\n\n          if (!firstEnumMember.initializer) {\n            if (seenEnumMissingInitialInitializer_1) {\n              error(firstEnumMember.name, ts.Diagnostics.In_an_enum_with_multiple_declarations_only_one_declaration_can_omit_an_initializer_for_its_first_enum_element);\n            } else {\n              seenEnumMissingInitialInitializer_1 = true;\n            }\n          }\n        });\n      }\n    }\n\n    function getFirstNonAmbientClassOrFunctionDeclaration(symbol) {\n      var declarations = symbol.declarations;\n\n      for (var _i = 0, declarations_5 = declarations; _i < declarations_5.length; _i++) {\n        var declaration = declarations_5[_i];\n\n        if ((declaration.kind === 217\n        /* ClassDeclaration */\n        || declaration.kind === 216\n        /* FunctionDeclaration */\n        && ts.nodeIsPresent(declaration.body)) && !ts.isInAmbientContext(declaration)) {\n          return declaration;\n        }\n      }\n\n      return undefined;\n    }\n\n    function inSameLexicalScope(node1, node2) {\n      var container1 = ts.getEnclosingBlockScopeContainer(node1);\n      var container2 = ts.getEnclosingBlockScopeContainer(node2);\n\n      if (isGlobalSourceFile(container1)) {\n        return isGlobalSourceFile(container2);\n      } else if (isGlobalSourceFile(container2)) {\n        return false;\n      } else {\n        return container1 === container2;\n      }\n    }\n\n    function checkModuleDeclaration(node) {\n      if (produceDiagnostics) {\n        // Grammar checking\n        var isGlobalAugmentation = ts.isGlobalScopeAugmentation(node);\n        var inAmbientContext = ts.isInAmbientContext(node);\n\n        if (isGlobalAugmentation && !inAmbientContext) {\n          error(node.name, ts.Diagnostics.Augmentations_for_the_global_scope_should_have_declare_modifier_unless_they_appear_in_already_ambient_context);\n        }\n\n        var isAmbientExternalModule = ts.isAmbientModule(node);\n        var contextErrorMessage = isAmbientExternalModule ? ts.Diagnostics.An_ambient_module_declaration_is_only_allowed_at_the_top_level_in_a_file : ts.Diagnostics.A_namespace_declaration_is_only_allowed_in_a_namespace_or_module;\n\n        if (checkGrammarModuleElementContext(node, contextErrorMessage)) {\n          // If we hit a module declaration in an illegal context, just bail out to avoid cascading errors.\n          return;\n        }\n\n        if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node)) {\n          if (!inAmbientContext && node.name.kind === 9\n          /* StringLiteral */\n          ) {\n              grammarErrorOnNode(node.name, ts.Diagnostics.Only_ambient_modules_can_use_quoted_names);\n            }\n        }\n\n        checkCollisionWithCapturedThisVariable(node, node.name);\n        checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\n        checkCollisionWithGlobalPromiseInGeneratedCode(node, node.name);\n        checkExportsOnMergedDeclarations(node);\n        var symbol = getSymbolOfNode(node); // The following checks only apply on a non-ambient instantiated module declaration.\n\n        if (symbol.flags & 512\n        /* ValueModule */\n        && symbol.declarations.length > 1 && !inAmbientContext && ts.isInstantiatedModule(node, compilerOptions.preserveConstEnums || compilerOptions.isolatedModules)) {\n          var firstNonAmbientClassOrFunc = getFirstNonAmbientClassOrFunctionDeclaration(symbol);\n\n          if (firstNonAmbientClassOrFunc) {\n            if (ts.getSourceFileOfNode(node) !== ts.getSourceFileOfNode(firstNonAmbientClassOrFunc)) {\n              error(node.name, ts.Diagnostics.A_namespace_declaration_cannot_be_in_a_different_file_from_a_class_or_function_with_which_it_is_merged);\n            } else if (node.pos < firstNonAmbientClassOrFunc.pos) {\n              error(node.name, ts.Diagnostics.A_namespace_declaration_cannot_be_located_prior_to_a_class_or_function_with_which_it_is_merged);\n            }\n          } // if the module merges with a class declaration in the same lexical scope,\n          // we need to track this to ensure the correct emit.\n\n\n          var mergedClass = ts.getDeclarationOfKind(symbol, 217\n          /* ClassDeclaration */\n          );\n\n          if (mergedClass && inSameLexicalScope(node, mergedClass)) {\n            getNodeLinks(node).flags |= 32768\n            /* LexicalModuleMergesWithClass */\n            ;\n          }\n        }\n\n        if (isAmbientExternalModule) {\n          if (ts.isExternalModuleAugmentation(node)) {\n            // body of the augmentation should be checked for consistency only if augmentation was applied to its target (either global scope or module)\n            // otherwise we'll be swamped in cascading errors.\n            // We can detect if augmentation was applied using following rules:\n            // - augmentation for a global scope is always applied\n            // - augmentation for some external module is applied if symbol for augmentation is merged (it was combined with target module).\n            var checkBody = isGlobalAugmentation || getSymbolOfNode(node).flags & 33554432\n            /* Merged */\n            ;\n\n            if (checkBody) {\n              // body of ambient external module is always a module block\n              for (var _i = 0, _a = node.body.statements; _i < _a.length; _i++) {\n                var statement = _a[_i];\n                checkModuleAugmentationElement(statement, isGlobalAugmentation);\n              }\n            }\n          } else if (isGlobalSourceFile(node.parent)) {\n            if (isGlobalAugmentation) {\n              error(node.name, ts.Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations);\n            } else if (ts.isExternalModuleNameRelative(node.name.text)) {\n              error(node.name, ts.Diagnostics.Ambient_module_declaration_cannot_specify_relative_module_name);\n            }\n          } else {\n            if (isGlobalAugmentation) {\n              error(node.name, ts.Diagnostics.Augmentations_for_the_global_scope_can_only_be_directly_nested_in_external_modules_or_ambient_module_declarations);\n            } else {\n              // Node is not an augmentation and is not located on the script level.\n              // This means that this is declaration of ambient module that is located in other module or namespace which is prohibited.\n              error(node.name, ts.Diagnostics.Ambient_modules_cannot_be_nested_in_other_modules_or_namespaces);\n            }\n          }\n        }\n      }\n\n      checkSourceElement(node.body);\n    }\n\n    function checkModuleAugmentationElement(node, isGlobalAugmentation) {\n      switch (node.kind) {\n        case 196\n        /* VariableStatement */\n        :\n          // error each individual name in variable statement instead of marking the entire variable statement\n          for (var _i = 0, _a = node.declarationList.declarations; _i < _a.length; _i++) {\n            var decl = _a[_i];\n            checkModuleAugmentationElement(decl, isGlobalAugmentation);\n          }\n\n          break;\n\n        case 230\n        /* ExportAssignment */\n        :\n        case 231\n        /* ExportDeclaration */\n        :\n          grammarErrorOnFirstToken(node, ts.Diagnostics.Exports_and_export_assignments_are_not_permitted_in_module_augmentations);\n          break;\n\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n          if (node.moduleReference.kind !== 9\n          /* StringLiteral */\n          ) {\n              error(node.name, ts.Diagnostics.Module_augmentation_cannot_introduce_new_names_in_the_top_level_scope);\n              break;\n            }\n\n        // fallthrough\n\n        case 225\n        /* ImportDeclaration */\n        :\n          grammarErrorOnFirstToken(node, ts.Diagnostics.Imports_are_not_permitted_in_module_augmentations_Consider_moving_them_to_the_enclosing_external_module);\n          break;\n\n        case 166\n        /* BindingElement */\n        :\n        case 214\n        /* VariableDeclaration */\n        :\n          var name_17 = node.name;\n\n          if (ts.isBindingPattern(name_17)) {\n            for (var _b = 0, _c = name_17.elements; _b < _c.length; _b++) {\n              var el = _c[_b]; // mark individual names in binding pattern\n\n              checkModuleAugmentationElement(el, isGlobalAugmentation);\n            }\n\n            break;\n          }\n\n        // fallthrough\n\n        case 217\n        /* ClassDeclaration */\n        :\n        case 220\n        /* EnumDeclaration */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n          var symbol = getSymbolOfNode(node);\n\n          if (symbol) {\n            // module augmentations cannot introduce new names on the top level scope of the module\n            // this is done it two steps\n            // 1. quick check - if symbol for node is not merged - this is local symbol to this augmentation - report error\n            // 2. main check - report error if value declaration of the parent symbol is module augmentation)\n            var reportError = !(symbol.flags & 33554432\n            /* Merged */\n            );\n\n            if (!reportError) {\n              if (isGlobalAugmentation) {\n                // global symbol should not have parent since it is not explicitly exported\n                reportError = symbol.parent !== undefined;\n              } else {\n                // symbol should not originate in augmentation\n                reportError = ts.isExternalModuleAugmentation(symbol.parent.valueDeclaration);\n              }\n            }\n\n            if (reportError) {\n              error(node, ts.Diagnostics.Module_augmentation_cannot_introduce_new_names_in_the_top_level_scope);\n            }\n          }\n\n          break;\n      }\n    }\n\n    function getFirstIdentifier(node) {\n      while (true) {\n        if (node.kind === 136\n        /* QualifiedName */\n        ) {\n            node = node.left;\n          } else if (node.kind === 169\n        /* PropertyAccessExpression */\n        ) {\n            node = node.expression;\n          } else {\n          break;\n        }\n      }\n\n      ts.Debug.assert(node.kind === 69\n      /* Identifier */\n      );\n      return node;\n    }\n\n    function checkExternalImportOrExportDeclaration(node) {\n      var moduleName = ts.getExternalModuleName(node);\n\n      if (!ts.nodeIsMissing(moduleName) && moduleName.kind !== 9\n      /* StringLiteral */\n      ) {\n          error(moduleName, ts.Diagnostics.String_literal_expected);\n          return false;\n        }\n\n      var inAmbientExternalModule = node.parent.kind === 222\n      /* ModuleBlock */\n      && ts.isAmbientModule(node.parent.parent);\n\n      if (node.parent.kind !== 251\n      /* SourceFile */\n      && !inAmbientExternalModule) {\n        error(moduleName, node.kind === 231\n        /* ExportDeclaration */\n        ? ts.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace : ts.Diagnostics.Import_declarations_in_a_namespace_cannot_reference_a_module);\n        return false;\n      }\n\n      if (inAmbientExternalModule && ts.isExternalModuleNameRelative(moduleName.text)) {\n        // we have already reported errors on top level imports\\exports in external module augmentations in checkModuleDeclaration\n        // no need to do this again.\n        if (!isTopLevelInExternalModuleAugmentation(node)) {\n          // TypeScript 1.0 spec (April 2013): 12.1.6\n          // An ExternalImportDeclaration in an AmbientExternalModuleDeclaration may reference\n          // other external modules only through top - level external module names.\n          // Relative external module names are not permitted.\n          error(node, ts.Diagnostics.Import_or_export_declaration_in_an_ambient_module_declaration_cannot_reference_module_through_relative_module_name);\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    function checkAliasSymbol(node) {\n      var symbol = getSymbolOfNode(node);\n      var target = resolveAlias(symbol);\n\n      if (target !== unknownSymbol) {\n        var excludedMeanings = (symbol.flags & 107455\n        /* Value */\n        ? 107455\n        /* Value */\n        : 0) | (symbol.flags & 793056\n        /* Type */\n        ? 793056\n        /* Type */\n        : 0) | (symbol.flags & 1536\n        /* Namespace */\n        ? 1536\n        /* Namespace */\n        : 0);\n\n        if (target.flags & excludedMeanings) {\n          var message = node.kind === 233\n          /* ExportSpecifier */\n          ? ts.Diagnostics.Export_declaration_conflicts_with_exported_declaration_of_0 : ts.Diagnostics.Import_declaration_conflicts_with_local_declaration_of_0;\n          error(node, message, symbolToString(symbol));\n        }\n      }\n    }\n\n    function checkImportBinding(node) {\n      checkCollisionWithCapturedThisVariable(node, node.name);\n      checkCollisionWithRequireExportsInGeneratedCode(node, node.name);\n      checkCollisionWithGlobalPromiseInGeneratedCode(node, node.name);\n      checkAliasSymbol(node);\n    }\n\n    function checkImportDeclaration(node) {\n      if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_import_declaration_can_only_be_used_in_a_namespace_or_module)) {\n        // If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.\n        return;\n      }\n\n      if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && node.flags & 1022\n      /* Modifier */\n      ) {\n        grammarErrorOnFirstToken(node, ts.Diagnostics.An_import_declaration_cannot_have_modifiers);\n      }\n\n      if (checkExternalImportOrExportDeclaration(node)) {\n        var importClause = node.importClause;\n\n        if (importClause) {\n          if (importClause.name) {\n            checkImportBinding(importClause);\n          }\n\n          if (importClause.namedBindings) {\n            if (importClause.namedBindings.kind === 227\n            /* NamespaceImport */\n            ) {\n                checkImportBinding(importClause.namedBindings);\n              } else {\n              ts.forEach(importClause.namedBindings.elements, checkImportBinding);\n            }\n          }\n        }\n      }\n    }\n\n    function checkImportEqualsDeclaration(node) {\n      if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_import_declaration_can_only_be_used_in_a_namespace_or_module)) {\n        // If we hit an import declaration in an illegal context, just bail out to avoid cascading errors.\n        return;\n      }\n\n      checkGrammarDecorators(node) || checkGrammarModifiers(node);\n\n      if (ts.isInternalModuleImportEqualsDeclaration(node) || checkExternalImportOrExportDeclaration(node)) {\n        checkImportBinding(node);\n\n        if (node.flags & 2\n        /* Export */\n        ) {\n            markExportAsReferenced(node);\n          }\n\n        if (ts.isInternalModuleImportEqualsDeclaration(node)) {\n          var target = resolveAlias(getSymbolOfNode(node));\n\n          if (target !== unknownSymbol) {\n            if (target.flags & 107455\n            /* Value */\n            ) {\n                // Target is a value symbol, check that it is not hidden by a local declaration with the same name\n                var moduleName = getFirstIdentifier(node.moduleReference);\n\n                if (!(resolveEntityName(moduleName, 107455\n                /* Value */\n                | 1536\n                /* Namespace */\n                ).flags & 1536\n                /* Namespace */\n                )) {\n                  error(moduleName, ts.Diagnostics.Module_0_is_hidden_by_a_local_declaration_with_the_same_name, ts.declarationNameToString(moduleName));\n                }\n              }\n\n            if (target.flags & 793056\n            /* Type */\n            ) {\n                checkTypeNameIsReserved(node.name, ts.Diagnostics.Import_name_cannot_be_0);\n              }\n          }\n        } else {\n          if (modulekind === 5\n          /* ES6 */\n          && !ts.isInAmbientContext(node)) {\n            // Import equals declaration is deprecated in es6 or above\n            grammarErrorOnNode(node, ts.Diagnostics.Import_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_import_Asterisk_as_ns_from_mod_import_a_from_mod_import_d_from_mod_or_another_module_format_instead);\n          }\n        }\n      }\n    }\n\n    function checkExportDeclaration(node) {\n      if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_export_declaration_can_only_be_used_in_a_module)) {\n        // If we hit an export in an illegal context, just bail out to avoid cascading errors.\n        return;\n      }\n\n      if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && node.flags & 1022\n      /* Modifier */\n      ) {\n        grammarErrorOnFirstToken(node, ts.Diagnostics.An_export_declaration_cannot_have_modifiers);\n      }\n\n      if (!node.moduleSpecifier || checkExternalImportOrExportDeclaration(node)) {\n        if (node.exportClause) {\n          // export { x, y }\n          // export { x, y } from \"foo\"\n          ts.forEach(node.exportClause.elements, checkExportSpecifier);\n          var inAmbientExternalModule = node.parent.kind === 222\n          /* ModuleBlock */\n          && ts.isAmbientModule(node.parent.parent);\n\n          if (node.parent.kind !== 251\n          /* SourceFile */\n          && !inAmbientExternalModule) {\n            error(node, ts.Diagnostics.Export_declarations_are_not_permitted_in_a_namespace);\n          }\n        } else {\n          // export * from \"foo\"\n          var moduleSymbol = resolveExternalModuleName(node, node.moduleSpecifier);\n\n          if (moduleSymbol && hasExportAssignmentSymbol(moduleSymbol)) {\n            error(node.moduleSpecifier, ts.Diagnostics.Module_0_uses_export_and_cannot_be_used_with_export_Asterisk, symbolToString(moduleSymbol));\n          }\n        }\n      }\n    }\n\n    function checkGrammarModuleElementContext(node, errorMessage) {\n      if (node.parent.kind !== 251\n      /* SourceFile */\n      && node.parent.kind !== 222\n      /* ModuleBlock */\n      && node.parent.kind !== 221\n      /* ModuleDeclaration */\n      ) {\n          return grammarErrorOnFirstToken(node, errorMessage);\n        }\n    }\n\n    function checkExportSpecifier(node) {\n      checkAliasSymbol(node);\n\n      if (!node.parent.parent.moduleSpecifier) {\n        var exportedName = node.propertyName || node.name; // find immediate value referenced by exported name (SymbolFlags.Alias is set so we don't chase down aliases)\n\n        var symbol = resolveName(exportedName, exportedName.text, 107455\n        /* Value */\n        | 793056\n        /* Type */\n        | 1536\n        /* Namespace */\n        | 8388608\n        /* Alias */\n        ,\n        /*nameNotFoundMessage*/\n        undefined,\n        /*nameArg*/\n        undefined);\n\n        if (symbol && (symbol === undefinedSymbol || isGlobalSourceFile(getDeclarationContainer(symbol.declarations[0])))) {\n          error(exportedName, ts.Diagnostics.Cannot_re_export_name_that_is_not_defined_in_the_module);\n        } else {\n          markExportAsReferenced(node);\n        }\n      }\n    }\n\n    function checkExportAssignment(node) {\n      if (checkGrammarModuleElementContext(node, ts.Diagnostics.An_export_assignment_can_only_be_used_in_a_module)) {\n        // If we hit an export assignment in an illegal context, just bail out to avoid cascading errors.\n        return;\n      }\n\n      var container = node.parent.kind === 251\n      /* SourceFile */\n      ? node.parent : node.parent.parent;\n\n      if (container.kind === 221\n      /* ModuleDeclaration */\n      && !ts.isAmbientModule(container)) {\n        error(node, ts.Diagnostics.An_export_assignment_cannot_be_used_in_a_namespace);\n        return;\n      } // Grammar checking\n\n\n      if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && node.flags & 1022\n      /* Modifier */\n      ) {\n        grammarErrorOnFirstToken(node, ts.Diagnostics.An_export_assignment_cannot_have_modifiers);\n      }\n\n      if (node.expression.kind === 69\n      /* Identifier */\n      ) {\n          markExportAsReferenced(node);\n        } else {\n        checkExpressionCached(node.expression);\n      }\n\n      checkExternalModuleExports(container);\n\n      if (node.isExportEquals && !ts.isInAmbientContext(node)) {\n        if (modulekind === 5\n        /* ES6 */\n        ) {\n            // export assignment is not supported in es6 modules\n            grammarErrorOnNode(node, ts.Diagnostics.Export_assignment_cannot_be_used_when_targeting_ECMAScript_6_modules_Consider_using_export_default_or_another_module_format_instead);\n          } else if (modulekind === 4\n        /* System */\n        ) {\n            // system modules does not support export assignment\n            grammarErrorOnNode(node, ts.Diagnostics.Export_assignment_is_not_supported_when_module_flag_is_system);\n          }\n      }\n    }\n\n    function hasExportedMembers(moduleSymbol) {\n      for (var id in moduleSymbol.exports) {\n        if (id !== \"export=\") {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    function checkExternalModuleExports(node) {\n      var moduleSymbol = getSymbolOfNode(node);\n      var links = getSymbolLinks(moduleSymbol);\n\n      if (!links.exportsChecked) {\n        var exportEqualsSymbol = moduleSymbol.exports[\"export=\"];\n\n        if (exportEqualsSymbol && hasExportedMembers(moduleSymbol)) {\n          var declaration = getDeclarationOfAliasSymbol(exportEqualsSymbol) || exportEqualsSymbol.valueDeclaration;\n\n          if (!isTopLevelInExternalModuleAugmentation(declaration)) {\n            error(declaration, ts.Diagnostics.An_export_assignment_cannot_be_used_in_a_module_with_other_exported_elements);\n          }\n        } // Checks for export * conflicts\n\n\n        var exports = getExportsOfModule(moduleSymbol);\n\n        for (var id in exports) {\n          if (id === \"__export\") {\n            continue;\n          }\n\n          var _a = exports[id],\n              declarations = _a.declarations,\n              flags = _a.flags; // ECMA262: 15.2.1.1 It is a Syntax Error if the ExportedNames of ModuleItemList contains any duplicate entries. (TS Exceptions: namespaces, function overloads, enums, and interfaces)\n\n          if (!(flags & (1536\n          /* Namespace */\n          | 64\n          /* Interface */\n          | 384\n          /* Enum */\n          )) && (flags & 524288\n          /* TypeAlias */\n          ? declarations.length - 1 : declarations.length) > 1) {\n            var exportedDeclarations = ts.filter(declarations, isNotOverload);\n\n            if (exportedDeclarations.length > 1) {\n              for (var _i = 0, exportedDeclarations_1 = exportedDeclarations; _i < exportedDeclarations_1.length; _i++) {\n                var declaration = exportedDeclarations_1[_i];\n                diagnostics.add(ts.createDiagnosticForNode(declaration, ts.Diagnostics.Cannot_redeclare_exported_variable_0, id));\n              }\n            }\n          }\n        }\n\n        links.exportsChecked = true;\n      }\n\n      function isNotOverload(declaration) {\n        return declaration.kind !== 216\n        /* FunctionDeclaration */\n        || !!declaration.body;\n      }\n    }\n\n    function checkSourceElement(node) {\n      if (!node) {\n        return;\n      }\n\n      var kind = node.kind;\n\n      if (cancellationToken) {\n        // Only bother checking on a few construct kinds.  We don't want to be excessivly\n        // hitting the cancellation token on every node we check.\n        switch (kind) {\n          case 221\n          /* ModuleDeclaration */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n            cancellationToken.throwIfCancellationRequested();\n        }\n      }\n\n      switch (kind) {\n        case 138\n        /* TypeParameter */\n        :\n          return checkTypeParameter(node);\n\n        case 139\n        /* Parameter */\n        :\n          return checkParameter(node);\n\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n          return checkPropertyDeclaration(node);\n\n        case 153\n        /* FunctionType */\n        :\n        case 154\n        /* ConstructorType */\n        :\n        case 148\n        /* CallSignature */\n        :\n        case 149\n        /* ConstructSignature */\n        :\n          return checkSignatureDeclaration(node);\n\n        case 150\n        /* IndexSignature */\n        :\n          return checkSignatureDeclaration(node);\n\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n          return checkMethodDeclaration(node);\n\n        case 145\n        /* Constructor */\n        :\n          return checkConstructorDeclaration(node);\n\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n          return checkAccessorDeclaration(node);\n\n        case 152\n        /* TypeReference */\n        :\n          return checkTypeReferenceNode(node);\n\n        case 151\n        /* TypePredicate */\n        :\n          return checkTypePredicate(node);\n\n        case 155\n        /* TypeQuery */\n        :\n          return checkTypeQuery(node);\n\n        case 156\n        /* TypeLiteral */\n        :\n          return checkTypeLiteral(node);\n\n        case 157\n        /* ArrayType */\n        :\n          return checkArrayType(node);\n\n        case 158\n        /* TupleType */\n        :\n          return checkTupleType(node);\n\n        case 159\n        /* UnionType */\n        :\n        case 160\n        /* IntersectionType */\n        :\n          return checkUnionOrIntersectionType(node);\n\n        case 161\n        /* ParenthesizedType */\n        :\n          return checkSourceElement(node.type);\n\n        case 216\n        /* FunctionDeclaration */\n        :\n          return checkFunctionDeclaration(node);\n\n        case 195\n        /* Block */\n        :\n        case 222\n        /* ModuleBlock */\n        :\n          return checkBlock(node);\n\n        case 196\n        /* VariableStatement */\n        :\n          return checkVariableStatement(node);\n\n        case 198\n        /* ExpressionStatement */\n        :\n          return checkExpressionStatement(node);\n\n        case 199\n        /* IfStatement */\n        :\n          return checkIfStatement(node);\n\n        case 200\n        /* DoStatement */\n        :\n          return checkDoStatement(node);\n\n        case 201\n        /* WhileStatement */\n        :\n          return checkWhileStatement(node);\n\n        case 202\n        /* ForStatement */\n        :\n          return checkForStatement(node);\n\n        case 203\n        /* ForInStatement */\n        :\n          return checkForInStatement(node);\n\n        case 204\n        /* ForOfStatement */\n        :\n          return checkForOfStatement(node);\n\n        case 205\n        /* ContinueStatement */\n        :\n        case 206\n        /* BreakStatement */\n        :\n          return checkBreakOrContinueStatement(node);\n\n        case 207\n        /* ReturnStatement */\n        :\n          return checkReturnStatement(node);\n\n        case 208\n        /* WithStatement */\n        :\n          return checkWithStatement(node);\n\n        case 209\n        /* SwitchStatement */\n        :\n          return checkSwitchStatement(node);\n\n        case 210\n        /* LabeledStatement */\n        :\n          return checkLabeledStatement(node);\n\n        case 211\n        /* ThrowStatement */\n        :\n          return checkThrowStatement(node);\n\n        case 212\n        /* TryStatement */\n        :\n          return checkTryStatement(node);\n\n        case 214\n        /* VariableDeclaration */\n        :\n          return checkVariableDeclaration(node);\n\n        case 166\n        /* BindingElement */\n        :\n          return checkBindingElement(node);\n\n        case 217\n        /* ClassDeclaration */\n        :\n          return checkClassDeclaration(node);\n\n        case 218\n        /* InterfaceDeclaration */\n        :\n          return checkInterfaceDeclaration(node);\n\n        case 219\n        /* TypeAliasDeclaration */\n        :\n          return checkTypeAliasDeclaration(node);\n\n        case 220\n        /* EnumDeclaration */\n        :\n          return checkEnumDeclaration(node);\n\n        case 221\n        /* ModuleDeclaration */\n        :\n          return checkModuleDeclaration(node);\n\n        case 225\n        /* ImportDeclaration */\n        :\n          return checkImportDeclaration(node);\n\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n          return checkImportEqualsDeclaration(node);\n\n        case 231\n        /* ExportDeclaration */\n        :\n          return checkExportDeclaration(node);\n\n        case 230\n        /* ExportAssignment */\n        :\n          return checkExportAssignment(node);\n\n        case 197\n        /* EmptyStatement */\n        :\n          checkGrammarStatementInAmbientContext(node);\n          return;\n\n        case 213\n        /* DebuggerStatement */\n        :\n          checkGrammarStatementInAmbientContext(node);\n          return;\n\n        case 234\n        /* MissingDeclaration */\n        :\n          return checkMissingDeclaration(node);\n      }\n    } // Function and class expression bodies are checked after all statements in the enclosing body. This is\n    // to ensure constructs like the following are permitted:\n    //     const foo = function () {\n    //        const s = foo();\n    //        return \"hello\";\n    //     }\n    // Here, performing a full type check of the body of the function expression whilst in the process of\n    // determining the type of foo would cause foo to be given type any because of the recursive reference.\n    // Delaying the type check of the body ensures foo has been assigned a type.\n\n\n    function checkNodeDeferred(node) {\n      if (deferredNodes) {\n        deferredNodes.push(node);\n      }\n    }\n\n    function checkDeferredNodes() {\n      for (var _i = 0, deferredNodes_1 = deferredNodes; _i < deferredNodes_1.length; _i++) {\n        var node = deferredNodes_1[_i];\n\n        switch (node.kind) {\n          case 176\n          /* FunctionExpression */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            checkFunctionExpressionOrObjectLiteralMethodDeferred(node);\n            break;\n\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            checkAccessorDeferred(node);\n            break;\n\n          case 189\n          /* ClassExpression */\n          :\n            checkClassExpressionDeferred(node);\n            break;\n        }\n      }\n    }\n\n    function checkSourceFile(node) {\n      var start = new Date().getTime();\n      checkSourceFileWorker(node);\n      ts.checkTime += new Date().getTime() - start;\n    } // Fully type check a source file and collect the relevant diagnostics.\n\n\n    function checkSourceFileWorker(node) {\n      var links = getNodeLinks(node);\n\n      if (!(links.flags & 1\n      /* TypeChecked */\n      )) {\n        // Check whether the file has declared it is the default lib,\n        // and whether the user has specifically chosen to avoid checking it.\n        if (compilerOptions.skipDefaultLibCheck) {\n          // If the user specified '--noLib' and a file has a '/// <reference no-default-lib=\"true\"/>',\n          // then we should treat that file as a default lib.\n          if (node.hasNoDefaultLib) {\n            return;\n          }\n        } // Grammar checking\n\n\n        checkGrammarSourceFile(node);\n        potentialThisCollisions.length = 0;\n        deferredNodes = [];\n        ts.forEach(node.statements, checkSourceElement);\n        checkDeferredNodes();\n        deferredNodes = undefined;\n\n        if (ts.isExternalOrCommonJsModule(node)) {\n          checkExternalModuleExports(node);\n        }\n\n        if (potentialThisCollisions.length) {\n          ts.forEach(potentialThisCollisions, checkIfThisIsCapturedInEnclosingScope);\n          potentialThisCollisions.length = 0;\n        }\n\n        links.flags |= 1\n        /* TypeChecked */\n        ;\n      }\n    }\n\n    function getDiagnostics(sourceFile, ct) {\n      try {\n        // Record the cancellation token so it can be checked later on during checkSourceElement.\n        // Do this in a finally block so we can ensure that it gets reset back to nothing after\n        // this call is done.\n        cancellationToken = ct;\n        return getDiagnosticsWorker(sourceFile);\n      } finally {\n        cancellationToken = undefined;\n      }\n    }\n\n    function getDiagnosticsWorker(sourceFile) {\n      throwIfNonDiagnosticsProducing();\n\n      if (sourceFile) {\n        checkSourceFile(sourceFile);\n        return diagnostics.getDiagnostics(sourceFile.fileName);\n      }\n\n      ts.forEach(host.getSourceFiles(), checkSourceFile);\n      return diagnostics.getDiagnostics();\n    }\n\n    function getGlobalDiagnostics() {\n      throwIfNonDiagnosticsProducing();\n      return diagnostics.getGlobalDiagnostics();\n    }\n\n    function throwIfNonDiagnosticsProducing() {\n      if (!produceDiagnostics) {\n        throw new Error(\"Trying to get diagnostics from a type checker that does not produce them.\");\n      }\n    } // Language service support\n\n\n    function isInsideWithStatementBody(node) {\n      if (node) {\n        while (node.parent) {\n          if (node.parent.kind === 208\n          /* WithStatement */\n          && node.parent.statement === node) {\n            return true;\n          }\n\n          node = node.parent;\n        }\n      }\n\n      return false;\n    }\n\n    function getSymbolsInScope(location, meaning) {\n      var symbols = {};\n      var memberFlags = 0;\n\n      if (isInsideWithStatementBody(location)) {\n        // We cannot answer semantic questions within a with block, do not proceed any further\n        return [];\n      }\n\n      populateSymbols();\n      return symbolsToArray(symbols);\n\n      function populateSymbols() {\n        while (location) {\n          if (location.locals && !isGlobalSourceFile(location)) {\n            copySymbols(location.locals, meaning);\n          }\n\n          switch (location.kind) {\n            case 251\n            /* SourceFile */\n            :\n              if (!ts.isExternalOrCommonJsModule(location)) {\n                break;\n              }\n\n            case 221\n            /* ModuleDeclaration */\n            :\n              copySymbols(getSymbolOfNode(location).exports, meaning & 8914931\n              /* ModuleMember */\n              );\n              break;\n\n            case 220\n            /* EnumDeclaration */\n            :\n              copySymbols(getSymbolOfNode(location).exports, meaning & 8\n              /* EnumMember */\n              );\n              break;\n\n            case 189\n            /* ClassExpression */\n            :\n              var className = location.name;\n\n              if (className) {\n                copySymbol(location.symbol, meaning);\n              }\n\n            // fall through; this fall-through is necessary because we would like to handle\n            // type parameter inside class expression similar to how we handle it in classDeclaration and interface Declaration\n\n            case 217\n            /* ClassDeclaration */\n            :\n            case 218\n            /* InterfaceDeclaration */\n            :\n              // If we didn't come from static member of class or interface,\n              // add the type parameters into the symbol table\n              // (type parameters of classDeclaration/classExpression and interface are in member property of the symbol.\n              // Note: that the memberFlags come from previous iteration.\n              if (!(memberFlags & 64\n              /* Static */\n              )) {\n                copySymbols(getSymbolOfNode(location).members, meaning & 793056\n                /* Type */\n                );\n              }\n\n              break;\n\n            case 176\n            /* FunctionExpression */\n            :\n              var funcName = location.name;\n\n              if (funcName) {\n                copySymbol(location.symbol, meaning);\n              }\n\n              break;\n          }\n\n          if (ts.introducesArgumentsExoticObject(location)) {\n            copySymbol(argumentsSymbol, meaning);\n          }\n\n          memberFlags = location.flags;\n          location = location.parent;\n        }\n\n        copySymbols(globals, meaning);\n      }\n      /**\n       * Copy the given symbol into symbol tables if the symbol has the given meaning\n       * and it doesn't already existed in the symbol table\n       * @param key a key for storing in symbol table; if undefined, use symbol.name\n       * @param symbol the symbol to be added into symbol table\n       * @param meaning meaning of symbol to filter by before adding to symbol table\n       */\n\n\n      function copySymbol(symbol, meaning) {\n        if (symbol.flags & meaning) {\n          var id = symbol.name; // We will copy all symbol regardless of its reserved name because\n          // symbolsToArray will check whether the key is a reserved name and\n          // it will not copy symbol with reserved name to the array\n\n          if (!ts.hasProperty(symbols, id)) {\n            symbols[id] = symbol;\n          }\n        }\n      }\n\n      function copySymbols(source, meaning) {\n        if (meaning) {\n          for (var id in source) {\n            var symbol = source[id];\n            copySymbol(symbol, meaning);\n          }\n        }\n      }\n    }\n\n    function isTypeDeclarationName(name) {\n      return name.kind === 69\n      /* Identifier */\n      && isTypeDeclaration(name.parent) && name.parent.name === name;\n    }\n\n    function isTypeDeclaration(node) {\n      switch (node.kind) {\n        case 138\n        /* TypeParameter */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n        case 220\n        /* EnumDeclaration */\n        :\n          return true;\n      }\n    } // True if the given identifier is part of a type reference\n\n\n    function isTypeReferenceIdentifier(entityName) {\n      var node = entityName;\n\n      while (node.parent && node.parent.kind === 136\n      /* QualifiedName */\n      ) {\n        node = node.parent;\n      }\n\n      return node.parent && node.parent.kind === 152\n      /* TypeReference */\n      ;\n    }\n\n    function isHeritageClauseElementIdentifier(entityName) {\n      var node = entityName;\n\n      while (node.parent && node.parent.kind === 169\n      /* PropertyAccessExpression */\n      ) {\n        node = node.parent;\n      }\n\n      return node.parent && node.parent.kind === 191\n      /* ExpressionWithTypeArguments */\n      ;\n    }\n\n    function getLeftSideOfImportEqualsOrExportAssignment(nodeOnRightSide) {\n      while (nodeOnRightSide.parent.kind === 136\n      /* QualifiedName */\n      ) {\n        nodeOnRightSide = nodeOnRightSide.parent;\n      }\n\n      if (nodeOnRightSide.parent.kind === 224\n      /* ImportEqualsDeclaration */\n      ) {\n          return nodeOnRightSide.parent.moduleReference === nodeOnRightSide && nodeOnRightSide.parent;\n        }\n\n      if (nodeOnRightSide.parent.kind === 230\n      /* ExportAssignment */\n      ) {\n          return nodeOnRightSide.parent.expression === nodeOnRightSide && nodeOnRightSide.parent;\n        }\n\n      return undefined;\n    }\n\n    function isInRightSideOfImportOrExportAssignment(node) {\n      return getLeftSideOfImportEqualsOrExportAssignment(node) !== undefined;\n    }\n\n    function getSymbolOfEntityNameOrPropertyAccessExpression(entityName) {\n      if (ts.isDeclarationName(entityName)) {\n        return getSymbolOfNode(entityName.parent);\n      }\n\n      if (ts.isInJavaScriptFile(entityName) && entityName.parent.kind === 169\n      /* PropertyAccessExpression */\n      ) {\n          var specialPropertyAssignmentKind = ts.getSpecialPropertyAssignmentKind(entityName.parent.parent);\n\n          switch (specialPropertyAssignmentKind) {\n            case 1\n            /* ExportsProperty */\n            :\n            case 3\n            /* PrototypeProperty */\n            :\n              return getSymbolOfNode(entityName.parent);\n\n            case 4\n            /* ThisProperty */\n            :\n            case 2\n            /* ModuleExports */\n            :\n              return getSymbolOfNode(entityName.parent.parent);\n\n            default:\n          }\n        }\n\n      if (entityName.parent.kind === 230\n      /* ExportAssignment */\n      ) {\n          return resolveEntityName(entityName,\n          /*all meanings*/\n          107455\n          /* Value */\n          | 793056\n          /* Type */\n          | 1536\n          /* Namespace */\n          | 8388608\n          /* Alias */\n          );\n        }\n\n      if (entityName.kind !== 169\n      /* PropertyAccessExpression */\n      ) {\n          if (isInRightSideOfImportOrExportAssignment(entityName)) {\n            // Since we already checked for ExportAssignment, this really could only be an Import\n            return getSymbolOfPartOfRightHandSideOfImportEquals(entityName);\n          }\n        }\n\n      if (ts.isRightSideOfQualifiedNameOrPropertyAccess(entityName)) {\n        entityName = entityName.parent;\n      }\n\n      if (isHeritageClauseElementIdentifier(entityName)) {\n        var meaning = 0\n        /* None */\n        ; // In an interface or class, we're definitely interested in a type.\n\n        if (entityName.parent.kind === 191\n        /* ExpressionWithTypeArguments */\n        ) {\n            meaning = 793056\n            /* Type */\n            ; // In a class 'extends' clause we are also looking for a value.\n\n            if (ts.isExpressionWithTypeArgumentsInClassExtendsClause(entityName.parent)) {\n              meaning |= 107455\n              /* Value */\n              ;\n            }\n          } else {\n          meaning = 1536\n          /* Namespace */\n          ;\n        }\n\n        meaning |= 8388608\n        /* Alias */\n        ;\n        return resolveEntityName(entityName, meaning);\n      } else if (entityName.parent.kind === 238\n      /* JsxOpeningElement */\n      || entityName.parent.kind === 237\n      /* JsxSelfClosingElement */\n      || entityName.parent.kind === 240\n      /* JsxClosingElement */\n      ) {\n        return getJsxElementTagSymbol(entityName.parent);\n      } else if (ts.isExpression(entityName)) {\n        if (ts.nodeIsMissing(entityName)) {\n          // Missing entity name.\n          return undefined;\n        }\n\n        if (entityName.kind === 69\n        /* Identifier */\n        ) {\n            // Include aliases in the meaning, this ensures that we do not follow aliases to where they point and instead\n            // return the alias symbol.\n            var meaning = 107455\n            /* Value */\n            | 8388608\n            /* Alias */\n            ;\n            return resolveEntityName(entityName, meaning);\n          } else if (entityName.kind === 169\n        /* PropertyAccessExpression */\n        ) {\n            var symbol = getNodeLinks(entityName).resolvedSymbol;\n\n            if (!symbol) {\n              checkPropertyAccessExpression(entityName);\n            }\n\n            return getNodeLinks(entityName).resolvedSymbol;\n          } else if (entityName.kind === 136\n        /* QualifiedName */\n        ) {\n            var symbol = getNodeLinks(entityName).resolvedSymbol;\n\n            if (!symbol) {\n              checkQualifiedName(entityName);\n            }\n\n            return getNodeLinks(entityName).resolvedSymbol;\n          }\n      } else if (isTypeReferenceIdentifier(entityName)) {\n        var meaning = entityName.parent.kind === 152\n        /* TypeReference */\n        ? 793056\n        /* Type */\n        : 1536\n        /* Namespace */\n        ; // Include aliases in the meaning, this ensures that we do not follow aliases to where they point and instead\n        // return the alias symbol.\n\n        meaning |= 8388608\n        /* Alias */\n        ;\n        return resolveEntityName(entityName, meaning);\n      } else if (entityName.parent.kind === 241\n      /* JsxAttribute */\n      ) {\n          return getJsxAttributePropertySymbol(entityName.parent);\n        }\n\n      if (entityName.parent.kind === 151\n      /* TypePredicate */\n      ) {\n          return resolveEntityName(entityName,\n          /*meaning*/\n          1\n          /* FunctionScopedVariable */\n          );\n        } // Do we want to return undefined here?\n\n\n      return undefined;\n    }\n\n    function getSymbolAtLocation(node) {\n      if (isInsideWithStatementBody(node)) {\n        // We cannot answer semantic questions within a with block, do not proceed any further\n        return undefined;\n      }\n\n      if (ts.isDeclarationName(node)) {\n        // This is a declaration, call getSymbolOfNode\n        return getSymbolOfNode(node.parent);\n      }\n\n      if (node.kind === 69\n      /* Identifier */\n      ) {\n          if (isInRightSideOfImportOrExportAssignment(node)) {\n            return node.parent.kind === 230\n            /* ExportAssignment */\n            ? getSymbolOfEntityNameOrPropertyAccessExpression(node) : getSymbolOfPartOfRightHandSideOfImportEquals(node);\n          } else if (node.parent.kind === 166\n          /* BindingElement */\n          && node.parent.parent.kind === 164\n          /* ObjectBindingPattern */\n          && node === node.parent.propertyName) {\n            var typeOfPattern = getTypeOfNode(node.parent.parent);\n            var propertyDeclaration = typeOfPattern && getPropertyOfType(typeOfPattern, node.text);\n\n            if (propertyDeclaration) {\n              return propertyDeclaration;\n            }\n          }\n        }\n\n      switch (node.kind) {\n        case 69\n        /* Identifier */\n        :\n        case 169\n        /* PropertyAccessExpression */\n        :\n        case 136\n        /* QualifiedName */\n        :\n          return getSymbolOfEntityNameOrPropertyAccessExpression(node);\n\n        case 97\n        /* ThisKeyword */\n        :\n        case 95\n        /* SuperKeyword */\n        :\n          var type = ts.isExpression(node) ? checkExpression(node) : getTypeFromTypeNode(node);\n          return type.symbol;\n\n        case 162\n        /* ThisType */\n        :\n          return getTypeFromTypeNode(node).symbol;\n\n        case 121\n        /* ConstructorKeyword */\n        :\n          // constructor keyword for an overload, should take us to the definition if it exist\n          var constructorDeclaration = node.parent;\n\n          if (constructorDeclaration && constructorDeclaration.kind === 145\n          /* Constructor */\n          ) {\n              return constructorDeclaration.parent.symbol;\n            }\n\n          return undefined;\n\n        case 9\n        /* StringLiteral */\n        :\n          // External module name in an import declaration\n          if (ts.isExternalModuleImportEqualsDeclaration(node.parent.parent) && ts.getExternalModuleImportEqualsDeclarationExpression(node.parent.parent) === node || (node.parent.kind === 225\n          /* ImportDeclaration */\n          || node.parent.kind === 231\n          /* ExportDeclaration */\n          ) && node.parent.moduleSpecifier === node) {\n            return resolveExternalModuleName(node, node);\n          }\n\n        // Fall through\n\n        case 8\n        /* NumericLiteral */\n        :\n          // index access\n          if (node.parent.kind === 170\n          /* ElementAccessExpression */\n          && node.parent.argumentExpression === node) {\n            var objectType = checkExpression(node.parent.expression);\n            if (objectType === unknownType) return undefined;\n            var apparentType = getApparentType(objectType);\n            if (apparentType === unknownType) return undefined;\n            return getPropertyOfType(apparentType, node.text);\n          }\n\n          break;\n      }\n\n      return undefined;\n    }\n\n    function getShorthandAssignmentValueSymbol(location) {\n      // The function returns a value symbol of an identifier in the short-hand property assignment.\n      // This is necessary as an identifier in short-hand property assignment can contains two meaning:\n      // property name and property value.\n      if (location && location.kind === 249\n      /* ShorthandPropertyAssignment */\n      ) {\n          return resolveEntityName(location.name, 107455\n          /* Value */\n          | 8388608\n          /* Alias */\n          );\n        }\n\n      return undefined;\n    }\n    /** Returns the target of an export specifier without following aliases */\n\n\n    function getExportSpecifierLocalTargetSymbol(node) {\n      return node.parent.parent.moduleSpecifier ? getExternalModuleMember(node.parent.parent, node) : resolveEntityName(node.propertyName || node.name, 107455\n      /* Value */\n      | 793056\n      /* Type */\n      | 1536\n      /* Namespace */\n      | 8388608\n      /* Alias */\n      );\n    }\n\n    function getTypeOfNode(node) {\n      if (isInsideWithStatementBody(node)) {\n        // We cannot answer semantic questions within a with block, do not proceed any further\n        return unknownType;\n      }\n\n      if (ts.isTypeNode(node)) {\n        return getTypeFromTypeNode(node);\n      }\n\n      if (ts.isExpression(node)) {\n        return getTypeOfExpression(node);\n      }\n\n      if (ts.isExpressionWithTypeArgumentsInClassExtendsClause(node)) {\n        // A SyntaxKind.ExpressionWithTypeArguments is considered a type node, except when it occurs in the\n        // extends clause of a class. We handle that case here.\n        return getBaseTypes(getDeclaredTypeOfSymbol(getSymbolOfNode(node.parent.parent)))[0];\n      }\n\n      if (isTypeDeclaration(node)) {\n        // In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration\n        var symbol = getSymbolOfNode(node);\n        return getDeclaredTypeOfSymbol(symbol);\n      }\n\n      if (isTypeDeclarationName(node)) {\n        var symbol = getSymbolAtLocation(node);\n        return symbol && getDeclaredTypeOfSymbol(symbol);\n      }\n\n      if (ts.isDeclaration(node)) {\n        // In this case, we call getSymbolOfNode instead of getSymbolAtLocation because it is a declaration\n        var symbol = getSymbolOfNode(node);\n        return getTypeOfSymbol(symbol);\n      }\n\n      if (ts.isDeclarationName(node)) {\n        var symbol = getSymbolAtLocation(node);\n        return symbol && getTypeOfSymbol(symbol);\n      }\n\n      if (ts.isBindingPattern(node)) {\n        return getTypeForVariableLikeDeclaration(node.parent);\n      }\n\n      if (isInRightSideOfImportOrExportAssignment(node)) {\n        var symbol = getSymbolAtLocation(node);\n        var declaredType = symbol && getDeclaredTypeOfSymbol(symbol);\n        return declaredType !== unknownType ? declaredType : getTypeOfSymbol(symbol);\n      }\n\n      return unknownType;\n    }\n\n    function getTypeOfExpression(expr) {\n      if (ts.isRightSideOfQualifiedNameOrPropertyAccess(expr)) {\n        expr = expr.parent;\n      }\n\n      return checkExpression(expr);\n    }\n    /**\n      * Gets either the static or instance type of a class element, based on\n      * whether the element is declared as \"static\".\n      */\n\n\n    function getParentTypeOfClassElement(node) {\n      var classSymbol = getSymbolOfNode(node.parent);\n      return node.flags & 64\n      /* Static */\n      ? getTypeOfSymbol(classSymbol) : getDeclaredTypeOfSymbol(classSymbol);\n    } // Return the list of properties of the given type, augmented with properties from Function\n    // if the type has call or construct signatures\n\n\n    function getAugmentedPropertiesOfType(type) {\n      type = getApparentType(type);\n      var propsByName = createSymbolTable(getPropertiesOfType(type));\n\n      if (getSignaturesOfType(type, 0\n      /* Call */\n      ).length || getSignaturesOfType(type, 1\n      /* Construct */\n      ).length) {\n        ts.forEach(getPropertiesOfType(globalFunctionType), function (p) {\n          if (!ts.hasProperty(propsByName, p.name)) {\n            propsByName[p.name] = p;\n          }\n        });\n      }\n\n      return getNamedMembers(propsByName);\n    }\n\n    function getRootSymbols(symbol) {\n      if (symbol.flags & 268435456\n      /* SyntheticProperty */\n      ) {\n          var symbols_3 = [];\n          var name_18 = symbol.name;\n          ts.forEach(getSymbolLinks(symbol).containingType.types, function (t) {\n            var symbol = getPropertyOfType(t, name_18);\n\n            if (symbol) {\n              symbols_3.push(symbol);\n            }\n          });\n          return symbols_3;\n        } else if (symbol.flags & 67108864\n      /* Transient */\n      ) {\n          var target = getSymbolLinks(symbol).target;\n\n          if (target) {\n            return [target];\n          }\n        }\n\n      return [symbol];\n    } // Emitter support\n\n\n    function isArgumentsLocalBinding(node) {\n      return getReferencedValueSymbol(node) === argumentsSymbol;\n    }\n\n    function moduleExportsSomeValue(moduleReferenceExpression) {\n      var moduleSymbol = resolveExternalModuleName(moduleReferenceExpression.parent, moduleReferenceExpression);\n\n      if (!moduleSymbol) {\n        // module not found - be conservative\n        return true;\n      }\n\n      var hasExportAssignment = hasExportAssignmentSymbol(moduleSymbol); // if module has export assignment then 'resolveExternalModuleSymbol' will return resolved symbol for export assignment\n      // otherwise it will return moduleSymbol itself\n\n      moduleSymbol = resolveExternalModuleSymbol(moduleSymbol);\n      var symbolLinks = getSymbolLinks(moduleSymbol);\n\n      if (symbolLinks.exportsSomeValue === undefined) {\n        // for export assignments - check if resolved symbol for RHS is itself a value\n        // otherwise - check if at least one export is value\n        symbolLinks.exportsSomeValue = hasExportAssignment ? !!(moduleSymbol.flags & 107455\n        /* Value */\n        ) : ts.forEachValue(getExportsOfModule(moduleSymbol), isValue);\n      }\n\n      return symbolLinks.exportsSomeValue;\n\n      function isValue(s) {\n        s = resolveSymbol(s);\n        return s && !!(s.flags & 107455\n        /* Value */\n        );\n      }\n    } // When resolved as an expression identifier, if the given node references an exported entity, return the declaration\n    // node of the exported entity's container. Otherwise, return undefined.\n\n\n    function getReferencedExportContainer(node) {\n      var symbol = getReferencedValueSymbol(node);\n\n      if (symbol) {\n        if (symbol.flags & 1048576\n        /* ExportValue */\n        ) {\n            // If we reference an exported entity within the same module declaration, then whether\n            // we prefix depends on the kind of entity. SymbolFlags.ExportHasLocal encompasses all the\n            // kinds that we do NOT prefix.\n            var exportSymbol = getMergedSymbol(symbol.exportSymbol);\n\n            if (exportSymbol.flags & 944\n            /* ExportHasLocal */\n            ) {\n                return undefined;\n              }\n\n            symbol = exportSymbol;\n          }\n\n        var parentSymbol = getParentOfSymbol(symbol);\n\n        if (parentSymbol) {\n          if (parentSymbol.flags & 512\n          /* ValueModule */\n          && parentSymbol.valueDeclaration.kind === 251\n          /* SourceFile */\n          ) {\n              return parentSymbol.valueDeclaration;\n            }\n\n          for (var n = node.parent; n; n = n.parent) {\n            if ((n.kind === 221\n            /* ModuleDeclaration */\n            || n.kind === 220\n            /* EnumDeclaration */\n            ) && getSymbolOfNode(n) === parentSymbol) {\n              return n;\n            }\n          }\n        }\n      }\n    } // When resolved as an expression identifier, if the given node references an import, return the declaration of\n    // that import. Otherwise, return undefined.\n\n\n    function getReferencedImportDeclaration(node) {\n      var symbol = getReferencedValueSymbol(node);\n      return symbol && symbol.flags & 8388608\n      /* Alias */\n      ? getDeclarationOfAliasSymbol(symbol) : undefined;\n    }\n\n    function isSymbolOfDeclarationWithCollidingName(symbol) {\n      if (symbol.flags & 418\n      /* BlockScoped */\n      ) {\n          var links = getSymbolLinks(symbol);\n\n          if (links.isDeclaratonWithCollidingName === undefined) {\n            var container = ts.getEnclosingBlockScopeContainer(symbol.valueDeclaration);\n\n            if (ts.isStatementWithLocals(container)) {\n              var nodeLinks_1 = getNodeLinks(symbol.valueDeclaration);\n\n              if (!!resolveName(container.parent, symbol.name, 107455\n              /* Value */\n              ,\n              /*nameNotFoundMessage*/\n              undefined,\n              /*nameArg*/\n              undefined)) {\n                // redeclaration - always should be renamed\n                links.isDeclaratonWithCollidingName = true;\n              } else if (nodeLinks_1.flags & 131072\n              /* CapturedBlockScopedBinding */\n              ) {\n                  // binding is captured in the function\n                  // should be renamed if:\n                  // - binding is not top level - top level bindings never collide with anything\n                  // AND\n                  //   - binding is not declared in loop, should be renamed to avoid name reuse across siblings\n                  //     let a, b\n                  //     { let x = 1; a = () => x;  }\n                  //     { let x = 100; b = () => x; }\n                  //     console.log(a()); // should print '1'\n                  //     console.log(b()); // should print '100'\n                  //     OR\n                  //   - binding is declared inside loop but not in inside initializer of iteration statement or directly inside loop body\n                  //     * variables from initializer are passed to rewritted loop body as parameters so they are not captured directly\n                  //     * variables that are declared immediately in loop body will become top level variable after loop is rewritten and thus\n                  //       they will not collide with anything\n                  var isDeclaredInLoop = nodeLinks_1.flags & 262144\n                  /* BlockScopedBindingInLoop */\n                  ;\n                  var inLoopInitializer = ts.isIterationStatement(container,\n                  /*lookInLabeledStatements*/\n                  false);\n                  var inLoopBodyBlock = container.kind === 195\n                  /* Block */\n                  && ts.isIterationStatement(container.parent,\n                  /*lookInLabeledStatements*/\n                  false);\n                  links.isDeclaratonWithCollidingName = !ts.isBlockScopedContainerTopLevel(container) && (!isDeclaredInLoop || !inLoopInitializer && !inLoopBodyBlock);\n                } else {\n                links.isDeclaratonWithCollidingName = false;\n              }\n            }\n          }\n\n          return links.isDeclaratonWithCollidingName;\n        }\n\n      return false;\n    } // When resolved as an expression identifier, if the given node references a nested block scoped entity with\n    // a name that either hides an existing name or might hide it when compiled downlevel,\n    // return the declaration of that entity. Otherwise, return undefined.\n\n\n    function getReferencedDeclarationWithCollidingName(node) {\n      var symbol = getReferencedValueSymbol(node);\n      return symbol && isSymbolOfDeclarationWithCollidingName(symbol) ? symbol.valueDeclaration : undefined;\n    } // Return true if the given node is a declaration of a nested block scoped entity with a name that either hides an\n    // existing name or might hide a name when compiled downlevel\n\n\n    function isDeclarationWithCollidingName(node) {\n      return isSymbolOfDeclarationWithCollidingName(getSymbolOfNode(node));\n    }\n\n    function isValueAliasDeclaration(node) {\n      switch (node.kind) {\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n        case 226\n        /* ImportClause */\n        :\n        case 227\n        /* NamespaceImport */\n        :\n        case 229\n        /* ImportSpecifier */\n        :\n        case 233\n        /* ExportSpecifier */\n        :\n          return isAliasResolvedToValue(getSymbolOfNode(node));\n\n        case 231\n        /* ExportDeclaration */\n        :\n          var exportClause = node.exportClause;\n          return exportClause && ts.forEach(exportClause.elements, isValueAliasDeclaration);\n\n        case 230\n        /* ExportAssignment */\n        :\n          return node.expression && node.expression.kind === 69\n          /* Identifier */\n          ? isAliasResolvedToValue(getSymbolOfNode(node)) : true;\n      }\n\n      return false;\n    }\n\n    function isTopLevelValueImportEqualsWithEntityName(node) {\n      if (node.parent.kind !== 251\n      /* SourceFile */\n      || !ts.isInternalModuleImportEqualsDeclaration(node)) {\n        // parent is not source file or it is not reference to internal module\n        return false;\n      }\n\n      var isValue = isAliasResolvedToValue(getSymbolOfNode(node));\n      return isValue && node.moduleReference && !ts.nodeIsMissing(node.moduleReference);\n    }\n\n    function isAliasResolvedToValue(symbol) {\n      var target = resolveAlias(symbol);\n\n      if (target === unknownSymbol && compilerOptions.isolatedModules) {\n        return true;\n      } // const enums and modules that contain only const enums are not considered values from the emit perespective\n      // unless 'preserveConstEnums' option is set to true\n\n\n      return target !== unknownSymbol && target && target.flags & 107455\n      /* Value */\n      && (compilerOptions.preserveConstEnums || !isConstEnumOrConstEnumOnlyModule(target));\n    }\n\n    function isConstEnumOrConstEnumOnlyModule(s) {\n      return isConstEnumSymbol(s) || s.constEnumOnlyModule;\n    }\n\n    function isReferencedAliasDeclaration(node, checkChildren) {\n      if (ts.isAliasSymbolDeclaration(node)) {\n        var symbol = getSymbolOfNode(node);\n\n        if (getSymbolLinks(symbol).referenced) {\n          return true;\n        }\n      }\n\n      if (checkChildren) {\n        return ts.forEachChild(node, function (node) {\n          return isReferencedAliasDeclaration(node, checkChildren);\n        });\n      }\n\n      return false;\n    }\n\n    function isImplementationOfOverload(node) {\n      if (ts.nodeIsPresent(node.body)) {\n        var symbol = getSymbolOfNode(node);\n        var signaturesOfSymbol = getSignaturesOfSymbol(symbol); // If this function body corresponds to function with multiple signature, it is implementation of overload\n        // e.g.: function foo(a: string): string;\n        //       function foo(a: number): number;\n        //       function foo(a: any) { // This is implementation of the overloads\n        //           return a;\n        //       }\n\n        return signaturesOfSymbol.length > 1 || // If there is single signature for the symbol, it is overload if that signature isn't coming from the node\n        // e.g.: function foo(a: string): string;\n        //       function foo(a: any) { // This is implementation of the overloads\n        //           return a;\n        //       }\n        signaturesOfSymbol.length === 1 && signaturesOfSymbol[0].declaration !== node;\n      }\n\n      return false;\n    }\n\n    function getNodeCheckFlags(node) {\n      return getNodeLinks(node).flags;\n    }\n\n    function getEnumMemberValue(node) {\n      computeEnumMemberValues(node.parent);\n      return getNodeLinks(node).enumMemberValue;\n    }\n\n    function getConstantValue(node) {\n      if (node.kind === 250\n      /* EnumMember */\n      ) {\n          return getEnumMemberValue(node);\n        }\n\n      var symbol = getNodeLinks(node).resolvedSymbol;\n\n      if (symbol && symbol.flags & 8\n      /* EnumMember */\n      ) {\n        // inline property\\index accesses only for const enums\n        if (ts.isConstEnumDeclaration(symbol.valueDeclaration.parent)) {\n          return getEnumMemberValue(symbol.valueDeclaration);\n        }\n      }\n\n      return undefined;\n    }\n\n    function isFunctionType(type) {\n      return type.flags & 80896\n      /* ObjectType */\n      && getSignaturesOfType(type, 0\n      /* Call */\n      ).length > 0;\n    }\n\n    function getTypeReferenceSerializationKind(typeName) {\n      // Resolve the symbol as a value to ensure the type can be reached at runtime during emit.\n      var valueSymbol = resolveEntityName(typeName, 107455\n      /* Value */\n      ,\n      /*ignoreErrors*/\n      true);\n      var constructorType = valueSymbol ? getTypeOfSymbol(valueSymbol) : undefined;\n\n      if (constructorType && isConstructorType(constructorType)) {\n        return ts.TypeReferenceSerializationKind.TypeWithConstructSignatureAndValue;\n      } // Resolve the symbol as a type so that we can provide a more useful hint for the type serializer.\n\n\n      var typeSymbol = resolveEntityName(typeName, 793056\n      /* Type */\n      ,\n      /*ignoreErrors*/\n      true); // We might not be able to resolve type symbol so use unknown type in that case (eg error case)\n\n      if (!typeSymbol) {\n        return ts.TypeReferenceSerializationKind.ObjectType;\n      }\n\n      var type = getDeclaredTypeOfSymbol(typeSymbol);\n\n      if (type === unknownType) {\n        return ts.TypeReferenceSerializationKind.Unknown;\n      } else if (type.flags & 1\n      /* Any */\n      ) {\n          return ts.TypeReferenceSerializationKind.ObjectType;\n        } else if (allConstituentTypesHaveKind(type, 16\n      /* Void */\n      )) {\n        return ts.TypeReferenceSerializationKind.VoidType;\n      } else if (allConstituentTypesHaveKind(type, 8\n      /* Boolean */\n      )) {\n        return ts.TypeReferenceSerializationKind.BooleanType;\n      } else if (allConstituentTypesHaveKind(type, 132\n      /* NumberLike */\n      )) {\n        return ts.TypeReferenceSerializationKind.NumberLikeType;\n      } else if (allConstituentTypesHaveKind(type, 258\n      /* StringLike */\n      )) {\n        return ts.TypeReferenceSerializationKind.StringLikeType;\n      } else if (allConstituentTypesHaveKind(type, 8192\n      /* Tuple */\n      )) {\n        return ts.TypeReferenceSerializationKind.ArrayLikeType;\n      } else if (allConstituentTypesHaveKind(type, 16777216\n      /* ESSymbol */\n      )) {\n        return ts.TypeReferenceSerializationKind.ESSymbolType;\n      } else if (isFunctionType(type)) {\n        return ts.TypeReferenceSerializationKind.TypeWithCallSignature;\n      } else if (isArrayType(type)) {\n        return ts.TypeReferenceSerializationKind.ArrayLikeType;\n      } else {\n        return ts.TypeReferenceSerializationKind.ObjectType;\n      }\n    }\n\n    function writeTypeOfDeclaration(declaration, enclosingDeclaration, flags, writer) {\n      // Get type of the symbol if this is the valid symbol otherwise get type at location\n      var symbol = getSymbolOfNode(declaration);\n      var type = symbol && !(symbol.flags & (2048\n      /* TypeLiteral */\n      | 131072\n      /* Signature */\n      )) ? getTypeOfSymbol(symbol) : unknownType;\n      getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\n    }\n\n    function writeReturnTypeOfSignatureDeclaration(signatureDeclaration, enclosingDeclaration, flags, writer) {\n      var signature = getSignatureFromDeclaration(signatureDeclaration);\n      getSymbolDisplayBuilder().buildTypeDisplay(getReturnTypeOfSignature(signature), writer, enclosingDeclaration, flags);\n    }\n\n    function writeTypeOfExpression(expr, enclosingDeclaration, flags, writer) {\n      var type = getTypeOfExpression(expr);\n      getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\n    }\n\n    function hasGlobalName(name) {\n      return ts.hasProperty(globals, name);\n    }\n\n    function getReferencedValueSymbol(reference) {\n      return getNodeLinks(reference).resolvedSymbol || resolveName(reference, reference.text, 107455\n      /* Value */\n      | 1048576\n      /* ExportValue */\n      | 8388608\n      /* Alias */\n      ,\n      /*nodeNotFoundMessage*/\n      undefined,\n      /*nameArg*/\n      undefined);\n    }\n\n    function getReferencedValueDeclaration(reference) {\n      ts.Debug.assert(!ts.nodeIsSynthesized(reference));\n      var symbol = getReferencedValueSymbol(reference);\n      return symbol && getExportSymbolOfValueSymbolIfExported(symbol).valueDeclaration;\n    }\n\n    function createResolver() {\n      return {\n        getReferencedExportContainer: getReferencedExportContainer,\n        getReferencedImportDeclaration: getReferencedImportDeclaration,\n        getReferencedDeclarationWithCollidingName: getReferencedDeclarationWithCollidingName,\n        isDeclarationWithCollidingName: isDeclarationWithCollidingName,\n        isValueAliasDeclaration: isValueAliasDeclaration,\n        hasGlobalName: hasGlobalName,\n        isReferencedAliasDeclaration: isReferencedAliasDeclaration,\n        getNodeCheckFlags: getNodeCheckFlags,\n        isTopLevelValueImportEqualsWithEntityName: isTopLevelValueImportEqualsWithEntityName,\n        isDeclarationVisible: isDeclarationVisible,\n        isImplementationOfOverload: isImplementationOfOverload,\n        writeTypeOfDeclaration: writeTypeOfDeclaration,\n        writeReturnTypeOfSignatureDeclaration: writeReturnTypeOfSignatureDeclaration,\n        writeTypeOfExpression: writeTypeOfExpression,\n        isSymbolAccessible: isSymbolAccessible,\n        isEntityNameVisible: isEntityNameVisible,\n        getConstantValue: getConstantValue,\n        collectLinkedAliases: collectLinkedAliases,\n        getReferencedValueDeclaration: getReferencedValueDeclaration,\n        getTypeReferenceSerializationKind: getTypeReferenceSerializationKind,\n        isOptionalParameter: isOptionalParameter,\n        moduleExportsSomeValue: moduleExportsSomeValue,\n        isArgumentsLocalBinding: isArgumentsLocalBinding,\n        getExternalModuleFileFromDeclaration: getExternalModuleFileFromDeclaration\n      };\n    }\n\n    function getExternalModuleFileFromDeclaration(declaration) {\n      var specifier = ts.getExternalModuleName(declaration);\n      var moduleSymbol = resolveExternalModuleNameWorker(specifier, specifier,\n      /*moduleNotFoundError*/\n      undefined);\n\n      if (!moduleSymbol) {\n        return undefined;\n      }\n\n      return ts.getDeclarationOfKind(moduleSymbol, 251\n      /* SourceFile */\n      );\n    }\n\n    function initializeTypeChecker() {\n      // Bind all source files and propagate errors\n      ts.forEach(host.getSourceFiles(), function (file) {\n        ts.bindSourceFile(file, compilerOptions);\n      });\n      var augmentations; // Initialize global symbol table\n\n      ts.forEach(host.getSourceFiles(), function (file) {\n        if (!ts.isExternalOrCommonJsModule(file)) {\n          mergeSymbolTable(globals, file.locals);\n        }\n\n        if (file.moduleAugmentations.length) {\n          (augmentations || (augmentations = [])).push(file.moduleAugmentations);\n        }\n      });\n\n      if (augmentations) {\n        // merge module augmentations.\n        // this needs to be done after global symbol table is initialized to make sure that all ambient modules are indexed\n        for (var _i = 0, augmentations_1 = augmentations; _i < augmentations_1.length; _i++) {\n          var list = augmentations_1[_i];\n\n          for (var _a = 0, list_2 = list; _a < list_2.length; _a++) {\n            var augmentation = list_2[_a];\n            mergeModuleAugmentation(augmentation);\n          }\n        }\n      } // Setup global builtins\n\n\n      addToSymbolTable(globals, builtinGlobals, ts.Diagnostics.Declaration_name_conflicts_with_built_in_global_identifier_0);\n      getSymbolLinks(undefinedSymbol).type = undefinedType;\n      getSymbolLinks(argumentsSymbol).type = getGlobalType(\"IArguments\");\n      getSymbolLinks(unknownSymbol).type = unknownType; // Initialize special types\n\n      globalArrayType = getGlobalType(\"Array\",\n      /*arity*/\n      1);\n      globalObjectType = getGlobalType(\"Object\");\n      globalFunctionType = getGlobalType(\"Function\");\n      globalStringType = getGlobalType(\"String\");\n      globalNumberType = getGlobalType(\"Number\");\n      globalBooleanType = getGlobalType(\"Boolean\");\n      globalRegExpType = getGlobalType(\"RegExp\");\n      jsxElementType = getExportedTypeFromNamespace(\"JSX\", JsxNames.Element);\n      getGlobalClassDecoratorType = ts.memoize(function () {\n        return getGlobalType(\"ClassDecorator\");\n      });\n      getGlobalPropertyDecoratorType = ts.memoize(function () {\n        return getGlobalType(\"PropertyDecorator\");\n      });\n      getGlobalMethodDecoratorType = ts.memoize(function () {\n        return getGlobalType(\"MethodDecorator\");\n      });\n      getGlobalParameterDecoratorType = ts.memoize(function () {\n        return getGlobalType(\"ParameterDecorator\");\n      });\n      getGlobalTypedPropertyDescriptorType = ts.memoize(function () {\n        return getGlobalType(\"TypedPropertyDescriptor\",\n        /*arity*/\n        1);\n      });\n      getGlobalPromiseType = ts.memoize(function () {\n        return getGlobalType(\"Promise\",\n        /*arity*/\n        1);\n      });\n      tryGetGlobalPromiseType = ts.memoize(function () {\n        return getGlobalSymbol(\"Promise\", 793056\n        /* Type */\n        ,\n        /*diagnostic*/\n        undefined) && getGlobalPromiseType();\n      });\n      getGlobalPromiseLikeType = ts.memoize(function () {\n        return getGlobalType(\"PromiseLike\",\n        /*arity*/\n        1);\n      });\n      getInstantiatedGlobalPromiseLikeType = ts.memoize(createInstantiatedPromiseLikeType);\n      getGlobalPromiseConstructorSymbol = ts.memoize(function () {\n        return getGlobalValueSymbol(\"Promise\");\n      });\n      getGlobalPromiseConstructorLikeType = ts.memoize(function () {\n        return getGlobalType(\"PromiseConstructorLike\");\n      });\n      getGlobalThenableType = ts.memoize(createThenableType); // If we're in ES6 mode, load the TemplateStringsArray.\n      // Otherwise, default to 'unknown' for the purposes of type checking in LS scenarios.\n\n      if (languageVersion >= 2\n      /* ES6 */\n      ) {\n          globalTemplateStringsArrayType = getGlobalType(\"TemplateStringsArray\");\n          globalESSymbolType = getGlobalType(\"Symbol\");\n          globalESSymbolConstructorSymbol = getGlobalValueSymbol(\"Symbol\");\n          globalIterableType = getGlobalType(\"Iterable\",\n          /*arity*/\n          1);\n          globalIteratorType = getGlobalType(\"Iterator\",\n          /*arity*/\n          1);\n          globalIterableIteratorType = getGlobalType(\"IterableIterator\",\n          /*arity*/\n          1);\n        } else {\n        globalTemplateStringsArrayType = unknownType; // Consider putting Symbol interface in lib.d.ts. On the plus side, putting it in lib.d.ts would make it\n        // extensible for Polyfilling Symbols. But putting it into lib.d.ts could also break users that have\n        // a global Symbol already, particularly if it is a class.\n\n        globalESSymbolType = createAnonymousType(undefined, emptySymbols, emptyArray, emptyArray, undefined, undefined);\n        globalESSymbolConstructorSymbol = undefined;\n        globalIterableType = emptyGenericType;\n        globalIteratorType = emptyGenericType;\n        globalIterableIteratorType = emptyGenericType;\n      }\n\n      anyArrayType = createArrayType(anyType);\n    }\n\n    function createInstantiatedPromiseLikeType() {\n      var promiseLikeType = getGlobalPromiseLikeType();\n\n      if (promiseLikeType !== emptyGenericType) {\n        return createTypeReference(promiseLikeType, [anyType]);\n      }\n\n      return emptyObjectType;\n    }\n\n    function createThenableType() {\n      // build the thenable type that is used to verify against a non-promise \"thenable\" operand to `await`.\n      var thenPropertySymbol = createSymbol(67108864\n      /* Transient */\n      | 4\n      /* Property */\n      , \"then\");\n      getSymbolLinks(thenPropertySymbol).type = globalFunctionType;\n      var thenableType = createObjectType(65536\n      /* Anonymous */\n      );\n      thenableType.properties = [thenPropertySymbol];\n      thenableType.members = createSymbolTable(thenableType.properties);\n      thenableType.callSignatures = [];\n      thenableType.constructSignatures = [];\n      return thenableType;\n    } // GRAMMAR CHECKING\n\n\n    function checkGrammarDecorators(node) {\n      if (!node.decorators) {\n        return false;\n      }\n\n      if (!ts.nodeCanBeDecorated(node)) {\n        if (node.kind === 144\n        /* MethodDeclaration */\n        && !ts.nodeIsPresent(node.body)) {\n          return grammarErrorOnFirstToken(node, ts.Diagnostics.A_decorator_can_only_decorate_a_method_implementation_not_an_overload);\n        } else {\n          return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_are_not_valid_here);\n        }\n      } else if (node.kind === 146\n      /* GetAccessor */\n      || node.kind === 147\n      /* SetAccessor */\n      ) {\n          var accessors = ts.getAllAccessorDeclarations(node.parent.members, node);\n\n          if (accessors.firstAccessor.decorators && node === accessors.secondAccessor) {\n            return grammarErrorOnFirstToken(node, ts.Diagnostics.Decorators_cannot_be_applied_to_multiple_get_Slashset_accessors_of_the_same_name);\n          }\n        }\n\n      return false;\n    }\n\n    function checkGrammarModifiers(node) {\n      switch (node.kind) {\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n        case 145\n        /* Constructor */\n        :\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 150\n        /* IndexSignature */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 225\n        /* ImportDeclaration */\n        :\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n        case 231\n        /* ExportDeclaration */\n        :\n        case 230\n        /* ExportAssignment */\n        :\n        case 139\n        /* Parameter */\n        :\n          break;\n\n        case 216\n        /* FunctionDeclaration */\n        :\n          if (node.modifiers && (node.modifiers.length > 1 || node.modifiers[0].kind !== 118\n          /* AsyncKeyword */\n          ) && node.parent.kind !== 222\n          /* ModuleBlock */\n          && node.parent.kind !== 251\n          /* SourceFile */\n          ) {\n              return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);\n            }\n\n          break;\n\n        case 217\n        /* ClassDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 196\n        /* VariableStatement */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n          if (node.modifiers && node.parent.kind !== 222\n          /* ModuleBlock */\n          && node.parent.kind !== 251\n          /* SourceFile */\n          ) {\n              return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);\n            }\n\n          break;\n\n        case 220\n        /* EnumDeclaration */\n        :\n          if (node.modifiers && (node.modifiers.length > 1 || node.modifiers[0].kind !== 74\n          /* ConstKeyword */\n          ) && node.parent.kind !== 222\n          /* ModuleBlock */\n          && node.parent.kind !== 251\n          /* SourceFile */\n          ) {\n              return grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_cannot_appear_here);\n            }\n\n          break;\n\n        default:\n          return false;\n      }\n\n      if (!node.modifiers) {\n        return;\n      }\n\n      var lastStatic, lastPrivate, lastProtected, lastDeclare, lastAsync;\n      var flags = 0;\n\n      for (var _i = 0, _a = node.modifiers; _i < _a.length; _i++) {\n        var modifier = _a[_i];\n\n        switch (modifier.kind) {\n          case 74\n          /* ConstKeyword */\n          :\n            if (node.kind !== 220\n            /* EnumDeclaration */\n            && node.parent.kind === 217\n            /* ClassDeclaration */\n            ) {\n                return grammarErrorOnNode(node, ts.Diagnostics.A_class_member_cannot_have_the_0_keyword, ts.tokenToString(74\n                /* ConstKeyword */\n                ));\n              }\n\n            break;\n\n          case 112\n          /* PublicKeyword */\n          :\n          case 111\n          /* ProtectedKeyword */\n          :\n          case 110\n          /* PrivateKeyword */\n          :\n            var text = void 0;\n\n            if (modifier.kind === 112\n            /* PublicKeyword */\n            ) {\n                text = \"public\";\n              } else if (modifier.kind === 111\n            /* ProtectedKeyword */\n            ) {\n                text = \"protected\";\n                lastProtected = modifier;\n              } else {\n              text = \"private\";\n              lastPrivate = modifier;\n            }\n\n            if (flags & 56\n            /* AccessibilityModifier */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics.Accessibility_modifier_already_seen);\n              } else if (flags & 64\n            /* Static */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, \"static\");\n              } else if (flags & 256\n            /* Async */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, \"async\");\n              } else if (node.parent.kind === 222\n            /* ModuleBlock */\n            || node.parent.kind === 251\n            /* SourceFile */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_element, text);\n              } else if (flags & 128\n            /* Abstract */\n            ) {\n                if (modifier.kind === 110\n                /* PrivateKeyword */\n                ) {\n                    return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, text, \"abstract\");\n                  } else {\n                  return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, text, \"abstract\");\n                }\n              }\n\n            flags |= ts.modifierToFlag(modifier.kind);\n            break;\n\n          case 113\n          /* StaticKeyword */\n          :\n            if (flags & 64\n            /* Static */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, \"static\");\n              } else if (flags & 256\n            /* Async */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, \"static\", \"async\");\n              } else if (node.parent.kind === 222\n            /* ModuleBlock */\n            || node.parent.kind === 251\n            /* SourceFile */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_module_element, \"static\");\n              } else if (node.kind === 139\n            /* Parameter */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, \"static\");\n              } else if (flags & 128\n            /* Abstract */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, \"static\", \"abstract\");\n              }\n\n            flags |= 64\n            /* Static */\n            ;\n            lastStatic = modifier;\n            break;\n\n          case 82\n          /* ExportKeyword */\n          :\n            if (flags & 2\n            /* Export */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, \"export\");\n              } else if (flags & 4\n            /* Ambient */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, \"export\", \"declare\");\n              } else if (flags & 128\n            /* Abstract */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, \"export\", \"abstract\");\n              } else if (flags & 256\n            /* Async */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_must_precede_1_modifier, \"export\", \"async\");\n              } else if (node.parent.kind === 217\n            /* ClassDeclaration */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_class_element, \"export\");\n              } else if (node.kind === 139\n            /* Parameter */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, \"export\");\n              }\n\n            flags |= 2\n            /* Export */\n            ;\n            break;\n\n          case 122\n          /* DeclareKeyword */\n          :\n            if (flags & 4\n            /* Ambient */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, \"declare\");\n              } else if (flags & 256\n            /* Async */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, \"async\");\n              } else if (node.parent.kind === 217\n            /* ClassDeclaration */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_class_element, \"declare\");\n              } else if (node.kind === 139\n            /* Parameter */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, \"declare\");\n              } else if (ts.isInAmbientContext(node.parent) && node.parent.kind === 222\n            /* ModuleBlock */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics.A_declare_modifier_cannot_be_used_in_an_already_ambient_context);\n              }\n\n            flags |= 4\n            /* Ambient */\n            ;\n            lastDeclare = modifier;\n            break;\n\n          case 115\n          /* AbstractKeyword */\n          :\n            if (flags & 128\n            /* Abstract */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, \"abstract\");\n              }\n\n            if (node.kind !== 217\n            /* ClassDeclaration */\n            ) {\n                if (node.kind !== 144\n                /* MethodDeclaration */\n                ) {\n                    return grammarErrorOnNode(modifier, ts.Diagnostics.abstract_modifier_can_only_appear_on_a_class_or_method_declaration);\n                  }\n\n                if (!(node.parent.kind === 217\n                /* ClassDeclaration */\n                && node.parent.flags & 128\n                /* Abstract */\n                )) {\n                  return grammarErrorOnNode(modifier, ts.Diagnostics.Abstract_methods_can_only_appear_within_an_abstract_class);\n                }\n\n                if (flags & 64\n                /* Static */\n                ) {\n                    return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, \"static\", \"abstract\");\n                  }\n\n                if (flags & 16\n                /* Private */\n                ) {\n                    return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_with_1_modifier, \"private\", \"abstract\");\n                  }\n              }\n\n            flags |= 128\n            /* Abstract */\n            ;\n            break;\n\n          case 118\n          /* AsyncKeyword */\n          :\n            if (flags & 256\n            /* Async */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_already_seen, \"async\");\n              } else if (flags & 4\n            /* Ambient */\n            || ts.isInAmbientContext(node.parent)) {\n              return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_be_used_in_an_ambient_context, \"async\");\n            } else if (node.kind === 139\n            /* Parameter */\n            ) {\n                return grammarErrorOnNode(modifier, ts.Diagnostics._0_modifier_cannot_appear_on_a_parameter, \"async\");\n              }\n\n            flags |= 256\n            /* Async */\n            ;\n            lastAsync = modifier;\n            break;\n        }\n      }\n\n      if (node.kind === 145\n      /* Constructor */\n      ) {\n          if (flags & 64\n          /* Static */\n          ) {\n              return grammarErrorOnNode(lastStatic, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"static\");\n            }\n\n          if (flags & 128\n          /* Abstract */\n          ) {\n              return grammarErrorOnNode(lastStatic, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"abstract\");\n            } else if (flags & 32\n          /* Protected */\n          ) {\n              return grammarErrorOnNode(lastProtected, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"protected\");\n            } else if (flags & 16\n          /* Private */\n          ) {\n              return grammarErrorOnNode(lastPrivate, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"private\");\n            } else if (flags & 256\n          /* Async */\n          ) {\n              return grammarErrorOnNode(lastAsync, ts.Diagnostics._0_modifier_cannot_appear_on_a_constructor_declaration, \"async\");\n            }\n\n          return;\n        } else if ((node.kind === 225\n      /* ImportDeclaration */\n      || node.kind === 224\n      /* ImportEqualsDeclaration */\n      ) && flags & 4\n      /* Ambient */\n      ) {\n          return grammarErrorOnNode(lastDeclare, ts.Diagnostics.A_0_modifier_cannot_be_used_with_an_import_declaration, \"declare\");\n        } else if (node.kind === 139\n      /* Parameter */\n      && flags & 56\n      /* AccessibilityModifier */\n      && ts.isBindingPattern(node.name)) {\n        return grammarErrorOnNode(node, ts.Diagnostics.A_parameter_property_may_not_be_a_binding_pattern);\n      }\n\n      if (flags & 256\n      /* Async */\n      ) {\n          return checkGrammarAsyncModifier(node, lastAsync);\n        }\n    }\n\n    function checkGrammarAsyncModifier(node, asyncModifier) {\n      if (languageVersion < 2\n      /* ES6 */\n      ) {\n          return grammarErrorOnNode(asyncModifier, ts.Diagnostics.Async_functions_are_only_available_when_targeting_ECMAScript_6_and_higher);\n        }\n\n      switch (node.kind) {\n        case 144\n        /* MethodDeclaration */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          if (!node.asteriskToken) {\n            return false;\n          }\n\n          break;\n      }\n\n      return grammarErrorOnNode(asyncModifier, ts.Diagnostics._0_modifier_cannot_be_used_here, \"async\");\n    }\n\n    function checkGrammarForDisallowedTrailingComma(list) {\n      if (list && list.hasTrailingComma) {\n        var start = list.end - \",\".length;\n        var end = list.end;\n        var sourceFile = ts.getSourceFileOfNode(list[0]);\n        return grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.Trailing_comma_not_allowed);\n      }\n    }\n\n    function checkGrammarTypeParameterList(node, typeParameters, file) {\n      if (checkGrammarForDisallowedTrailingComma(typeParameters)) {\n        return true;\n      }\n\n      if (typeParameters && typeParameters.length === 0) {\n        var start = typeParameters.pos - \"<\".length;\n        var end = ts.skipTrivia(file.text, typeParameters.end) + \">\".length;\n        return grammarErrorAtPos(file, start, end - start, ts.Diagnostics.Type_parameter_list_cannot_be_empty);\n      }\n    }\n\n    function checkGrammarParameterList(parameters) {\n      if (checkGrammarForDisallowedTrailingComma(parameters)) {\n        return true;\n      }\n\n      var seenOptionalParameter = false;\n      var parameterCount = parameters.length;\n\n      for (var i = 0; i < parameterCount; i++) {\n        var parameter = parameters[i];\n\n        if (parameter.dotDotDotToken) {\n          if (i !== parameterCount - 1) {\n            return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_rest_parameter_must_be_last_in_a_parameter_list);\n          }\n\n          if (ts.isBindingPattern(parameter.name)) {\n            return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);\n          }\n\n          if (parameter.questionToken) {\n            return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_rest_parameter_cannot_be_optional);\n          }\n\n          if (parameter.initializer) {\n            return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_rest_parameter_cannot_have_an_initializer);\n          }\n        } else if (parameter.questionToken) {\n          seenOptionalParameter = true;\n\n          if (parameter.initializer) {\n            return grammarErrorOnNode(parameter.name, ts.Diagnostics.Parameter_cannot_have_question_mark_and_initializer);\n          }\n        } else if (seenOptionalParameter && !parameter.initializer) {\n          return grammarErrorOnNode(parameter.name, ts.Diagnostics.A_required_parameter_cannot_follow_an_optional_parameter);\n        }\n      }\n    }\n\n    function checkGrammarFunctionLikeDeclaration(node) {\n      // Prevent cascading error by short-circuit\n      var file = ts.getSourceFileOfNode(node);\n      return checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarTypeParameterList(node, node.typeParameters, file) || checkGrammarParameterList(node.parameters) || checkGrammarArrowFunction(node, file);\n    }\n\n    function checkGrammarArrowFunction(node, file) {\n      if (node.kind === 177\n      /* ArrowFunction */\n      ) {\n          var arrowFunction = node;\n          var startLine = ts.getLineAndCharacterOfPosition(file, arrowFunction.equalsGreaterThanToken.pos).line;\n          var endLine = ts.getLineAndCharacterOfPosition(file, arrowFunction.equalsGreaterThanToken.end).line;\n\n          if (startLine !== endLine) {\n            return grammarErrorOnNode(arrowFunction.equalsGreaterThanToken, ts.Diagnostics.Line_terminator_not_permitted_before_arrow);\n          }\n        }\n\n      return false;\n    }\n\n    function checkGrammarIndexSignatureParameters(node) {\n      var parameter = node.parameters[0];\n\n      if (node.parameters.length !== 1) {\n        if (parameter) {\n          return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);\n        } else {\n          return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_exactly_one_parameter);\n        }\n      }\n\n      if (parameter.dotDotDotToken) {\n        return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.An_index_signature_cannot_have_a_rest_parameter);\n      }\n\n      if (parameter.flags & 1022\n      /* Modifier */\n      ) {\n          return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_accessibility_modifier);\n        }\n\n      if (parameter.questionToken) {\n        return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.An_index_signature_parameter_cannot_have_a_question_mark);\n      }\n\n      if (parameter.initializer) {\n        return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_cannot_have_an_initializer);\n      }\n\n      if (!parameter.type) {\n        return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_must_have_a_type_annotation);\n      }\n\n      if (parameter.type.kind !== 130\n      /* StringKeyword */\n      && parameter.type.kind !== 128\n      /* NumberKeyword */\n      ) {\n          return grammarErrorOnNode(parameter.name, ts.Diagnostics.An_index_signature_parameter_type_must_be_string_or_number);\n        }\n\n      if (!node.type) {\n        return grammarErrorOnNode(node, ts.Diagnostics.An_index_signature_must_have_a_type_annotation);\n      }\n    }\n\n    function checkGrammarForIndexSignatureModifier(node) {\n      if (node.flags & 1022\n      /* Modifier */\n      ) {\n          grammarErrorOnFirstToken(node, ts.Diagnostics.Modifiers_not_permitted_on_index_signature_members);\n        }\n    }\n\n    function checkGrammarIndexSignature(node) {\n      // Prevent cascading error by short-circuit\n      return checkGrammarDecorators(node) || checkGrammarModifiers(node) || checkGrammarIndexSignatureParameters(node) || checkGrammarForIndexSignatureModifier(node);\n    }\n\n    function checkGrammarForAtLeastOneTypeArgument(node, typeArguments) {\n      if (typeArguments && typeArguments.length === 0) {\n        var sourceFile = ts.getSourceFileOfNode(node);\n        var start = typeArguments.pos - \"<\".length;\n        var end = ts.skipTrivia(sourceFile.text, typeArguments.end) + \">\".length;\n        return grammarErrorAtPos(sourceFile, start, end - start, ts.Diagnostics.Type_argument_list_cannot_be_empty);\n      }\n    }\n\n    function checkGrammarTypeArguments(node, typeArguments) {\n      return checkGrammarForDisallowedTrailingComma(typeArguments) || checkGrammarForAtLeastOneTypeArgument(node, typeArguments);\n    }\n\n    function checkGrammarForOmittedArgument(node, args) {\n      if (args) {\n        var sourceFile = ts.getSourceFileOfNode(node);\n\n        for (var _i = 0, args_1 = args; _i < args_1.length; _i++) {\n          var arg = args_1[_i];\n\n          if (arg.kind === 190\n          /* OmittedExpression */\n          ) {\n              return grammarErrorAtPos(sourceFile, arg.pos, 0, ts.Diagnostics.Argument_expression_expected);\n            }\n        }\n      }\n    }\n\n    function checkGrammarArguments(node, args) {\n      return checkGrammarForDisallowedTrailingComma(args) || checkGrammarForOmittedArgument(node, args);\n    }\n\n    function checkGrammarHeritageClause(node) {\n      var types = node.types;\n\n      if (checkGrammarForDisallowedTrailingComma(types)) {\n        return true;\n      }\n\n      if (types && types.length === 0) {\n        var listType = ts.tokenToString(node.token);\n        var sourceFile = ts.getSourceFileOfNode(node);\n        return grammarErrorAtPos(sourceFile, types.pos, 0, ts.Diagnostics._0_list_cannot_be_empty, listType);\n      }\n    }\n\n    function checkGrammarClassDeclarationHeritageClauses(node) {\n      var seenExtendsClause = false;\n      var seenImplementsClause = false;\n\n      if (!checkGrammarDecorators(node) && !checkGrammarModifiers(node) && node.heritageClauses) {\n        for (var _i = 0, _a = node.heritageClauses; _i < _a.length; _i++) {\n          var heritageClause = _a[_i];\n\n          if (heritageClause.token === 83\n          /* ExtendsKeyword */\n          ) {\n              if (seenExtendsClause) {\n                return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);\n              }\n\n              if (seenImplementsClause) {\n                return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_must_precede_implements_clause);\n              }\n\n              if (heritageClause.types.length > 1) {\n                return grammarErrorOnFirstToken(heritageClause.types[1], ts.Diagnostics.Classes_can_only_extend_a_single_class);\n              }\n\n              seenExtendsClause = true;\n            } else {\n            ts.Debug.assert(heritageClause.token === 106\n            /* ImplementsKeyword */\n            );\n\n            if (seenImplementsClause) {\n              return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.implements_clause_already_seen);\n            }\n\n            seenImplementsClause = true;\n          } // Grammar checking heritageClause inside class declaration\n\n\n          checkGrammarHeritageClause(heritageClause);\n        }\n      }\n    }\n\n    function checkGrammarInterfaceDeclaration(node) {\n      var seenExtendsClause = false;\n\n      if (node.heritageClauses) {\n        for (var _i = 0, _a = node.heritageClauses; _i < _a.length; _i++) {\n          var heritageClause = _a[_i];\n\n          if (heritageClause.token === 83\n          /* ExtendsKeyword */\n          ) {\n              if (seenExtendsClause) {\n                return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.extends_clause_already_seen);\n              }\n\n              seenExtendsClause = true;\n            } else {\n            ts.Debug.assert(heritageClause.token === 106\n            /* ImplementsKeyword */\n            );\n            return grammarErrorOnFirstToken(heritageClause, ts.Diagnostics.Interface_declaration_cannot_have_implements_clause);\n          } // Grammar checking heritageClause inside class declaration\n\n\n          checkGrammarHeritageClause(heritageClause);\n        }\n      }\n\n      return false;\n    }\n\n    function checkGrammarComputedPropertyName(node) {\n      // If node is not a computedPropertyName, just skip the grammar checking\n      if (node.kind !== 137\n      /* ComputedPropertyName */\n      ) {\n          return false;\n        }\n\n      var computedPropertyName = node;\n\n      if (computedPropertyName.expression.kind === 184\n      /* BinaryExpression */\n      && computedPropertyName.expression.operatorToken.kind === 24\n      /* CommaToken */\n      ) {\n          return grammarErrorOnNode(computedPropertyName.expression, ts.Diagnostics.A_comma_expression_is_not_allowed_in_a_computed_property_name);\n        }\n    }\n\n    function checkGrammarForGenerator(node) {\n      if (node.asteriskToken) {\n        ts.Debug.assert(node.kind === 216\n        /* FunctionDeclaration */\n        || node.kind === 176\n        /* FunctionExpression */\n        || node.kind === 144\n        /* MethodDeclaration */\n        );\n\n        if (ts.isInAmbientContext(node)) {\n          return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.Generators_are_not_allowed_in_an_ambient_context);\n        }\n\n        if (!node.body) {\n          return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.An_overload_signature_cannot_be_declared_as_a_generator);\n        }\n\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            return grammarErrorOnNode(node.asteriskToken, ts.Diagnostics.Generators_are_only_available_when_targeting_ECMAScript_6_or_higher);\n          }\n      }\n    }\n\n    function checkGrammarForInvalidQuestionMark(node, questionToken, message) {\n      if (questionToken) {\n        return grammarErrorOnNode(questionToken, message);\n      }\n    }\n\n    function checkGrammarObjectLiteralExpression(node, inDestructuring) {\n      var seen = {};\n      var Property = 1;\n      var GetAccessor = 2;\n      var SetAccesor = 4;\n      var GetOrSetAccessor = GetAccessor | SetAccesor;\n\n      var _loop_1 = function _loop_1(prop) {\n        var name_19 = prop.name;\n\n        if (prop.kind === 190\n        /* OmittedExpression */\n        || name_19.kind === 137\n        /* ComputedPropertyName */\n        ) {\n            // If the name is not a ComputedPropertyName, the grammar checking will skip it\n            checkGrammarComputedPropertyName(name_19);\n            return \"continue\";\n          }\n\n        if (prop.kind === 249\n        /* ShorthandPropertyAssignment */\n        && !inDestructuring && prop.objectAssignmentInitializer) {\n          // having objectAssignmentInitializer is only valid in ObjectAssignmentPattern\n          // outside of destructuring it is a syntax error\n          return {\n            value: grammarErrorOnNode(prop.equalsToken, ts.Diagnostics.can_only_be_used_in_an_object_literal_property_inside_a_destructuring_assignment)\n          };\n        } // Modifiers are never allowed on properties except for 'async' on a method declaration\n\n\n        ts.forEach(prop.modifiers, function (mod) {\n          if (mod.kind !== 118\n          /* AsyncKeyword */\n          || prop.kind !== 144\n          /* MethodDeclaration */\n          ) {\n              grammarErrorOnNode(mod, ts.Diagnostics._0_modifier_cannot_be_used_here, ts.getTextOfNode(mod));\n            }\n        }); // ECMA-262 11.1.5 Object Initialiser\n        // If previous is not undefined then throw a SyntaxError exception if any of the following conditions are true\n        // a.This production is contained in strict code and IsDataDescriptor(previous) is true and\n        // IsDataDescriptor(propId.descriptor) is true.\n        //    b.IsDataDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true.\n        //    c.IsAccessorDescriptor(previous) is true and IsDataDescriptor(propId.descriptor) is true.\n        //    d.IsAccessorDescriptor(previous) is true and IsAccessorDescriptor(propId.descriptor) is true\n        // and either both previous and propId.descriptor have[[Get]] fields or both previous and propId.descriptor have[[Set]] fields\n\n        var currentKind = void 0;\n\n        if (prop.kind === 248\n        /* PropertyAssignment */\n        || prop.kind === 249\n        /* ShorthandPropertyAssignment */\n        ) {\n            // Grammar checking for computedPropertName and shorthandPropertyAssignment\n            checkGrammarForInvalidQuestionMark(prop, prop.questionToken, ts.Diagnostics.An_object_member_cannot_be_declared_optional);\n\n            if (name_19.kind === 8\n            /* NumericLiteral */\n            ) {\n                checkGrammarNumericLiteral(name_19);\n              }\n\n            currentKind = Property;\n          } else if (prop.kind === 144\n        /* MethodDeclaration */\n        ) {\n            currentKind = Property;\n          } else if (prop.kind === 146\n        /* GetAccessor */\n        ) {\n            currentKind = GetAccessor;\n          } else if (prop.kind === 147\n        /* SetAccessor */\n        ) {\n            currentKind = SetAccesor;\n          } else {\n          ts.Debug.fail(\"Unexpected syntax kind:\" + prop.kind);\n        }\n\n        if (!ts.hasProperty(seen, name_19.text)) {\n          seen[name_19.text] = currentKind;\n        } else {\n          var existingKind = seen[name_19.text];\n\n          if (currentKind === Property && existingKind === Property) {\n            return \"continue\";\n          } else if (currentKind & GetOrSetAccessor && existingKind & GetOrSetAccessor) {\n            if (existingKind !== GetOrSetAccessor && currentKind !== existingKind) {\n              seen[name_19.text] = currentKind | existingKind;\n            } else {\n              return {\n                value: grammarErrorOnNode(name_19, ts.Diagnostics.An_object_literal_cannot_have_multiple_get_Slashset_accessors_with_the_same_name)\n              };\n            }\n          } else {\n            return {\n              value: grammarErrorOnNode(name_19, ts.Diagnostics.An_object_literal_cannot_have_property_and_accessor_with_the_same_name)\n            };\n          }\n        }\n      };\n\n      for (var _i = 0, _a = node.properties; _i < _a.length; _i++) {\n        var prop = _a[_i];\n\n        var state_2 = _loop_1(prop);\n\n        if (typeof state_2 === \"object\") return state_2.value;\n        if (state_2 === \"continue\") continue;\n      }\n    }\n\n    function checkGrammarJsxElement(node) {\n      var seen = {};\n\n      for (var _i = 0, _a = node.attributes; _i < _a.length; _i++) {\n        var attr = _a[_i];\n\n        if (attr.kind === 242\n        /* JsxSpreadAttribute */\n        ) {\n            continue;\n          }\n\n        var jsxAttr = attr;\n        var name_20 = jsxAttr.name;\n\n        if (!ts.hasProperty(seen, name_20.text)) {\n          seen[name_20.text] = true;\n        } else {\n          return grammarErrorOnNode(name_20, ts.Diagnostics.JSX_elements_cannot_have_multiple_attributes_with_the_same_name);\n        }\n\n        var initializer = jsxAttr.initializer;\n\n        if (initializer && initializer.kind === 243\n        /* JsxExpression */\n        && !initializer.expression) {\n          return grammarErrorOnNode(jsxAttr.initializer, ts.Diagnostics.JSX_attributes_must_only_be_assigned_a_non_empty_expression);\n        }\n      }\n    }\n\n    function checkGrammarForInOrForOfStatement(forInOrOfStatement) {\n      if (checkGrammarStatementInAmbientContext(forInOrOfStatement)) {\n        return true;\n      }\n\n      if (forInOrOfStatement.initializer.kind === 215\n      /* VariableDeclarationList */\n      ) {\n          var variableList = forInOrOfStatement.initializer;\n\n          if (!checkGrammarVariableDeclarationList(variableList)) {\n            var declarations = variableList.declarations; // declarations.length can be zero if there is an error in variable declaration in for-of or for-in\n            // See http://www.ecma-international.org/ecma-262/6.0/#sec-for-in-and-for-of-statements for details\n            // For example:\n            //      var let = 10;\n            //      for (let of [1,2,3]) {} // this is invalid ES6 syntax\n            //      for (let in [1,2,3]) {} // this is invalid ES6 syntax\n            // We will then want to skip on grammar checking on variableList declaration\n\n            if (!declarations.length) {\n              return false;\n            }\n\n            if (declarations.length > 1) {\n              var diagnostic = forInOrOfStatement.kind === 203\n              /* ForInStatement */\n              ? ts.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_in_statement : ts.Diagnostics.Only_a_single_variable_declaration_is_allowed_in_a_for_of_statement;\n              return grammarErrorOnFirstToken(variableList.declarations[1], diagnostic);\n            }\n\n            var firstDeclaration = declarations[0];\n\n            if (firstDeclaration.initializer) {\n              var diagnostic = forInOrOfStatement.kind === 203\n              /* ForInStatement */\n              ? ts.Diagnostics.The_variable_declaration_of_a_for_in_statement_cannot_have_an_initializer : ts.Diagnostics.The_variable_declaration_of_a_for_of_statement_cannot_have_an_initializer;\n              return grammarErrorOnNode(firstDeclaration.name, diagnostic);\n            }\n\n            if (firstDeclaration.type) {\n              var diagnostic = forInOrOfStatement.kind === 203\n              /* ForInStatement */\n              ? ts.Diagnostics.The_left_hand_side_of_a_for_in_statement_cannot_use_a_type_annotation : ts.Diagnostics.The_left_hand_side_of_a_for_of_statement_cannot_use_a_type_annotation;\n              return grammarErrorOnNode(firstDeclaration, diagnostic);\n            }\n          }\n        }\n\n      return false;\n    }\n\n    function checkGrammarAccessor(accessor) {\n      var kind = accessor.kind;\n\n      if (languageVersion < 1\n      /* ES5 */\n      ) {\n          return grammarErrorOnNode(accessor.name, ts.Diagnostics.Accessors_are_only_available_when_targeting_ECMAScript_5_and_higher);\n        } else if (ts.isInAmbientContext(accessor)) {\n        return grammarErrorOnNode(accessor.name, ts.Diagnostics.An_accessor_cannot_be_declared_in_an_ambient_context);\n      } else if (accessor.body === undefined) {\n        return grammarErrorAtPos(ts.getSourceFileOfNode(accessor), accessor.end - 1, \";\".length, ts.Diagnostics._0_expected, \"{\");\n      } else if (accessor.typeParameters) {\n        return grammarErrorOnNode(accessor.name, ts.Diagnostics.An_accessor_cannot_have_type_parameters);\n      } else if (kind === 146\n      /* GetAccessor */\n      && accessor.parameters.length) {\n        return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_get_accessor_cannot_have_parameters);\n      } else if (kind === 147\n      /* SetAccessor */\n      ) {\n          if (accessor.type) {\n            return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_cannot_have_a_return_type_annotation);\n          } else if (accessor.parameters.length !== 1) {\n            return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_must_have_exactly_one_parameter);\n          } else {\n            var parameter = accessor.parameters[0];\n\n            if (parameter.dotDotDotToken) {\n              return grammarErrorOnNode(parameter.dotDotDotToken, ts.Diagnostics.A_set_accessor_cannot_have_rest_parameter);\n            } else if (parameter.flags & 1022\n            /* Modifier */\n            ) {\n                return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_parameter_property_is_only_allowed_in_a_constructor_implementation);\n              } else if (parameter.questionToken) {\n              return grammarErrorOnNode(parameter.questionToken, ts.Diagnostics.A_set_accessor_cannot_have_an_optional_parameter);\n            } else if (parameter.initializer) {\n              return grammarErrorOnNode(accessor.name, ts.Diagnostics.A_set_accessor_parameter_cannot_have_an_initializer);\n            }\n          }\n        }\n    }\n\n    function checkGrammarForNonSymbolComputedProperty(node, message) {\n      if (ts.isDynamicName(node)) {\n        return grammarErrorOnNode(node, message);\n      }\n    }\n\n    function checkGrammarMethod(node) {\n      if (checkGrammarDisallowedModifiersOnObjectLiteralExpressionMethod(node) || checkGrammarFunctionLikeDeclaration(node) || checkGrammarForGenerator(node)) {\n        return true;\n      }\n\n      if (node.parent.kind === 168\n      /* ObjectLiteralExpression */\n      ) {\n          if (checkGrammarForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional)) {\n            return true;\n          } else if (node.body === undefined) {\n            return grammarErrorAtPos(ts.getSourceFileOfNode(node), node.end - 1, \";\".length, ts.Diagnostics._0_expected, \"{\");\n          }\n        }\n\n      if (ts.isClassLike(node.parent)) {\n        if (checkGrammarForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional)) {\n          return true;\n        } // Technically, computed properties in ambient contexts is disallowed\n        // for property declarations and accessors too, not just methods.\n        // However, property declarations disallow computed names in general,\n        // and accessors are not allowed in ambient contexts in general,\n        // so this error only really matters for methods.\n\n\n        if (ts.isInAmbientContext(node)) {\n          return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_an_ambient_context_must_directly_refer_to_a_built_in_symbol);\n        } else if (!node.body) {\n          return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_method_overload_must_directly_refer_to_a_built_in_symbol);\n        }\n      } else if (node.parent.kind === 218\n      /* InterfaceDeclaration */\n      ) {\n          return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol);\n        } else if (node.parent.kind === 156\n      /* TypeLiteral */\n      ) {\n          return checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol);\n        }\n    }\n\n    function checkGrammarBreakOrContinueStatement(node) {\n      var current = node;\n\n      while (current) {\n        if (ts.isFunctionLike(current)) {\n          return grammarErrorOnNode(node, ts.Diagnostics.Jump_target_cannot_cross_function_boundary);\n        }\n\n        switch (current.kind) {\n          case 210\n          /* LabeledStatement */\n          :\n            if (node.label && current.label.text === node.label.text) {\n              // found matching label - verify that label usage is correct\n              // continue can only target labels that are on iteration statements\n              var isMisplacedContinueLabel = node.kind === 205\n              /* ContinueStatement */\n              && !ts.isIterationStatement(current.statement,\n              /*lookInLabeledStatement*/\n              true);\n\n              if (isMisplacedContinueLabel) {\n                return grammarErrorOnNode(node, ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement);\n              }\n\n              return false;\n            }\n\n            break;\n\n          case 209\n          /* SwitchStatement */\n          :\n            if (node.kind === 206\n            /* BreakStatement */\n            && !node.label) {\n              // unlabeled break within switch statement - ok\n              return false;\n            }\n\n            break;\n\n          default:\n            if (ts.isIterationStatement(current,\n            /*lookInLabeledStatement*/\n            false) && !node.label) {\n              // unlabeled break or continue within iteration statement - ok\n              return false;\n            }\n\n            break;\n        }\n\n        current = current.parent;\n      }\n\n      if (node.label) {\n        var message = node.kind === 206\n        /* BreakStatement */\n        ? ts.Diagnostics.A_break_statement_can_only_jump_to_a_label_of_an_enclosing_statement : ts.Diagnostics.A_continue_statement_can_only_jump_to_a_label_of_an_enclosing_iteration_statement;\n        return grammarErrorOnNode(node, message);\n      } else {\n        var message = node.kind === 206\n        /* BreakStatement */\n        ? ts.Diagnostics.A_break_statement_can_only_be_used_within_an_enclosing_iteration_or_switch_statement : ts.Diagnostics.A_continue_statement_can_only_be_used_within_an_enclosing_iteration_statement;\n        return grammarErrorOnNode(node, message);\n      }\n    }\n\n    function checkGrammarBindingElement(node) {\n      if (node.dotDotDotToken) {\n        var elements = node.parent.elements;\n\n        if (node !== ts.lastOrUndefined(elements)) {\n          return grammarErrorOnNode(node, ts.Diagnostics.A_rest_element_must_be_last_in_an_array_destructuring_pattern);\n        }\n\n        if (node.name.kind === 165\n        /* ArrayBindingPattern */\n        || node.name.kind === 164\n        /* ObjectBindingPattern */\n        ) {\n            return grammarErrorOnNode(node.name, ts.Diagnostics.A_rest_element_cannot_contain_a_binding_pattern);\n          }\n\n        if (node.initializer) {\n          // Error on equals token which immediate precedes the initializer\n          return grammarErrorAtPos(ts.getSourceFileOfNode(node), node.initializer.pos - 1, 1, ts.Diagnostics.A_rest_element_cannot_have_an_initializer);\n        }\n      }\n    }\n\n    function checkGrammarVariableDeclaration(node) {\n      if (node.parent.parent.kind !== 203\n      /* ForInStatement */\n      && node.parent.parent.kind !== 204\n      /* ForOfStatement */\n      ) {\n          if (ts.isInAmbientContext(node)) {\n            if (node.initializer) {\n              // Error on equals token which immediate precedes the initializer\n              var equalsTokenLength = \"=\".length;\n              return grammarErrorAtPos(ts.getSourceFileOfNode(node), node.initializer.pos - equalsTokenLength, equalsTokenLength, ts.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);\n            }\n          } else if (!node.initializer) {\n            if (ts.isBindingPattern(node.name) && !ts.isBindingPattern(node.parent)) {\n              return grammarErrorOnNode(node, ts.Diagnostics.A_destructuring_declaration_must_have_an_initializer);\n            }\n\n            if (ts.isConst(node)) {\n              return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_must_be_initialized);\n            }\n          }\n        }\n\n      var checkLetConstNames = ts.isLet(node) || ts.isConst(node); // 1. LexicalDeclaration : LetOrConst BindingList ;\n      // It is a Syntax Error if the BoundNames of BindingList contains \"let\".\n      // 2. ForDeclaration: ForDeclaration : LetOrConst ForBinding\n      // It is a Syntax Error if the BoundNames of ForDeclaration contains \"let\".\n      // It is a SyntaxError if a VariableDeclaration or VariableDeclarationNoIn occurs within strict code\n      // and its Identifier is eval or arguments\n\n      return checkLetConstNames && checkGrammarNameInLetOrConstDeclarations(node.name);\n    }\n\n    function checkGrammarNameInLetOrConstDeclarations(name) {\n      if (name.kind === 69\n      /* Identifier */\n      ) {\n          if (name.originalKeywordKind === 108\n          /* LetKeyword */\n          ) {\n              return grammarErrorOnNode(name, ts.Diagnostics.let_is_not_allowed_to_be_used_as_a_name_in_let_or_const_declarations);\n            }\n        } else {\n        var elements = name.elements;\n\n        for (var _i = 0, elements_2 = elements; _i < elements_2.length; _i++) {\n          var element = elements_2[_i];\n\n          if (element.kind !== 190\n          /* OmittedExpression */\n          ) {\n              checkGrammarNameInLetOrConstDeclarations(element.name);\n            }\n        }\n      }\n    }\n\n    function checkGrammarVariableDeclarationList(declarationList) {\n      var declarations = declarationList.declarations;\n\n      if (checkGrammarForDisallowedTrailingComma(declarationList.declarations)) {\n        return true;\n      }\n\n      if (!declarationList.declarations.length) {\n        return grammarErrorAtPos(ts.getSourceFileOfNode(declarationList), declarations.pos, declarations.end - declarations.pos, ts.Diagnostics.Variable_declaration_list_cannot_be_empty);\n      }\n    }\n\n    function allowLetAndConstDeclarations(parent) {\n      switch (parent.kind) {\n        case 199\n        /* IfStatement */\n        :\n        case 200\n        /* DoStatement */\n        :\n        case 201\n        /* WhileStatement */\n        :\n        case 208\n        /* WithStatement */\n        :\n        case 202\n        /* ForStatement */\n        :\n        case 203\n        /* ForInStatement */\n        :\n        case 204\n        /* ForOfStatement */\n        :\n          return false;\n\n        case 210\n        /* LabeledStatement */\n        :\n          return allowLetAndConstDeclarations(parent.parent);\n      }\n\n      return true;\n    }\n\n    function checkGrammarForDisallowedLetOrConstStatement(node) {\n      if (!allowLetAndConstDeclarations(node.parent)) {\n        if (ts.isLet(node.declarationList)) {\n          return grammarErrorOnNode(node, ts.Diagnostics.let_declarations_can_only_be_declared_inside_a_block);\n        } else if (ts.isConst(node.declarationList)) {\n          return grammarErrorOnNode(node, ts.Diagnostics.const_declarations_can_only_be_declared_inside_a_block);\n        }\n      }\n    }\n\n    function hasParseDiagnostics(sourceFile) {\n      return sourceFile.parseDiagnostics.length > 0;\n    }\n\n    function grammarErrorOnFirstToken(node, message, arg0, arg1, arg2) {\n      var sourceFile = ts.getSourceFileOfNode(node);\n\n      if (!hasParseDiagnostics(sourceFile)) {\n        var span = ts.getSpanOfTokenAtPosition(sourceFile, node.pos);\n        diagnostics.add(ts.createFileDiagnostic(sourceFile, span.start, span.length, message, arg0, arg1, arg2));\n        return true;\n      }\n    }\n\n    function grammarErrorAtPos(sourceFile, start, length, message, arg0, arg1, arg2) {\n      if (!hasParseDiagnostics(sourceFile)) {\n        diagnostics.add(ts.createFileDiagnostic(sourceFile, start, length, message, arg0, arg1, arg2));\n        return true;\n      }\n    }\n\n    function grammarErrorOnNode(node, message, arg0, arg1, arg2) {\n      var sourceFile = ts.getSourceFileOfNode(node);\n\n      if (!hasParseDiagnostics(sourceFile)) {\n        diagnostics.add(ts.createDiagnosticForNode(node, message, arg0, arg1, arg2));\n        return true;\n      }\n    }\n\n    function checkGrammarConstructorTypeParameters(node) {\n      if (node.typeParameters) {\n        return grammarErrorAtPos(ts.getSourceFileOfNode(node), node.typeParameters.pos, node.typeParameters.end - node.typeParameters.pos, ts.Diagnostics.Type_parameters_cannot_appear_on_a_constructor_declaration);\n      }\n    }\n\n    function checkGrammarConstructorTypeAnnotation(node) {\n      if (node.type) {\n        return grammarErrorOnNode(node.type, ts.Diagnostics.Type_annotation_cannot_appear_on_a_constructor_declaration);\n      }\n    }\n\n    function checkGrammarProperty(node) {\n      if (ts.isClassLike(node.parent)) {\n        if (checkGrammarForInvalidQuestionMark(node, node.questionToken, ts.Diagnostics.A_class_member_cannot_be_declared_optional) || checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_class_property_declaration_must_directly_refer_to_a_built_in_symbol)) {\n          return true;\n        }\n      } else if (node.parent.kind === 218\n      /* InterfaceDeclaration */\n      ) {\n          if (checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_an_interface_must_directly_refer_to_a_built_in_symbol)) {\n            return true;\n          }\n\n          if (node.initializer) {\n            return grammarErrorOnNode(node.initializer, ts.Diagnostics.An_interface_property_cannot_have_an_initializer);\n          }\n        } else if (node.parent.kind === 156\n      /* TypeLiteral */\n      ) {\n          if (checkGrammarForNonSymbolComputedProperty(node.name, ts.Diagnostics.A_computed_property_name_in_a_type_literal_must_directly_refer_to_a_built_in_symbol)) {\n            return true;\n          }\n\n          if (node.initializer) {\n            return grammarErrorOnNode(node.initializer, ts.Diagnostics.A_type_literal_property_cannot_have_an_initializer);\n          }\n        }\n\n      if (ts.isInAmbientContext(node) && node.initializer) {\n        return grammarErrorOnFirstToken(node.initializer, ts.Diagnostics.Initializers_are_not_allowed_in_ambient_contexts);\n      }\n    }\n\n    function checkGrammarTopLevelElementForRequiredDeclareModifier(node) {\n      // A declare modifier is required for any top level .d.ts declaration except export=, export default,\n      // interfaces and imports categories:\n      //\n      //  DeclarationElement:\n      //     ExportAssignment\n      //     export_opt   InterfaceDeclaration\n      //     export_opt   TypeAliasDeclaration\n      //     export_opt   ImportDeclaration\n      //     export_opt   ExternalImportDeclaration\n      //     export_opt   AmbientDeclaration\n      //\n      // TODO: The spec needs to be amended to reflect this grammar.\n      if (node.kind === 218\n      /* InterfaceDeclaration */\n      || node.kind === 219\n      /* TypeAliasDeclaration */\n      || node.kind === 225\n      /* ImportDeclaration */\n      || node.kind === 224\n      /* ImportEqualsDeclaration */\n      || node.kind === 231\n      /* ExportDeclaration */\n      || node.kind === 230\n      /* ExportAssignment */\n      || node.flags & 4\n      /* Ambient */\n      || node.flags & (2\n      /* Export */\n      | 512\n      /* Default */\n      )) {\n        return false;\n      }\n\n      return grammarErrorOnFirstToken(node, ts.Diagnostics.A_declare_modifier_is_required_for_a_top_level_declaration_in_a_d_ts_file);\n    }\n\n    function checkGrammarTopLevelElementsForRequiredDeclareModifier(file) {\n      for (var _i = 0, _a = file.statements; _i < _a.length; _i++) {\n        var decl = _a[_i];\n\n        if (ts.isDeclaration(decl) || decl.kind === 196\n        /* VariableStatement */\n        ) {\n            if (checkGrammarTopLevelElementForRequiredDeclareModifier(decl)) {\n              return true;\n            }\n          }\n      }\n    }\n\n    function checkGrammarSourceFile(node) {\n      return ts.isInAmbientContext(node) && checkGrammarTopLevelElementsForRequiredDeclareModifier(node);\n    }\n\n    function checkGrammarStatementInAmbientContext(node) {\n      if (ts.isInAmbientContext(node)) {\n        // An accessors is already reported about the ambient context\n        if (isAccessor(node.parent.kind)) {\n          return getNodeLinks(node).hasReportedStatementInAmbientContext = true;\n        } // Find containing block which is either Block, ModuleBlock, SourceFile\n\n\n        var links = getNodeLinks(node);\n\n        if (!links.hasReportedStatementInAmbientContext && ts.isFunctionLike(node.parent)) {\n          return getNodeLinks(node).hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts.Diagnostics.An_implementation_cannot_be_declared_in_ambient_contexts);\n        } // We are either parented by another statement, or some sort of block.\n        // If we're in a block, we only want to really report an error once\n        // to prevent noisyness.  So use a bit on the block to indicate if\n        // this has already been reported, and don't report if it has.\n        //\n\n\n        if (node.parent.kind === 195\n        /* Block */\n        || node.parent.kind === 222\n        /* ModuleBlock */\n        || node.parent.kind === 251\n        /* SourceFile */\n        ) {\n            var links_1 = getNodeLinks(node.parent); // Check if the containing block ever report this error\n\n            if (!links_1.hasReportedStatementInAmbientContext) {\n              return links_1.hasReportedStatementInAmbientContext = grammarErrorOnFirstToken(node, ts.Diagnostics.Statements_are_not_allowed_in_ambient_contexts);\n            }\n          } else {}\n      }\n    }\n\n    function checkGrammarNumericLiteral(node) {\n      // Grammar checking\n      if (node.flags & 32768\n      /* OctalLiteral */\n      && languageVersion >= 1\n      /* ES5 */\n      ) {\n          return grammarErrorOnNode(node, ts.Diagnostics.Octal_literals_are_not_available_when_targeting_ECMAScript_5_and_higher);\n        }\n    }\n\n    function grammarErrorAfterFirstToken(node, message, arg0, arg1, arg2) {\n      var sourceFile = ts.getSourceFileOfNode(node);\n\n      if (!hasParseDiagnostics(sourceFile)) {\n        var span = ts.getSpanOfTokenAtPosition(sourceFile, node.pos);\n        diagnostics.add(ts.createFileDiagnostic(sourceFile, ts.textSpanEnd(span),\n        /*length*/\n        0, message, arg0, arg1, arg2));\n        return true;\n      }\n    }\n\n    var _a;\n  }\n\n  ts.createTypeChecker = createTypeChecker;\n})(ts || (ts = {})); /// <reference path=\"checker.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var nullSourceMapWriter; // Used for initialize lastEncodedSourceMapSpan and reset lastEncodedSourceMapSpan when updateLastEncodedAndRecordedSpans\n\n  var defaultLastEncodedSourceMapSpan = {\n    emittedLine: 1,\n    emittedColumn: 1,\n    sourceLine: 1,\n    sourceColumn: 1,\n    sourceIndex: 0\n  };\n\n  function getNullSourceMapWriter() {\n    if (nullSourceMapWriter === undefined) {\n      nullSourceMapWriter = {\n        getSourceMapData: function getSourceMapData() {\n          return undefined;\n        },\n        setSourceFile: function setSourceFile(sourceFile) {},\n        emitStart: function emitStart(range) {},\n        emitEnd: function emitEnd(range, stopOverridingSpan) {},\n        emitPos: function emitPos(pos) {},\n        changeEmitSourcePos: function changeEmitSourcePos() {},\n        getText: function getText() {\n          return undefined;\n        },\n        getSourceMappingURL: function getSourceMappingURL() {\n          return undefined;\n        },\n        initialize: function initialize(filePath, sourceMapFilePath, sourceFiles, isBundledEmit) {},\n        reset: function reset() {}\n      };\n    }\n\n    return nullSourceMapWriter;\n  }\n\n  ts.getNullSourceMapWriter = getNullSourceMapWriter;\n\n  function createSourceMapWriter(host, writer) {\n    var compilerOptions = host.getCompilerOptions();\n    var currentSourceFile;\n    var sourceMapDir; // The directory in which sourcemap will be\n\n    var stopOverridingSpan = false;\n    var modifyLastSourcePos = false; // Current source map file and its index in the sources list\n\n    var sourceMapSourceIndex; // Last recorded and encoded spans\n\n    var lastRecordedSourceMapSpan;\n    var lastEncodedSourceMapSpan;\n    var lastEncodedNameIndex; // Source map data\n\n    var sourceMapData;\n    return {\n      getSourceMapData: function getSourceMapData() {\n        return sourceMapData;\n      },\n      setSourceFile: setSourceFile,\n      emitPos: emitPos,\n      emitStart: emitStart,\n      emitEnd: emitEnd,\n      changeEmitSourcePos: changeEmitSourcePos,\n      getText: getText,\n      getSourceMappingURL: getSourceMappingURL,\n      initialize: initialize,\n      reset: reset\n    };\n\n    function initialize(filePath, sourceMapFilePath, sourceFiles, isBundledEmit) {\n      if (sourceMapData) {\n        reset();\n      }\n\n      currentSourceFile = undefined; // Current source map file and its index in the sources list\n\n      sourceMapSourceIndex = -1; // Last recorded and encoded spans\n\n      lastRecordedSourceMapSpan = undefined;\n      lastEncodedSourceMapSpan = defaultLastEncodedSourceMapSpan;\n      lastEncodedNameIndex = 0; // Initialize source map data\n\n      sourceMapData = {\n        sourceMapFilePath: sourceMapFilePath,\n        jsSourceMappingURL: !compilerOptions.inlineSourceMap ? ts.getBaseFileName(ts.normalizeSlashes(sourceMapFilePath)) : undefined,\n        sourceMapFile: ts.getBaseFileName(ts.normalizeSlashes(filePath)),\n        sourceMapSourceRoot: compilerOptions.sourceRoot || \"\",\n        sourceMapSources: [],\n        inputSourceFileNames: [],\n        sourceMapNames: [],\n        sourceMapMappings: \"\",\n        sourceMapSourcesContent: compilerOptions.inlineSources ? [] : undefined,\n        sourceMapDecodedMappings: []\n      }; // Normalize source root and make sure it has trailing \"/\" so that it can be used to combine paths with the\n      // relative paths of the sources list in the sourcemap\n\n      sourceMapData.sourceMapSourceRoot = ts.normalizeSlashes(sourceMapData.sourceMapSourceRoot);\n\n      if (sourceMapData.sourceMapSourceRoot.length && sourceMapData.sourceMapSourceRoot.charCodeAt(sourceMapData.sourceMapSourceRoot.length - 1) !== 47\n      /* slash */\n      ) {\n          sourceMapData.sourceMapSourceRoot += ts.directorySeparator;\n        }\n\n      if (compilerOptions.mapRoot) {\n        sourceMapDir = ts.normalizeSlashes(compilerOptions.mapRoot);\n\n        if (!isBundledEmit) {\n          ts.Debug.assert(sourceFiles.length === 1); // For modules or multiple emit files the mapRoot will have directory structure like the sources\n          // So if src\\a.ts and src\\lib\\b.ts are compiled together user would be moving the maps into mapRoot\\a.js.map and mapRoot\\lib\\b.js.map\n\n          sourceMapDir = ts.getDirectoryPath(ts.getSourceFilePathInNewDir(sourceFiles[0], host, sourceMapDir));\n        }\n\n        if (!ts.isRootedDiskPath(sourceMapDir) && !ts.isUrl(sourceMapDir)) {\n          // The relative paths are relative to the common directory\n          sourceMapDir = ts.combinePaths(host.getCommonSourceDirectory(), sourceMapDir);\n          sourceMapData.jsSourceMappingURL = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizePath(filePath)), // get the relative sourceMapDir path based on jsFilePath\n          ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL), // this is where user expects to see sourceMap\n          host.getCurrentDirectory(), host.getCanonicalFileName,\n          /*isAbsolutePathAnUrl*/\n          true);\n        } else {\n          sourceMapData.jsSourceMappingURL = ts.combinePaths(sourceMapDir, sourceMapData.jsSourceMappingURL);\n        }\n      } else {\n        sourceMapDir = ts.getDirectoryPath(ts.normalizePath(filePath));\n      }\n    }\n\n    function reset() {\n      currentSourceFile = undefined;\n      sourceMapDir = undefined;\n      sourceMapSourceIndex = undefined;\n      lastRecordedSourceMapSpan = undefined;\n      lastEncodedSourceMapSpan = undefined;\n      lastEncodedNameIndex = undefined;\n      sourceMapData = undefined;\n    }\n\n    function updateLastEncodedAndRecordedSpans() {\n      if (modifyLastSourcePos) {\n        // Reset the source pos\n        modifyLastSourcePos = false; // Change Last recorded Map with last encoded emit line and character\n\n        lastRecordedSourceMapSpan.emittedLine = lastEncodedSourceMapSpan.emittedLine;\n        lastRecordedSourceMapSpan.emittedColumn = lastEncodedSourceMapSpan.emittedColumn; // Pop sourceMapDecodedMappings to remove last entry\n\n        sourceMapData.sourceMapDecodedMappings.pop(); // Point the lastEncodedSourceMapSpace to the previous encoded sourceMapSpan\n        // If the list is empty which indicates that we are at the beginning of the file,\n        // we have to reset it to default value (same value when we first initialize sourceMapWriter)\n\n        lastEncodedSourceMapSpan = sourceMapData.sourceMapDecodedMappings.length ? sourceMapData.sourceMapDecodedMappings[sourceMapData.sourceMapDecodedMappings.length - 1] : defaultLastEncodedSourceMapSpan; // TODO: Update lastEncodedNameIndex \n        // Since we dont support this any more, lets not worry about it right now.\n        // When we start supporting nameIndex, we will get back to this\n        // Change the encoded source map\n\n        var sourceMapMappings = sourceMapData.sourceMapMappings;\n        var lenthToSet = sourceMapMappings.length - 1;\n\n        for (; lenthToSet >= 0; lenthToSet--) {\n          var currentChar = sourceMapMappings.charAt(lenthToSet);\n\n          if (currentChar === \",\") {\n            // Separator for the entry found\n            break;\n          }\n\n          if (currentChar === \";\" && lenthToSet !== 0 && sourceMapMappings.charAt(lenthToSet - 1) !== \";\") {\n            // Last line separator found\n            break;\n          }\n        }\n\n        sourceMapData.sourceMapMappings = sourceMapMappings.substr(0, Math.max(0, lenthToSet));\n      }\n    } // Encoding for sourcemap span\n\n\n    function encodeLastRecordedSourceMapSpan() {\n      if (!lastRecordedSourceMapSpan || lastRecordedSourceMapSpan === lastEncodedSourceMapSpan) {\n        return;\n      }\n\n      var prevEncodedEmittedColumn = lastEncodedSourceMapSpan.emittedColumn; // Line/Comma delimiters\n\n      if (lastEncodedSourceMapSpan.emittedLine === lastRecordedSourceMapSpan.emittedLine) {\n        // Emit comma to separate the entry\n        if (sourceMapData.sourceMapMappings) {\n          sourceMapData.sourceMapMappings += \",\";\n        }\n      } else {\n        // Emit line delimiters\n        for (var encodedLine = lastEncodedSourceMapSpan.emittedLine; encodedLine < lastRecordedSourceMapSpan.emittedLine; encodedLine++) {\n          sourceMapData.sourceMapMappings += \";\";\n        }\n\n        prevEncodedEmittedColumn = 1;\n      } // 1. Relative Column 0 based\n\n\n      sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.emittedColumn - prevEncodedEmittedColumn); // 2. Relative sourceIndex\n\n      sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceIndex - lastEncodedSourceMapSpan.sourceIndex); // 3. Relative sourceLine 0 based\n\n      sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceLine - lastEncodedSourceMapSpan.sourceLine); // 4. Relative sourceColumn 0 based\n\n      sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.sourceColumn - lastEncodedSourceMapSpan.sourceColumn); // 5. Relative namePosition 0 based\n\n      if (lastRecordedSourceMapSpan.nameIndex >= 0) {\n        ts.Debug.assert(false, \"We do not support name index right now, Make sure to update updateLastEncodedAndRecordedSpans when we start using this\");\n        sourceMapData.sourceMapMappings += base64VLQFormatEncode(lastRecordedSourceMapSpan.nameIndex - lastEncodedNameIndex);\n        lastEncodedNameIndex = lastRecordedSourceMapSpan.nameIndex;\n      }\n\n      lastEncodedSourceMapSpan = lastRecordedSourceMapSpan;\n      sourceMapData.sourceMapDecodedMappings.push(lastEncodedSourceMapSpan);\n    }\n\n    function emitPos(pos) {\n      if (pos === -1) {\n        return;\n      }\n\n      var sourceLinePos = ts.getLineAndCharacterOfPosition(currentSourceFile, pos); // Convert the location to be one-based.\n\n      sourceLinePos.line++;\n      sourceLinePos.character++;\n      var emittedLine = writer.getLine();\n      var emittedColumn = writer.getColumn(); // If this location wasn't recorded or the location in source is going backwards, record the span\n\n      if (!lastRecordedSourceMapSpan || lastRecordedSourceMapSpan.emittedLine !== emittedLine || lastRecordedSourceMapSpan.emittedColumn !== emittedColumn || lastRecordedSourceMapSpan.sourceIndex === sourceMapSourceIndex && (lastRecordedSourceMapSpan.sourceLine > sourceLinePos.line || lastRecordedSourceMapSpan.sourceLine === sourceLinePos.line && lastRecordedSourceMapSpan.sourceColumn > sourceLinePos.character)) {\n        // Encode the last recordedSpan before assigning new\n        encodeLastRecordedSourceMapSpan(); // New span\n\n        lastRecordedSourceMapSpan = {\n          emittedLine: emittedLine,\n          emittedColumn: emittedColumn,\n          sourceLine: sourceLinePos.line,\n          sourceColumn: sourceLinePos.character,\n          sourceIndex: sourceMapSourceIndex\n        };\n        stopOverridingSpan = false;\n      } else if (!stopOverridingSpan) {\n        // Take the new pos instead since there is no change in emittedLine and column since last location\n        lastRecordedSourceMapSpan.sourceLine = sourceLinePos.line;\n        lastRecordedSourceMapSpan.sourceColumn = sourceLinePos.character;\n        lastRecordedSourceMapSpan.sourceIndex = sourceMapSourceIndex;\n      }\n\n      updateLastEncodedAndRecordedSpans();\n    }\n\n    function getStartPos(range) {\n      var rangeHasDecorators = !!range.decorators;\n      return range.pos !== -1 ? ts.skipTrivia(currentSourceFile.text, rangeHasDecorators ? range.decorators.end : range.pos) : -1;\n    }\n\n    function emitStart(range) {\n      emitPos(getStartPos(range));\n    }\n\n    function emitEnd(range, stopOverridingEnd) {\n      emitPos(range.end);\n      stopOverridingSpan = stopOverridingEnd;\n    }\n\n    function changeEmitSourcePos() {\n      ts.Debug.assert(!modifyLastSourcePos);\n      modifyLastSourcePos = true;\n    }\n\n    function setSourceFile(sourceFile) {\n      currentSourceFile = sourceFile; // Add the file to tsFilePaths\n      // If sourceroot option: Use the relative path corresponding to the common directory path\n      // otherwise source locations relative to map file location\n\n      var sourcesDirectoryPath = compilerOptions.sourceRoot ? host.getCommonSourceDirectory() : sourceMapDir;\n      var source = ts.getRelativePathToDirectoryOrUrl(sourcesDirectoryPath, currentSourceFile.fileName, host.getCurrentDirectory(), host.getCanonicalFileName,\n      /*isAbsolutePathAnUrl*/\n      true);\n      sourceMapSourceIndex = ts.indexOf(sourceMapData.sourceMapSources, source);\n\n      if (sourceMapSourceIndex === -1) {\n        sourceMapSourceIndex = sourceMapData.sourceMapSources.length;\n        sourceMapData.sourceMapSources.push(source); // The one that can be used from program to get the actual source file\n\n        sourceMapData.inputSourceFileNames.push(sourceFile.fileName);\n\n        if (compilerOptions.inlineSources) {\n          sourceMapData.sourceMapSourcesContent.push(sourceFile.text);\n        }\n      }\n    }\n\n    function getText() {\n      encodeLastRecordedSourceMapSpan();\n      return ts.stringify({\n        version: 3,\n        file: sourceMapData.sourceMapFile,\n        sourceRoot: sourceMapData.sourceMapSourceRoot,\n        sources: sourceMapData.sourceMapSources,\n        names: sourceMapData.sourceMapNames,\n        mappings: sourceMapData.sourceMapMappings,\n        sourcesContent: sourceMapData.sourceMapSourcesContent\n      });\n    }\n\n    function getSourceMappingURL() {\n      if (compilerOptions.inlineSourceMap) {\n        // Encode the sourceMap into the sourceMap url\n        var base64SourceMapText = ts.convertToBase64(getText());\n        return sourceMapData.jsSourceMappingURL = \"data:application/json;base64,\" + base64SourceMapText;\n      } else {\n        return sourceMapData.jsSourceMappingURL;\n      }\n    }\n  }\n\n  ts.createSourceMapWriter = createSourceMapWriter;\n  var base64Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n  function base64FormatEncode(inValue) {\n    if (inValue < 64) {\n      return base64Chars.charAt(inValue);\n    }\n\n    throw TypeError(inValue + \": not a 64 based value\");\n  }\n\n  function base64VLQFormatEncode(inValue) {\n    // Add a new least significant bit that has the sign of the value.\n    // if negative number the least significant bit that gets added to the number has value 1\n    // else least significant bit value that gets added is 0\n    // eg. -1 changes to binary : 01 [1] => 3\n    //     +1 changes to binary : 01 [0] => 2\n    if (inValue < 0) {\n      inValue = (-inValue << 1) + 1;\n    } else {\n      inValue = inValue << 1;\n    } // Encode 5 bits at a time starting from least significant bits\n\n\n    var encodedStr = \"\";\n\n    do {\n      var currentDigit = inValue & 31; // 11111\n\n      inValue = inValue >> 5;\n\n      if (inValue > 0) {\n        // There are still more digits to decode, set the msb (6th bit)\n        currentDigit = currentDigit | 32;\n      }\n\n      encodedStr = encodedStr + base64FormatEncode(currentDigit);\n    } while (inValue > 0);\n\n    return encodedStr;\n  }\n})(ts || (ts = {})); /// <reference path=\"checker.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  function getDeclarationDiagnostics(host, resolver, targetSourceFile) {\n    var declarationDiagnostics = ts.createDiagnosticCollection();\n    ts.forEachExpectedEmitFile(host, getDeclarationDiagnosticsFromFile, targetSourceFile);\n    return declarationDiagnostics.getDiagnostics(targetSourceFile ? targetSourceFile.fileName : undefined);\n\n    function getDeclarationDiagnosticsFromFile(_a, sources, isBundledEmit) {\n      var declarationFilePath = _a.declarationFilePath;\n      emitDeclarations(host, resolver, declarationDiagnostics, declarationFilePath, sources, isBundledEmit);\n    }\n  }\n\n  ts.getDeclarationDiagnostics = getDeclarationDiagnostics;\n\n  function emitDeclarations(host, resolver, emitterDiagnostics, declarationFilePath, sourceFiles, isBundledEmit) {\n    var newLine = host.getNewLine();\n    var compilerOptions = host.getCompilerOptions();\n    var write;\n    var writeLine;\n    var increaseIndent;\n    var decreaseIndent;\n    var writeTextOfNode;\n    var writer = createAndSetNewTextWriterWithSymbolWriter();\n    var enclosingDeclaration;\n    var resultHasExternalModuleIndicator;\n    var currentText;\n    var currentLineMap;\n    var currentIdentifiers;\n    var isCurrentFileExternalModule;\n    var reportedDeclarationError = false;\n    var errorNameNode;\n    var emitJsDocComments = compilerOptions.removeComments ? function (declaration) {} : writeJsDocComments;\n    var emit = compilerOptions.stripInternal ? stripInternal : emitNode;\n    var noDeclare;\n    var moduleElementDeclarationEmitInfo = [];\n    var asynchronousSubModuleDeclarationEmitInfo; // Contains the reference paths that needs to go in the declaration file.\n    // Collecting this separately because reference paths need to be first thing in the declaration file\n    // and we could be collecting these paths from multiple files into single one with --out option\n\n    var referencePathsOutput = \"\"; // Emit references corresponding to each file\n\n    var emittedReferencedFiles = [];\n    var addedGlobalFileReference = false;\n    var allSourcesModuleElementDeclarationEmitInfo = [];\n    ts.forEach(sourceFiles, function (sourceFile) {\n      // Dont emit for javascript file\n      if (ts.isSourceFileJavaScript(sourceFile)) {\n        return;\n      } // Check what references need to be added\n\n\n      if (!compilerOptions.noResolve) {\n        ts.forEach(sourceFile.referencedFiles, function (fileReference) {\n          var referencedFile = ts.tryResolveScriptReference(host, sourceFile, fileReference); // Emit reference in dts, if the file reference was not already emitted\n\n          if (referencedFile && !ts.contains(emittedReferencedFiles, referencedFile)) {\n            // Add a reference to generated dts file,\n            // global file reference is added only \n            //  - if it is not bundled emit (because otherwise it would be self reference)\n            //  - and it is not already added\n            if (writeReferencePath(referencedFile, !isBundledEmit && !addedGlobalFileReference)) {\n              addedGlobalFileReference = true;\n            }\n\n            emittedReferencedFiles.push(referencedFile);\n          }\n        });\n      }\n\n      resultHasExternalModuleIndicator = false;\n\n      if (!isBundledEmit || !ts.isExternalModule(sourceFile)) {\n        noDeclare = false;\n        emitSourceFile(sourceFile);\n      } else if (ts.isExternalModule(sourceFile)) {\n        noDeclare = true;\n        write(\"declare module \\\"\" + ts.getResolvedExternalModuleName(host, sourceFile) + \"\\\" {\");\n        writeLine();\n        increaseIndent();\n        emitSourceFile(sourceFile);\n        decreaseIndent();\n        write(\"}\");\n        writeLine();\n      } // create asynchronous output for the importDeclarations\n\n\n      if (moduleElementDeclarationEmitInfo.length) {\n        var oldWriter = writer;\n        ts.forEach(moduleElementDeclarationEmitInfo, function (aliasEmitInfo) {\n          if (aliasEmitInfo.isVisible && !aliasEmitInfo.asynchronousOutput) {\n            ts.Debug.assert(aliasEmitInfo.node.kind === 225\n            /* ImportDeclaration */\n            );\n            createAndSetNewTextWriterWithSymbolWriter();\n            ts.Debug.assert(aliasEmitInfo.indent === 0 || aliasEmitInfo.indent === 1 && isBundledEmit);\n\n            for (var i = 0; i < aliasEmitInfo.indent; i++) {\n              increaseIndent();\n            }\n\n            writeImportDeclaration(aliasEmitInfo.node);\n            aliasEmitInfo.asynchronousOutput = writer.getText();\n\n            for (var i = 0; i < aliasEmitInfo.indent; i++) {\n              decreaseIndent();\n            }\n          }\n        });\n        setWriter(oldWriter);\n        allSourcesModuleElementDeclarationEmitInfo = allSourcesModuleElementDeclarationEmitInfo.concat(moduleElementDeclarationEmitInfo);\n        moduleElementDeclarationEmitInfo = [];\n      }\n\n      if (!isBundledEmit && ts.isExternalModule(sourceFile) && sourceFile.moduleAugmentations.length && !resultHasExternalModuleIndicator) {\n        // if file was external module with augmentations - this fact should be preserved in .d.ts as well.\n        // in case if we didn't write any external module specifiers in .d.ts we need to emit something \n        // that will force compiler to think that this file is an external module - 'export {}' is a reasonable choice here.\n        write(\"export {};\");\n        writeLine();\n      }\n    });\n    return {\n      reportedDeclarationError: reportedDeclarationError,\n      moduleElementDeclarationEmitInfo: allSourcesModuleElementDeclarationEmitInfo,\n      synchronousDeclarationOutput: writer.getText(),\n      referencePathsOutput: referencePathsOutput\n    };\n\n    function hasInternalAnnotation(range) {\n      var comment = currentText.substring(range.pos, range.end);\n      return comment.indexOf(\"@internal\") >= 0;\n    }\n\n    function stripInternal(node) {\n      if (node) {\n        var leadingCommentRanges = ts.getLeadingCommentRanges(currentText, node.pos);\n\n        if (ts.forEach(leadingCommentRanges, hasInternalAnnotation)) {\n          return;\n        }\n\n        emitNode(node);\n      }\n    }\n\n    function createAndSetNewTextWriterWithSymbolWriter() {\n      var writer = ts.createTextWriter(newLine);\n      writer.trackSymbol = trackSymbol;\n      writer.reportInaccessibleThisError = reportInaccessibleThisError;\n      writer.writeKeyword = writer.write;\n      writer.writeOperator = writer.write;\n      writer.writePunctuation = writer.write;\n      writer.writeSpace = writer.write;\n      writer.writeStringLiteral = writer.writeLiteral;\n      writer.writeParameter = writer.write;\n      writer.writeSymbol = writer.write;\n      setWriter(writer);\n      return writer;\n    }\n\n    function setWriter(newWriter) {\n      writer = newWriter;\n      write = newWriter.write;\n      writeTextOfNode = newWriter.writeTextOfNode;\n      writeLine = newWriter.writeLine;\n      increaseIndent = newWriter.increaseIndent;\n      decreaseIndent = newWriter.decreaseIndent;\n    }\n\n    function writeAsynchronousModuleElements(nodes) {\n      var oldWriter = writer;\n      ts.forEach(nodes, function (declaration) {\n        var nodeToCheck;\n\n        if (declaration.kind === 214\n        /* VariableDeclaration */\n        ) {\n            nodeToCheck = declaration.parent.parent;\n          } else if (declaration.kind === 228\n        /* NamedImports */\n        || declaration.kind === 229\n        /* ImportSpecifier */\n        || declaration.kind === 226\n        /* ImportClause */\n        ) {\n            ts.Debug.fail(\"We should be getting ImportDeclaration instead to write\");\n          } else {\n          nodeToCheck = declaration;\n        }\n\n        var moduleElementEmitInfo = ts.forEach(moduleElementDeclarationEmitInfo, function (declEmitInfo) {\n          return declEmitInfo.node === nodeToCheck ? declEmitInfo : undefined;\n        });\n\n        if (!moduleElementEmitInfo && asynchronousSubModuleDeclarationEmitInfo) {\n          moduleElementEmitInfo = ts.forEach(asynchronousSubModuleDeclarationEmitInfo, function (declEmitInfo) {\n            return declEmitInfo.node === nodeToCheck ? declEmitInfo : undefined;\n          });\n        } // If the alias was marked as not visible when we saw its declaration, we would have saved the aliasEmitInfo, but if we haven't yet visited the alias declaration\n        // then we don't need to write it at this point. We will write it when we actually see its declaration\n        // Eg.\n        // export function bar(a: foo.Foo) { }\n        // import foo = require(\"foo\");\n        // Writing of function bar would mark alias declaration foo as visible but we haven't yet visited that declaration so do nothing,\n        // we would write alias foo declaration when we visit it since it would now be marked as visible\n\n\n        if (moduleElementEmitInfo) {\n          if (moduleElementEmitInfo.node.kind === 225\n          /* ImportDeclaration */\n          ) {\n              // we have to create asynchronous output only after we have collected complete information\n              // because it is possible to enable multiple bindings as asynchronously visible\n              moduleElementEmitInfo.isVisible = true;\n            } else {\n            createAndSetNewTextWriterWithSymbolWriter();\n\n            for (var declarationIndent = moduleElementEmitInfo.indent; declarationIndent; declarationIndent--) {\n              increaseIndent();\n            }\n\n            if (nodeToCheck.kind === 221\n            /* ModuleDeclaration */\n            ) {\n                ts.Debug.assert(asynchronousSubModuleDeclarationEmitInfo === undefined);\n                asynchronousSubModuleDeclarationEmitInfo = [];\n              }\n\n            writeModuleElement(nodeToCheck);\n\n            if (nodeToCheck.kind === 221\n            /* ModuleDeclaration */\n            ) {\n                moduleElementEmitInfo.subModuleElementDeclarationEmitInfo = asynchronousSubModuleDeclarationEmitInfo;\n                asynchronousSubModuleDeclarationEmitInfo = undefined;\n              }\n\n            moduleElementEmitInfo.asynchronousOutput = writer.getText();\n          }\n        }\n      });\n      setWriter(oldWriter);\n    }\n\n    function handleSymbolAccessibilityError(symbolAccesibilityResult) {\n      if (symbolAccesibilityResult.accessibility === 0\n      /* Accessible */\n      ) {\n          // write the aliases\n          if (symbolAccesibilityResult && symbolAccesibilityResult.aliasesToMakeVisible) {\n            writeAsynchronousModuleElements(symbolAccesibilityResult.aliasesToMakeVisible);\n          }\n        } else {\n        // Report error\n        reportedDeclarationError = true;\n        var errorInfo = writer.getSymbolAccessibilityDiagnostic(symbolAccesibilityResult);\n\n        if (errorInfo) {\n          if (errorInfo.typeName) {\n            emitterDiagnostics.add(ts.createDiagnosticForNode(symbolAccesibilityResult.errorNode || errorInfo.errorNode, errorInfo.diagnosticMessage, ts.getTextOfNodeFromSourceText(currentText, errorInfo.typeName), symbolAccesibilityResult.errorSymbolName, symbolAccesibilityResult.errorModuleName));\n          } else {\n            emitterDiagnostics.add(ts.createDiagnosticForNode(symbolAccesibilityResult.errorNode || errorInfo.errorNode, errorInfo.diagnosticMessage, symbolAccesibilityResult.errorSymbolName, symbolAccesibilityResult.errorModuleName));\n          }\n        }\n      }\n    }\n\n    function trackSymbol(symbol, enclosingDeclaration, meaning) {\n      handleSymbolAccessibilityError(resolver.isSymbolAccessible(symbol, enclosingDeclaration, meaning));\n    }\n\n    function reportInaccessibleThisError() {\n      if (errorNameNode) {\n        reportedDeclarationError = true;\n        emitterDiagnostics.add(ts.createDiagnosticForNode(errorNameNode, ts.Diagnostics.The_inferred_type_of_0_references_an_inaccessible_this_type_A_type_annotation_is_necessary, ts.declarationNameToString(errorNameNode)));\n      }\n    }\n\n    function writeTypeOfDeclaration(declaration, type, getSymbolAccessibilityDiagnostic) {\n      writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;\n      write(\": \");\n\n      if (type) {\n        // Write the type\n        emitType(type);\n      } else {\n        errorNameNode = declaration.name;\n        resolver.writeTypeOfDeclaration(declaration, enclosingDeclaration, 2\n        /* UseTypeOfFunction */\n        , writer);\n        errorNameNode = undefined;\n      }\n    }\n\n    function writeReturnTypeAtSignature(signature, getSymbolAccessibilityDiagnostic) {\n      writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;\n      write(\": \");\n\n      if (signature.type) {\n        // Write the type\n        emitType(signature.type);\n      } else {\n        errorNameNode = signature.name;\n        resolver.writeReturnTypeOfSignatureDeclaration(signature, enclosingDeclaration, 2\n        /* UseTypeOfFunction */\n        , writer);\n        errorNameNode = undefined;\n      }\n    }\n\n    function emitLines(nodes) {\n      for (var _i = 0, nodes_2 = nodes; _i < nodes_2.length; _i++) {\n        var node = nodes_2[_i];\n        emit(node);\n      }\n    }\n\n    function emitSeparatedList(nodes, separator, eachNodeEmitFn, canEmitFn) {\n      var currentWriterPos = writer.getTextPos();\n\n      for (var _i = 0, nodes_3 = nodes; _i < nodes_3.length; _i++) {\n        var node = nodes_3[_i];\n\n        if (!canEmitFn || canEmitFn(node)) {\n          if (currentWriterPos !== writer.getTextPos()) {\n            write(separator);\n          }\n\n          currentWriterPos = writer.getTextPos();\n          eachNodeEmitFn(node);\n        }\n      }\n    }\n\n    function emitCommaList(nodes, eachNodeEmitFn, canEmitFn) {\n      emitSeparatedList(nodes, \", \", eachNodeEmitFn, canEmitFn);\n    }\n\n    function writeJsDocComments(declaration) {\n      if (declaration) {\n        var jsDocComments = ts.getJsDocCommentsFromText(declaration, currentText);\n        ts.emitNewLineBeforeLeadingComments(currentLineMap, writer, declaration, jsDocComments); // jsDoc comments are emitted at /*leading comment1 */space/*leading comment*/space\n\n        ts.emitComments(currentText, currentLineMap, writer, jsDocComments,\n        /*trailingSeparator*/\n        true, newLine, ts.writeCommentRange);\n      }\n    }\n\n    function emitTypeWithNewGetSymbolAccessibilityDiagnostic(type, getSymbolAccessibilityDiagnostic) {\n      writer.getSymbolAccessibilityDiagnostic = getSymbolAccessibilityDiagnostic;\n      emitType(type);\n    }\n\n    function emitType(type) {\n      switch (type.kind) {\n        case 117\n        /* AnyKeyword */\n        :\n        case 130\n        /* StringKeyword */\n        :\n        case 128\n        /* NumberKeyword */\n        :\n        case 120\n        /* BooleanKeyword */\n        :\n        case 131\n        /* SymbolKeyword */\n        :\n        case 103\n        /* VoidKeyword */\n        :\n        case 162\n        /* ThisType */\n        :\n        case 163\n        /* StringLiteralType */\n        :\n          return writeTextOfNode(currentText, type);\n\n        case 191\n        /* ExpressionWithTypeArguments */\n        :\n          return emitExpressionWithTypeArguments(type);\n\n        case 152\n        /* TypeReference */\n        :\n          return emitTypeReference(type);\n\n        case 155\n        /* TypeQuery */\n        :\n          return emitTypeQuery(type);\n\n        case 157\n        /* ArrayType */\n        :\n          return emitArrayType(type);\n\n        case 158\n        /* TupleType */\n        :\n          return emitTupleType(type);\n\n        case 159\n        /* UnionType */\n        :\n          return emitUnionType(type);\n\n        case 160\n        /* IntersectionType */\n        :\n          return emitIntersectionType(type);\n\n        case 161\n        /* ParenthesizedType */\n        :\n          return emitParenType(type);\n\n        case 153\n        /* FunctionType */\n        :\n        case 154\n        /* ConstructorType */\n        :\n          return emitSignatureDeclarationWithJsDocComments(type);\n\n        case 156\n        /* TypeLiteral */\n        :\n          return emitTypeLiteral(type);\n\n        case 69\n        /* Identifier */\n        :\n          return emitEntityName(type);\n\n        case 136\n        /* QualifiedName */\n        :\n          return emitEntityName(type);\n\n        case 151\n        /* TypePredicate */\n        :\n          return emitTypePredicate(type);\n      }\n\n      function writeEntityName(entityName) {\n        if (entityName.kind === 69\n        /* Identifier */\n        ) {\n            writeTextOfNode(currentText, entityName);\n          } else {\n          var left = entityName.kind === 136\n          /* QualifiedName */\n          ? entityName.left : entityName.expression;\n          var right = entityName.kind === 136\n          /* QualifiedName */\n          ? entityName.right : entityName.name;\n          writeEntityName(left);\n          write(\".\");\n          writeTextOfNode(currentText, right);\n        }\n      }\n\n      function emitEntityName(entityName) {\n        var visibilityResult = resolver.isEntityNameVisible(entityName, // Aliases can be written asynchronously so use correct enclosing declaration\n        entityName.parent.kind === 224\n        /* ImportEqualsDeclaration */\n        ? entityName.parent : enclosingDeclaration);\n        handleSymbolAccessibilityError(visibilityResult);\n        writeEntityName(entityName);\n      }\n\n      function emitExpressionWithTypeArguments(node) {\n        if (ts.isSupportedExpressionWithTypeArguments(node)) {\n          ts.Debug.assert(node.expression.kind === 69\n          /* Identifier */\n          || node.expression.kind === 169\n          /* PropertyAccessExpression */\n          );\n          emitEntityName(node.expression);\n\n          if (node.typeArguments) {\n            write(\"<\");\n            emitCommaList(node.typeArguments, emitType);\n            write(\">\");\n          }\n        }\n      }\n\n      function emitTypeReference(type) {\n        emitEntityName(type.typeName);\n\n        if (type.typeArguments) {\n          write(\"<\");\n          emitCommaList(type.typeArguments, emitType);\n          write(\">\");\n        }\n      }\n\n      function emitTypePredicate(type) {\n        writeTextOfNode(currentText, type.parameterName);\n        write(\" is \");\n        emitType(type.type);\n      }\n\n      function emitTypeQuery(type) {\n        write(\"typeof \");\n        emitEntityName(type.exprName);\n      }\n\n      function emitArrayType(type) {\n        emitType(type.elementType);\n        write(\"[]\");\n      }\n\n      function emitTupleType(type) {\n        write(\"[\");\n        emitCommaList(type.elementTypes, emitType);\n        write(\"]\");\n      }\n\n      function emitUnionType(type) {\n        emitSeparatedList(type.types, \" | \", emitType);\n      }\n\n      function emitIntersectionType(type) {\n        emitSeparatedList(type.types, \" & \", emitType);\n      }\n\n      function emitParenType(type) {\n        write(\"(\");\n        emitType(type.type);\n        write(\")\");\n      }\n\n      function emitTypeLiteral(type) {\n        write(\"{\");\n\n        if (type.members.length) {\n          writeLine();\n          increaseIndent(); // write members\n\n          emitLines(type.members);\n          decreaseIndent();\n        }\n\n        write(\"}\");\n      }\n    }\n\n    function emitSourceFile(node) {\n      currentText = node.text;\n      currentLineMap = ts.getLineStarts(node);\n      currentIdentifiers = node.identifiers;\n      isCurrentFileExternalModule = ts.isExternalModule(node);\n      enclosingDeclaration = node;\n      ts.emitDetachedComments(currentText, currentLineMap, writer, ts.writeCommentRange, node, newLine, true\n      /* remove comments */\n      );\n      emitLines(node.statements);\n    } // Return a temp variable name to be used in `export default` statements.\n    // The temp name will be of the form _default_counter.\n    // Note that export default is only allowed at most once in a module, so we\n    // do not need to keep track of created temp names.\n\n\n    function getExportDefaultTempVariableName() {\n      var baseName = \"_default\";\n\n      if (!ts.hasProperty(currentIdentifiers, baseName)) {\n        return baseName;\n      }\n\n      var count = 0;\n\n      while (true) {\n        count++;\n        var name_21 = baseName + \"_\" + count;\n\n        if (!ts.hasProperty(currentIdentifiers, name_21)) {\n          return name_21;\n        }\n      }\n    }\n\n    function emitExportAssignment(node) {\n      if (node.expression.kind === 69\n      /* Identifier */\n      ) {\n          write(node.isExportEquals ? \"export = \" : \"export default \");\n          writeTextOfNode(currentText, node.expression);\n        } else {\n        // Expression\n        var tempVarName = getExportDefaultTempVariableName();\n        write(\"declare var \");\n        write(tempVarName);\n        write(\": \");\n        writer.getSymbolAccessibilityDiagnostic = getDefaultExportAccessibilityDiagnostic;\n        resolver.writeTypeOfExpression(node.expression, enclosingDeclaration, 2\n        /* UseTypeOfFunction */\n        , writer);\n        write(\";\");\n        writeLine();\n        write(node.isExportEquals ? \"export = \" : \"export default \");\n        write(tempVarName);\n      }\n\n      write(\";\");\n      writeLine(); // Make all the declarations visible for the export name\n\n      if (node.expression.kind === 69\n      /* Identifier */\n      ) {\n          var nodes = resolver.collectLinkedAliases(node.expression); // write each of these declarations asynchronously\n\n          writeAsynchronousModuleElements(nodes);\n        }\n\n      function getDefaultExportAccessibilityDiagnostic(diagnostic) {\n        return {\n          diagnosticMessage: ts.Diagnostics.Default_export_of_the_module_has_or_is_using_private_name_0,\n          errorNode: node\n        };\n      }\n    }\n\n    function isModuleElementVisible(node) {\n      return resolver.isDeclarationVisible(node);\n    }\n\n    function emitModuleElement(node, isModuleElementVisible) {\n      if (isModuleElementVisible) {\n        writeModuleElement(node);\n      } else if (node.kind === 224\n      /* ImportEqualsDeclaration */\n      || node.parent.kind === 251\n      /* SourceFile */\n      && isCurrentFileExternalModule) {\n        var isVisible = void 0;\n\n        if (asynchronousSubModuleDeclarationEmitInfo && node.parent.kind !== 251\n        /* SourceFile */\n        ) {\n            // Import declaration of another module that is visited async so lets put it in right spot\n            asynchronousSubModuleDeclarationEmitInfo.push({\n              node: node,\n              outputPos: writer.getTextPos(),\n              indent: writer.getIndent(),\n              isVisible: isVisible\n            });\n          } else {\n          if (node.kind === 225\n          /* ImportDeclaration */\n          ) {\n              var importDeclaration = node;\n\n              if (importDeclaration.importClause) {\n                isVisible = importDeclaration.importClause.name && resolver.isDeclarationVisible(importDeclaration.importClause) || isVisibleNamedBinding(importDeclaration.importClause.namedBindings);\n              }\n            }\n\n          moduleElementDeclarationEmitInfo.push({\n            node: node,\n            outputPos: writer.getTextPos(),\n            indent: writer.getIndent(),\n            isVisible: isVisible\n          });\n        }\n      }\n    }\n\n    function writeModuleElement(node) {\n      switch (node.kind) {\n        case 216\n        /* FunctionDeclaration */\n        :\n          return writeFunctionDeclaration(node);\n\n        case 196\n        /* VariableStatement */\n        :\n          return writeVariableStatement(node);\n\n        case 218\n        /* InterfaceDeclaration */\n        :\n          return writeInterfaceDeclaration(node);\n\n        case 217\n        /* ClassDeclaration */\n        :\n          return writeClassDeclaration(node);\n\n        case 219\n        /* TypeAliasDeclaration */\n        :\n          return writeTypeAliasDeclaration(node);\n\n        case 220\n        /* EnumDeclaration */\n        :\n          return writeEnumDeclaration(node);\n\n        case 221\n        /* ModuleDeclaration */\n        :\n          return writeModuleDeclaration(node);\n\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n          return writeImportEqualsDeclaration(node);\n\n        case 225\n        /* ImportDeclaration */\n        :\n          return writeImportDeclaration(node);\n\n        default:\n          ts.Debug.fail(\"Unknown symbol kind\");\n      }\n    }\n\n    function emitModuleElementDeclarationFlags(node) {\n      // If the node is parented in the current source file we need to emit export declare or just export\n      if (node.parent.kind === 251\n      /* SourceFile */\n      ) {\n          // If the node is exported\n          if (node.flags & 2\n          /* Export */\n          ) {\n              write(\"export \");\n            }\n\n          if (node.flags & 512\n          /* Default */\n          ) {\n              write(\"default \");\n            } else if (node.kind !== 218\n          /* InterfaceDeclaration */\n          && !noDeclare) {\n            write(\"declare \");\n          }\n        }\n    }\n\n    function emitClassMemberDeclarationFlags(node) {\n      if (node.flags & 16\n      /* Private */\n      ) {\n          write(\"private \");\n        } else if (node.flags & 32\n      /* Protected */\n      ) {\n          write(\"protected \");\n        }\n\n      if (node.flags & 64\n      /* Static */\n      ) {\n          write(\"static \");\n        }\n\n      if (node.flags & 128\n      /* Abstract */\n      ) {\n          write(\"abstract \");\n        }\n    }\n\n    function writeImportEqualsDeclaration(node) {\n      // note usage of writer. methods instead of aliases created, just to make sure we are using\n      // correct writer especially to handle asynchronous alias writing\n      emitJsDocComments(node);\n\n      if (node.flags & 2\n      /* Export */\n      ) {\n          write(\"export \");\n        }\n\n      write(\"import \");\n      writeTextOfNode(currentText, node.name);\n      write(\" = \");\n\n      if (ts.isInternalModuleImportEqualsDeclaration(node)) {\n        emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.moduleReference, getImportEntityNameVisibilityError);\n        write(\";\");\n      } else {\n        write(\"require(\");\n        emitExternalModuleSpecifier(node);\n        write(\");\");\n      }\n\n      writer.writeLine();\n\n      function getImportEntityNameVisibilityError(symbolAccesibilityResult) {\n        return {\n          diagnosticMessage: ts.Diagnostics.Import_declaration_0_is_using_private_name_1,\n          errorNode: node,\n          typeName: node.name\n        };\n      }\n    }\n\n    function isVisibleNamedBinding(namedBindings) {\n      if (namedBindings) {\n        if (namedBindings.kind === 227\n        /* NamespaceImport */\n        ) {\n            return resolver.isDeclarationVisible(namedBindings);\n          } else {\n          return ts.forEach(namedBindings.elements, function (namedImport) {\n            return resolver.isDeclarationVisible(namedImport);\n          });\n        }\n      }\n    }\n\n    function writeImportDeclaration(node) {\n      emitJsDocComments(node);\n\n      if (node.flags & 2\n      /* Export */\n      ) {\n          write(\"export \");\n        }\n\n      write(\"import \");\n\n      if (node.importClause) {\n        var currentWriterPos = writer.getTextPos();\n\n        if (node.importClause.name && resolver.isDeclarationVisible(node.importClause)) {\n          writeTextOfNode(currentText, node.importClause.name);\n        }\n\n        if (node.importClause.namedBindings && isVisibleNamedBinding(node.importClause.namedBindings)) {\n          if (currentWriterPos !== writer.getTextPos()) {\n            // If the default binding was emitted, write the separated\n            write(\", \");\n          }\n\n          if (node.importClause.namedBindings.kind === 227\n          /* NamespaceImport */\n          ) {\n              write(\"* as \");\n              writeTextOfNode(currentText, node.importClause.namedBindings.name);\n            } else {\n            write(\"{ \");\n            emitCommaList(node.importClause.namedBindings.elements, emitImportOrExportSpecifier, resolver.isDeclarationVisible);\n            write(\" }\");\n          }\n        }\n\n        write(\" from \");\n      }\n\n      emitExternalModuleSpecifier(node);\n      write(\";\");\n      writer.writeLine();\n    }\n\n    function emitExternalModuleSpecifier(parent) {\n      // emitExternalModuleSpecifier is usually called when we emit something in the.d.ts file that will make it an external module (i.e. import/export declarations).\n      // the only case when it is not true is when we call it to emit correct name for module augmentation - d.ts files with just module augmentations are not considered \n      // external modules since they are indistingushable from script files with ambient modules. To fix this in such d.ts files we'll emit top level 'export {}'\n      // so compiler will treat them as external modules.\n      resultHasExternalModuleIndicator = resultHasExternalModuleIndicator || parent.kind !== 221\n      /* ModuleDeclaration */\n      ;\n      var moduleSpecifier;\n\n      if (parent.kind === 224\n      /* ImportEqualsDeclaration */\n      ) {\n          var node = parent;\n          moduleSpecifier = ts.getExternalModuleImportEqualsDeclarationExpression(node);\n        } else if (parent.kind === 221\n      /* ModuleDeclaration */\n      ) {\n          moduleSpecifier = parent.name;\n        } else {\n        var node = parent;\n        moduleSpecifier = node.moduleSpecifier;\n      }\n\n      if (moduleSpecifier.kind === 9\n      /* StringLiteral */\n      && isBundledEmit && (compilerOptions.out || compilerOptions.outFile)) {\n        var moduleName = ts.getExternalModuleNameFromDeclaration(host, resolver, parent);\n\n        if (moduleName) {\n          write(\"\\\"\");\n          write(moduleName);\n          write(\"\\\"\");\n          return;\n        }\n      }\n\n      writeTextOfNode(currentText, moduleSpecifier);\n    }\n\n    function emitImportOrExportSpecifier(node) {\n      if (node.propertyName) {\n        writeTextOfNode(currentText, node.propertyName);\n        write(\" as \");\n      }\n\n      writeTextOfNode(currentText, node.name);\n    }\n\n    function emitExportSpecifier(node) {\n      emitImportOrExportSpecifier(node); // Make all the declarations visible for the export name\n\n      var nodes = resolver.collectLinkedAliases(node.propertyName || node.name); // write each of these declarations asynchronously\n\n      writeAsynchronousModuleElements(nodes);\n    }\n\n    function emitExportDeclaration(node) {\n      emitJsDocComments(node);\n      write(\"export \");\n\n      if (node.exportClause) {\n        write(\"{ \");\n        emitCommaList(node.exportClause.elements, emitExportSpecifier);\n        write(\" }\");\n      } else {\n        write(\"*\");\n      }\n\n      if (node.moduleSpecifier) {\n        write(\" from \");\n        emitExternalModuleSpecifier(node);\n      }\n\n      write(\";\");\n      writer.writeLine();\n    }\n\n    function writeModuleDeclaration(node) {\n      emitJsDocComments(node);\n      emitModuleElementDeclarationFlags(node);\n\n      if (ts.isGlobalScopeAugmentation(node)) {\n        write(\"global \");\n      } else {\n        if (node.flags & 65536\n        /* Namespace */\n        ) {\n            write(\"namespace \");\n          } else {\n          write(\"module \");\n        }\n\n        if (ts.isExternalModuleAugmentation(node)) {\n          emitExternalModuleSpecifier(node);\n        } else {\n          writeTextOfNode(currentText, node.name);\n        }\n      }\n\n      while (node.body.kind !== 222\n      /* ModuleBlock */\n      ) {\n        node = node.body;\n        write(\".\");\n        writeTextOfNode(currentText, node.name);\n      }\n\n      var prevEnclosingDeclaration = enclosingDeclaration;\n      enclosingDeclaration = node;\n      write(\" {\");\n      writeLine();\n      increaseIndent();\n      emitLines(node.body.statements);\n      decreaseIndent();\n      write(\"}\");\n      writeLine();\n      enclosingDeclaration = prevEnclosingDeclaration;\n    }\n\n    function writeTypeAliasDeclaration(node) {\n      var prevEnclosingDeclaration = enclosingDeclaration;\n      enclosingDeclaration = node;\n      emitJsDocComments(node);\n      emitModuleElementDeclarationFlags(node);\n      write(\"type \");\n      writeTextOfNode(currentText, node.name);\n      emitTypeParameters(node.typeParameters);\n      write(\" = \");\n      emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.type, getTypeAliasDeclarationVisibilityError);\n      write(\";\");\n      writeLine();\n      enclosingDeclaration = prevEnclosingDeclaration;\n\n      function getTypeAliasDeclarationVisibilityError(symbolAccesibilityResult) {\n        return {\n          diagnosticMessage: ts.Diagnostics.Exported_type_alias_0_has_or_is_using_private_name_1,\n          errorNode: node.type,\n          typeName: node.name\n        };\n      }\n    }\n\n    function writeEnumDeclaration(node) {\n      emitJsDocComments(node);\n      emitModuleElementDeclarationFlags(node);\n\n      if (ts.isConst(node)) {\n        write(\"const \");\n      }\n\n      write(\"enum \");\n      writeTextOfNode(currentText, node.name);\n      write(\" {\");\n      writeLine();\n      increaseIndent();\n      emitLines(node.members);\n      decreaseIndent();\n      write(\"}\");\n      writeLine();\n    }\n\n    function emitEnumMemberDeclaration(node) {\n      emitJsDocComments(node);\n      writeTextOfNode(currentText, node.name);\n      var enumMemberValue = resolver.getConstantValue(node);\n\n      if (enumMemberValue !== undefined) {\n        write(\" = \");\n        write(enumMemberValue.toString());\n      }\n\n      write(\",\");\n      writeLine();\n    }\n\n    function isPrivateMethodTypeParameter(node) {\n      return node.parent.kind === 144\n      /* MethodDeclaration */\n      && node.parent.flags & 16\n      /* Private */\n      ;\n    }\n\n    function emitTypeParameters(typeParameters) {\n      function emitTypeParameter(node) {\n        increaseIndent();\n        emitJsDocComments(node);\n        decreaseIndent();\n        writeTextOfNode(currentText, node.name); // If there is constraint present and this is not a type parameter of the private method emit the constraint\n\n        if (node.constraint && !isPrivateMethodTypeParameter(node)) {\n          write(\" extends \");\n\n          if (node.parent.kind === 153\n          /* FunctionType */\n          || node.parent.kind === 154\n          /* ConstructorType */\n          || node.parent.parent && node.parent.parent.kind === 156\n          /* TypeLiteral */\n          ) {\n            ts.Debug.assert(node.parent.kind === 144\n            /* MethodDeclaration */\n            || node.parent.kind === 143\n            /* MethodSignature */\n            || node.parent.kind === 153\n            /* FunctionType */\n            || node.parent.kind === 154\n            /* ConstructorType */\n            || node.parent.kind === 148\n            /* CallSignature */\n            || node.parent.kind === 149\n            /* ConstructSignature */\n            );\n            emitType(node.constraint);\n          } else {\n            emitTypeWithNewGetSymbolAccessibilityDiagnostic(node.constraint, getTypeParameterConstraintVisibilityError);\n          }\n        }\n\n        function getTypeParameterConstraintVisibilityError(symbolAccesibilityResult) {\n          // Type parameter constraints are named by user so we should always be able to name it\n          var diagnosticMessage;\n\n          switch (node.parent.kind) {\n            case 217\n            /* ClassDeclaration */\n            :\n              diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_class_has_or_is_using_private_name_1;\n              break;\n\n            case 218\n            /* InterfaceDeclaration */\n            :\n              diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_interface_has_or_is_using_private_name_1;\n              break;\n\n            case 149\n            /* ConstructSignature */\n            :\n              diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1;\n              break;\n\n            case 148\n            /* CallSignature */\n            :\n              diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1;\n              break;\n\n            case 144\n            /* MethodDeclaration */\n            :\n            case 143\n            /* MethodSignature */\n            :\n              if (node.parent.flags & 64\n              /* Static */\n              ) {\n                  diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1;\n                } else if (node.parent.parent.kind === 217\n              /* ClassDeclaration */\n              ) {\n                  diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1;\n                } else {\n                diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1;\n              }\n\n              break;\n\n            case 216\n            /* FunctionDeclaration */\n            :\n              diagnosticMessage = ts.Diagnostics.Type_parameter_0_of_exported_function_has_or_is_using_private_name_1;\n              break;\n\n            default:\n              ts.Debug.fail(\"This is unknown parent for type parameter: \" + node.parent.kind);\n          }\n\n          return {\n            diagnosticMessage: diagnosticMessage,\n            errorNode: node,\n            typeName: node.name\n          };\n        }\n      }\n\n      if (typeParameters) {\n        write(\"<\");\n        emitCommaList(typeParameters, emitTypeParameter);\n        write(\">\");\n      }\n    }\n\n    function emitHeritageClause(typeReferences, isImplementsList) {\n      if (typeReferences) {\n        write(isImplementsList ? \" implements \" : \" extends \");\n        emitCommaList(typeReferences, emitTypeOfTypeReference);\n      }\n\n      function emitTypeOfTypeReference(node) {\n        if (ts.isSupportedExpressionWithTypeArguments(node)) {\n          emitTypeWithNewGetSymbolAccessibilityDiagnostic(node, getHeritageClauseVisibilityError);\n        } else if (!isImplementsList && node.expression.kind === 93\n        /* NullKeyword */\n        ) {\n            write(\"null\");\n          }\n\n        function getHeritageClauseVisibilityError(symbolAccesibilityResult) {\n          var diagnosticMessage; // Heritage clause is written by user so it can always be named\n\n          if (node.parent.parent.kind === 217\n          /* ClassDeclaration */\n          ) {\n              // Class or Interface implemented/extended is inaccessible\n              diagnosticMessage = isImplementsList ? ts.Diagnostics.Implements_clause_of_exported_class_0_has_or_is_using_private_name_1 : ts.Diagnostics.Extends_clause_of_exported_class_0_has_or_is_using_private_name_1;\n            } else {\n            // interface is inaccessible\n            diagnosticMessage = ts.Diagnostics.Extends_clause_of_exported_interface_0_has_or_is_using_private_name_1;\n          }\n\n          return {\n            diagnosticMessage: diagnosticMessage,\n            errorNode: node,\n            typeName: node.parent.parent.name\n          };\n        }\n      }\n    }\n\n    function writeClassDeclaration(node) {\n      function emitParameterProperties(constructorDeclaration) {\n        if (constructorDeclaration) {\n          ts.forEach(constructorDeclaration.parameters, function (param) {\n            if (param.flags & 56\n            /* AccessibilityModifier */\n            ) {\n                emitPropertyDeclaration(param);\n              }\n          });\n        }\n      }\n\n      emitJsDocComments(node);\n      emitModuleElementDeclarationFlags(node);\n\n      if (node.flags & 128\n      /* Abstract */\n      ) {\n          write(\"abstract \");\n        }\n\n      write(\"class \");\n      writeTextOfNode(currentText, node.name);\n      var prevEnclosingDeclaration = enclosingDeclaration;\n      enclosingDeclaration = node;\n      emitTypeParameters(node.typeParameters);\n      var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);\n\n      if (baseTypeNode) {\n        emitHeritageClause([baseTypeNode],\n        /*isImplementsList*/\n        false);\n      }\n\n      emitHeritageClause(ts.getClassImplementsHeritageClauseElements(node),\n      /*isImplementsList*/\n      true);\n      write(\" {\");\n      writeLine();\n      increaseIndent();\n      emitParameterProperties(ts.getFirstConstructorWithBody(node));\n      emitLines(node.members);\n      decreaseIndent();\n      write(\"}\");\n      writeLine();\n      enclosingDeclaration = prevEnclosingDeclaration;\n    }\n\n    function writeInterfaceDeclaration(node) {\n      emitJsDocComments(node);\n      emitModuleElementDeclarationFlags(node);\n      write(\"interface \");\n      writeTextOfNode(currentText, node.name);\n      var prevEnclosingDeclaration = enclosingDeclaration;\n      enclosingDeclaration = node;\n      emitTypeParameters(node.typeParameters);\n      emitHeritageClause(ts.getInterfaceBaseTypeNodes(node),\n      /*isImplementsList*/\n      false);\n      write(\" {\");\n      writeLine();\n      increaseIndent();\n      emitLines(node.members);\n      decreaseIndent();\n      write(\"}\");\n      writeLine();\n      enclosingDeclaration = prevEnclosingDeclaration;\n    }\n\n    function emitPropertyDeclaration(node) {\n      if (ts.hasDynamicName(node)) {\n        return;\n      }\n\n      emitJsDocComments(node);\n      emitClassMemberDeclarationFlags(node);\n      emitVariableDeclaration(node);\n      write(\";\");\n      writeLine();\n    }\n\n    function emitVariableDeclaration(node) {\n      // If we are emitting property it isn't moduleElement and hence we already know it needs to be emitted\n      // so there is no check needed to see if declaration is visible\n      if (node.kind !== 214\n      /* VariableDeclaration */\n      || resolver.isDeclarationVisible(node)) {\n        if (ts.isBindingPattern(node.name)) {\n          emitBindingPattern(node.name);\n        } else {\n          // If this node is a computed name, it can only be a symbol, because we've already skipped\n          // it if it's not a well known symbol. In that case, the text of the name will be exactly\n          // what we want, namely the name expression enclosed in brackets.\n          writeTextOfNode(currentText, node.name); // If optional property emit ?\n\n          if ((node.kind === 142\n          /* PropertyDeclaration */\n          || node.kind === 141\n          /* PropertySignature */\n          ) && ts.hasQuestionToken(node)) {\n            write(\"?\");\n          }\n\n          if ((node.kind === 142\n          /* PropertyDeclaration */\n          || node.kind === 141\n          /* PropertySignature */\n          ) && node.parent.kind === 156\n          /* TypeLiteral */\n          ) {\n              emitTypeOfVariableDeclarationFromTypeLiteral(node);\n            } else if (!(node.flags & 16\n          /* Private */\n          )) {\n            writeTypeOfDeclaration(node, node.type, getVariableDeclarationTypeVisibilityError);\n          }\n        }\n      }\n\n      function getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult) {\n        if (node.kind === 214\n        /* VariableDeclaration */\n        ) {\n            return symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n            /* CannotBeNamed */\n            ? ts.Diagnostics.Exported_variable_0_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Exported_variable_0_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Exported_variable_0_has_or_is_using_private_name_1;\n          } else if (node.kind === 142\n        /* PropertyDeclaration */\n        || node.kind === 141\n        /* PropertySignature */\n        ) {\n            // TODO(jfreeman): Deal with computed properties in error reporting.\n            if (node.flags & 64\n            /* Static */\n            ) {\n                return symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n                /* CannotBeNamed */\n                ? ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Public_static_property_0_of_exported_class_has_or_is_using_private_name_1;\n              } else if (node.parent.kind === 217\n            /* ClassDeclaration */\n            ) {\n                return symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n                /* CannotBeNamed */\n                ? ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Public_property_0_of_exported_class_has_or_is_using_private_name_1;\n              } else {\n              // Interfaces cannot have types that cannot be named\n              return symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Property_0_of_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Property_0_of_exported_interface_has_or_is_using_private_name_1;\n            }\n          }\n      }\n\n      function getVariableDeclarationTypeVisibilityError(symbolAccesibilityResult) {\n        var diagnosticMessage = getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult);\n        return diagnosticMessage !== undefined ? {\n          diagnosticMessage: diagnosticMessage,\n          errorNode: node,\n          typeName: node.name\n        } : undefined;\n      }\n\n      function emitBindingPattern(bindingPattern) {\n        // Only select non-omitted expression from the bindingPattern's elements.\n        // We have to do this to avoid emitting trailing commas.\n        // For example:\n        //      original: var [, c,,] = [ 2,3,4]\n        //      emitted: declare var c: number; // instead of declare var c:number, ;\n        var elements = [];\n\n        for (var _i = 0, _a = bindingPattern.elements; _i < _a.length; _i++) {\n          var element = _a[_i];\n\n          if (element.kind !== 190\n          /* OmittedExpression */\n          ) {\n              elements.push(element);\n            }\n        }\n\n        emitCommaList(elements, emitBindingElement);\n      }\n\n      function emitBindingElement(bindingElement) {\n        function getBindingElementTypeVisibilityError(symbolAccesibilityResult) {\n          var diagnosticMessage = getVariableDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult);\n          return diagnosticMessage !== undefined ? {\n            diagnosticMessage: diagnosticMessage,\n            errorNode: bindingElement,\n            typeName: bindingElement.name\n          } : undefined;\n        }\n\n        if (bindingElement.name) {\n          if (ts.isBindingPattern(bindingElement.name)) {\n            emitBindingPattern(bindingElement.name);\n          } else {\n            writeTextOfNode(currentText, bindingElement.name);\n            writeTypeOfDeclaration(bindingElement,\n            /*type*/\n            undefined, getBindingElementTypeVisibilityError);\n          }\n        }\n      }\n    }\n\n    function emitTypeOfVariableDeclarationFromTypeLiteral(node) {\n      // if this is property of type literal,\n      // or is parameter of method/call/construct/index signature of type literal\n      // emit only if type is specified\n      if (node.type) {\n        write(\": \");\n        emitType(node.type);\n      }\n    }\n\n    function isVariableStatementVisible(node) {\n      return ts.forEach(node.declarationList.declarations, function (varDeclaration) {\n        return resolver.isDeclarationVisible(varDeclaration);\n      });\n    }\n\n    function writeVariableStatement(node) {\n      emitJsDocComments(node);\n      emitModuleElementDeclarationFlags(node);\n\n      if (ts.isLet(node.declarationList)) {\n        write(\"let \");\n      } else if (ts.isConst(node.declarationList)) {\n        write(\"const \");\n      } else {\n        write(\"var \");\n      }\n\n      emitCommaList(node.declarationList.declarations, emitVariableDeclaration, resolver.isDeclarationVisible);\n      write(\";\");\n      writeLine();\n    }\n\n    function emitAccessorDeclaration(node) {\n      if (ts.hasDynamicName(node)) {\n        return;\n      }\n\n      var accessors = ts.getAllAccessorDeclarations(node.parent.members, node);\n      var accessorWithTypeAnnotation;\n\n      if (node === accessors.firstAccessor) {\n        emitJsDocComments(accessors.getAccessor);\n        emitJsDocComments(accessors.setAccessor);\n        emitClassMemberDeclarationFlags(node);\n        writeTextOfNode(currentText, node.name);\n\n        if (!(node.flags & 16\n        /* Private */\n        )) {\n          accessorWithTypeAnnotation = node;\n          var type = getTypeAnnotationFromAccessor(node);\n\n          if (!type) {\n            // couldn't get type for the first accessor, try the another one\n            var anotherAccessor = node.kind === 146\n            /* GetAccessor */\n            ? accessors.setAccessor : accessors.getAccessor;\n            type = getTypeAnnotationFromAccessor(anotherAccessor);\n\n            if (type) {\n              accessorWithTypeAnnotation = anotherAccessor;\n            }\n          }\n\n          writeTypeOfDeclaration(node, type, getAccessorDeclarationTypeVisibilityError);\n        }\n\n        write(\";\");\n        writeLine();\n      }\n\n      function getTypeAnnotationFromAccessor(accessor) {\n        if (accessor) {\n          return accessor.kind === 146\n          /* GetAccessor */\n          ? accessor.type // Getter - return type\n          : accessor.parameters.length > 0 ? accessor.parameters[0].type // Setter parameter type\n          : undefined;\n        }\n      }\n\n      function getAccessorDeclarationTypeVisibilityError(symbolAccesibilityResult) {\n        var diagnosticMessage;\n\n        if (accessorWithTypeAnnotation.kind === 147\n        /* SetAccessor */\n        ) {\n            // Setters have to have type named and cannot infer it so, the type should always be named\n            if (accessorWithTypeAnnotation.parent.flags & 64\n            /* Static */\n            ) {\n                diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_static_property_setter_from_exported_class_has_or_is_using_private_name_1;\n              } else {\n              diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_property_setter_from_exported_class_has_or_is_using_private_name_1;\n            }\n\n            return {\n              diagnosticMessage: diagnosticMessage,\n              errorNode: accessorWithTypeAnnotation.parameters[0],\n              // TODO(jfreeman): Investigate why we are passing node.name instead of node.parameters[0].name\n              typeName: accessorWithTypeAnnotation.name\n            };\n          } else {\n          if (accessorWithTypeAnnotation.flags & 64\n          /* Static */\n          ) {\n              diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n              /* CannotBeNamed */\n              ? ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_static_property_getter_from_exported_class_has_or_is_using_private_name_0;\n            } else {\n            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n            /* CannotBeNamed */\n            ? ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_property_getter_from_exported_class_has_or_is_using_private_name_0;\n          }\n\n          return {\n            diagnosticMessage: diagnosticMessage,\n            errorNode: accessorWithTypeAnnotation.name,\n            typeName: undefined\n          };\n        }\n      }\n    }\n\n    function writeFunctionDeclaration(node) {\n      if (ts.hasDynamicName(node)) {\n        return;\n      } // If we are emitting Method/Constructor it isn't moduleElement and hence already determined to be emitting\n      // so no need to verify if the declaration is visible\n\n\n      if (!resolver.isImplementationOfOverload(node)) {\n        emitJsDocComments(node);\n\n        if (node.kind === 216\n        /* FunctionDeclaration */\n        ) {\n            emitModuleElementDeclarationFlags(node);\n          } else if (node.kind === 144\n        /* MethodDeclaration */\n        ) {\n            emitClassMemberDeclarationFlags(node);\n          }\n\n        if (node.kind === 216\n        /* FunctionDeclaration */\n        ) {\n            write(\"function \");\n            writeTextOfNode(currentText, node.name);\n          } else if (node.kind === 145\n        /* Constructor */\n        ) {\n            write(\"constructor\");\n          } else {\n          writeTextOfNode(currentText, node.name);\n\n          if (ts.hasQuestionToken(node)) {\n            write(\"?\");\n          }\n        }\n\n        emitSignatureDeclaration(node);\n      }\n    }\n\n    function emitSignatureDeclarationWithJsDocComments(node) {\n      emitJsDocComments(node);\n      emitSignatureDeclaration(node);\n    }\n\n    function emitSignatureDeclaration(node) {\n      var prevEnclosingDeclaration = enclosingDeclaration;\n      enclosingDeclaration = node; // Construct signature or constructor type write new Signature\n\n      if (node.kind === 149\n      /* ConstructSignature */\n      || node.kind === 154\n      /* ConstructorType */\n      ) {\n          write(\"new \");\n        }\n\n      emitTypeParameters(node.typeParameters);\n\n      if (node.kind === 150\n      /* IndexSignature */\n      ) {\n          write(\"[\");\n        } else {\n        write(\"(\");\n      } // Parameters\n\n\n      emitCommaList(node.parameters, emitParameterDeclaration);\n\n      if (node.kind === 150\n      /* IndexSignature */\n      ) {\n          write(\"]\");\n        } else {\n        write(\")\");\n      } // If this is not a constructor and is not private, emit the return type\n\n\n      var isFunctionTypeOrConstructorType = node.kind === 153\n      /* FunctionType */\n      || node.kind === 154\n      /* ConstructorType */\n      ;\n\n      if (isFunctionTypeOrConstructorType || node.parent.kind === 156\n      /* TypeLiteral */\n      ) {\n          // Emit type literal signature return type only if specified\n          if (node.type) {\n            write(isFunctionTypeOrConstructorType ? \" => \" : \": \");\n            emitType(node.type);\n          }\n        } else if (node.kind !== 145\n      /* Constructor */\n      && !(node.flags & 16\n      /* Private */\n      )) {\n        writeReturnTypeAtSignature(node, getReturnTypeVisibilityError);\n      }\n\n      enclosingDeclaration = prevEnclosingDeclaration;\n\n      if (!isFunctionTypeOrConstructorType) {\n        write(\";\");\n        writeLine();\n      }\n\n      function getReturnTypeVisibilityError(symbolAccesibilityResult) {\n        var diagnosticMessage;\n\n        switch (node.kind) {\n          case 149\n          /* ConstructSignature */\n          :\n            // Interfaces cannot have return types that cannot be named\n            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_0;\n            break;\n\n          case 148\n          /* CallSignature */\n          :\n            // Interfaces cannot have return types that cannot be named\n            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_call_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_call_signature_from_exported_interface_has_or_is_using_private_name_0;\n            break;\n\n          case 150\n          /* IndexSignature */\n          :\n            // Interfaces cannot have return types that cannot be named\n            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_index_signature_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_index_signature_from_exported_interface_has_or_is_using_private_name_0;\n            break;\n\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            if (node.flags & 64\n            /* Static */\n            ) {\n                diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n                /* CannotBeNamed */\n                ? ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_static_method_from_exported_class_has_or_is_using_private_name_0;\n              } else if (node.parent.kind === 217\n            /* ClassDeclaration */\n            ) {\n                diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n                /* CannotBeNamed */\n                ? ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_public_method_from_exported_class_has_or_is_using_private_name_0;\n              } else {\n              // Interfaces cannot have return types that cannot be named\n              diagnosticMessage = symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Return_type_of_method_from_exported_interface_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_method_from_exported_interface_has_or_is_using_private_name_0;\n            }\n\n            break;\n\n          case 216\n          /* FunctionDeclaration */\n          :\n            diagnosticMessage = symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n            /* CannotBeNamed */\n            ? ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_name_0_from_external_module_1_but_cannot_be_named : ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_name_0_from_private_module_1 : ts.Diagnostics.Return_type_of_exported_function_has_or_is_using_private_name_0;\n            break;\n\n          default:\n            ts.Debug.fail(\"This is unknown kind for signature: \" + node.kind);\n        }\n\n        return {\n          diagnosticMessage: diagnosticMessage,\n          errorNode: node.name || node\n        };\n      }\n    }\n\n    function emitParameterDeclaration(node) {\n      increaseIndent();\n      emitJsDocComments(node);\n\n      if (node.dotDotDotToken) {\n        write(\"...\");\n      }\n\n      if (ts.isBindingPattern(node.name)) {\n        // For bindingPattern, we can't simply writeTextOfNode from the source file\n        // because we want to omit the initializer and using writeTextOfNode will result in initializer get emitted.\n        // Therefore, we will have to recursively emit each element in the bindingPattern.\n        emitBindingPattern(node.name);\n      } else {\n        writeTextOfNode(currentText, node.name);\n      }\n\n      if (resolver.isOptionalParameter(node)) {\n        write(\"?\");\n      }\n\n      decreaseIndent();\n\n      if (node.parent.kind === 153\n      /* FunctionType */\n      || node.parent.kind === 154\n      /* ConstructorType */\n      || node.parent.parent.kind === 156\n      /* TypeLiteral */\n      ) {\n          emitTypeOfVariableDeclarationFromTypeLiteral(node);\n        } else if (!(node.parent.flags & 16\n      /* Private */\n      )) {\n        writeTypeOfDeclaration(node, node.type, getParameterDeclarationTypeVisibilityError);\n      }\n\n      function getParameterDeclarationTypeVisibilityError(symbolAccesibilityResult) {\n        var diagnosticMessage = getParameterDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult);\n        return diagnosticMessage !== undefined ? {\n          diagnosticMessage: diagnosticMessage,\n          errorNode: node,\n          typeName: node.name\n        } : undefined;\n      }\n\n      function getParameterDeclarationTypeVisibilityDiagnosticMessage(symbolAccesibilityResult) {\n        switch (node.parent.kind) {\n          case 145\n          /* Constructor */\n          :\n            return symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n            /* CannotBeNamed */\n            ? ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_constructor_from_exported_class_has_or_is_using_private_name_1;\n\n          case 149\n          /* ConstructSignature */\n          :\n            // Interfaces cannot have parameter types that cannot be named\n            return symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_constructor_signature_from_exported_interface_has_or_is_using_private_name_1;\n\n          case 148\n          /* CallSignature */\n          :\n            // Interfaces cannot have parameter types that cannot be named\n            return symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_call_signature_from_exported_interface_has_or_is_using_private_name_1;\n\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            if (node.parent.flags & 64\n            /* Static */\n            ) {\n                return symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n                /* CannotBeNamed */\n                ? ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_static_method_from_exported_class_has_or_is_using_private_name_1;\n              } else if (node.parent.parent.kind === 217\n            /* ClassDeclaration */\n            ) {\n                return symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n                /* CannotBeNamed */\n                ? ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_public_method_from_exported_class_has_or_is_using_private_name_1;\n              } else {\n              // Interfaces cannot have parameter types that cannot be named\n              return symbolAccesibilityResult.errorModuleName ? ts.Diagnostics.Parameter_0_of_method_from_exported_interface_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_method_from_exported_interface_has_or_is_using_private_name_1;\n            }\n\n          case 216\n          /* FunctionDeclaration */\n          :\n            return symbolAccesibilityResult.errorModuleName ? symbolAccesibilityResult.accessibility === 2\n            /* CannotBeNamed */\n            ? ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_name_1_from_external_module_2_but_cannot_be_named : ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_name_1_from_private_module_2 : ts.Diagnostics.Parameter_0_of_exported_function_has_or_is_using_private_name_1;\n\n          default:\n            ts.Debug.fail(\"This is unknown parent for parameter: \" + node.parent.kind);\n        }\n      }\n\n      function emitBindingPattern(bindingPattern) {\n        // We have to explicitly emit square bracket and bracket because these tokens are not store inside the node.\n        if (bindingPattern.kind === 164\n        /* ObjectBindingPattern */\n        ) {\n            write(\"{\");\n            emitCommaList(bindingPattern.elements, emitBindingElement);\n            write(\"}\");\n          } else if (bindingPattern.kind === 165\n        /* ArrayBindingPattern */\n        ) {\n            write(\"[\");\n            var elements = bindingPattern.elements;\n            emitCommaList(elements, emitBindingElement);\n\n            if (elements && elements.hasTrailingComma) {\n              write(\", \");\n            }\n\n            write(\"]\");\n          }\n      }\n\n      function emitBindingElement(bindingElement) {\n        if (bindingElement.kind === 190\n        /* OmittedExpression */\n        ) {\n            // If bindingElement is an omittedExpression (i.e. containing elision),\n            // we will emit blank space (although this may differ from users' original code,\n            // it allows emitSeparatedList to write separator appropriately)\n            // Example:\n            //      original: function foo([, x, ,]) {}\n            //      emit    : function foo([ , x,  , ]) {}\n            write(\" \");\n          } else if (bindingElement.kind === 166\n        /* BindingElement */\n        ) {\n            if (bindingElement.propertyName) {\n              // bindingElement has propertyName property in the following case:\n              //      { y: [a,b,c] ...} -> bindingPattern will have a property called propertyName for \"y\"\n              // We have to explicitly emit the propertyName before descending into its binding elements.\n              // Example:\n              //      original: function foo({y: [a,b,c]}) {}\n              //      emit    : declare function foo({y: [a, b, c]}: { y: [any, any, any] }) void;\n              writeTextOfNode(currentText, bindingElement.propertyName);\n              write(\": \");\n            }\n\n            if (bindingElement.name) {\n              if (ts.isBindingPattern(bindingElement.name)) {\n                // If it is a nested binding pattern, we will recursively descend into each element and emit each one separately.\n                // In the case of rest element, we will omit rest element.\n                // Example:\n                //      original: function foo([a, [[b]], c] = [1,[[\"string\"]], 3]) {}\n                //      emit    : declare function foo([a, [[b]], c]: [number, [[string]], number]): void;\n                //      original with rest: function foo([a, ...c]) {}\n                //      emit              : declare function foo([a, ...c]): void;\n                emitBindingPattern(bindingElement.name);\n              } else {\n                ts.Debug.assert(bindingElement.name.kind === 69\n                /* Identifier */\n                ); // If the node is just an identifier, we will simply emit the text associated with the node's name\n                // Example:\n                //      original: function foo({y = 10, x}) {}\n                //      emit    : declare function foo({y, x}: {number, any}): void;\n\n                if (bindingElement.dotDotDotToken) {\n                  write(\"...\");\n                }\n\n                writeTextOfNode(currentText, bindingElement.name);\n              }\n            }\n          }\n      }\n    }\n\n    function emitNode(node) {\n      switch (node.kind) {\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n        case 220\n        /* EnumDeclaration */\n        :\n          return emitModuleElement(node, isModuleElementVisible(node));\n\n        case 196\n        /* VariableStatement */\n        :\n          return emitModuleElement(node, isVariableStatementVisible(node));\n\n        case 225\n        /* ImportDeclaration */\n        :\n          // Import declaration without import clause is visible, otherwise it is not visible\n          return emitModuleElement(node,\n          /*isModuleElementVisible*/\n          !node.importClause);\n\n        case 231\n        /* ExportDeclaration */\n        :\n          return emitExportDeclaration(node);\n\n        case 145\n        /* Constructor */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n          return writeFunctionDeclaration(node);\n\n        case 149\n        /* ConstructSignature */\n        :\n        case 148\n        /* CallSignature */\n        :\n        case 150\n        /* IndexSignature */\n        :\n          return emitSignatureDeclarationWithJsDocComments(node);\n\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n          return emitAccessorDeclaration(node);\n\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n          return emitPropertyDeclaration(node);\n\n        case 250\n        /* EnumMember */\n        :\n          return emitEnumMemberDeclaration(node);\n\n        case 230\n        /* ExportAssignment */\n        :\n          return emitExportAssignment(node);\n\n        case 251\n        /* SourceFile */\n        :\n          return emitSourceFile(node);\n      }\n    }\n    /**\n     * Adds the reference to referenced file, returns true if global file reference was emitted\n     * @param referencedFile\n     * @param addBundledFileReference Determines if global file reference corresponding to bundled file should be emitted or not\n     */\n\n\n    function writeReferencePath(referencedFile, addBundledFileReference) {\n      var declFileName;\n      var addedBundledEmitReference = false;\n\n      if (ts.isDeclarationFile(referencedFile)) {\n        // Declaration file, use declaration file name\n        declFileName = referencedFile.fileName;\n      } else {\n        // Get the declaration file path\n        ts.forEachExpectedEmitFile(host, getDeclFileName, referencedFile);\n      }\n\n      if (declFileName) {\n        declFileName = ts.getRelativePathToDirectoryOrUrl(ts.getDirectoryPath(ts.normalizeSlashes(declarationFilePath)), declFileName, host.getCurrentDirectory(), host.getCanonicalFileName,\n        /*isAbsolutePathAnUrl*/\n        false);\n        referencePathsOutput += \"/// <reference path=\\\"\" + declFileName + \"\\\" />\" + newLine;\n      }\n\n      return addedBundledEmitReference;\n\n      function getDeclFileName(emitFileNames, sourceFiles, isBundledEmit) {\n        // Dont add reference path to this file if it is a bundled emit and caller asked not emit bundled file path\n        if (isBundledEmit && !addBundledFileReference) {\n          return;\n        }\n\n        ts.Debug.assert(!!emitFileNames.declarationFilePath || ts.isSourceFileJavaScript(referencedFile), \"Declaration file is not present only for javascript files\");\n        declFileName = emitFileNames.declarationFilePath || emitFileNames.jsFilePath;\n        addedBundledEmitReference = isBundledEmit;\n      }\n    }\n  }\n  /* @internal */\n\n\n  function writeDeclarationFile(declarationFilePath, sourceFiles, isBundledEmit, host, resolver, emitterDiagnostics) {\n    var emitDeclarationResult = emitDeclarations(host, resolver, emitterDiagnostics, declarationFilePath, sourceFiles, isBundledEmit);\n    var emitSkipped = emitDeclarationResult.reportedDeclarationError || host.isEmitBlocked(declarationFilePath) || host.getCompilerOptions().noEmit;\n\n    if (!emitSkipped) {\n      var declarationOutput = emitDeclarationResult.referencePathsOutput + getDeclarationOutput(emitDeclarationResult.synchronousDeclarationOutput, emitDeclarationResult.moduleElementDeclarationEmitInfo);\n      ts.writeFile(host, emitterDiagnostics, declarationFilePath, declarationOutput, host.getCompilerOptions().emitBOM);\n    }\n\n    return emitSkipped;\n\n    function getDeclarationOutput(synchronousDeclarationOutput, moduleElementDeclarationEmitInfo) {\n      var appliedSyncOutputPos = 0;\n      var declarationOutput = \"\"; // apply asynchronous additions to the synchronous output\n\n      ts.forEach(moduleElementDeclarationEmitInfo, function (aliasEmitInfo) {\n        if (aliasEmitInfo.asynchronousOutput) {\n          declarationOutput += synchronousDeclarationOutput.substring(appliedSyncOutputPos, aliasEmitInfo.outputPos);\n          declarationOutput += getDeclarationOutput(aliasEmitInfo.asynchronousOutput, aliasEmitInfo.subModuleElementDeclarationEmitInfo);\n          appliedSyncOutputPos = aliasEmitInfo.outputPos;\n        }\n      });\n      declarationOutput += synchronousDeclarationOutput.substring(appliedSyncOutputPos);\n      return declarationOutput;\n    }\n  }\n\n  ts.writeDeclarationFile = writeDeclarationFile;\n})(ts || (ts = {})); /// <reference path=\"checker.ts\"/>\n/// <reference path=\"sourcemap.ts\" />\n/// <reference path=\"declarationEmitter.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  function getResolvedExternalModuleName(host, file) {\n    return file.moduleName || ts.getExternalModuleNameFromPath(host, file.fileName);\n  }\n\n  ts.getResolvedExternalModuleName = getResolvedExternalModuleName;\n\n  function getExternalModuleNameFromDeclaration(host, resolver, declaration) {\n    var file = resolver.getExternalModuleFileFromDeclaration(declaration);\n\n    if (!file || ts.isDeclarationFile(file)) {\n      return undefined;\n    }\n\n    return getResolvedExternalModuleName(host, file);\n  }\n\n  ts.getExternalModuleNameFromDeclaration = getExternalModuleNameFromDeclaration;\n  var Jump;\n\n  (function (Jump) {\n    Jump[Jump[\"Break\"] = 2] = \"Break\";\n    Jump[Jump[\"Continue\"] = 4] = \"Continue\";\n    Jump[Jump[\"Return\"] = 8] = \"Return\";\n  })(Jump || (Jump = {}));\n\n  var entities = {\n    \"quot\": 0x0022,\n    \"amp\": 0x0026,\n    \"apos\": 0x0027,\n    \"lt\": 0x003C,\n    \"gt\": 0x003E,\n    \"nbsp\": 0x00A0,\n    \"iexcl\": 0x00A1,\n    \"cent\": 0x00A2,\n    \"pound\": 0x00A3,\n    \"curren\": 0x00A4,\n    \"yen\": 0x00A5,\n    \"brvbar\": 0x00A6,\n    \"sect\": 0x00A7,\n    \"uml\": 0x00A8,\n    \"copy\": 0x00A9,\n    \"ordf\": 0x00AA,\n    \"laquo\": 0x00AB,\n    \"not\": 0x00AC,\n    \"shy\": 0x00AD,\n    \"reg\": 0x00AE,\n    \"macr\": 0x00AF,\n    \"deg\": 0x00B0,\n    \"plusmn\": 0x00B1,\n    \"sup2\": 0x00B2,\n    \"sup3\": 0x00B3,\n    \"acute\": 0x00B4,\n    \"micro\": 0x00B5,\n    \"para\": 0x00B6,\n    \"middot\": 0x00B7,\n    \"cedil\": 0x00B8,\n    \"sup1\": 0x00B9,\n    \"ordm\": 0x00BA,\n    \"raquo\": 0x00BB,\n    \"frac14\": 0x00BC,\n    \"frac12\": 0x00BD,\n    \"frac34\": 0x00BE,\n    \"iquest\": 0x00BF,\n    \"Agrave\": 0x00C0,\n    \"Aacute\": 0x00C1,\n    \"Acirc\": 0x00C2,\n    \"Atilde\": 0x00C3,\n    \"Auml\": 0x00C4,\n    \"Aring\": 0x00C5,\n    \"AElig\": 0x00C6,\n    \"Ccedil\": 0x00C7,\n    \"Egrave\": 0x00C8,\n    \"Eacute\": 0x00C9,\n    \"Ecirc\": 0x00CA,\n    \"Euml\": 0x00CB,\n    \"Igrave\": 0x00CC,\n    \"Iacute\": 0x00CD,\n    \"Icirc\": 0x00CE,\n    \"Iuml\": 0x00CF,\n    \"ETH\": 0x00D0,\n    \"Ntilde\": 0x00D1,\n    \"Ograve\": 0x00D2,\n    \"Oacute\": 0x00D3,\n    \"Ocirc\": 0x00D4,\n    \"Otilde\": 0x00D5,\n    \"Ouml\": 0x00D6,\n    \"times\": 0x00D7,\n    \"Oslash\": 0x00D8,\n    \"Ugrave\": 0x00D9,\n    \"Uacute\": 0x00DA,\n    \"Ucirc\": 0x00DB,\n    \"Uuml\": 0x00DC,\n    \"Yacute\": 0x00DD,\n    \"THORN\": 0x00DE,\n    \"szlig\": 0x00DF,\n    \"agrave\": 0x00E0,\n    \"aacute\": 0x00E1,\n    \"acirc\": 0x00E2,\n    \"atilde\": 0x00E3,\n    \"auml\": 0x00E4,\n    \"aring\": 0x00E5,\n    \"aelig\": 0x00E6,\n    \"ccedil\": 0x00E7,\n    \"egrave\": 0x00E8,\n    \"eacute\": 0x00E9,\n    \"ecirc\": 0x00EA,\n    \"euml\": 0x00EB,\n    \"igrave\": 0x00EC,\n    \"iacute\": 0x00ED,\n    \"icirc\": 0x00EE,\n    \"iuml\": 0x00EF,\n    \"eth\": 0x00F0,\n    \"ntilde\": 0x00F1,\n    \"ograve\": 0x00F2,\n    \"oacute\": 0x00F3,\n    \"ocirc\": 0x00F4,\n    \"otilde\": 0x00F5,\n    \"ouml\": 0x00F6,\n    \"divide\": 0x00F7,\n    \"oslash\": 0x00F8,\n    \"ugrave\": 0x00F9,\n    \"uacute\": 0x00FA,\n    \"ucirc\": 0x00FB,\n    \"uuml\": 0x00FC,\n    \"yacute\": 0x00FD,\n    \"thorn\": 0x00FE,\n    \"yuml\": 0x00FF,\n    \"OElig\": 0x0152,\n    \"oelig\": 0x0153,\n    \"Scaron\": 0x0160,\n    \"scaron\": 0x0161,\n    \"Yuml\": 0x0178,\n    \"fnof\": 0x0192,\n    \"circ\": 0x02C6,\n    \"tilde\": 0x02DC,\n    \"Alpha\": 0x0391,\n    \"Beta\": 0x0392,\n    \"Gamma\": 0x0393,\n    \"Delta\": 0x0394,\n    \"Epsilon\": 0x0395,\n    \"Zeta\": 0x0396,\n    \"Eta\": 0x0397,\n    \"Theta\": 0x0398,\n    \"Iota\": 0x0399,\n    \"Kappa\": 0x039A,\n    \"Lambda\": 0x039B,\n    \"Mu\": 0x039C,\n    \"Nu\": 0x039D,\n    \"Xi\": 0x039E,\n    \"Omicron\": 0x039F,\n    \"Pi\": 0x03A0,\n    \"Rho\": 0x03A1,\n    \"Sigma\": 0x03A3,\n    \"Tau\": 0x03A4,\n    \"Upsilon\": 0x03A5,\n    \"Phi\": 0x03A6,\n    \"Chi\": 0x03A7,\n    \"Psi\": 0x03A8,\n    \"Omega\": 0x03A9,\n    \"alpha\": 0x03B1,\n    \"beta\": 0x03B2,\n    \"gamma\": 0x03B3,\n    \"delta\": 0x03B4,\n    \"epsilon\": 0x03B5,\n    \"zeta\": 0x03B6,\n    \"eta\": 0x03B7,\n    \"theta\": 0x03B8,\n    \"iota\": 0x03B9,\n    \"kappa\": 0x03BA,\n    \"lambda\": 0x03BB,\n    \"mu\": 0x03BC,\n    \"nu\": 0x03BD,\n    \"xi\": 0x03BE,\n    \"omicron\": 0x03BF,\n    \"pi\": 0x03C0,\n    \"rho\": 0x03C1,\n    \"sigmaf\": 0x03C2,\n    \"sigma\": 0x03C3,\n    \"tau\": 0x03C4,\n    \"upsilon\": 0x03C5,\n    \"phi\": 0x03C6,\n    \"chi\": 0x03C7,\n    \"psi\": 0x03C8,\n    \"omega\": 0x03C9,\n    \"thetasym\": 0x03D1,\n    \"upsih\": 0x03D2,\n    \"piv\": 0x03D6,\n    \"ensp\": 0x2002,\n    \"emsp\": 0x2003,\n    \"thinsp\": 0x2009,\n    \"zwnj\": 0x200C,\n    \"zwj\": 0x200D,\n    \"lrm\": 0x200E,\n    \"rlm\": 0x200F,\n    \"ndash\": 0x2013,\n    \"mdash\": 0x2014,\n    \"lsquo\": 0x2018,\n    \"rsquo\": 0x2019,\n    \"sbquo\": 0x201A,\n    \"ldquo\": 0x201C,\n    \"rdquo\": 0x201D,\n    \"bdquo\": 0x201E,\n    \"dagger\": 0x2020,\n    \"Dagger\": 0x2021,\n    \"bull\": 0x2022,\n    \"hellip\": 0x2026,\n    \"permil\": 0x2030,\n    \"prime\": 0x2032,\n    \"Prime\": 0x2033,\n    \"lsaquo\": 0x2039,\n    \"rsaquo\": 0x203A,\n    \"oline\": 0x203E,\n    \"frasl\": 0x2044,\n    \"euro\": 0x20AC,\n    \"image\": 0x2111,\n    \"weierp\": 0x2118,\n    \"real\": 0x211C,\n    \"trade\": 0x2122,\n    \"alefsym\": 0x2135,\n    \"larr\": 0x2190,\n    \"uarr\": 0x2191,\n    \"rarr\": 0x2192,\n    \"darr\": 0x2193,\n    \"harr\": 0x2194,\n    \"crarr\": 0x21B5,\n    \"lArr\": 0x21D0,\n    \"uArr\": 0x21D1,\n    \"rArr\": 0x21D2,\n    \"dArr\": 0x21D3,\n    \"hArr\": 0x21D4,\n    \"forall\": 0x2200,\n    \"part\": 0x2202,\n    \"exist\": 0x2203,\n    \"empty\": 0x2205,\n    \"nabla\": 0x2207,\n    \"isin\": 0x2208,\n    \"notin\": 0x2209,\n    \"ni\": 0x220B,\n    \"prod\": 0x220F,\n    \"sum\": 0x2211,\n    \"minus\": 0x2212,\n    \"lowast\": 0x2217,\n    \"radic\": 0x221A,\n    \"prop\": 0x221D,\n    \"infin\": 0x221E,\n    \"ang\": 0x2220,\n    \"and\": 0x2227,\n    \"or\": 0x2228,\n    \"cap\": 0x2229,\n    \"cup\": 0x222A,\n    \"int\": 0x222B,\n    \"there4\": 0x2234,\n    \"sim\": 0x223C,\n    \"cong\": 0x2245,\n    \"asymp\": 0x2248,\n    \"ne\": 0x2260,\n    \"equiv\": 0x2261,\n    \"le\": 0x2264,\n    \"ge\": 0x2265,\n    \"sub\": 0x2282,\n    \"sup\": 0x2283,\n    \"nsub\": 0x2284,\n    \"sube\": 0x2286,\n    \"supe\": 0x2287,\n    \"oplus\": 0x2295,\n    \"otimes\": 0x2297,\n    \"perp\": 0x22A5,\n    \"sdot\": 0x22C5,\n    \"lceil\": 0x2308,\n    \"rceil\": 0x2309,\n    \"lfloor\": 0x230A,\n    \"rfloor\": 0x230B,\n    \"lang\": 0x2329,\n    \"rang\": 0x232A,\n    \"loz\": 0x25CA,\n    \"spades\": 0x2660,\n    \"clubs\": 0x2663,\n    \"hearts\": 0x2665,\n    \"diams\": 0x2666\n  }; // Flags enum to track count of temp variables and a few dedicated names\n\n  var TempFlags;\n\n  (function (TempFlags) {\n    TempFlags[TempFlags[\"Auto\"] = 0] = \"Auto\";\n    TempFlags[TempFlags[\"CountMask\"] = 268435455] = \"CountMask\";\n    TempFlags[TempFlags[\"_i\"] = 268435456] = \"_i\";\n  })(TempFlags || (TempFlags = {}));\n\n  var CopyDirection;\n\n  (function (CopyDirection) {\n    CopyDirection[CopyDirection[\"ToOriginal\"] = 0] = \"ToOriginal\";\n    CopyDirection[CopyDirection[\"ToOutParameter\"] = 1] = \"ToOutParameter\";\n  })(CopyDirection || (CopyDirection = {})); // targetSourceFile is when users only want one file in entire project to be emitted. This is used in compileOnSave feature\n\n\n  function emitFiles(resolver, host, targetSourceFile) {\n    // emit output for the __extends helper function\n    var extendsHelper = \"\\nvar __extends = (this && this.__extends) || function (d, b) {\\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\\n    function __() { this.constructor = d; }\\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\\n};\";\n    var assignHelper = \"\\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\\n        s = arguments[i];\\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\\n            t[p] = s[p];\\n    }\\n    return t;\\n};\"; // emit output for the __decorate helper function\n\n    var decorateHelper = \"\\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\\n    if (typeof Reflect === \\\"object\\\" && typeof Reflect.decorate === \\\"function\\\") r = Reflect.decorate(decorators, target, key, desc);\\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\\n};\"; // emit output for the __metadata helper function\n\n    var metadataHelper = \"\\nvar __metadata = (this && this.__metadata) || function (k, v) {\\n    if (typeof Reflect === \\\"object\\\" && typeof Reflect.metadata === \\\"function\\\") return Reflect.metadata(k, v);\\n};\"; // emit output for the __param helper function\n\n    var paramHelper = \"\\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\\n    return function (target, key) { decorator(target, key, paramIndex); }\\n};\";\n    var awaiterHelper = \"\\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\\n    return new (P || (P = Promise))(function (resolve, reject) {\\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\\n        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }\\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\\n        step((generator = generator.apply(thisArg, _arguments)).next());\\n    });\\n};\";\n    var compilerOptions = host.getCompilerOptions();\n    var languageVersion = ts.getEmitScriptTarget(compilerOptions);\n    var modulekind = ts.getEmitModuleKind(compilerOptions);\n    var sourceMapDataList = compilerOptions.sourceMap || compilerOptions.inlineSourceMap ? [] : undefined;\n    var emitterDiagnostics = ts.createDiagnosticCollection();\n    var emitSkipped = false;\n    var newLine = host.getNewLine();\n    var emitJavaScript = createFileEmitter();\n    ts.forEachExpectedEmitFile(host, emitFile, targetSourceFile);\n    return {\n      emitSkipped: emitSkipped,\n      diagnostics: emitterDiagnostics.getDiagnostics(),\n      sourceMaps: sourceMapDataList\n    };\n\n    function isUniqueLocalName(name, container) {\n      for (var node = container; ts.isNodeDescendentOf(node, container); node = node.nextContainer) {\n        if (node.locals && ts.hasProperty(node.locals, name)) {\n          // We conservatively include alias symbols to cover cases where they're emitted as locals\n          if (node.locals[name].flags & (107455\n          /* Value */\n          | 1048576\n          /* ExportValue */\n          | 8388608\n          /* Alias */\n          )) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    function setLabeledJump(state, isBreak, labelText, labelMarker) {\n      if (isBreak) {\n        if (!state.labeledNonLocalBreaks) {\n          state.labeledNonLocalBreaks = {};\n        }\n\n        state.labeledNonLocalBreaks[labelText] = labelMarker;\n      } else {\n        if (!state.labeledNonLocalContinues) {\n          state.labeledNonLocalContinues = {};\n        }\n\n        state.labeledNonLocalContinues[labelText] = labelMarker;\n      }\n    }\n\n    function hoistVariableDeclarationFromLoop(state, declaration) {\n      if (!state.hoistedLocalVariables) {\n        state.hoistedLocalVariables = [];\n      }\n\n      visit(declaration.name);\n\n      function visit(node) {\n        if (node.kind === 69\n        /* Identifier */\n        ) {\n            state.hoistedLocalVariables.push(node);\n          } else {\n          for (var _a = 0, _b = node.elements; _a < _b.length; _a++) {\n            var element = _b[_a];\n            visit(element.name);\n          }\n        }\n      }\n    }\n\n    function createFileEmitter() {\n      var writer = ts.createTextWriter(newLine);\n      var write = writer.write,\n          writeTextOfNode = writer.writeTextOfNode,\n          writeLine = writer.writeLine,\n          increaseIndent = writer.increaseIndent,\n          decreaseIndent = writer.decreaseIndent;\n      var sourceMap = compilerOptions.sourceMap || compilerOptions.inlineSourceMap ? ts.createSourceMapWriter(host, writer) : ts.getNullSourceMapWriter();\n      var setSourceFile = sourceMap.setSourceFile,\n          emitStart = sourceMap.emitStart,\n          emitEnd = sourceMap.emitEnd,\n          emitPos = sourceMap.emitPos;\n      var currentSourceFile;\n      var currentText;\n      var currentLineMap;\n      var currentFileIdentifiers;\n      var renamedDependencies;\n      var isEs6Module;\n      var isCurrentFileExternalModule; // name of an exporter function if file is a System external module\n      // System.register([...], function (<exporter>) {...})\n      // exporting in System modules looks like:\n      // export var x; ... x = 1\n      // =>\n      // var x;... exporter(\"x\", x = 1)\n\n      var exportFunctionForFile;\n      var contextObjectForFile;\n      var generatedNameSet;\n      var nodeToGeneratedName;\n      var computedPropertyNamesToGeneratedNames;\n      var decoratedClassAliases;\n      var convertedLoopState;\n      var extendsEmitted;\n      var assignEmitted;\n      var decorateEmitted;\n      var paramEmitted;\n      var awaiterEmitted;\n      var tempFlags = 0;\n      var tempVariables;\n      var tempParameters;\n      var externalImports;\n      var exportSpecifiers;\n      var exportEquals;\n      var hasExportStarsToExportValues;\n      var detachedCommentsInfo;\n      /** Sourcemap data that will get encoded */\n\n      var sourceMapData;\n      /** Is the file being emitted into its own file */\n\n      var isOwnFileEmit;\n      /** If removeComments is true, no leading-comments needed to be emitted **/\n\n      var emitLeadingCommentsOfPosition = compilerOptions.removeComments ? function (pos) {} : emitLeadingCommentsOfPositionWorker;\n      var setSourceMapWriterEmit = compilerOptions.sourceMap || compilerOptions.inlineSourceMap ? changeSourceMapEmit : function (writer) {};\n      var moduleEmitDelegates = (_a = {}, _a[5\n      /* ES6 */\n      ] = emitES6Module, _a[2\n      /* AMD */\n      ] = emitAMDModule, _a[4\n      /* System */\n      ] = emitSystemModule, _a[3\n      /* UMD */\n      ] = emitUMDModule, _a[1\n      /* CommonJS */\n      ] = emitCommonJSModule, _a);\n      var bundleEmitDelegates = (_b = {}, _b[5\n      /* ES6 */\n      ] = function () {}, _b[2\n      /* AMD */\n      ] = emitAMDModule, _b[4\n      /* System */\n      ] = emitSystemModule, _b[3\n      /* UMD */\n      ] = function () {}, _b[1\n      /* CommonJS */\n      ] = function () {}, _b);\n      return doEmit;\n\n      function doEmit(jsFilePath, sourceMapFilePath, sourceFiles, isBundledEmit) {\n        sourceMap.initialize(jsFilePath, sourceMapFilePath, sourceFiles, isBundledEmit);\n        generatedNameSet = {};\n        nodeToGeneratedName = [];\n        decoratedClassAliases = [];\n        isOwnFileEmit = !isBundledEmit; // Emit helpers from all the files\n\n        if (isBundledEmit && modulekind) {\n          ts.forEach(sourceFiles, emitEmitHelpers);\n        } // Do not call emit directly. It does not set the currentSourceFile.\n\n\n        ts.forEach(sourceFiles, emitSourceFile);\n        writeLine();\n        var sourceMappingURL = sourceMap.getSourceMappingURL();\n\n        if (sourceMappingURL) {\n          write(\"//# sourceMappingURL=\" + sourceMappingURL);\n        }\n\n        writeEmittedFiles(writer.getText(), jsFilePath, sourceMapFilePath,\n        /*writeByteOrderMark*/\n        compilerOptions.emitBOM); // reset the state\n\n        sourceMap.reset();\n        writer.reset();\n        currentSourceFile = undefined;\n        currentText = undefined;\n        currentLineMap = undefined;\n        exportFunctionForFile = undefined;\n        contextObjectForFile = undefined;\n        generatedNameSet = undefined;\n        nodeToGeneratedName = undefined;\n        decoratedClassAliases = undefined;\n        computedPropertyNamesToGeneratedNames = undefined;\n        convertedLoopState = undefined;\n        extendsEmitted = false;\n        decorateEmitted = false;\n        paramEmitted = false;\n        awaiterEmitted = false;\n        assignEmitted = false;\n        tempFlags = 0;\n        tempVariables = undefined;\n        tempParameters = undefined;\n        externalImports = undefined;\n        exportSpecifiers = undefined;\n        exportEquals = undefined;\n        hasExportStarsToExportValues = undefined;\n        detachedCommentsInfo = undefined;\n        sourceMapData = undefined;\n        isEs6Module = false;\n        renamedDependencies = undefined;\n        isCurrentFileExternalModule = false;\n      }\n\n      function emitSourceFile(sourceFile) {\n        currentSourceFile = sourceFile;\n        currentText = sourceFile.text;\n        currentLineMap = ts.getLineStarts(sourceFile);\n        exportFunctionForFile = undefined;\n        contextObjectForFile = undefined;\n        isEs6Module = sourceFile.symbol && sourceFile.symbol.exports && !!sourceFile.symbol.exports[\"___esModule\"];\n        renamedDependencies = sourceFile.renamedDependencies;\n        currentFileIdentifiers = sourceFile.identifiers;\n        isCurrentFileExternalModule = ts.isExternalModule(sourceFile);\n        setSourceFile(sourceFile);\n        emitNodeWithCommentsAndWithoutSourcemap(sourceFile);\n      }\n\n      function isUniqueName(name) {\n        return !resolver.hasGlobalName(name) && !ts.hasProperty(currentFileIdentifiers, name) && !ts.hasProperty(generatedNameSet, name);\n      } // Return the next available name in the pattern _a ... _z, _0, _1, ...\n      // TempFlags._i or TempFlags._n may be used to express a preference for that dedicated name.\n      // Note that names generated by makeTempVariableName and makeUniqueName will never conflict.\n\n\n      function makeTempVariableName(flags) {\n        if (flags && !(tempFlags & flags)) {\n          var name_22 = flags === 268435456\n          /* _i */\n          ? \"_i\" : \"_n\";\n\n          if (isUniqueName(name_22)) {\n            tempFlags |= flags;\n            return name_22;\n          }\n        }\n\n        while (true) {\n          var count = tempFlags & 268435455\n          /* CountMask */\n          ;\n          tempFlags++; // Skip over 'i' and 'n'\n\n          if (count !== 8 && count !== 13) {\n            var name_23 = count < 26 ? \"_\" + String.fromCharCode(97\n            /* a */\n            + count) : \"_\" + (count - 26);\n\n            if (isUniqueName(name_23)) {\n              return name_23;\n            }\n          }\n        }\n      } // Generate a name that is unique within the current file and doesn't conflict with any names\n      // in global scope. The name is formed by adding an '_n' suffix to the specified base name,\n      // where n is a positive integer. Note that names generated by makeTempVariableName and\n      // makeUniqueName are guaranteed to never conflict.\n\n\n      function makeUniqueName(baseName) {\n        // Find the first unique 'name_n', where n is a positive number\n        if (baseName.charCodeAt(baseName.length - 1) !== 95\n        /* _ */\n        ) {\n            baseName += \"_\";\n          }\n\n        var i = 1;\n\n        while (true) {\n          var generatedName = baseName + i;\n\n          if (isUniqueName(generatedName)) {\n            return generatedNameSet[generatedName] = generatedName;\n          }\n\n          i++;\n        }\n      }\n\n      function generateNameForModuleOrEnum(node) {\n        var name = node.name.text; // Use module/enum name itself if it is unique, otherwise make a unique variation\n\n        return isUniqueLocalName(name, node) ? name : makeUniqueName(name);\n      }\n\n      function generateNameForImportOrExportDeclaration(node) {\n        var expr = ts.getExternalModuleName(node);\n        var baseName = expr.kind === 9\n        /* StringLiteral */\n        ? ts.escapeIdentifier(ts.makeIdentifierFromModuleName(expr.text)) : \"module\";\n        return makeUniqueName(baseName);\n      }\n\n      function generateNameForExportDefault() {\n        return makeUniqueName(\"default\");\n      }\n\n      function generateNameForClassExpression() {\n        return makeUniqueName(\"class\");\n      }\n\n      function generateNameForNode(node) {\n        switch (node.kind) {\n          case 69\n          /* Identifier */\n          :\n            return makeUniqueName(node.text);\n\n          case 221\n          /* ModuleDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n            return generateNameForModuleOrEnum(node);\n\n          case 225\n          /* ImportDeclaration */\n          :\n          case 231\n          /* ExportDeclaration */\n          :\n            return generateNameForImportOrExportDeclaration(node);\n\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 230\n          /* ExportAssignment */\n          :\n            return generateNameForExportDefault();\n\n          case 189\n          /* ClassExpression */\n          :\n            return generateNameForClassExpression();\n        }\n      }\n\n      function getGeneratedNameForNode(node) {\n        var id = ts.getNodeId(node);\n        return nodeToGeneratedName[id] || (nodeToGeneratedName[id] = ts.unescapeIdentifier(generateNameForNode(node)));\n      }\n      /** Write emitted output to disk */\n\n\n      function writeEmittedFiles(emitOutput, jsFilePath, sourceMapFilePath, writeByteOrderMark) {\n        if (compilerOptions.sourceMap && !compilerOptions.inlineSourceMap) {\n          ts.writeFile(host, emitterDiagnostics, sourceMapFilePath, sourceMap.getText(),\n          /*writeByteOrderMark*/\n          false);\n        }\n\n        if (sourceMapDataList) {\n          sourceMapDataList.push(sourceMap.getSourceMapData());\n        }\n\n        ts.writeFile(host, emitterDiagnostics, jsFilePath, emitOutput, writeByteOrderMark);\n      } // Create a temporary variable with a unique unused name.\n\n\n      function createTempVariable(flags) {\n        var result = ts.createSynthesizedNode(69\n        /* Identifier */\n        );\n        result.text = makeTempVariableName(flags);\n        return result;\n      }\n\n      function recordTempDeclaration(name) {\n        if (!tempVariables) {\n          tempVariables = [];\n        }\n\n        tempVariables.push(name);\n      }\n\n      function createAndRecordTempVariable(flags) {\n        var temp = createTempVariable(flags);\n        recordTempDeclaration(temp);\n        return temp;\n      }\n\n      function emitTempDeclarations(newLine) {\n        if (tempVariables) {\n          if (newLine) {\n            writeLine();\n          } else {\n            write(\" \");\n          }\n\n          write(\"var \");\n          emitCommaList(tempVariables);\n          write(\";\");\n        }\n      }\n      /** Emit the text for the given token that comes after startPos\n        * This by default writes the text provided with the given tokenKind\n        * but if optional emitFn callback is provided the text is emitted using the callback instead of default text\n        * @param tokenKind the kind of the token to search and emit\n        * @param startPos the position in the source to start searching for the token\n        * @param emitFn if given will be invoked to emit the text instead of actual token emit */\n\n\n      function emitToken(tokenKind, startPos, emitFn) {\n        var tokenStartPos = ts.skipTrivia(currentText, startPos);\n        emitPos(tokenStartPos);\n        var tokenString = ts.tokenToString(tokenKind);\n\n        if (emitFn) {\n          emitFn();\n        } else {\n          write(tokenString);\n        }\n\n        var tokenEndPos = tokenStartPos + tokenString.length;\n        emitPos(tokenEndPos);\n        return tokenEndPos;\n      }\n\n      function emitOptional(prefix, node) {\n        if (node) {\n          write(prefix);\n          emit(node);\n        }\n      }\n\n      function emitParenthesizedIf(node, parenthesized) {\n        if (parenthesized) {\n          write(\"(\");\n        }\n\n        emit(node);\n\n        if (parenthesized) {\n          write(\")\");\n        }\n      }\n\n      function emitLinePreservingList(parent, nodes, allowTrailingComma, spacesBetweenBraces) {\n        ts.Debug.assert(nodes.length > 0);\n        increaseIndent();\n\n        if (nodeStartPositionsAreOnSameLine(parent, nodes[0])) {\n          if (spacesBetweenBraces) {\n            write(\" \");\n          }\n        } else {\n          writeLine();\n        }\n\n        for (var i = 0, n = nodes.length; i < n; i++) {\n          if (i) {\n            if (nodeEndIsOnSameLineAsNodeStart(nodes[i - 1], nodes[i])) {\n              write(\", \");\n            } else {\n              write(\",\");\n              writeLine();\n            }\n          }\n\n          emit(nodes[i]);\n        }\n\n        if (nodes.hasTrailingComma && allowTrailingComma) {\n          write(\",\");\n        }\n\n        decreaseIndent();\n\n        if (nodeEndPositionsAreOnSameLine(parent, ts.lastOrUndefined(nodes))) {\n          if (spacesBetweenBraces) {\n            write(\" \");\n          }\n        } else {\n          writeLine();\n        }\n      }\n\n      function emitList(nodes, start, count, multiLine, trailingComma, leadingComma, noTrailingNewLine, emitNode) {\n        if (!emitNode) {\n          emitNode = emit;\n        }\n\n        for (var i = 0; i < count; i++) {\n          if (multiLine) {\n            if (i || leadingComma) {\n              write(\",\");\n            }\n\n            writeLine();\n          } else {\n            if (i || leadingComma) {\n              write(\", \");\n            }\n          }\n\n          var node = nodes[start + i]; // This emitting is to make sure we emit following comment properly\n          //   ...(x, /*comment1*/ y)...\n          //         ^ => node.pos\n          // \"comment1\" is not considered leading comment for \"y\" but rather\n          // considered as trailing comment of the previous node.\n\n          emitTrailingCommentsOfPosition(node.pos);\n          emitNode(node);\n          leadingComma = true;\n        }\n\n        if (trailingComma) {\n          write(\",\");\n        }\n\n        if (multiLine && !noTrailingNewLine) {\n          writeLine();\n        }\n\n        return count;\n      }\n\n      function emitCommaList(nodes) {\n        if (nodes) {\n          emitList(nodes, 0, nodes.length,\n          /*multiLine*/\n          false,\n          /*trailingComma*/\n          false);\n        }\n      }\n\n      function emitLines(nodes) {\n        emitLinesStartingAt(nodes,\n        /*startIndex*/\n        0);\n      }\n\n      function emitLinesStartingAt(nodes, startIndex) {\n        for (var i = startIndex; i < nodes.length; i++) {\n          writeLine();\n          emit(nodes[i]);\n        }\n      }\n\n      function isBinaryOrOctalIntegerLiteral(node, text) {\n        if (node.kind === 8\n        /* NumericLiteral */\n        && text.length > 1) {\n          switch (text.charCodeAt(1)) {\n            case 98\n            /* b */\n            :\n            case 66\n            /* B */\n            :\n            case 111\n            /* o */\n            :\n            case 79\n            /* O */\n            :\n              return true;\n          }\n        }\n\n        return false;\n      }\n\n      function emitLiteral(node) {\n        var text = getLiteralText(node);\n\n        if ((compilerOptions.sourceMap || compilerOptions.inlineSourceMap) && (node.kind === 9\n        /* StringLiteral */\n        || ts.isTemplateLiteralKind(node.kind))) {\n          writer.writeLiteral(text);\n        } else if (languageVersion < 2\n        /* ES6 */\n        && isBinaryOrOctalIntegerLiteral(node, text)) {\n          write(node.text);\n        } else {\n          write(text);\n        }\n      }\n\n      function getLiteralText(node) {\n        // Any template literal or string literal with an extended escape\n        // (e.g. \"\\u{0067}\") will need to be downleveled as a escaped string literal.\n        if (languageVersion < 2\n        /* ES6 */\n        && (ts.isTemplateLiteralKind(node.kind) || node.hasExtendedUnicodeEscape)) {\n          return getQuotedEscapedLiteralText(\"\\\"\", node.text, \"\\\"\");\n        } // If we don't need to downlevel and we can reach the original source text using\n        // the node's parent reference, then simply get the text as it was originally written.\n\n\n        if (node.parent) {\n          return ts.getTextOfNodeFromSourceText(currentText, node);\n        } // If we can't reach the original source text, use the canonical form if it's a number,\n        // or an escaped quoted form of the original text if it's string-like.\n\n\n        switch (node.kind) {\n          case 9\n          /* StringLiteral */\n          :\n            return getQuotedEscapedLiteralText(\"\\\"\", node.text, \"\\\"\");\n\n          case 11\n          /* NoSubstitutionTemplateLiteral */\n          :\n            return getQuotedEscapedLiteralText(\"`\", node.text, \"`\");\n\n          case 12\n          /* TemplateHead */\n          :\n            return getQuotedEscapedLiteralText(\"`\", node.text, \"${\");\n\n          case 13\n          /* TemplateMiddle */\n          :\n            return getQuotedEscapedLiteralText(\"}\", node.text, \"${\");\n\n          case 14\n          /* TemplateTail */\n          :\n            return getQuotedEscapedLiteralText(\"}\", node.text, \"`\");\n\n          case 8\n          /* NumericLiteral */\n          :\n            return node.text;\n        }\n\n        ts.Debug.fail(\"Literal kind '\" + node.kind + \"' not accounted for.\");\n      }\n\n      function getQuotedEscapedLiteralText(leftQuote, text, rightQuote) {\n        return leftQuote + ts.escapeNonAsciiCharacters(ts.escapeString(text)) + rightQuote;\n      }\n\n      function emitDownlevelRawTemplateLiteral(node) {\n        // Find original source text, since we need to emit the raw strings of the tagged template.\n        // The raw strings contain the (escaped) strings of what the user wrote.\n        // Examples: `\\n` is converted to \"\\\\n\", a template string with a newline to \"\\n\".\n        var text = ts.getTextOfNodeFromSourceText(currentText, node); // text contains the original source, it will also contain quotes (\"`\"), dolar signs and braces (\"${\" and \"}\"),\n        // thus we need to remove those characters.\n        // First template piece starts with \"`\", others with \"}\"\n        // Last template piece ends with \"`\", others with \"${\"\n\n        var isLast = node.kind === 11\n        /* NoSubstitutionTemplateLiteral */\n        || node.kind === 14\n        /* TemplateTail */\n        ;\n        text = text.substring(1, text.length - (isLast ? 1 : 2)); // Newline normalization:\n        // ES6 Spec 11.8.6.1 - Static Semantics of TV's and TRV's\n        // <CR><LF> and <CR> LineTerminatorSequences are normalized to <LF> for both TV and TRV.\n\n        text = text.replace(/\\r\\n?/g, \"\\n\");\n        text = ts.escapeString(text);\n        write(\"\\\"\" + text + \"\\\"\");\n      }\n\n      function emitDownlevelTaggedTemplateArray(node, literalEmitter) {\n        write(\"[\");\n\n        if (node.template.kind === 11\n        /* NoSubstitutionTemplateLiteral */\n        ) {\n            literalEmitter(node.template);\n          } else {\n          literalEmitter(node.template.head);\n          ts.forEach(node.template.templateSpans, function (child) {\n            write(\", \");\n            literalEmitter(child.literal);\n          });\n        }\n\n        write(\"]\");\n      }\n\n      function emitDownlevelTaggedTemplate(node) {\n        var tempVariable = createAndRecordTempVariable(0\n        /* Auto */\n        );\n        write(\"(\");\n        emit(tempVariable);\n        write(\" = \");\n        emitDownlevelTaggedTemplateArray(node, emit);\n        write(\", \");\n        emit(tempVariable);\n        write(\".raw = \");\n        emitDownlevelTaggedTemplateArray(node, emitDownlevelRawTemplateLiteral);\n        write(\", \");\n        emitParenthesizedIf(node.tag, needsParenthesisForPropertyAccessOrInvocation(node.tag));\n        write(\"(\");\n        emit(tempVariable); // Now we emit the expressions\n\n        if (node.template.kind === 186\n        /* TemplateExpression */\n        ) {\n            ts.forEach(node.template.templateSpans, function (templateSpan) {\n              write(\", \");\n              var needsParens = templateSpan.expression.kind === 184\n              /* BinaryExpression */\n              && templateSpan.expression.operatorToken.kind === 24\n              /* CommaToken */\n              ;\n              emitParenthesizedIf(templateSpan.expression, needsParens);\n            });\n          }\n\n        write(\"))\");\n      }\n\n      function emitTemplateExpression(node) {\n        // In ES6 mode and above, we can simply emit each portion of a template in order, but in\n        // ES3 & ES5 we must convert the template expression into a series of string concatenations.\n        if (languageVersion >= 2\n        /* ES6 */\n        ) {\n            ts.forEachChild(node, emit);\n            return;\n          }\n\n        var emitOuterParens = ts.isExpression(node.parent) && templateNeedsParens(node, node.parent);\n\n        if (emitOuterParens) {\n          write(\"(\");\n        }\n\n        var headEmitted = false;\n\n        if (shouldEmitTemplateHead()) {\n          emitLiteral(node.head);\n          headEmitted = true;\n        }\n\n        for (var i = 0, n = node.templateSpans.length; i < n; i++) {\n          var templateSpan = node.templateSpans[i]; // Check if the expression has operands and binds its operands less closely than binary '+'.\n          // If it does, we need to wrap the expression in parentheses. Otherwise, something like\n          //    `abc${ 1 << 2 }`\n          // becomes\n          //    \"abc\" + 1 << 2 + \"\"\n          // which is really\n          //    (\"abc\" + 1) << (2 + \"\")\n          // rather than\n          //    \"abc\" + (1 << 2) + \"\"\n\n          var needsParens = templateSpan.expression.kind !== 175\n          /* ParenthesizedExpression */\n          && comparePrecedenceToBinaryPlus(templateSpan.expression) !== 1\n          /* GreaterThan */\n          ;\n\n          if (i > 0 || headEmitted) {\n            // If this is the first span and the head was not emitted, then this templateSpan's\n            // expression will be the first to be emitted. Don't emit the preceding ' + ' in that\n            // case.\n            write(\" + \");\n          }\n\n          emitParenthesizedIf(templateSpan.expression, needsParens); // Only emit if the literal is non-empty.\n          // The binary '+' operator is left-associative, so the first string concatenation\n          // with the head will force the result up to this point to be a string.\n          // Emitting a '+ \"\"' has no semantic effect for middles and tails.\n\n          if (templateSpan.literal.text.length !== 0) {\n            write(\" + \");\n            emitLiteral(templateSpan.literal);\n          }\n        }\n\n        if (emitOuterParens) {\n          write(\")\");\n        }\n\n        function shouldEmitTemplateHead() {\n          // If this expression has an empty head literal and the first template span has a non-empty\n          // literal, then emitting the empty head literal is not necessary.\n          //     `${ foo } and ${ bar }`\n          // can be emitted as\n          //     foo + \" and \" + bar\n          // This is because it is only required that one of the first two operands in the emit\n          // output must be a string literal, so that the other operand and all following operands\n          // are forced into strings.\n          //\n          // If the first template span has an empty literal, then the head must still be emitted.\n          //     `${ foo }${ bar }`\n          // must still be emitted as\n          //     \"\" + foo + bar\n          // There is always atleast one templateSpan in this code path, since\n          // NoSubstitutionTemplateLiterals are directly emitted via emitLiteral()\n          ts.Debug.assert(node.templateSpans.length !== 0);\n          return node.head.text.length !== 0 || node.templateSpans[0].literal.text.length === 0;\n        }\n\n        function templateNeedsParens(template, parent) {\n          switch (parent.kind) {\n            case 171\n            /* CallExpression */\n            :\n            case 172\n            /* NewExpression */\n            :\n              return parent.expression === template;\n\n            case 173\n            /* TaggedTemplateExpression */\n            :\n            case 175\n            /* ParenthesizedExpression */\n            :\n              return false;\n\n            default:\n              return comparePrecedenceToBinaryPlus(parent) !== -1\n              /* LessThan */\n              ;\n          }\n        }\n        /**\n         * Returns whether the expression has lesser, greater,\n         * or equal precedence to the binary '+' operator\n         */\n\n\n        function comparePrecedenceToBinaryPlus(expression) {\n          // All binary expressions have lower precedence than '+' apart from '*', '/', and '%'\n          // which have greater precedence and '-' which has equal precedence.\n          // All unary operators have a higher precedence apart from yield.\n          // Arrow functions and conditionals have a lower precedence,\n          // although we convert the former into regular function expressions in ES5 mode,\n          // and in ES6 mode this function won't get called anyway.\n          //\n          // TODO (drosen): Note that we need to account for the upcoming 'yield' and\n          //                spread ('...') unary operators that are anticipated for ES6.\n          switch (expression.kind) {\n            case 184\n            /* BinaryExpression */\n            :\n              switch (expression.operatorToken.kind) {\n                case 37\n                /* AsteriskToken */\n                :\n                case 39\n                /* SlashToken */\n                :\n                case 40\n                /* PercentToken */\n                :\n                  return 1\n                  /* GreaterThan */\n                  ;\n\n                case 35\n                /* PlusToken */\n                :\n                case 36\n                /* MinusToken */\n                :\n                  return 0\n                  /* EqualTo */\n                  ;\n\n                default:\n                  return -1\n                  /* LessThan */\n                  ;\n              }\n\n            case 187\n            /* YieldExpression */\n            :\n            case 185\n            /* ConditionalExpression */\n            :\n              return -1\n              /* LessThan */\n              ;\n\n            default:\n              return 1\n              /* GreaterThan */\n              ;\n          }\n        }\n      }\n\n      function emitTemplateSpan(span) {\n        emit(span.expression);\n        emit(span.literal);\n      }\n\n      function jsxEmitReact(node) {\n        /// Emit a tag name, which is either '\"div\"' for lower-cased names, or\n        /// 'Div' for upper-cased or dotted names\n        function emitTagName(name) {\n          if (name.kind === 69\n          /* Identifier */\n          && ts.isIntrinsicJsxName(name.text)) {\n            write(\"\\\"\");\n            emit(name);\n            write(\"\\\"\");\n          } else {\n            emit(name);\n          }\n        } /// Emit an attribute name, which is quoted if it needs to be quoted. Because\n        /// these emit into an object literal property name, we don't need to be worried\n        /// about keywords, just non-identifier characters\n\n\n        function emitAttributeName(name) {\n          if (/^[A-Za-z_]\\w*$/.test(name.text)) {\n            emit(name);\n          } else {\n            write(\"\\\"\");\n            emit(name);\n            write(\"\\\"\");\n          }\n        } /// Emit an name/value pair for an attribute (e.g. \"x: 3\")\n\n\n        function emitJsxAttribute(node) {\n          emitAttributeName(node.name);\n          write(\": \");\n\n          if (node.initializer) {\n            emit(node.initializer);\n          } else {\n            write(\"true\");\n          }\n        }\n\n        function emitJsxElement(openingNode, children) {\n          var syntheticReactRef = ts.createSynthesizedNode(69\n          /* Identifier */\n          );\n          syntheticReactRef.text = compilerOptions.reactNamespace ? compilerOptions.reactNamespace : \"React\";\n          syntheticReactRef.parent = openingNode; // Call React.createElement(tag, ...\n\n          emitLeadingComments(openingNode);\n          emitExpressionIdentifier(syntheticReactRef);\n          write(\".createElement(\");\n          emitTagName(openingNode.tagName);\n          write(\", \"); // Attribute list\n\n          if (openingNode.attributes.length === 0) {\n            // When there are no attributes, React wants \"null\"\n            write(\"null\");\n          } else {\n            // Either emit one big object literal (no spread attribs), or\n            // a call to the __assign helper\n            var attrs = openingNode.attributes;\n\n            if (ts.forEach(attrs, function (attr) {\n              return attr.kind === 242\n              /* JsxSpreadAttribute */\n              ;\n            })) {\n              write(\"__assign(\");\n              var haveOpenedObjectLiteral = false;\n\n              for (var i = 0; i < attrs.length; i++) {\n                if (attrs[i].kind === 242\n                /* JsxSpreadAttribute */\n                ) {\n                    // If this is the first argument, we need to emit a {} as the first argument\n                    if (i === 0) {\n                      write(\"{}, \");\n                    }\n\n                    if (haveOpenedObjectLiteral) {\n                      write(\"}\");\n                      haveOpenedObjectLiteral = false;\n                    }\n\n                    if (i > 0) {\n                      write(\", \");\n                    }\n\n                    emit(attrs[i].expression);\n                  } else {\n                  ts.Debug.assert(attrs[i].kind === 241\n                  /* JsxAttribute */\n                  );\n\n                  if (haveOpenedObjectLiteral) {\n                    write(\", \");\n                  } else {\n                    haveOpenedObjectLiteral = true;\n\n                    if (i > 0) {\n                      write(\", \");\n                    }\n\n                    write(\"{\");\n                  }\n\n                  emitJsxAttribute(attrs[i]);\n                }\n              }\n\n              if (haveOpenedObjectLiteral) write(\"}\");\n              write(\")\"); // closing paren to React.__spread(\n            } else {\n              // One object literal with all the attributes in them\n              write(\"{\");\n\n              for (var i = 0, n = attrs.length; i < n; i++) {\n                if (i > 0) {\n                  write(\", \");\n                }\n\n                emitJsxAttribute(attrs[i]);\n              }\n\n              write(\"}\");\n            }\n          } // Children\n\n\n          if (children) {\n            for (var i = 0; i < children.length; i++) {\n              // Don't emit empty expressions\n              if (children[i].kind === 243\n              /* JsxExpression */\n              && !children[i].expression) {\n                continue;\n              } // Don't emit empty strings\n\n\n              if (children[i].kind === 239\n              /* JsxText */\n              ) {\n                  var text = getTextToEmit(children[i]);\n\n                  if (text !== undefined) {\n                    write(\", \\\"\");\n                    write(text);\n                    write(\"\\\"\");\n                  }\n                } else {\n                write(\", \");\n                emit(children[i]);\n              }\n            }\n          } // Closing paren\n\n\n          write(\")\"); // closes \"React.createElement(\"\n\n          emitTrailingComments(openingNode);\n        }\n\n        if (node.kind === 236\n        /* JsxElement */\n        ) {\n            emitJsxElement(node.openingElement, node.children);\n          } else {\n          ts.Debug.assert(node.kind === 237\n          /* JsxSelfClosingElement */\n          );\n          emitJsxElement(node);\n        }\n      }\n\n      function jsxEmitPreserve(node) {\n        function emitJsxAttribute(node) {\n          emit(node.name);\n\n          if (node.initializer) {\n            write(\"=\");\n            emit(node.initializer);\n          }\n        }\n\n        function emitJsxSpreadAttribute(node) {\n          write(\"{...\");\n          emit(node.expression);\n          write(\"}\");\n        }\n\n        function emitAttributes(attribs) {\n          for (var i = 0, n = attribs.length; i < n; i++) {\n            if (i > 0) {\n              write(\" \");\n            }\n\n            if (attribs[i].kind === 242\n            /* JsxSpreadAttribute */\n            ) {\n                emitJsxSpreadAttribute(attribs[i]);\n              } else {\n              ts.Debug.assert(attribs[i].kind === 241\n              /* JsxAttribute */\n              );\n              emitJsxAttribute(attribs[i]);\n            }\n          }\n        }\n\n        function emitJsxOpeningOrSelfClosingElement(node) {\n          write(\"<\");\n          emit(node.tagName);\n\n          if (node.attributes.length > 0 || node.kind === 237\n          /* JsxSelfClosingElement */\n          ) {\n            write(\" \");\n          }\n\n          emitAttributes(node.attributes);\n\n          if (node.kind === 237\n          /* JsxSelfClosingElement */\n          ) {\n              write(\"/>\");\n            } else {\n            write(\">\");\n          }\n        }\n\n        function emitJsxClosingElement(node) {\n          write(\"</\");\n          emit(node.tagName);\n          write(\">\");\n        }\n\n        function emitJsxElement(node) {\n          emitJsxOpeningOrSelfClosingElement(node.openingElement);\n\n          for (var i = 0, n = node.children.length; i < n; i++) {\n            emit(node.children[i]);\n          }\n\n          emitJsxClosingElement(node.closingElement);\n        }\n\n        if (node.kind === 236\n        /* JsxElement */\n        ) {\n            emitJsxElement(node);\n          } else {\n          ts.Debug.assert(node.kind === 237\n          /* JsxSelfClosingElement */\n          );\n          emitJsxOpeningOrSelfClosingElement(node);\n        }\n      } // This function specifically handles numeric/string literals for enum and accessor 'identifiers'.\n      // In a sense, it does not actually emit identifiers as much as it declares a name for a specific property.\n      // For example, this is utilized when feeding in a result to Object.defineProperty.\n\n\n      function emitExpressionForPropertyName(node) {\n        ts.Debug.assert(node.kind !== 166\n        /* BindingElement */\n        );\n\n        if (node.kind === 9\n        /* StringLiteral */\n        ) {\n            emitLiteral(node);\n          } else if (node.kind === 137\n        /* ComputedPropertyName */\n        ) {\n            // if this is a decorated computed property, we will need to capture the result\n            // of the property expression so that we can apply decorators later. This is to ensure\n            // we don't introduce unintended side effects:\n            //\n            //   class C {\n            //     [_a = x]() { }\n            //   }\n            //\n            // The emit for the decorated computed property decorator is:\n            //\n            //   __decorate([dec], C.prototype, _a, Object.getOwnPropertyDescriptor(C.prototype, _a));\n            //\n            if (ts.nodeIsDecorated(node.parent)) {\n              if (!computedPropertyNamesToGeneratedNames) {\n                computedPropertyNamesToGeneratedNames = [];\n              }\n\n              var generatedName = computedPropertyNamesToGeneratedNames[ts.getNodeId(node)];\n\n              if (generatedName) {\n                // we have already generated a variable for this node, write that value instead.\n                write(generatedName);\n                return;\n              }\n\n              generatedName = createAndRecordTempVariable(0\n              /* Auto */\n              ).text;\n              computedPropertyNamesToGeneratedNames[ts.getNodeId(node)] = generatedName;\n              write(generatedName);\n              write(\" = \");\n            }\n\n            emit(node.expression);\n          } else {\n          write(\"\\\"\");\n\n          if (node.kind === 8\n          /* NumericLiteral */\n          ) {\n              write(node.text);\n            } else {\n            writeTextOfNode(currentText, node);\n          }\n\n          write(\"\\\"\");\n        }\n      }\n\n      function isExpressionIdentifier(node) {\n        var parent = node.parent;\n\n        switch (parent.kind) {\n          case 167\n          /* ArrayLiteralExpression */\n          :\n          case 192\n          /* AsExpression */\n          :\n          case 184\n          /* BinaryExpression */\n          :\n          case 171\n          /* CallExpression */\n          :\n          case 244\n          /* CaseClause */\n          :\n          case 137\n          /* ComputedPropertyName */\n          :\n          case 185\n          /* ConditionalExpression */\n          :\n          case 140\n          /* Decorator */\n          :\n          case 178\n          /* DeleteExpression */\n          :\n          case 200\n          /* DoStatement */\n          :\n          case 170\n          /* ElementAccessExpression */\n          :\n          case 230\n          /* ExportAssignment */\n          :\n          case 198\n          /* ExpressionStatement */\n          :\n          case 191\n          /* ExpressionWithTypeArguments */\n          :\n          case 202\n          /* ForStatement */\n          :\n          case 203\n          /* ForInStatement */\n          :\n          case 204\n          /* ForOfStatement */\n          :\n          case 199\n          /* IfStatement */\n          :\n          case 240\n          /* JsxClosingElement */\n          :\n          case 237\n          /* JsxSelfClosingElement */\n          :\n          case 238\n          /* JsxOpeningElement */\n          :\n          case 242\n          /* JsxSpreadAttribute */\n          :\n          case 243\n          /* JsxExpression */\n          :\n          case 172\n          /* NewExpression */\n          :\n          case 175\n          /* ParenthesizedExpression */\n          :\n          case 183\n          /* PostfixUnaryExpression */\n          :\n          case 182\n          /* PrefixUnaryExpression */\n          :\n          case 207\n          /* ReturnStatement */\n          :\n          case 249\n          /* ShorthandPropertyAssignment */\n          :\n          case 188\n          /* SpreadElementExpression */\n          :\n          case 209\n          /* SwitchStatement */\n          :\n          case 173\n          /* TaggedTemplateExpression */\n          :\n          case 193\n          /* TemplateSpan */\n          :\n          case 211\n          /* ThrowStatement */\n          :\n          case 174\n          /* TypeAssertionExpression */\n          :\n          case 179\n          /* TypeOfExpression */\n          :\n          case 180\n          /* VoidExpression */\n          :\n          case 201\n          /* WhileStatement */\n          :\n          case 208\n          /* WithStatement */\n          :\n          case 187\n          /* YieldExpression */\n          :\n            return true;\n\n          case 166\n          /* BindingElement */\n          :\n          case 250\n          /* EnumMember */\n          :\n          case 139\n          /* Parameter */\n          :\n          case 248\n          /* PropertyAssignment */\n          :\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 214\n          /* VariableDeclaration */\n          :\n            return parent.initializer === node;\n\n          case 169\n          /* PropertyAccessExpression */\n          :\n            return parent.expression === node;\n\n          case 177\n          /* ArrowFunction */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n            return parent.body === node;\n\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n            return parent.moduleReference === node;\n\n          case 136\n          /* QualifiedName */\n          :\n            return parent.left === node;\n        }\n\n        return false;\n      }\n\n      function emitExpressionIdentifier(node) {\n        var container = resolver.getReferencedExportContainer(node);\n\n        if (container) {\n          if (container.kind === 251\n          /* SourceFile */\n          ) {\n              // Identifier references module export\n              if (modulekind !== 5\n              /* ES6 */\n              && modulekind !== 4\n              /* System */\n              ) {\n                  write(\"exports.\");\n                }\n            } else {\n            // Identifier references namespace export\n            write(getGeneratedNameForNode(container));\n            write(\".\");\n          }\n        } else {\n          if (modulekind !== 5\n          /* ES6 */\n          ) {\n              var declaration = resolver.getReferencedImportDeclaration(node);\n\n              if (declaration) {\n                if (declaration.kind === 226\n                /* ImportClause */\n                ) {\n                    // Identifier references default import\n                    write(getGeneratedNameForNode(declaration.parent));\n                    write(languageVersion === 0\n                    /* ES3 */\n                    ? \"[\\\"default\\\"]\" : \".default\");\n                    return;\n                  } else if (declaration.kind === 229\n                /* ImportSpecifier */\n                ) {\n                    // Identifier references named import\n                    write(getGeneratedNameForNode(declaration.parent.parent.parent));\n                    var name_24 = declaration.propertyName || declaration.name;\n                    var identifier = ts.getTextOfNodeFromSourceText(currentText, name_24);\n\n                    if (languageVersion === 0\n                    /* ES3 */\n                    && identifier === \"default\") {\n                      write(\"[\\\"default\\\"]\");\n                    } else {\n                      write(\".\");\n                      write(identifier);\n                    }\n\n                    return;\n                  }\n              }\n            }\n\n          if (languageVersion < 2\n          /* ES6 */\n          ) {\n              var declaration = resolver.getReferencedDeclarationWithCollidingName(node);\n\n              if (declaration) {\n                write(getGeneratedNameForNode(declaration.name));\n                return;\n              }\n            } else if (resolver.getNodeCheckFlags(node) & 1048576\n          /* BodyScopedClassBinding */\n          ) {\n              // Due to the emit for class decorators, any reference to the class from inside of the class body\n              // must instead be rewritten to point to a temporary variable to avoid issues with the double-bind\n              // behavior of class names in ES6.\n              var declaration = resolver.getReferencedValueDeclaration(node);\n\n              if (declaration) {\n                var classAlias = decoratedClassAliases[ts.getNodeId(declaration)];\n\n                if (classAlias !== undefined) {\n                  write(classAlias);\n                  return;\n                }\n              }\n            }\n        }\n\n        if (ts.nodeIsSynthesized(node)) {\n          write(node.text);\n        } else {\n          writeTextOfNode(currentText, node);\n        }\n      }\n\n      function isNameOfNestedBlockScopedRedeclarationOrCapturedBinding(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            var parent_8 = node.parent;\n\n            switch (parent_8.kind) {\n              case 166\n              /* BindingElement */\n              :\n              case 217\n              /* ClassDeclaration */\n              :\n              case 220\n              /* EnumDeclaration */\n              :\n              case 214\n              /* VariableDeclaration */\n              :\n                return parent_8.name === node && resolver.isDeclarationWithCollidingName(parent_8);\n            }\n          }\n\n        return false;\n      }\n\n      function emitIdentifier(node) {\n        if (convertedLoopState) {\n          if (node.text == \"arguments\" && resolver.isArgumentsLocalBinding(node)) {\n            // in converted loop body arguments cannot be used directly.\n            var name_25 = convertedLoopState.argumentsName || (convertedLoopState.argumentsName = makeUniqueName(\"arguments\"));\n            write(name_25);\n            return;\n          }\n        }\n\n        if (!node.parent) {\n          write(node.text);\n        } else if (isExpressionIdentifier(node)) {\n          emitExpressionIdentifier(node);\n        } else if (isNameOfNestedBlockScopedRedeclarationOrCapturedBinding(node)) {\n          write(getGeneratedNameForNode(node));\n        } else if (ts.nodeIsSynthesized(node)) {\n          write(node.text);\n        } else {\n          writeTextOfNode(currentText, node);\n        }\n      }\n\n      function emitThis(node) {\n        if (resolver.getNodeCheckFlags(node) & 2\n        /* LexicalThis */\n        ) {\n            write(\"_this\");\n          } else if (convertedLoopState) {\n          write(convertedLoopState.thisName || (convertedLoopState.thisName = makeUniqueName(\"this\")));\n        } else {\n          write(\"this\");\n        }\n      }\n\n      function emitSuper(node) {\n        if (languageVersion >= 2\n        /* ES6 */\n        ) {\n            write(\"super\");\n          } else {\n          var flags = resolver.getNodeCheckFlags(node);\n\n          if (flags & 256\n          /* SuperInstance */\n          ) {\n              write(\"_super.prototype\");\n            } else {\n            write(\"_super\");\n          }\n        }\n      }\n\n      function emitObjectBindingPattern(node) {\n        write(\"{ \");\n        var elements = node.elements;\n        emitList(elements, 0, elements.length,\n        /*multiLine*/\n        false,\n        /*trailingComma*/\n        elements.hasTrailingComma);\n        write(\" }\");\n      }\n\n      function emitArrayBindingPattern(node) {\n        write(\"[\");\n        var elements = node.elements;\n        emitList(elements, 0, elements.length,\n        /*multiLine*/\n        false,\n        /*trailingComma*/\n        elements.hasTrailingComma);\n        write(\"]\");\n      }\n\n      function emitBindingElement(node) {\n        if (node.propertyName) {\n          emit(node.propertyName);\n          write(\": \");\n        }\n\n        if (node.dotDotDotToken) {\n          write(\"...\");\n        }\n\n        if (ts.isBindingPattern(node.name)) {\n          emit(node.name);\n        } else {\n          emitModuleMemberName(node);\n        }\n\n        emitOptional(\" = \", node.initializer);\n      }\n\n      function emitSpreadElementExpression(node) {\n        write(\"...\");\n        emit(node.expression);\n      }\n\n      function emitYieldExpression(node) {\n        write(ts.tokenToString(114\n        /* YieldKeyword */\n        ));\n\n        if (node.asteriskToken) {\n          write(\"*\");\n        }\n\n        if (node.expression) {\n          write(\" \");\n          emit(node.expression);\n        }\n      }\n\n      function emitAwaitExpression(node) {\n        var needsParenthesis = needsParenthesisForAwaitExpressionAsYield(node);\n\n        if (needsParenthesis) {\n          write(\"(\");\n        }\n\n        write(ts.tokenToString(114\n        /* YieldKeyword */\n        ));\n        write(\" \");\n        emit(node.expression);\n\n        if (needsParenthesis) {\n          write(\")\");\n        }\n      }\n\n      function needsParenthesisForAwaitExpressionAsYield(node) {\n        if (node.parent.kind === 184\n        /* BinaryExpression */\n        && !ts.isAssignmentOperator(node.parent.operatorToken.kind)) {\n          return true;\n        } else if (node.parent.kind === 185\n        /* ConditionalExpression */\n        && node.parent.condition === node) {\n          return true;\n        }\n\n        return false;\n      }\n\n      function needsParenthesisForPropertyAccessOrInvocation(node) {\n        switch (node.kind) {\n          case 69\n          /* Identifier */\n          :\n          case 167\n          /* ArrayLiteralExpression */\n          :\n          case 169\n          /* PropertyAccessExpression */\n          :\n          case 170\n          /* ElementAccessExpression */\n          :\n          case 171\n          /* CallExpression */\n          :\n          case 175\n          /* ParenthesizedExpression */\n          :\n            // This list is not exhaustive and only includes those cases that are relevant\n            // to the check in emitArrayLiteral. More cases can be added as needed.\n            return false;\n        }\n\n        return true;\n      }\n\n      function emitListWithSpread(elements, needsUniqueCopy, multiLine, trailingComma, useConcat) {\n        var pos = 0;\n        var group = 0;\n        var length = elements.length;\n\n        while (pos < length) {\n          // Emit using the pattern <group0>.concat(<group1>, <group2>, ...)\n          if (group === 1 && useConcat) {\n            write(\".concat(\");\n          } else if (group > 0) {\n            write(\", \");\n          }\n\n          var e = elements[pos];\n\n          if (e.kind === 188\n          /* SpreadElementExpression */\n          ) {\n              e = e.expression;\n              emitParenthesizedIf(e,\n              /*parenthesized*/\n              group === 0 && needsParenthesisForPropertyAccessOrInvocation(e));\n              pos++;\n\n              if (pos === length && group === 0 && needsUniqueCopy && e.kind !== 167\n              /* ArrayLiteralExpression */\n              ) {\n                  write(\".slice()\");\n                }\n            } else {\n            var i = pos;\n\n            while (i < length && elements[i].kind !== 188\n            /* SpreadElementExpression */\n            ) {\n              i++;\n            }\n\n            write(\"[\");\n\n            if (multiLine) {\n              increaseIndent();\n            }\n\n            emitList(elements, pos, i - pos, multiLine, trailingComma && i === length);\n\n            if (multiLine) {\n              decreaseIndent();\n            }\n\n            write(\"]\");\n            pos = i;\n          }\n\n          group++;\n        }\n\n        if (group > 1) {\n          if (useConcat) {\n            write(\")\");\n          }\n        }\n      }\n\n      function isSpreadElementExpression(node) {\n        return node.kind === 188\n        /* SpreadElementExpression */\n        ;\n      }\n\n      function emitArrayLiteral(node) {\n        var elements = node.elements;\n\n        if (elements.length === 0) {\n          write(\"[]\");\n        } else if (languageVersion >= 2\n        /* ES6 */\n        || !ts.forEach(elements, isSpreadElementExpression)) {\n          write(\"[\");\n          emitLinePreservingList(node, node.elements, elements.hasTrailingComma,\n          /*spacesBetweenBraces*/\n          false);\n          write(\"]\");\n        } else {\n          emitListWithSpread(elements,\n          /*needsUniqueCopy*/\n          true,\n          /*multiLine*/\n          (node.flags & 1024\n          /* MultiLine */\n          ) !== 0,\n          /*trailingComma*/\n          elements.hasTrailingComma,\n          /*useConcat*/\n          true);\n        }\n      }\n\n      function emitObjectLiteralBody(node, numElements) {\n        if (numElements === 0) {\n          write(\"{}\");\n          return;\n        }\n\n        write(\"{\");\n\n        if (numElements > 0) {\n          var properties = node.properties; // If we are not doing a downlevel transformation for object literals,\n          // then try to preserve the original shape of the object literal.\n          // Otherwise just try to preserve the formatting.\n\n          if (numElements === properties.length) {\n            emitLinePreservingList(node, properties,\n            /*allowTrailingComma*/\n            languageVersion >= 1\n            /* ES5 */\n            ,\n            /*spacesBetweenBraces*/\n            true);\n          } else {\n            var multiLine = (node.flags & 1024\n            /* MultiLine */\n            ) !== 0;\n\n            if (!multiLine) {\n              write(\" \");\n            } else {\n              increaseIndent();\n            }\n\n            emitList(properties, 0, numElements,\n            /*multiLine*/\n            multiLine,\n            /*trailingComma*/\n            false);\n\n            if (!multiLine) {\n              write(\" \");\n            } else {\n              decreaseIndent();\n            }\n          }\n        }\n\n        write(\"}\");\n      }\n\n      function emitDownlevelObjectLiteralWithComputedProperties(node, firstComputedPropertyIndex) {\n        var multiLine = (node.flags & 1024\n        /* MultiLine */\n        ) !== 0;\n        var properties = node.properties;\n        write(\"(\");\n\n        if (multiLine) {\n          increaseIndent();\n        } // For computed properties, we need to create a unique handle to the object\n        // literal so we can modify it without risking internal assignments tainting the object.\n\n\n        var tempVar = createAndRecordTempVariable(0\n        /* Auto */\n        ); // Write out the first non-computed properties\n        // (or all properties if none of them are computed),\n        // then emit the rest through indexing on the temp variable.\n\n        emit(tempVar);\n        write(\" = \");\n        emitObjectLiteralBody(node, firstComputedPropertyIndex);\n\n        for (var i = firstComputedPropertyIndex, n = properties.length; i < n; i++) {\n          writeComma();\n          var property = properties[i];\n          emitStart(property);\n\n          if (property.kind === 146\n          /* GetAccessor */\n          || property.kind === 147\n          /* SetAccessor */\n          ) {\n              // TODO (drosen): Reconcile with 'emitMemberFunctions'.\n              var accessors = ts.getAllAccessorDeclarations(node.properties, property);\n\n              if (property !== accessors.firstAccessor) {\n                continue;\n              }\n\n              write(\"Object.defineProperty(\");\n              emit(tempVar);\n              write(\", \");\n              emitStart(node.name);\n              emitExpressionForPropertyName(property.name);\n              emitEnd(property.name);\n              write(\", {\");\n              increaseIndent();\n\n              if (accessors.getAccessor) {\n                writeLine();\n                emitLeadingComments(accessors.getAccessor);\n                write(\"get: \");\n                emitStart(accessors.getAccessor);\n                write(\"function \");\n                emitSignatureAndBody(accessors.getAccessor);\n                emitEnd(accessors.getAccessor);\n                emitTrailingComments(accessors.getAccessor);\n                write(\",\");\n              }\n\n              if (accessors.setAccessor) {\n                writeLine();\n                emitLeadingComments(accessors.setAccessor);\n                write(\"set: \");\n                emitStart(accessors.setAccessor);\n                write(\"function \");\n                emitSignatureAndBody(accessors.setAccessor);\n                emitEnd(accessors.setAccessor);\n                emitTrailingComments(accessors.setAccessor);\n                write(\",\");\n              }\n\n              writeLine();\n              write(\"enumerable: true,\");\n              writeLine();\n              write(\"configurable: true\");\n              decreaseIndent();\n              writeLine();\n              write(\"})\");\n              emitEnd(property);\n            } else {\n            emitLeadingComments(property);\n            emitStart(property.name);\n            emit(tempVar);\n            emitMemberAccessForPropertyName(property.name);\n            emitEnd(property.name);\n            write(\" = \");\n\n            if (property.kind === 248\n            /* PropertyAssignment */\n            ) {\n                emit(property.initializer);\n              } else if (property.kind === 249\n            /* ShorthandPropertyAssignment */\n            ) {\n                emitExpressionIdentifier(property.name);\n              } else if (property.kind === 144\n            /* MethodDeclaration */\n            ) {\n                emitFunctionDeclaration(property);\n              } else {\n              ts.Debug.fail(\"ObjectLiteralElement type not accounted for: \" + property.kind);\n            }\n          }\n\n          emitEnd(property);\n        }\n\n        writeComma();\n        emit(tempVar);\n\n        if (multiLine) {\n          decreaseIndent();\n          writeLine();\n        }\n\n        write(\")\");\n\n        function writeComma() {\n          if (multiLine) {\n            write(\",\");\n            writeLine();\n          } else {\n            write(\", \");\n          }\n        }\n      }\n\n      function emitObjectLiteral(node) {\n        var properties = node.properties;\n\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            var numProperties = properties.length; // Find the first computed property.\n            // Everything until that point can be emitted as part of the initial object literal.\n\n            var numInitialNonComputedProperties = numProperties;\n\n            for (var i = 0, n = properties.length; i < n; i++) {\n              if (properties[i].name.kind === 137\n              /* ComputedPropertyName */\n              ) {\n                  numInitialNonComputedProperties = i;\n                  break;\n                }\n            }\n\n            var hasComputedProperty = numInitialNonComputedProperties !== properties.length;\n\n            if (hasComputedProperty) {\n              emitDownlevelObjectLiteralWithComputedProperties(node, numInitialNonComputedProperties);\n              return;\n            }\n          } // Ordinary case: either the object has no computed properties\n        // or we're compiling with an ES6+ target.\n\n\n        emitObjectLiteralBody(node, properties.length);\n      }\n\n      function createBinaryExpression(left, operator, right, startsOnNewLine) {\n        var result = ts.createSynthesizedNode(184\n        /* BinaryExpression */\n        , startsOnNewLine);\n        result.operatorToken = ts.createSynthesizedNode(operator);\n        result.left = left;\n        result.right = right;\n        return result;\n      }\n\n      function createPropertyAccessExpression(expression, name) {\n        var result = ts.createSynthesizedNode(169\n        /* PropertyAccessExpression */\n        );\n        result.expression = parenthesizeForAccess(expression);\n        result.dotToken = ts.createSynthesizedNode(21\n        /* DotToken */\n        );\n        result.name = name;\n        return result;\n      }\n\n      function createElementAccessExpression(expression, argumentExpression) {\n        var result = ts.createSynthesizedNode(170\n        /* ElementAccessExpression */\n        );\n        result.expression = parenthesizeForAccess(expression);\n        result.argumentExpression = argumentExpression;\n        return result;\n      }\n\n      function parenthesizeForAccess(expr) {\n        // When diagnosing whether the expression needs parentheses, the decision should be based\n        // on the innermost expression in a chain of nested type assertions.\n        while (expr.kind === 174\n        /* TypeAssertionExpression */\n        || expr.kind === 192\n        /* AsExpression */\n        ) {\n          expr = expr.expression;\n        } // isLeftHandSideExpression is almost the correct criterion for when it is not necessary\n        // to parenthesize the expression before a dot. The known exceptions are:\n        //\n        //    NewExpression:\n        //       new C.x        -> not the same as (new C).x\n        //    NumberLiteral\n        //       1.x            -> not the same as (1).x\n        //\n\n\n        if (ts.isLeftHandSideExpression(expr) && expr.kind !== 172\n        /* NewExpression */\n        && expr.kind !== 8\n        /* NumericLiteral */\n        ) {\n            return expr;\n          }\n\n        var node = ts.createSynthesizedNode(175\n        /* ParenthesizedExpression */\n        );\n        node.expression = expr;\n        return node;\n      }\n\n      function emitComputedPropertyName(node) {\n        write(\"[\");\n        emitExpressionForPropertyName(node);\n        write(\"]\");\n      }\n\n      function emitMethod(node) {\n        if (languageVersion >= 2\n        /* ES6 */\n        && node.asteriskToken) {\n          write(\"*\");\n        }\n\n        emit(node.name);\n\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            write(\": function \");\n          }\n\n        emitSignatureAndBody(node);\n      }\n\n      function emitPropertyAssignment(node) {\n        emit(node.name);\n        write(\": \"); // This is to ensure that we emit comment in the following case:\n        //      For example:\n        //          obj = {\n        //              id: /*comment1*/ ()=>void\n        //          }\n        // \"comment1\" is not considered to be leading comment for node.initializer\n        // but rather a trailing comment on the previous node.\n\n        emitTrailingCommentsOfPosition(node.initializer.pos);\n        emit(node.initializer);\n      } // Return true if identifier resolves to an exported member of a namespace\n\n\n      function isNamespaceExportReference(node) {\n        var container = resolver.getReferencedExportContainer(node);\n        return container && container.kind !== 251\n        /* SourceFile */\n        ;\n      }\n\n      function emitShorthandPropertyAssignment(node) {\n        // The name property of a short-hand property assignment is considered an expression position, so here\n        // we manually emit the identifier to avoid rewriting.\n        writeTextOfNode(currentText, node.name); // If emitting pre-ES6 code, or if the name requires rewriting when resolved as an expression identifier,\n        // we emit a normal property assignment. For example:\n        //   module m {\n        //       export let y;\n        //   }\n        //   module m {\n        //       let obj = { y };\n        //   }\n        // Here we need to emit obj = { y : m.y } regardless of the output target.\n\n        if (modulekind !== 5\n        /* ES6 */\n        || isNamespaceExportReference(node.name)) {\n          // Emit identifier as an identifier\n          write(\": \");\n          emit(node.name);\n        }\n\n        if (languageVersion >= 2\n        /* ES6 */\n        && node.objectAssignmentInitializer) {\n          write(\" = \");\n          emit(node.objectAssignmentInitializer);\n        }\n      }\n\n      function tryEmitConstantValue(node) {\n        var constantValue = tryGetConstEnumValue(node);\n\n        if (constantValue !== undefined) {\n          write(constantValue.toString());\n\n          if (!compilerOptions.removeComments) {\n            var propertyName = node.kind === 169\n            /* PropertyAccessExpression */\n            ? ts.declarationNameToString(node.name) : ts.getTextOfNode(node.argumentExpression);\n            write(\" /* \" + propertyName + \" */\");\n          }\n\n          return true;\n        }\n\n        return false;\n      }\n\n      function tryGetConstEnumValue(node) {\n        if (compilerOptions.isolatedModules) {\n          return undefined;\n        }\n\n        return node.kind === 169\n        /* PropertyAccessExpression */\n        || node.kind === 170\n        /* ElementAccessExpression */\n        ? resolver.getConstantValue(node) : undefined;\n      } // Returns 'true' if the code was actually indented, false otherwise.\n      // If the code is not indented, an optional valueToWriteWhenNotIndenting will be\n      // emitted instead.\n\n\n      function indentIfOnDifferentLines(parent, node1, node2, valueToWriteWhenNotIndenting) {\n        var realNodesAreOnDifferentLines = !ts.nodeIsSynthesized(parent) && !nodeEndIsOnSameLineAsNodeStart(node1, node2); // Always use a newline for synthesized code if the synthesizer desires it.\n\n        var synthesizedNodeIsOnDifferentLine = synthesizedNodeStartsOnNewLine(node2);\n\n        if (realNodesAreOnDifferentLines || synthesizedNodeIsOnDifferentLine) {\n          increaseIndent();\n          writeLine();\n          return true;\n        } else {\n          if (valueToWriteWhenNotIndenting) {\n            write(valueToWriteWhenNotIndenting);\n          }\n\n          return false;\n        }\n      }\n\n      function emitPropertyAccess(node) {\n        if (tryEmitConstantValue(node)) {\n          return;\n        }\n\n        if (languageVersion === 2\n        /* ES6 */\n        && node.expression.kind === 95\n        /* SuperKeyword */\n        && isInAsyncMethodWithSuperInES6(node)) {\n          var name_26 = ts.createSynthesizedNode(9\n          /* StringLiteral */\n          );\n          name_26.text = node.name.text;\n          emitSuperAccessInAsyncMethod(node.expression, name_26);\n          return;\n        }\n\n        emit(node.expression);\n        var indentedBeforeDot = indentIfOnDifferentLines(node, node.expression, node.dotToken); // 1 .toString is a valid property access, emit a space after the literal\n        // Also emit a space if expression is a integer const enum value - it will appear in generated code as numeric literal\n\n        var shouldEmitSpace = false;\n\n        if (!indentedBeforeDot) {\n          if (node.expression.kind === 8\n          /* NumericLiteral */\n          ) {\n              // check if numeric literal was originally written with a dot\n              var text = ts.getTextOfNodeFromSourceText(currentText, node.expression);\n              shouldEmitSpace = text.indexOf(ts.tokenToString(21\n              /* DotToken */\n              )) < 0;\n            } else {\n            // check if constant enum value is integer\n            var constantValue = tryGetConstEnumValue(node.expression); // isFinite handles cases when constantValue is undefined\n\n            shouldEmitSpace = isFinite(constantValue) && Math.floor(constantValue) === constantValue;\n          }\n        }\n\n        if (shouldEmitSpace) {\n          write(\" .\");\n        } else {\n          write(\".\");\n        }\n\n        var indentedAfterDot = indentIfOnDifferentLines(node, node.dotToken, node.name);\n        emit(node.name);\n        decreaseIndentIf(indentedBeforeDot, indentedAfterDot);\n      }\n\n      function emitQualifiedName(node) {\n        emit(node.left);\n        write(\".\");\n        emit(node.right);\n      }\n\n      function emitQualifiedNameAsExpression(node, useFallback) {\n        if (node.left.kind === 69\n        /* Identifier */\n        ) {\n            emitEntityNameAsExpression(node.left, useFallback);\n          } else if (useFallback) {\n          var temp = createAndRecordTempVariable(0\n          /* Auto */\n          );\n          write(\"(\");\n          emitNodeWithoutSourceMap(temp);\n          write(\" = \");\n          emitEntityNameAsExpression(node.left,\n          /*useFallback*/\n          true);\n          write(\") && \");\n          emitNodeWithoutSourceMap(temp);\n        } else {\n          emitEntityNameAsExpression(node.left,\n          /*useFallback*/\n          false);\n        }\n\n        write(\".\");\n        emit(node.right);\n      }\n\n      function emitEntityNameAsExpression(node, useFallback) {\n        switch (node.kind) {\n          case 69\n          /* Identifier */\n          :\n            if (useFallback) {\n              write(\"typeof \");\n              emitExpressionIdentifier(node);\n              write(\" !== 'undefined' && \");\n            }\n\n            emitExpressionIdentifier(node);\n            break;\n\n          case 136\n          /* QualifiedName */\n          :\n            emitQualifiedNameAsExpression(node, useFallback);\n            break;\n\n          default:\n            emitNodeWithoutSourceMap(node);\n            break;\n        }\n      }\n\n      function emitIndexedAccess(node) {\n        if (tryEmitConstantValue(node)) {\n          return;\n        }\n\n        if (languageVersion === 2\n        /* ES6 */\n        && node.expression.kind === 95\n        /* SuperKeyword */\n        && isInAsyncMethodWithSuperInES6(node)) {\n          emitSuperAccessInAsyncMethod(node.expression, node.argumentExpression);\n          return;\n        }\n\n        emit(node.expression);\n        write(\"[\");\n        emit(node.argumentExpression);\n        write(\"]\");\n      }\n\n      function hasSpreadElement(elements) {\n        return ts.forEach(elements, function (e) {\n          return e.kind === 188\n          /* SpreadElementExpression */\n          ;\n        });\n      }\n\n      function skipParentheses(node) {\n        while (node.kind === 175\n        /* ParenthesizedExpression */\n        || node.kind === 174\n        /* TypeAssertionExpression */\n        || node.kind === 192\n        /* AsExpression */\n        ) {\n          node = node.expression;\n        }\n\n        return node;\n      }\n\n      function emitCallTarget(node) {\n        if (node.kind === 69\n        /* Identifier */\n        || node.kind === 97\n        /* ThisKeyword */\n        || node.kind === 95\n        /* SuperKeyword */\n        ) {\n            emit(node);\n            return node;\n          }\n\n        var temp = createAndRecordTempVariable(0\n        /* Auto */\n        );\n        write(\"(\");\n        emit(temp);\n        write(\" = \");\n        emit(node);\n        write(\")\");\n        return temp;\n      }\n\n      function emitCallWithSpread(node) {\n        var target;\n        var expr = skipParentheses(node.expression);\n\n        if (expr.kind === 169\n        /* PropertyAccessExpression */\n        ) {\n            // Target will be emitted as \"this\" argument\n            target = emitCallTarget(expr.expression);\n            write(\".\");\n            emit(expr.name);\n          } else if (expr.kind === 170\n        /* ElementAccessExpression */\n        ) {\n            // Target will be emitted as \"this\" argument\n            target = emitCallTarget(expr.expression);\n            write(\"[\");\n            emit(expr.argumentExpression);\n            write(\"]\");\n          } else if (expr.kind === 95\n        /* SuperKeyword */\n        ) {\n            target = expr;\n            write(\"_super\");\n          } else {\n          emit(node.expression);\n        }\n\n        write(\".apply(\");\n\n        if (target) {\n          if (target.kind === 95\n          /* SuperKeyword */\n          ) {\n              // Calls of form super(...) and super.foo(...)\n              emitThis(target);\n            } else {\n            // Calls of form obj.foo(...)\n            emit(target);\n          }\n        } else {\n          // Calls of form foo(...)\n          write(\"void 0\");\n        }\n\n        write(\", \");\n        emitListWithSpread(node.arguments,\n        /*needsUniqueCopy*/\n        false,\n        /*multiLine*/\n        false,\n        /*trailingComma*/\n        false,\n        /*useConcat*/\n        true);\n        write(\")\");\n      }\n\n      function isInAsyncMethodWithSuperInES6(node) {\n        if (languageVersion === 2\n        /* ES6 */\n        ) {\n            var container = ts.getSuperContainer(node,\n            /*includeFunctions*/\n            false);\n\n            if (container && resolver.getNodeCheckFlags(container) & (2048\n            /* AsyncMethodWithSuper */\n            | 4096\n            /* AsyncMethodWithSuperBinding */\n            )) {\n              return true;\n            }\n          }\n\n        return false;\n      }\n\n      function emitSuperAccessInAsyncMethod(superNode, argumentExpression) {\n        var container = ts.getSuperContainer(superNode,\n        /*includeFunctions*/\n        false);\n        var isSuperBinding = resolver.getNodeCheckFlags(container) & 4096\n        /* AsyncMethodWithSuperBinding */\n        ;\n        write(\"_super(\");\n        emit(argumentExpression);\n        write(isSuperBinding ? \").value\" : \")\");\n      }\n\n      function emitCallExpression(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        && hasSpreadElement(node.arguments)) {\n          emitCallWithSpread(node);\n          return;\n        }\n\n        var expression = node.expression;\n        var superCall = false;\n        var isAsyncMethodWithSuper = false;\n\n        if (expression.kind === 95\n        /* SuperKeyword */\n        ) {\n            emitSuper(expression);\n            superCall = true;\n          } else {\n          superCall = ts.isSuperPropertyOrElementAccess(expression);\n          isAsyncMethodWithSuper = superCall && isInAsyncMethodWithSuperInES6(node);\n          emit(expression);\n        }\n\n        if (superCall && (languageVersion < 2\n        /* ES6 */\n        || isAsyncMethodWithSuper)) {\n          write(\".call(\");\n          emitThis(expression);\n\n          if (node.arguments.length) {\n            write(\", \");\n            emitCommaList(node.arguments);\n          }\n\n          write(\")\");\n        } else {\n          write(\"(\");\n          emitCommaList(node.arguments);\n          write(\")\");\n        }\n      }\n\n      function emitNewExpression(node) {\n        write(\"new \"); // Spread operator logic is supported in new expressions in ES5 using a combination\n        // of Function.prototype.bind() and Function.prototype.apply().\n        //\n        //     Example:\n        //\n        //         var args = [1, 2, 3, 4, 5];\n        //         new Array(...args);\n        //\n        //     is compiled into the following ES5:\n        //\n        //         var args = [1, 2, 3, 4, 5];\n        //         new (Array.bind.apply(Array, [void 0].concat(args)));\n        //\n        // The 'thisArg' to 'bind' is ignored when invoking the result of 'bind' with 'new',\n        // Thus, we set it to undefined ('void 0').\n\n        if (languageVersion === 1\n        /* ES5 */\n        && node.arguments && hasSpreadElement(node.arguments)) {\n          write(\"(\");\n          var target = emitCallTarget(node.expression);\n          write(\".bind.apply(\");\n          emit(target);\n          write(\", [void 0].concat(\");\n          emitListWithSpread(node.arguments,\n          /*needsUniqueCopy*/\n          false,\n          /*multiLine*/\n          false,\n          /*trailingComma*/\n          false,\n          /*useConcat*/\n          false);\n          write(\")))\");\n          write(\"()\");\n        } else {\n          emit(node.expression);\n\n          if (node.arguments) {\n            write(\"(\");\n            emitCommaList(node.arguments);\n            write(\")\");\n          }\n        }\n      }\n\n      function emitTaggedTemplateExpression(node) {\n        if (languageVersion >= 2\n        /* ES6 */\n        ) {\n            emit(node.tag);\n            write(\" \");\n            emit(node.template);\n          } else {\n          emitDownlevelTaggedTemplate(node);\n        }\n      }\n\n      function emitParenExpression(node) {\n        // If the node is synthesized, it means the emitter put the parentheses there,\n        // not the user. If we didn't want them, the emitter would not have put them\n        // there.\n        if (!ts.nodeIsSynthesized(node) && node.parent.kind !== 177\n        /* ArrowFunction */\n        ) {\n            if (node.expression.kind === 174\n            /* TypeAssertionExpression */\n            || node.expression.kind === 192\n            /* AsExpression */\n            ) {\n                var operand = node.expression.expression; // Make sure we consider all nested cast expressions, e.g.:\n                // (<any><number><any>-A).x;\n\n                while (operand.kind === 174\n                /* TypeAssertionExpression */\n                || operand.kind === 192\n                /* AsExpression */\n                ) {\n                  operand = operand.expression;\n                } // We have an expression of the form: (<Type>SubExpr)\n                // Emitting this as (SubExpr) is really not desirable. We would like to emit the subexpr as is.\n                // Omitting the parentheses, however, could cause change in the semantics of the generated\n                // code if the casted expression has a lower precedence than the rest of the expression, e.g.:\n                //      (<any>new A).foo should be emitted as (new A).foo and not new A.foo\n                //      (<any>typeof A).toString() should be emitted as (typeof A).toString() and not typeof A.toString()\n                //      new (<any>A()) should be emitted as new (A()) and not new A()\n                //      (<any>function foo() { })() should be emitted as an IIF (function foo(){})() and not declaration function foo(){} ()\n\n\n                if (operand.kind !== 182\n                /* PrefixUnaryExpression */\n                && operand.kind !== 180\n                /* VoidExpression */\n                && operand.kind !== 179\n                /* TypeOfExpression */\n                && operand.kind !== 178\n                /* DeleteExpression */\n                && operand.kind !== 183\n                /* PostfixUnaryExpression */\n                && operand.kind !== 172\n                /* NewExpression */\n                && !(operand.kind === 171\n                /* CallExpression */\n                && node.parent.kind === 172\n                /* NewExpression */\n                ) && !(operand.kind === 176\n                /* FunctionExpression */\n                && node.parent.kind === 171\n                /* CallExpression */\n                ) && !(operand.kind === 8\n                /* NumericLiteral */\n                && node.parent.kind === 169\n                /* PropertyAccessExpression */\n                )) {\n                  emit(operand);\n                  return;\n                }\n              }\n          }\n\n        write(\"(\");\n        emit(node.expression);\n        write(\")\");\n      }\n\n      function emitDeleteExpression(node) {\n        write(ts.tokenToString(78\n        /* DeleteKeyword */\n        ));\n        write(\" \");\n        emit(node.expression);\n      }\n\n      function emitVoidExpression(node) {\n        write(ts.tokenToString(103\n        /* VoidKeyword */\n        ));\n        write(\" \");\n        emit(node.expression);\n      }\n\n      function emitTypeOfExpression(node) {\n        write(ts.tokenToString(101\n        /* TypeOfKeyword */\n        ));\n        write(\" \");\n        emit(node.expression);\n      }\n\n      function isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node) {\n        if (!isCurrentFileSystemExternalModule() || node.kind !== 69\n        /* Identifier */\n        || ts.nodeIsSynthesized(node)) {\n          return false;\n        }\n\n        var isVariableDeclarationOrBindingElement = node.parent && (node.parent.kind === 214\n        /* VariableDeclaration */\n        || node.parent.kind === 166\n        /* BindingElement */\n        );\n        var targetDeclaration = isVariableDeclarationOrBindingElement ? node.parent : resolver.getReferencedValueDeclaration(node);\n        return isSourceFileLevelDeclarationInSystemJsModule(targetDeclaration,\n        /*isExported*/\n        true);\n      }\n\n      function emitPrefixUnaryExpression(node) {\n        var exportChanged = (node.operator === 41\n        /* PlusPlusToken */\n        || node.operator === 42\n        /* MinusMinusToken */\n        ) && isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.operand);\n\n        if (exportChanged) {\n          // emit\n          // ++x\n          // as\n          // exports('x', ++x)\n          write(exportFunctionForFile + \"(\\\"\");\n          emitNodeWithoutSourceMap(node.operand);\n          write(\"\\\", \");\n        }\n\n        write(ts.tokenToString(node.operator)); // In some cases, we need to emit a space between the operator and the operand. One obvious case\n        // is when the operator is an identifier, like delete or typeof. We also need to do this for plus\n        // and minus expressions in certain cases. Specifically, consider the following two cases (parens\n        // are just for clarity of exposition, and not part of the source code):\n        //\n        //  (+(+1))\n        //  (+(++1))\n        //\n        // We need to emit a space in both cases. In the first case, the absence of a space will make\n        // the resulting expression a prefix increment operation. And in the second, it will make the resulting\n        // expression a prefix increment whose operand is a plus expression - (++(+x))\n        // The same is true of minus of course.\n\n        if (node.operand.kind === 182\n        /* PrefixUnaryExpression */\n        ) {\n            var operand = node.operand;\n\n            if (node.operator === 35\n            /* PlusToken */\n            && (operand.operator === 35\n            /* PlusToken */\n            || operand.operator === 41\n            /* PlusPlusToken */\n            )) {\n              write(\" \");\n            } else if (node.operator === 36\n            /* MinusToken */\n            && (operand.operator === 36\n            /* MinusToken */\n            || operand.operator === 42\n            /* MinusMinusToken */\n            )) {\n              write(\" \");\n            }\n          }\n\n        emit(node.operand);\n\n        if (exportChanged) {\n          write(\")\");\n        }\n      }\n\n      function emitPostfixUnaryExpression(node) {\n        var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.operand);\n\n        if (exportChanged) {\n          // export function returns the value that was passes as the second argument\n          // however for postfix unary expressions result value should be the value before modification.\n          // emit 'x++' as '(export('x', ++x) - 1)' and 'x--' as '(export('x', --x) + 1)'\n          write(\"(\" + exportFunctionForFile + \"(\\\"\");\n          emitNodeWithoutSourceMap(node.operand);\n          write(\"\\\", \");\n          write(ts.tokenToString(node.operator));\n          emit(node.operand);\n\n          if (node.operator === 41\n          /* PlusPlusToken */\n          ) {\n              write(\") - 1)\");\n            } else {\n            write(\") + 1)\");\n          }\n        } else {\n          emit(node.operand);\n          write(ts.tokenToString(node.operator));\n        }\n      }\n\n      function shouldHoistDeclarationInSystemJsModule(node) {\n        return isSourceFileLevelDeclarationInSystemJsModule(node,\n        /*isExported*/\n        false);\n      }\n      /*\n       * Checks if given node is a source file level declaration (not nested in module/function).\n       * If 'isExported' is true - then declaration must also be exported.\n       * This function is used in two cases:\n       * - check if node is a exported source file level value to determine\n       *   if we should also export the value after its it changed\n       * - check if node is a source level declaration to emit it differently,\n       *   i.e non-exported variable statement 'var x = 1' is hoisted so\n       *   we we emit variable statement 'var' should be dropped.\n       */\n\n\n      function isSourceFileLevelDeclarationInSystemJsModule(node, isExported) {\n        if (!node || !isCurrentFileSystemExternalModule()) {\n          return false;\n        }\n\n        var current = ts.getRootDeclaration(node).parent;\n\n        while (current) {\n          if (current.kind === 251\n          /* SourceFile */\n          ) {\n              return !isExported || (ts.getCombinedNodeFlags(node) & 2\n              /* Export */\n              ) !== 0;\n            } else if (ts.isDeclaration(current)) {\n            return false;\n          } else {\n            current = current.parent;\n          }\n        }\n      }\n      /**\n       * Emit ES7 exponentiation operator downlevel using Math.pow\n       * @param node a binary expression node containing exponentiationOperator (**, **=)\n       */\n\n\n      function emitExponentiationOperator(node) {\n        var leftHandSideExpression = node.left;\n\n        if (node.operatorToken.kind === 60\n        /* AsteriskAsteriskEqualsToken */\n        ) {\n            var synthesizedLHS = void 0;\n            var shouldEmitParentheses = false;\n\n            if (ts.isElementAccessExpression(leftHandSideExpression)) {\n              shouldEmitParentheses = true;\n              write(\"(\");\n              synthesizedLHS = ts.createSynthesizedNode(170\n              /* ElementAccessExpression */\n              ,\n              /*startsOnNewLine*/\n              false);\n              var identifier = emitTempVariableAssignment(leftHandSideExpression.expression,\n              /*canDefineTempVariablesInPlace*/\n              false,\n              /*shouldEmitCommaBeforeAssignment*/\n              false);\n              synthesizedLHS.expression = identifier;\n\n              if (leftHandSideExpression.argumentExpression.kind !== 8\n              /* NumericLiteral */\n              && leftHandSideExpression.argumentExpression.kind !== 9\n              /* StringLiteral */\n              ) {\n                  var tempArgumentExpression = createAndRecordTempVariable(268435456\n                  /* _i */\n                  );\n                  synthesizedLHS.argumentExpression = tempArgumentExpression;\n                  emitAssignment(tempArgumentExpression, leftHandSideExpression.argumentExpression,\n                  /*shouldEmitCommaBeforeAssignment*/\n                  true, leftHandSideExpression.expression);\n                } else {\n                synthesizedLHS.argumentExpression = leftHandSideExpression.argumentExpression;\n              }\n\n              write(\", \");\n            } else if (ts.isPropertyAccessExpression(leftHandSideExpression)) {\n              shouldEmitParentheses = true;\n              write(\"(\");\n              synthesizedLHS = ts.createSynthesizedNode(169\n              /* PropertyAccessExpression */\n              ,\n              /*startsOnNewLine*/\n              false);\n              var identifier = emitTempVariableAssignment(leftHandSideExpression.expression,\n              /*canDefineTempVariablesInPlace*/\n              false,\n              /*shouldEmitCommaBeforeAssignment*/\n              false);\n              synthesizedLHS.expression = identifier;\n              synthesizedLHS.dotToken = leftHandSideExpression.dotToken;\n              synthesizedLHS.name = leftHandSideExpression.name;\n              write(\", \");\n            }\n\n            emit(synthesizedLHS || leftHandSideExpression);\n            write(\" = \");\n            write(\"Math.pow(\");\n            emit(synthesizedLHS || leftHandSideExpression);\n            write(\", \");\n            emit(node.right);\n            write(\")\");\n\n            if (shouldEmitParentheses) {\n              write(\")\");\n            }\n          } else {\n          write(\"Math.pow(\");\n          emit(leftHandSideExpression);\n          write(\", \");\n          emit(node.right);\n          write(\")\");\n        }\n      }\n\n      function emitBinaryExpression(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        && node.operatorToken.kind === 56\n        /* EqualsToken */\n        && (node.left.kind === 168\n        /* ObjectLiteralExpression */\n        || node.left.kind === 167\n        /* ArrayLiteralExpression */\n        )) {\n          emitDestructuring(node, node.parent.kind === 198\n          /* ExpressionStatement */\n          );\n        } else {\n          var exportChanged = node.operatorToken.kind >= 56\n          /* FirstAssignment */\n          && node.operatorToken.kind <= 68\n          /* LastAssignment */\n          && isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.left);\n\n          if (exportChanged) {\n            // emit assignment 'x <op> y' as 'exports(\"x\", x <op> y)'\n            write(exportFunctionForFile + \"(\\\"\");\n            emitNodeWithoutSourceMap(node.left);\n            write(\"\\\", \");\n          }\n\n          if (node.operatorToken.kind === 38\n          /* AsteriskAsteriskToken */\n          || node.operatorToken.kind === 60\n          /* AsteriskAsteriskEqualsToken */\n          ) {\n              // Downleveled emit exponentiation operator using Math.pow\n              emitExponentiationOperator(node);\n            } else {\n            emit(node.left); // Add indentation before emit the operator if the operator is on different line\n            // For example:\n            //      3\n            //      + 2;\n            //   emitted as\n            //      3\n            //          + 2;\n\n            var indentedBeforeOperator = indentIfOnDifferentLines(node, node.left, node.operatorToken, node.operatorToken.kind !== 24\n            /* CommaToken */\n            ? \" \" : undefined);\n            write(ts.tokenToString(node.operatorToken.kind));\n            var indentedAfterOperator = indentIfOnDifferentLines(node, node.operatorToken, node.right, \" \");\n            emit(node.right);\n            decreaseIndentIf(indentedBeforeOperator, indentedAfterOperator);\n          }\n\n          if (exportChanged) {\n            write(\")\");\n          }\n        }\n      }\n\n      function synthesizedNodeStartsOnNewLine(node) {\n        return ts.nodeIsSynthesized(node) && node.startsOnNewLine;\n      }\n\n      function emitConditionalExpression(node) {\n        emit(node.condition);\n        var indentedBeforeQuestion = indentIfOnDifferentLines(node, node.condition, node.questionToken, \" \");\n        write(\"?\");\n        var indentedAfterQuestion = indentIfOnDifferentLines(node, node.questionToken, node.whenTrue, \" \");\n        emit(node.whenTrue);\n        decreaseIndentIf(indentedBeforeQuestion, indentedAfterQuestion);\n        var indentedBeforeColon = indentIfOnDifferentLines(node, node.whenTrue, node.colonToken, \" \");\n        write(\":\");\n        var indentedAfterColon = indentIfOnDifferentLines(node, node.colonToken, node.whenFalse, \" \");\n        emit(node.whenFalse);\n        decreaseIndentIf(indentedBeforeColon, indentedAfterColon);\n      } // Helper function to decrease the indent if we previously indented.  Allows multiple\n      // previous indent values to be considered at a time.  This also allows caller to just\n      // call this once, passing in all their appropriate indent values, instead of needing\n      // to call this helper function multiple times.\n\n\n      function decreaseIndentIf(value1, value2) {\n        if (value1) {\n          decreaseIndent();\n        }\n\n        if (value2) {\n          decreaseIndent();\n        }\n      }\n\n      function isSingleLineEmptyBlock(node) {\n        if (node && node.kind === 195\n        /* Block */\n        ) {\n            var block = node;\n            return block.statements.length === 0 && nodeEndIsOnSameLineAsNodeStart(block, block);\n          }\n      }\n\n      function emitBlock(node) {\n        if (isSingleLineEmptyBlock(node)) {\n          emitToken(15\n          /* OpenBraceToken */\n          , node.pos);\n          write(\" \");\n          emitToken(16\n          /* CloseBraceToken */\n          , node.statements.end);\n          return;\n        }\n\n        emitToken(15\n        /* OpenBraceToken */\n        , node.pos);\n        increaseIndent();\n\n        if (node.kind === 222\n        /* ModuleBlock */\n        ) {\n            ts.Debug.assert(node.parent.kind === 221\n            /* ModuleDeclaration */\n            );\n            emitCaptureThisForNodeIfNecessary(node.parent);\n          }\n\n        emitLines(node.statements);\n\n        if (node.kind === 222\n        /* ModuleBlock */\n        ) {\n            emitTempDeclarations(\n            /*newLine*/\n            true);\n          }\n\n        decreaseIndent();\n        writeLine();\n        emitToken(16\n        /* CloseBraceToken */\n        , node.statements.end);\n      }\n\n      function emitEmbeddedStatement(node) {\n        if (node.kind === 195\n        /* Block */\n        ) {\n            write(\" \");\n            emit(node);\n          } else {\n          increaseIndent();\n          writeLine();\n          emit(node);\n          decreaseIndent();\n        }\n      }\n\n      function emitExpressionStatement(node) {\n        emitParenthesizedIf(node.expression,\n        /*parenthesized*/\n        node.expression.kind === 177\n        /* ArrowFunction */\n        );\n        write(\";\");\n      }\n\n      function emitIfStatement(node) {\n        var endPos = emitToken(88\n        /* IfKeyword */\n        , node.pos);\n        write(\" \");\n        endPos = emitToken(17\n        /* OpenParenToken */\n        , endPos);\n        emit(node.expression);\n        emitToken(18\n        /* CloseParenToken */\n        , node.expression.end);\n        emitEmbeddedStatement(node.thenStatement);\n\n        if (node.elseStatement) {\n          writeLine();\n          emitToken(80\n          /* ElseKeyword */\n          , node.thenStatement.end);\n\n          if (node.elseStatement.kind === 199\n          /* IfStatement */\n          ) {\n              write(\" \");\n              emit(node.elseStatement);\n            } else {\n            emitEmbeddedStatement(node.elseStatement);\n          }\n        }\n      }\n\n      function emitDoStatement(node) {\n        emitLoop(node, emitDoStatementWorker);\n      }\n\n      function emitDoStatementWorker(node, loop) {\n        write(\"do\");\n\n        if (loop) {\n          emitConvertedLoopCall(loop,\n          /*emitAsBlock*/\n          true);\n        } else {\n          emitNormalLoopBody(node,\n          /*emitAsEmbeddedStatement*/\n          true);\n        }\n\n        if (node.statement.kind === 195\n        /* Block */\n        ) {\n            write(\" \");\n          } else {\n          writeLine();\n        }\n\n        write(\"while (\");\n        emit(node.expression);\n        write(\");\");\n      }\n\n      function emitWhileStatement(node) {\n        emitLoop(node, emitWhileStatementWorker);\n      }\n\n      function emitWhileStatementWorker(node, loop) {\n        write(\"while (\");\n        emit(node.expression);\n        write(\")\");\n\n        if (loop) {\n          emitConvertedLoopCall(loop,\n          /*emitAsBlock*/\n          true);\n        } else {\n          emitNormalLoopBody(node,\n          /*emitAsEmbeddedStatement*/\n          true);\n        }\n      }\n      /**\n       * Returns true if start of variable declaration list was emitted.\n       * Returns false if nothing was written - this can happen for source file level variable declarations\n       *     in system modules where such variable declarations are hoisted.\n       */\n\n\n      function tryEmitStartOfVariableDeclarationList(decl) {\n        if (shouldHoistVariable(decl,\n        /*checkIfSourceFileLevelDecl*/\n        true)) {\n          // variables in variable declaration list were already hoisted\n          return false;\n        }\n\n        if (convertedLoopState && (ts.getCombinedNodeFlags(decl) & 24576\n        /* BlockScoped */\n        ) === 0) {\n          // we are inside a converted loop - this can only happen in downlevel scenarios\n          // record names for all variable declarations\n          for (var _a = 0, _b = decl.declarations; _a < _b.length; _a++) {\n            var varDecl = _b[_a];\n            hoistVariableDeclarationFromLoop(convertedLoopState, varDecl);\n          }\n\n          return false;\n        }\n\n        emitStart(decl);\n\n        if (decl && languageVersion >= 2\n        /* ES6 */\n        ) {\n            if (ts.isLet(decl)) {\n              write(\"let \");\n            } else if (ts.isConst(decl)) {\n              write(\"const \");\n            } else {\n              write(\"var \");\n            }\n          } else {\n          write(\"var \");\n        } // Note here we specifically dont emit end so that if we are going to emit binding pattern\n        // we can alter the source map correctly\n\n\n        return true;\n      }\n\n      function emitVariableDeclarationListSkippingUninitializedEntries(list) {\n        var started = false;\n\n        for (var _a = 0, _b = list.declarations; _a < _b.length; _a++) {\n          var decl = _b[_a];\n\n          if (!decl.initializer) {\n            continue;\n          }\n\n          if (!started) {\n            started = true;\n          } else {\n            write(\", \");\n          }\n\n          emit(decl);\n        }\n\n        return started;\n      }\n\n      function shouldConvertLoopBody(node) {\n        return languageVersion < 2\n        /* ES6 */\n        && (resolver.getNodeCheckFlags(node) & 65536\n        /* LoopWithCapturedBlockScopedBinding */\n        ) !== 0;\n      }\n\n      function emitLoop(node, loopEmitter) {\n        var shouldConvert = shouldConvertLoopBody(node);\n\n        if (!shouldConvert) {\n          loopEmitter(node,\n          /* convertedLoop*/\n          undefined);\n        } else {\n          var loop = convertLoopBody(node);\n\n          if (node.parent.kind === 210\n          /* LabeledStatement */\n          ) {\n              // if parent of the loop was labeled statement - attach the label to loop skipping converted loop body\n              emitLabelAndColon(node.parent);\n            }\n\n          loopEmitter(node, loop);\n        }\n      }\n\n      function convertLoopBody(node) {\n        var functionName = makeUniqueName(\"_loop\");\n        var loopInitializer;\n\n        switch (node.kind) {\n          case 202\n          /* ForStatement */\n          :\n          case 203\n          /* ForInStatement */\n          :\n          case 204\n          /* ForOfStatement */\n          :\n            var initializer = node.initializer;\n\n            if (initializer && initializer.kind === 215\n            /* VariableDeclarationList */\n            ) {\n                loopInitializer = node.initializer;\n              }\n\n            break;\n        }\n\n        var loopParameters;\n        var loopOutParameters;\n\n        if (loopInitializer && ts.getCombinedNodeFlags(loopInitializer) & 24576\n        /* BlockScoped */\n        ) {\n          // if loop initializer contains block scoped variables - they should be passed to converted loop body as parameters\n          loopParameters = [];\n\n          for (var _a = 0, _b = loopInitializer.declarations; _a < _b.length; _a++) {\n            var varDeclaration = _b[_a];\n            processVariableDeclaration(varDeclaration.name);\n          }\n        }\n\n        var bodyIsBlock = node.statement.kind === 195\n        /* Block */\n        ;\n        var paramList = loopParameters ? loopParameters.join(\", \") : \"\";\n        writeLine();\n        write(\"var \" + functionName + \" = function(\" + paramList + \")\");\n        var convertedOuterLoopState = convertedLoopState;\n        convertedLoopState = {\n          loopOutParameters: loopOutParameters\n        };\n\n        if (convertedOuterLoopState) {\n          // convertedOuterLoopState !== undefined means that this converted loop is nested in another converted loop.\n          // if outer converted loop has already accumulated some state - pass it through\n          if (convertedOuterLoopState.argumentsName) {\n            // outer loop has already used 'arguments' so we've already have some name to alias it\n            // use the same name in all nested loops\n            convertedLoopState.argumentsName = convertedOuterLoopState.argumentsName;\n          }\n\n          if (convertedOuterLoopState.thisName) {\n            // outer loop has already used 'this' so we've already have some name to alias it\n            // use the same name in all nested loops\n            convertedLoopState.thisName = convertedOuterLoopState.thisName;\n          }\n\n          if (convertedOuterLoopState.hoistedLocalVariables) {\n            // we've already collected some non-block scoped variable declarations in enclosing loop\n            // use the same storage in nested loop\n            convertedLoopState.hoistedLocalVariables = convertedOuterLoopState.hoistedLocalVariables;\n          }\n        }\n\n        write(\" {\");\n        writeLine();\n        increaseIndent();\n\n        if (bodyIsBlock) {\n          emitLines(node.statement.statements);\n        } else {\n          emit(node.statement);\n        }\n\n        writeLine(); // end of loop body -> copy out parameter\n\n        copyLoopOutParameters(convertedLoopState, 1\n        /* ToOutParameter */\n        ,\n        /*emitAsStatements*/\n        true);\n        decreaseIndent();\n        writeLine();\n        write(\"};\");\n        writeLine();\n\n        if (loopOutParameters) {\n          // declare variables to hold out params for loop body\n          write(\"var \");\n\n          for (var i = 0; i < loopOutParameters.length; i++) {\n            if (i !== 0) {\n              write(\", \");\n            }\n\n            write(loopOutParameters[i].outParamName);\n          }\n\n          write(\";\");\n          writeLine();\n        }\n\n        if (convertedLoopState.argumentsName) {\n          // if alias for arguments is set\n          if (convertedOuterLoopState) {\n            // pass it to outer converted loop\n            convertedOuterLoopState.argumentsName = convertedLoopState.argumentsName;\n          } else {\n            // this is top level converted loop and we need to create an alias for 'arguments' object\n            write(\"var \" + convertedLoopState.argumentsName + \" = arguments;\");\n            writeLine();\n          }\n        }\n\n        if (convertedLoopState.thisName) {\n          // if alias for this is set\n          if (convertedOuterLoopState) {\n            // pass it to outer converted loop\n            convertedOuterLoopState.thisName = convertedLoopState.thisName;\n          } else {\n            // this is top level converted loop so we need to create an alias for 'this' here\n            // NOTE:\n            // if converted loops were all nested in arrow function then we'll always emit '_this' so convertedLoopState.thisName will not be set.\n            // If it is set this means that all nested loops are not nested in arrow function and it is safe to capture 'this'.\n            write(\"var \" + convertedLoopState.thisName + \" = this;\");\n            writeLine();\n          }\n        }\n\n        if (convertedLoopState.hoistedLocalVariables) {\n          // if hoistedLocalVariables !== undefined this means that we've possibly collected some variable declarations to be hoisted later\n          if (convertedOuterLoopState) {\n            // pass them to outer converted loop\n            convertedOuterLoopState.hoistedLocalVariables = convertedLoopState.hoistedLocalVariables;\n          } else {\n            // deduplicate and hoist collected variable declarations\n            write(\"var \");\n            var seen = void 0;\n\n            for (var _c = 0, _d = convertedLoopState.hoistedLocalVariables; _c < _d.length; _c++) {\n              var id = _d[_c]; // Don't initialize seen unless we have at least one element.\n              // Emit a comma to separate for all but the first element.\n\n              if (!seen) {\n                seen = {};\n              } else {\n                write(\", \");\n              }\n\n              if (!ts.hasProperty(seen, id.text)) {\n                emit(id);\n                seen[id.text] = id.text;\n              }\n            }\n\n            write(\";\");\n            writeLine();\n          }\n        }\n\n        var currentLoopState = convertedLoopState;\n        convertedLoopState = convertedOuterLoopState;\n        return {\n          functionName: functionName,\n          paramList: paramList,\n          state: currentLoopState\n        };\n\n        function processVariableDeclaration(name) {\n          if (name.kind === 69\n          /* Identifier */\n          ) {\n              var nameText = isNameOfNestedBlockScopedRedeclarationOrCapturedBinding(name) ? getGeneratedNameForNode(name) : name.text;\n              loopParameters.push(nameText);\n\n              if (resolver.getNodeCheckFlags(name.parent) & 2097152\n              /* NeedsLoopOutParameter */\n              ) {\n                  var reassignedVariable = {\n                    originalName: name,\n                    outParamName: makeUniqueName(\"out_\" + nameText)\n                  };\n                  (loopOutParameters || (loopOutParameters = [])).push(reassignedVariable);\n                }\n            } else {\n            for (var _a = 0, _b = name.elements; _a < _b.length; _a++) {\n              var element = _b[_a];\n              processVariableDeclaration(element.name);\n            }\n          }\n        }\n      }\n\n      function emitNormalLoopBody(node, emitAsEmbeddedStatement) {\n        var saveAllowedNonLabeledJumps;\n\n        if (convertedLoopState) {\n          // we get here if we are trying to emit normal loop loop inside converted loop\n          // set allowedNonLabeledJumps to Break | Continue to mark that break\\continue inside the loop should be emitted as is\n          saveAllowedNonLabeledJumps = convertedLoopState.allowedNonLabeledJumps;\n          convertedLoopState.allowedNonLabeledJumps = 2\n          /* Break */\n          | 4\n          /* Continue */\n          ;\n        }\n\n        if (emitAsEmbeddedStatement) {\n          emitEmbeddedStatement(node.statement);\n        } else if (node.statement.kind === 195\n        /* Block */\n        ) {\n            emitLines(node.statement.statements);\n          } else {\n          writeLine();\n          emit(node.statement);\n        }\n\n        if (convertedLoopState) {\n          convertedLoopState.allowedNonLabeledJumps = saveAllowedNonLabeledJumps;\n        }\n      }\n\n      function copyLoopOutParameters(state, copyDirection, emitAsStatements) {\n        if (state.loopOutParameters) {\n          for (var _a = 0, _b = state.loopOutParameters; _a < _b.length; _a++) {\n            var outParam = _b[_a];\n\n            if (copyDirection === 0\n            /* ToOriginal */\n            ) {\n                emitIdentifier(outParam.originalName);\n                write(\" = \" + outParam.outParamName);\n              } else {\n              write(outParam.outParamName + \" = \");\n              emitIdentifier(outParam.originalName);\n            }\n\n            if (emitAsStatements) {\n              write(\";\");\n              writeLine();\n            } else {\n              write(\", \");\n            }\n          }\n        }\n      }\n\n      function emitConvertedLoopCall(loop, emitAsBlock) {\n        if (emitAsBlock) {\n          write(\" {\");\n          writeLine();\n          increaseIndent();\n        } // loop is considered simple if it does not have any return statements or break\\continue that transfer control outside of the loop\n        // simple loops are emitted as just 'loop()';\n\n\n        var isSimpleLoop = !loop.state.nonLocalJumps && !loop.state.labeledNonLocalBreaks && !loop.state.labeledNonLocalContinues;\n        var loopResult = makeUniqueName(\"state\");\n\n        if (!isSimpleLoop) {\n          write(\"var \" + loopResult + \" = \");\n        }\n\n        write(loop.functionName + \"(\" + loop.paramList + \");\");\n        writeLine();\n        copyLoopOutParameters(loop.state, 0\n        /* ToOriginal */\n        ,\n        /*emitAsStatements*/\n        true);\n\n        if (!isSimpleLoop) {\n          // for non simple loops we need to store result returned from converted loop function and use it to do dispatching\n          // converted loop function can return:\n          // - object - used when body of the converted loop contains return statement. Property \"value\" of this object stores retuned value\n          // - string - used to dispatch jumps. \"break\" and \"continue\" are used to non-labeled jumps, other values are used to transfer control to\n          //   different labels\n          writeLine();\n\n          if (loop.state.nonLocalJumps & 8\n          /* Return */\n          ) {\n              write(\"if (typeof \" + loopResult + \" === \\\"object\\\") \");\n\n              if (convertedLoopState) {\n                // we are currently nested in another converted loop - return unwrapped result\n                write(\"return \" + loopResult + \";\"); // propagate 'hasReturn' flag to outer loop\n\n                convertedLoopState.nonLocalJumps |= 8\n                /* Return */\n                ;\n              } else {\n                // top level converted loop - return unwrapped value\n                write(\"return \" + loopResult + \".value;\");\n              }\n\n              writeLine();\n            }\n\n          if (loop.state.nonLocalJumps & 2\n          /* Break */\n          ) {\n              write(\"if (\" + loopResult + \" === \\\"break\\\") break;\");\n              writeLine();\n            }\n\n          if (loop.state.nonLocalJumps & 4\n          /* Continue */\n          ) {\n              write(\"if (\" + loopResult + \" === \\\"continue\\\") continue;\");\n              writeLine();\n            } // in case of labeled breaks emit code that either breaks to some known label inside outer loop or delegates jump decision to outer loop\n\n\n          emitDispatchTableForLabeledJumps(loopResult, loop.state, convertedLoopState);\n        }\n\n        if (emitAsBlock) {\n          writeLine();\n          decreaseIndent();\n          write(\"}\");\n        }\n\n        function emitDispatchTableForLabeledJumps(loopResultVariable, currentLoop, outerLoop) {\n          if (!currentLoop.labeledNonLocalBreaks && !currentLoop.labeledNonLocalContinues) {\n            return;\n          }\n\n          write(\"switch(\" + loopResultVariable + \") {\");\n          increaseIndent();\n          emitDispatchEntriesForLabeledJumps(currentLoop.labeledNonLocalBreaks,\n          /*isBreak*/\n          true, loopResultVariable, outerLoop);\n          emitDispatchEntriesForLabeledJumps(currentLoop.labeledNonLocalContinues,\n          /*isBreak*/\n          false, loopResultVariable, outerLoop);\n          decreaseIndent();\n          writeLine();\n          write(\"}\");\n        }\n\n        function emitDispatchEntriesForLabeledJumps(table, isBreak, loopResultVariable, outerLoop) {\n          if (!table) {\n            return;\n          }\n\n          for (var labelText in table) {\n            var labelMarker = table[labelText];\n            writeLine();\n            write(\"case \\\"\" + labelMarker + \"\\\": \"); // if there are no outer converted loop or outer label in question is located inside outer converted loop\n            // then emit labeled break\\continue\n            // otherwise propagate pair 'label -> marker' to outer converted loop and emit 'return labelMarker' so outer loop can later decide what to do\n\n            if (!outerLoop || outerLoop.labels && outerLoop.labels[labelText]) {\n              if (isBreak) {\n                write(\"break \");\n              } else {\n                write(\"continue \");\n              }\n\n              write(labelText + \";\");\n            } else {\n              setLabeledJump(outerLoop, isBreak, labelText, labelMarker);\n              write(\"return \" + loopResultVariable + \";\");\n            }\n          }\n        }\n      }\n\n      function emitForStatement(node) {\n        emitLoop(node, emitForStatementWorker);\n      }\n\n      function emitForStatementWorker(node, loop) {\n        var endPos = emitToken(86\n        /* ForKeyword */\n        , node.pos);\n        write(\" \");\n        endPos = emitToken(17\n        /* OpenParenToken */\n        , endPos);\n\n        if (node.initializer && node.initializer.kind === 215\n        /* VariableDeclarationList */\n        ) {\n            var variableDeclarationList = node.initializer;\n            var startIsEmitted = tryEmitStartOfVariableDeclarationList(variableDeclarationList);\n\n            if (startIsEmitted) {\n              emitCommaList(variableDeclarationList.declarations);\n            } else {\n              emitVariableDeclarationListSkippingUninitializedEntries(variableDeclarationList);\n            }\n          } else if (node.initializer) {\n          emit(node.initializer);\n        }\n\n        write(\";\");\n        emitOptional(\" \", node.condition);\n        write(\";\");\n        emitOptional(\" \", node.incrementor);\n        write(\")\");\n\n        if (loop) {\n          emitConvertedLoopCall(loop,\n          /*emitAsBlock*/\n          true);\n        } else {\n          emitNormalLoopBody(node,\n          /*emitAsEmbeddedStatement*/\n          true);\n        }\n      }\n\n      function emitForInOrForOfStatement(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        && node.kind === 204\n        /* ForOfStatement */\n        ) {\n            emitLoop(node, emitDownLevelForOfStatementWorker);\n          } else {\n          emitLoop(node, emitForInOrForOfStatementWorker);\n        }\n      }\n\n      function emitForInOrForOfStatementWorker(node, loop) {\n        var endPos = emitToken(86\n        /* ForKeyword */\n        , node.pos);\n        write(\" \");\n        endPos = emitToken(17\n        /* OpenParenToken */\n        , endPos);\n\n        if (node.initializer.kind === 215\n        /* VariableDeclarationList */\n        ) {\n            var variableDeclarationList = node.initializer;\n\n            if (variableDeclarationList.declarations.length >= 1) {\n              tryEmitStartOfVariableDeclarationList(variableDeclarationList);\n              emit(variableDeclarationList.declarations[0]);\n            }\n          } else {\n          emit(node.initializer);\n        }\n\n        if (node.kind === 203\n        /* ForInStatement */\n        ) {\n            write(\" in \");\n          } else {\n          write(\" of \");\n        }\n\n        emit(node.expression);\n        emitToken(18\n        /* CloseParenToken */\n        , node.expression.end);\n\n        if (loop) {\n          emitConvertedLoopCall(loop,\n          /*emitAsBlock*/\n          true);\n        } else {\n          emitNormalLoopBody(node,\n          /*emitAsEmbeddedStatement*/\n          true);\n        }\n      }\n\n      function emitDownLevelForOfStatementWorker(node, loop) {\n        // The following ES6 code:\n        //\n        //    for (let v of expr) { }\n        //\n        // should be emitted as\n        //\n        //    for (let _i = 0, _a = expr; _i < _a.length; _i++) {\n        //        let v = _a[_i];\n        //    }\n        //\n        // where _a and _i are temps emitted to capture the RHS and the counter,\n        // respectively.\n        // When the left hand side is an expression instead of a let declaration,\n        // the \"let v\" is not emitted.\n        // When the left hand side is a let/const, the v is renamed if there is\n        // another v in scope.\n        // Note that all assignments to the LHS are emitted in the body, including\n        // all destructuring.\n        // Note also that because an extra statement is needed to assign to the LHS,\n        // for-of bodies are always emitted as blocks.\n        var endPos = emitToken(86\n        /* ForKeyword */\n        , node.pos);\n        write(\" \");\n        endPos = emitToken(17\n        /* OpenParenToken */\n        , endPos); // Do not emit the LHS let declaration yet, because it might contain destructuring.\n        // Do not call recordTempDeclaration because we are declaring the temps\n        // right here. Recording means they will be declared later.\n        // In the case where the user wrote an identifier as the RHS, like this:\n        //\n        //     for (let v of arr) { }\n        //\n        // we can't reuse 'arr' because it might be modified within the body of the loop.\n\n        var counter = createTempVariable(268435456\n        /* _i */\n        );\n        var rhsReference = ts.createSynthesizedNode(69\n        /* Identifier */\n        );\n        rhsReference.text = node.expression.kind === 69\n        /* Identifier */\n        ? makeUniqueName(node.expression.text) : makeTempVariableName(0\n        /* Auto */\n        ); // This is the let keyword for the counter and rhsReference. The let keyword for\n        // the LHS will be emitted inside the body.\n\n        emitStart(node.expression);\n        write(\"var \"); // _i = 0\n\n        emitNodeWithoutSourceMap(counter);\n        write(\" = 0\");\n        emitEnd(node.expression); // , _a = expr\n\n        write(\", \");\n        emitStart(node.expression);\n        emitNodeWithoutSourceMap(rhsReference);\n        write(\" = \");\n        emitNodeWithoutSourceMap(node.expression);\n        emitEnd(node.expression);\n        write(\"; \"); // _i < _a.length;\n\n        emitStart(node.expression);\n        emitNodeWithoutSourceMap(counter);\n        write(\" < \");\n        emitNodeWithCommentsAndWithoutSourcemap(rhsReference);\n        write(\".length\");\n        emitEnd(node.expression);\n        write(\"; \"); // _i++)\n\n        emitStart(node.expression);\n        emitNodeWithoutSourceMap(counter);\n        write(\"++\");\n        emitEnd(node.expression);\n        emitToken(18\n        /* CloseParenToken */\n        , node.expression.end); // Body\n\n        write(\" {\");\n        writeLine();\n        increaseIndent(); // Initialize LHS\n        // let v = _a[_i];\n\n        var rhsIterationValue = createElementAccessExpression(rhsReference, counter);\n        emitStart(node.initializer);\n\n        if (node.initializer.kind === 215\n        /* VariableDeclarationList */\n        ) {\n            write(\"var \");\n            var variableDeclarationList = node.initializer;\n\n            if (variableDeclarationList.declarations.length > 0) {\n              var declaration = variableDeclarationList.declarations[0];\n\n              if (ts.isBindingPattern(declaration.name)) {\n                // This works whether the declaration is a var, let, or const.\n                // It will use rhsIterationValue _a[_i] as the initializer.\n                emitDestructuring(declaration,\n                /*isAssignmentExpressionStatement*/\n                false, rhsIterationValue);\n              } else {\n                // The following call does not include the initializer, so we have\n                // to emit it separately.\n                emitNodeWithCommentsAndWithoutSourcemap(declaration);\n                write(\" = \");\n                emitNodeWithoutSourceMap(rhsIterationValue);\n              }\n            } else {\n              // It's an empty declaration list. This can only happen in an error case, if the user wrote\n              //     for (let of []) {}\n              emitNodeWithoutSourceMap(createTempVariable(0\n              /* Auto */\n              ));\n              write(\" = \");\n              emitNodeWithoutSourceMap(rhsIterationValue);\n            }\n          } else {\n          // Initializer is an expression. Emit the expression in the body, so that it's\n          // evaluated on every iteration.\n          var assignmentExpression = createBinaryExpression(node.initializer, 56\n          /* EqualsToken */\n          , rhsIterationValue,\n          /*startsOnNewLine*/\n          false);\n\n          if (node.initializer.kind === 167\n          /* ArrayLiteralExpression */\n          || node.initializer.kind === 168\n          /* ObjectLiteralExpression */\n          ) {\n              // This is a destructuring pattern, so call emitDestructuring instead of emit. Calling emit will not work, because it will cause\n              // the BinaryExpression to be passed in instead of the expression statement, which will cause emitDestructuring to crash.\n              emitDestructuring(assignmentExpression,\n              /*isAssignmentExpressionStatement*/\n              true,\n              /*value*/\n              undefined);\n            } else {\n            emitNodeWithCommentsAndWithoutSourcemap(assignmentExpression);\n          }\n        }\n\n        emitEnd(node.initializer);\n        write(\";\");\n\n        if (loop) {\n          writeLine();\n          emitConvertedLoopCall(loop,\n          /*emitAsBlock*/\n          false);\n        } else {\n          emitNormalLoopBody(node,\n          /*emitAsEmbeddedStatement*/\n          false);\n        }\n\n        writeLine();\n        decreaseIndent();\n        write(\"}\");\n      }\n\n      function emitBreakOrContinueStatement(node) {\n        if (convertedLoopState) {\n          // check if we can emit break\\continue as is\n          // it is possible if either\n          //   - break\\continue is statement labeled and label is located inside the converted loop\n          //   - break\\continue is non-labeled and located in non-converted loop\\switch statement\n          var jump = node.kind === 206\n          /* BreakStatement */\n          ? 2\n          /* Break */\n          : 4\n          /* Continue */\n          ;\n          var canUseBreakOrContinue = node.label && convertedLoopState.labels && convertedLoopState.labels[node.label.text] || !node.label && convertedLoopState.allowedNonLabeledJumps & jump;\n\n          if (!canUseBreakOrContinue) {\n            write(\"return \"); // explicit exit from loop -> copy out parameters\n\n            copyLoopOutParameters(convertedLoopState, 1\n            /* ToOutParameter */\n            ,\n            /*emitAsStatements*/\n            false);\n\n            if (!node.label) {\n              if (node.kind === 206\n              /* BreakStatement */\n              ) {\n                  convertedLoopState.nonLocalJumps |= 2\n                  /* Break */\n                  ;\n                  write(\"\\\"break\\\";\");\n                } else {\n                convertedLoopState.nonLocalJumps |= 4\n                /* Continue */\n                ;\n                write(\"\\\"continue\\\";\");\n              }\n            } else {\n              var labelMarker = void 0;\n\n              if (node.kind === 206\n              /* BreakStatement */\n              ) {\n                  labelMarker = \"break-\" + node.label.text;\n                  setLabeledJump(convertedLoopState,\n                  /*isBreak*/\n                  true, node.label.text, labelMarker);\n                } else {\n                labelMarker = \"continue-\" + node.label.text;\n                setLabeledJump(convertedLoopState,\n                /*isBreak*/\n                false, node.label.text, labelMarker);\n              }\n\n              write(\"\\\"\" + labelMarker + \"\\\";\");\n            }\n\n            return;\n          }\n        }\n\n        emitToken(node.kind === 206\n        /* BreakStatement */\n        ? 70\n        /* BreakKeyword */\n        : 75\n        /* ContinueKeyword */\n        , node.pos);\n        emitOptional(\" \", node.label);\n        write(\";\");\n      }\n\n      function emitReturnStatement(node) {\n        if (convertedLoopState) {\n          convertedLoopState.nonLocalJumps |= 8\n          /* Return */\n          ;\n          write(\"return { value: \");\n\n          if (node.expression) {\n            emit(node.expression);\n          } else {\n            write(\"void 0\");\n          }\n\n          write(\" };\");\n          return;\n        }\n\n        emitToken(94\n        /* ReturnKeyword */\n        , node.pos);\n        emitOptional(\" \", node.expression);\n        write(\";\");\n      }\n\n      function emitWithStatement(node) {\n        write(\"with (\");\n        emit(node.expression);\n        write(\")\");\n        emitEmbeddedStatement(node.statement);\n      }\n\n      function emitSwitchStatement(node) {\n        var endPos = emitToken(96\n        /* SwitchKeyword */\n        , node.pos);\n        write(\" \");\n        emitToken(17\n        /* OpenParenToken */\n        , endPos);\n        emit(node.expression);\n        endPos = emitToken(18\n        /* CloseParenToken */\n        , node.expression.end);\n        write(\" \");\n        var saveAllowedNonLabeledJumps;\n\n        if (convertedLoopState) {\n          saveAllowedNonLabeledJumps = convertedLoopState.allowedNonLabeledJumps; // for switch statement allow only non-labeled break\n\n          convertedLoopState.allowedNonLabeledJumps |= 2\n          /* Break */\n          ;\n        }\n\n        emitCaseBlock(node.caseBlock, endPos);\n\n        if (convertedLoopState) {\n          convertedLoopState.allowedNonLabeledJumps = saveAllowedNonLabeledJumps;\n        }\n      }\n\n      function emitCaseBlock(node, startPos) {\n        emitToken(15\n        /* OpenBraceToken */\n        , startPos);\n        increaseIndent();\n        emitLines(node.clauses);\n        decreaseIndent();\n        writeLine();\n        emitToken(16\n        /* CloseBraceToken */\n        , node.clauses.end);\n      }\n\n      function nodeStartPositionsAreOnSameLine(node1, node2) {\n        return ts.getLineOfLocalPositionFromLineMap(currentLineMap, ts.skipTrivia(currentText, node1.pos)) === ts.getLineOfLocalPositionFromLineMap(currentLineMap, ts.skipTrivia(currentText, node2.pos));\n      }\n\n      function nodeEndPositionsAreOnSameLine(node1, node2) {\n        return ts.getLineOfLocalPositionFromLineMap(currentLineMap, node1.end) === ts.getLineOfLocalPositionFromLineMap(currentLineMap, node2.end);\n      }\n\n      function nodeEndIsOnSameLineAsNodeStart(node1, node2) {\n        return ts.getLineOfLocalPositionFromLineMap(currentLineMap, node1.end) === ts.getLineOfLocalPositionFromLineMap(currentLineMap, ts.skipTrivia(currentText, node2.pos));\n      }\n\n      function emitCaseOrDefaultClause(node) {\n        if (node.kind === 244\n        /* CaseClause */\n        ) {\n            write(\"case \");\n            emit(node.expression);\n            write(\":\");\n          } else {\n          write(\"default:\");\n        }\n\n        if (node.statements.length === 1 && nodeStartPositionsAreOnSameLine(node, node.statements[0])) {\n          write(\" \");\n          emit(node.statements[0]);\n        } else {\n          increaseIndent();\n          emitLines(node.statements);\n          decreaseIndent();\n        }\n      }\n\n      function emitThrowStatement(node) {\n        write(\"throw \");\n        emit(node.expression);\n        write(\";\");\n      }\n\n      function emitTryStatement(node) {\n        write(\"try \");\n        emit(node.tryBlock);\n        emit(node.catchClause);\n\n        if (node.finallyBlock) {\n          writeLine();\n          write(\"finally \");\n          emit(node.finallyBlock);\n        }\n      }\n\n      function emitCatchClause(node) {\n        writeLine();\n        var endPos = emitToken(72\n        /* CatchKeyword */\n        , node.pos);\n        write(\" \");\n        emitToken(17\n        /* OpenParenToken */\n        , endPos);\n        emit(node.variableDeclaration);\n        emitToken(18\n        /* CloseParenToken */\n        , node.variableDeclaration ? node.variableDeclaration.end : endPos);\n        write(\" \");\n        emitBlock(node.block);\n      }\n\n      function emitDebuggerStatement(node) {\n        emitToken(76\n        /* DebuggerKeyword */\n        , node.pos);\n        write(\";\");\n      }\n\n      function emitLabelAndColon(node) {\n        emit(node.label);\n        write(\": \");\n      }\n\n      function emitLabeledStatement(node) {\n        if (!ts.isIterationStatement(node.statement,\n        /* lookInLabeledStatements */\n        false) || !shouldConvertLoopBody(node.statement)) {\n          emitLabelAndColon(node);\n        }\n\n        if (convertedLoopState) {\n          if (!convertedLoopState.labels) {\n            convertedLoopState.labels = {};\n          }\n\n          convertedLoopState.labels[node.label.text] = node.label.text;\n        }\n\n        emit(node.statement);\n\n        if (convertedLoopState) {\n          convertedLoopState.labels[node.label.text] = undefined;\n        }\n      }\n\n      function getContainingModule(node) {\n        do {\n          node = node.parent;\n        } while (node && node.kind !== 221\n        /* ModuleDeclaration */\n        );\n\n        return node;\n      }\n\n      function emitContainingModuleName(node) {\n        var container = getContainingModule(node);\n        write(container ? getGeneratedNameForNode(container) : \"exports\");\n      }\n\n      function emitModuleMemberName(node) {\n        emitStart(node.name);\n\n        if (ts.getCombinedNodeFlags(node) & 2\n        /* Export */\n        ) {\n            var container = getContainingModule(node);\n\n            if (container) {\n              write(getGeneratedNameForNode(container));\n              write(\".\");\n            } else if (modulekind !== 5\n            /* ES6 */\n            && modulekind !== 4\n            /* System */\n            ) {\n                write(\"exports.\");\n              }\n          }\n\n        emitNodeWithCommentsAndWithoutSourcemap(node.name);\n        emitEnd(node.name);\n      }\n\n      function createVoidZero() {\n        var zero = ts.createSynthesizedNode(8\n        /* NumericLiteral */\n        );\n        zero.text = \"0\";\n        var result = ts.createSynthesizedNode(180\n        /* VoidExpression */\n        );\n        result.expression = zero;\n        return result;\n      }\n\n      function emitEs6ExportDefaultCompat(node) {\n        if (node.parent.kind === 251\n        /* SourceFile */\n        ) {\n            ts.Debug.assert(!!(node.flags & 512\n            /* Default */\n            ) || node.kind === 230\n            /* ExportAssignment */\n            ); // only allow export default at a source file level\n\n            if (modulekind === 1\n            /* CommonJS */\n            || modulekind === 2\n            /* AMD */\n            || modulekind === 3\n            /* UMD */\n            ) {\n                if (!isEs6Module) {\n                  if (languageVersion !== 0\n                  /* ES3 */\n                  ) {\n                      // default value of configurable, enumerable, writable are `false`.\n                      write(\"Object.defineProperty(exports, \\\"__esModule\\\", { value: true });\");\n                      writeLine();\n                    } else {\n                    write(\"exports.__esModule = true;\");\n                    writeLine();\n                  }\n                }\n              }\n          }\n      }\n\n      function emitExportMemberAssignment(node) {\n        if (node.flags & 2\n        /* Export */\n        ) {\n            writeLine();\n            emitStart(node); // emit call to exporter only for top level nodes\n\n            if (modulekind === 4\n            /* System */\n            && node.parent === currentSourceFile) {\n              // emit export default <smth> as\n              // export(\"default\", <smth>)\n              write(exportFunctionForFile + \"(\\\"\");\n\n              if (node.flags & 512\n              /* Default */\n              ) {\n                  write(\"default\");\n                } else {\n                emitNodeWithCommentsAndWithoutSourcemap(node.name);\n              }\n\n              write(\"\\\", \");\n              emitDeclarationName(node);\n              write(\")\");\n            } else {\n              if (node.flags & 512\n              /* Default */\n              ) {\n                  emitEs6ExportDefaultCompat(node);\n\n                  if (languageVersion === 0\n                  /* ES3 */\n                  ) {\n                      write(\"exports[\\\"default\\\"]\");\n                    } else {\n                    write(\"exports.default\");\n                  }\n                } else {\n                emitModuleMemberName(node);\n              }\n\n              write(\" = \");\n              emitDeclarationName(node);\n            }\n\n            emitEnd(node);\n            write(\";\");\n          }\n      }\n\n      function emitExportMemberAssignments(name) {\n        if (modulekind === 4\n        /* System */\n        ) {\n            return;\n          }\n\n        if (!exportEquals && exportSpecifiers && ts.hasProperty(exportSpecifiers, name.text)) {\n          for (var _a = 0, _b = exportSpecifiers[name.text]; _a < _b.length; _a++) {\n            var specifier = _b[_a];\n            writeLine();\n            emitStart(specifier.name);\n            emitContainingModuleName(specifier);\n            write(\".\");\n            emitNodeWithCommentsAndWithoutSourcemap(specifier.name);\n            emitEnd(specifier.name);\n            write(\" = \");\n            emitExpressionIdentifier(name);\n            write(\";\");\n          }\n        }\n      }\n\n      function emitExportSpecifierInSystemModule(specifier) {\n        ts.Debug.assert(modulekind === 4\n        /* System */\n        );\n\n        if (!resolver.getReferencedValueDeclaration(specifier.propertyName || specifier.name) && !resolver.isValueAliasDeclaration(specifier)) {\n          return;\n        }\n\n        writeLine();\n        emitStart(specifier.name);\n        write(exportFunctionForFile + \"(\\\"\");\n        emitNodeWithCommentsAndWithoutSourcemap(specifier.name);\n        write(\"\\\", \");\n        emitExpressionIdentifier(specifier.propertyName || specifier.name);\n        write(\")\");\n        emitEnd(specifier.name);\n        write(\";\");\n      }\n      /**\n       * Emit an assignment to a given identifier, 'name', with a given expression, 'value'.\n       * @param name an identifier as a left-hand-side operand of the assignment\n       * @param value an expression as a right-hand-side operand of the assignment\n       * @param shouldEmitCommaBeforeAssignment a boolean indicating whether to prefix an assignment with comma\n       */\n\n\n      function emitAssignment(name, value, shouldEmitCommaBeforeAssignment, nodeForSourceMap) {\n        if (shouldEmitCommaBeforeAssignment) {\n          write(\", \");\n        }\n\n        var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(name);\n\n        if (exportChanged) {\n          write(exportFunctionForFile + \"(\\\"\");\n          emitNodeWithCommentsAndWithoutSourcemap(name);\n          write(\"\\\", \");\n        }\n\n        var isVariableDeclarationOrBindingElement = name.parent && (name.parent.kind === 214\n        /* VariableDeclaration */\n        || name.parent.kind === 166\n        /* BindingElement */\n        ); // If this is first var declaration, we need to start at var/let/const keyword instead\n        // otherwise use nodeForSourceMap as the start position\n\n        emitStart(isFirstVariableDeclaration(nodeForSourceMap) ? nodeForSourceMap.parent : nodeForSourceMap);\n        withTemporaryNoSourceMap(function () {\n          if (isVariableDeclarationOrBindingElement) {\n            emitModuleMemberName(name.parent);\n          } else {\n            emit(name);\n          }\n\n          write(\" = \");\n          emit(value);\n        });\n        emitEnd(nodeForSourceMap,\n        /*stopOverridingSpan*/\n        true);\n\n        if (exportChanged) {\n          write(\")\");\n        }\n      }\n      /**\n       * Create temporary variable, emit an assignment of the variable the given expression\n       * @param expression an expression to assign to the newly created temporary variable\n       * @param canDefineTempVariablesInPlace a boolean indicating whether you can define the temporary variable at an assignment location\n       * @param shouldEmitCommaBeforeAssignment a boolean indicating whether an assignment should prefix with comma\n       */\n\n\n      function emitTempVariableAssignment(expression, canDefineTempVariablesInPlace, shouldEmitCommaBeforeAssignment, sourceMapNode) {\n        var identifier = createTempVariable(0\n        /* Auto */\n        );\n\n        if (!canDefineTempVariablesInPlace) {\n          recordTempDeclaration(identifier);\n        }\n\n        emitAssignment(identifier, expression, shouldEmitCommaBeforeAssignment, sourceMapNode || expression.parent);\n        return identifier;\n      }\n\n      function isFirstVariableDeclaration(root) {\n        return root.kind === 214\n        /* VariableDeclaration */\n        && root.parent.kind === 215\n        /* VariableDeclarationList */\n        && root.parent.declarations[0] === root;\n      }\n\n      function emitDestructuring(root, isAssignmentExpressionStatement, value) {\n        var emitCount = 0; // An exported declaration is actually emitted as an assignment (to a property on the module object), so\n        // temporary variables in an exported declaration need to have real declarations elsewhere\n        // Also temporary variables should be explicitly allocated for source level declarations when module target is system\n        // because actual variable declarations are hoisted\n\n        var canDefineTempVariablesInPlace = false;\n\n        if (root.kind === 214\n        /* VariableDeclaration */\n        ) {\n            var isExported = ts.getCombinedNodeFlags(root) & 2\n            /* Export */\n            ;\n            var isSourceLevelForSystemModuleKind = shouldHoistDeclarationInSystemJsModule(root);\n            canDefineTempVariablesInPlace = !isExported && !isSourceLevelForSystemModuleKind;\n          } else if (root.kind === 139\n        /* Parameter */\n        ) {\n            canDefineTempVariablesInPlace = true;\n          }\n\n        if (root.kind === 184\n        /* BinaryExpression */\n        ) {\n            emitAssignmentExpression(root);\n          } else {\n          ts.Debug.assert(!isAssignmentExpressionStatement); // If first variable declaration of variable statement correct the start location\n\n          if (isFirstVariableDeclaration(root)) {\n            // Use emit location of \"var \" as next emit start entry\n            sourceMap.changeEmitSourcePos();\n          }\n\n          emitBindingElement(root, value);\n        }\n        /**\n         * Ensures that there exists a declared identifier whose value holds the given expression.\n         * This function is useful to ensure that the expression's value can be read from in subsequent expressions.\n         * Unless 'reuseIdentifierExpressions' is false, 'expr' will be returned if it is just an identifier.\n         *\n         * @param expr the expression whose value needs to be bound.\n         * @param reuseIdentifierExpressions true if identifier expressions can simply be returned;\n         *                                   false if it is necessary to always emit an identifier.\n         */\n\n\n        function ensureIdentifier(expr, reuseIdentifierExpressions, sourceMapNode) {\n          if (expr.kind === 69\n          /* Identifier */\n          && reuseIdentifierExpressions) {\n            return expr;\n          }\n\n          var identifier = emitTempVariableAssignment(expr, canDefineTempVariablesInPlace, emitCount > 0, sourceMapNode);\n          emitCount++;\n          return identifier;\n        }\n\n        function createDefaultValueCheck(value, defaultValue, sourceMapNode) {\n          // The value expression will be evaluated twice, so for anything but a simple identifier\n          // we need to generate a temporary variable\n          // If the temporary variable needs to be emitted use the source Map node for assignment of that statement\n          value = ensureIdentifier(value,\n          /*reuseIdentifierExpressions*/\n          true, sourceMapNode); // Return the expression 'value === void 0 ? defaultValue : value'\n\n          var equals = ts.createSynthesizedNode(184\n          /* BinaryExpression */\n          );\n          equals.left = value;\n          equals.operatorToken = ts.createSynthesizedNode(32\n          /* EqualsEqualsEqualsToken */\n          );\n          equals.right = createVoidZero();\n          return createConditionalExpression(equals, defaultValue, value);\n        }\n\n        function createConditionalExpression(condition, whenTrue, whenFalse) {\n          var cond = ts.createSynthesizedNode(185\n          /* ConditionalExpression */\n          );\n          cond.condition = condition;\n          cond.questionToken = ts.createSynthesizedNode(53\n          /* QuestionToken */\n          );\n          cond.whenTrue = whenTrue;\n          cond.colonToken = ts.createSynthesizedNode(54\n          /* ColonToken */\n          );\n          cond.whenFalse = whenFalse;\n          return cond;\n        }\n\n        function createNumericLiteral(value) {\n          var node = ts.createSynthesizedNode(8\n          /* NumericLiteral */\n          );\n          node.text = \"\" + value;\n          return node;\n        }\n\n        function createPropertyAccessForDestructuringProperty(object, propName) {\n          var index;\n          var nameIsComputed = propName.kind === 137\n          /* ComputedPropertyName */\n          ;\n\n          if (nameIsComputed) {\n            // TODO to handle when we look into sourcemaps for computed properties, for now use propName\n            index = ensureIdentifier(propName.expression,\n            /*reuseIdentifierExpressions*/\n            false, propName);\n          } else {\n            // We create a synthetic copy of the identifier in order to avoid the rewriting that might\n            // otherwise occur when the identifier is emitted.\n            index = ts.createSynthesizedNode(propName.kind); // We need to unescape identifier here because when parsing an identifier prefixing with \"__\"\n            // the parser need to append \"_\" in order to escape colliding with magic identifiers such as \"__proto__\"\n            // Therefore, in order to correctly emit identifiers that are written in original TypeScript file,\n            // we will unescapeIdentifier to remove additional underscore (if no underscore is added, the function will return original input string)\n\n            index.text = ts.unescapeIdentifier(propName.text);\n          }\n\n          return !nameIsComputed && index.kind === 69\n          /* Identifier */\n          ? createPropertyAccessExpression(object, index) : createElementAccessExpression(object, index);\n        }\n\n        function createSliceCall(value, sliceIndex) {\n          var call = ts.createSynthesizedNode(171\n          /* CallExpression */\n          );\n          var sliceIdentifier = ts.createSynthesizedNode(69\n          /* Identifier */\n          );\n          sliceIdentifier.text = \"slice\";\n          call.expression = createPropertyAccessExpression(value, sliceIdentifier);\n          call.arguments = ts.createSynthesizedNodeArray();\n          call.arguments[0] = createNumericLiteral(sliceIndex);\n          return call;\n        }\n\n        function emitObjectLiteralAssignment(target, value, sourceMapNode) {\n          var properties = target.properties;\n\n          if (properties.length !== 1) {\n            // For anything but a single element destructuring we need to generate a temporary\n            // to ensure value is evaluated exactly once.\n            // When doing so we want to hightlight the passed in source map node since thats the one needing this temp assignment\n            value = ensureIdentifier(value,\n            /*reuseIdentifierExpressions*/\n            true, sourceMapNode);\n          }\n\n          for (var _a = 0, properties_5 = properties; _a < properties_5.length; _a++) {\n            var p = properties_5[_a];\n\n            if (p.kind === 248\n            /* PropertyAssignment */\n            || p.kind === 249\n            /* ShorthandPropertyAssignment */\n            ) {\n                var propName = p.name;\n                var target_1 = p.kind === 249\n                /* ShorthandPropertyAssignment */\n                ? p : p.initializer || propName; // Assignment for target = value.propName should highligh whole property, hence use p as source map node\n\n                emitDestructuringAssignment(target_1, createPropertyAccessForDestructuringProperty(value, propName), p);\n              }\n          }\n        }\n\n        function emitArrayLiteralAssignment(target, value, sourceMapNode) {\n          var elements = target.elements;\n\n          if (elements.length !== 1) {\n            // For anything but a single element destructuring we need to generate a temporary\n            // to ensure value is evaluated exactly once.\n            // When doing so we want to hightlight the passed in source map node since thats the one needing this temp assignment\n            value = ensureIdentifier(value,\n            /*reuseIdentifierExpressions*/\n            true, sourceMapNode);\n          }\n\n          for (var i = 0; i < elements.length; i++) {\n            var e = elements[i];\n\n            if (e.kind !== 190\n            /* OmittedExpression */\n            ) {\n                // Assignment for target = value.propName should highligh whole property, hence use e as source map node\n                if (e.kind !== 188\n                /* SpreadElementExpression */\n                ) {\n                    emitDestructuringAssignment(e, createElementAccessExpression(value, createNumericLiteral(i)), e);\n                  } else if (i === elements.length - 1) {\n                  emitDestructuringAssignment(e.expression, createSliceCall(value, i), e);\n                }\n              }\n          }\n        }\n\n        function emitDestructuringAssignment(target, value, sourceMapNode) {\n          // When emitting target = value use source map node to highlight, including any temporary assignments needed for this\n          if (target.kind === 249\n          /* ShorthandPropertyAssignment */\n          ) {\n              if (target.objectAssignmentInitializer) {\n                value = createDefaultValueCheck(value, target.objectAssignmentInitializer, sourceMapNode);\n              }\n\n              target = target.name;\n            } else if (target.kind === 184\n          /* BinaryExpression */\n          && target.operatorToken.kind === 56\n          /* EqualsToken */\n          ) {\n              value = createDefaultValueCheck(value, target.right, sourceMapNode);\n              target = target.left;\n            }\n\n          if (target.kind === 168\n          /* ObjectLiteralExpression */\n          ) {\n              emitObjectLiteralAssignment(target, value, sourceMapNode);\n            } else if (target.kind === 167\n          /* ArrayLiteralExpression */\n          ) {\n              emitArrayLiteralAssignment(target, value, sourceMapNode);\n            } else {\n            emitAssignment(target, value,\n            /*shouldEmitCommaBeforeAssignment*/\n            emitCount > 0, sourceMapNode);\n            emitCount++;\n          }\n        }\n\n        function emitAssignmentExpression(root) {\n          var target = root.left;\n          var value = root.right;\n\n          if (ts.isEmptyObjectLiteralOrArrayLiteral(target)) {\n            emit(value);\n          } else if (isAssignmentExpressionStatement) {\n            // Source map node for root.left = root.right is root\n            // but if root is synthetic, which could be in below case, use the target which is { a }\n            // for ({a} of {a: string}) {\n            // }\n            emitDestructuringAssignment(target, value, ts.nodeIsSynthesized(root) ? target : root);\n          } else {\n            if (root.parent.kind !== 175\n            /* ParenthesizedExpression */\n            ) {\n                write(\"(\");\n              } // Temporary assignment needed to emit root should highlight whole binary expression\n\n\n            value = ensureIdentifier(value,\n            /*reuseIdentifierExpressions*/\n            true, root); // Source map node for root.left = root.right is root\n\n            emitDestructuringAssignment(target, value, root);\n            write(\", \");\n            emit(value);\n\n            if (root.parent.kind !== 175\n            /* ParenthesizedExpression */\n            ) {\n                write(\")\");\n              }\n          }\n        }\n\n        function emitBindingElement(target, value) {\n          // Any temporary assignments needed to emit target = value should point to target\n          if (target.initializer) {\n            // Combine value and initializer\n            value = value ? createDefaultValueCheck(value, target.initializer, target) : target.initializer;\n          } else if (!value) {\n            // Use 'void 0' in absence of value and initializer\n            value = createVoidZero();\n          }\n\n          if (ts.isBindingPattern(target.name)) {\n            var pattern = target.name;\n            var elements = pattern.elements;\n            var numElements = elements.length;\n\n            if (numElements !== 1) {\n              // For anything other than a single-element destructuring we need to generate a temporary\n              // to ensure value is evaluated exactly once. Additionally, if we have zero elements\n              // we need to emit *something* to ensure that in case a 'var' keyword was already emitted,\n              // so in that case, we'll intentionally create that temporary.\n              value = ensureIdentifier(value,\n              /*reuseIdentifierExpressions*/\n              numElements !== 0, target);\n            }\n\n            for (var i = 0; i < numElements; i++) {\n              var element = elements[i];\n\n              if (pattern.kind === 164\n              /* ObjectBindingPattern */\n              ) {\n                  // Rewrite element to a declaration with an initializer that fetches property\n                  var propName = element.propertyName || element.name;\n                  emitBindingElement(element, createPropertyAccessForDestructuringProperty(value, propName));\n                } else if (element.kind !== 190\n              /* OmittedExpression */\n              ) {\n                  if (!element.dotDotDotToken) {\n                    // Rewrite element to a declaration that accesses array element at index i\n                    emitBindingElement(element, createElementAccessExpression(value, createNumericLiteral(i)));\n                  } else if (i === numElements - 1) {\n                    emitBindingElement(element, createSliceCall(value, i));\n                  }\n                }\n            }\n          } else {\n            emitAssignment(target.name, value,\n            /*shouldEmitCommaBeforeAssignment*/\n            emitCount > 0, target);\n            emitCount++;\n          }\n        }\n      }\n\n      function emitVariableDeclaration(node) {\n        if (ts.isBindingPattern(node.name)) {\n          if (languageVersion < 2\n          /* ES6 */\n          ) {\n              emitDestructuring(node,\n              /*isAssignmentExpressionStatement*/\n              false);\n            } else {\n            emit(node.name);\n            emitOptional(\" = \", node.initializer);\n          }\n        } else {\n          var initializer = node.initializer;\n\n          if (!initializer && languageVersion < 2\n          /* ES6 */\n          && // for names - binding patterns that lack initializer there is no point to emit explicit initializer\n          // since downlevel codegen for destructuring will fail in the absence of initializer so all binding elements will say uninitialized\n          node.name.kind === 69\n          /* Identifier */\n          ) {\n              var container = ts.getEnclosingBlockScopeContainer(node);\n              var flags = resolver.getNodeCheckFlags(node); // nested let bindings might need to be initialized explicitly to preserve ES6 semantic\n              // { let x = 1; }\n              // { let x; } // x here should be undefined. not 1\n              // NOTES:\n              // Top level bindings never collide with anything and thus don't require explicit initialization.\n              // As for nested let bindings there are two cases:\n              // - nested let bindings that were not renamed definitely should be initialized explicitly\n              //   { let x = 1; }\n              //   { let x; if (some-condition) { x = 1}; if (x) { /*1*/ } }\n              //   Without explicit initialization code in /*1*/ can be executed even if some-condition is evaluated to false\n              // - renaming introduces fresh name that should not collide with any existing names, however renamed bindings sometimes also should be\n              //   explicitly initialized. One particular case: non-captured binding declared inside loop body (but not in loop initializer)\n              //   let x;\n              //   for (;;) {\n              //       let x;\n              //   }\n              //   in downlevel codegen inner 'x' will be renamed so it won't collide with outer 'x' however it will should be reset on every iteration\n              //   as if it was declared anew.\n              //   * Why non-captured binding - because if loop contains block scoped binding captured in some function then loop body will be rewritten\n              //   to have a fresh scope on every iteration so everything will just work.\n              //   * Why loop initializer is excluded - since we've introduced a fresh name it already will be undefined.\n\n              var isCapturedInFunction = flags & 131072\n              /* CapturedBlockScopedBinding */\n              ;\n              var isDeclaredInLoop = flags & 262144\n              /* BlockScopedBindingInLoop */\n              ;\n              var emittedAsTopLevel = ts.isBlockScopedContainerTopLevel(container) || isCapturedInFunction && isDeclaredInLoop && container.kind === 195\n              /* Block */\n              && ts.isIterationStatement(container.parent,\n              /*lookInLabeledStatements*/\n              false);\n              var emittedAsNestedLetDeclaration = ts.getCombinedNodeFlags(node) & 8192\n              /* Let */\n              && !emittedAsTopLevel;\n              var emitExplicitInitializer = emittedAsNestedLetDeclaration && container.kind !== 203\n              /* ForInStatement */\n              && container.kind !== 204\n              /* ForOfStatement */\n              && (!resolver.isDeclarationWithCollidingName(node) || isDeclaredInLoop && !isCapturedInFunction && !ts.isIterationStatement(container,\n              /*lookInLabeledStatements*/\n              false));\n\n              if (emitExplicitInitializer) {\n                initializer = createVoidZero();\n              }\n            }\n\n          var exportChanged = isNameOfExportedSourceLevelDeclarationInSystemExternalModule(node.name);\n\n          if (exportChanged) {\n            write(exportFunctionForFile + \"(\\\"\");\n            emitNodeWithCommentsAndWithoutSourcemap(node.name);\n            write(\"\\\", \");\n          }\n\n          emitModuleMemberName(node);\n          emitOptional(\" = \", initializer);\n\n          if (exportChanged) {\n            write(\")\");\n          }\n        }\n      }\n\n      function emitExportVariableAssignments(node) {\n        if (node.kind === 190\n        /* OmittedExpression */\n        ) {\n            return;\n          }\n\n        var name = node.name;\n\n        if (name.kind === 69\n        /* Identifier */\n        ) {\n            emitExportMemberAssignments(name);\n          } else if (ts.isBindingPattern(name)) {\n          ts.forEach(name.elements, emitExportVariableAssignments);\n        }\n      }\n\n      function isES6ExportedDeclaration(node) {\n        return !!(node.flags & 2\n        /* Export */\n        ) && modulekind === 5\n        /* ES6 */\n        && node.parent.kind === 251\n        /* SourceFile */\n        ;\n      }\n\n      function emitVariableStatement(node) {\n        var startIsEmitted = false;\n\n        if (node.flags & 2\n        /* Export */\n        ) {\n            if (isES6ExportedDeclaration(node)) {\n              // Exported ES6 module member\n              write(\"export \");\n              startIsEmitted = tryEmitStartOfVariableDeclarationList(node.declarationList);\n            }\n          } else {\n          startIsEmitted = tryEmitStartOfVariableDeclarationList(node.declarationList);\n        }\n\n        if (startIsEmitted) {\n          emitCommaList(node.declarationList.declarations);\n          write(\";\");\n        } else {\n          var atLeastOneItem = emitVariableDeclarationListSkippingUninitializedEntries(node.declarationList);\n\n          if (atLeastOneItem) {\n            write(\";\");\n          }\n        }\n\n        if (modulekind !== 5\n        /* ES6 */\n        && node.parent === currentSourceFile) {\n          ts.forEach(node.declarationList.declarations, emitExportVariableAssignments);\n        }\n      }\n\n      function shouldEmitLeadingAndTrailingCommentsForVariableStatement(node) {\n        // If we're not exporting the variables, there's nothing special here.\n        // Always emit comments for these nodes.\n        if (!(node.flags & 2\n        /* Export */\n        )) {\n          return true;\n        } // If we are exporting, but it's a top-level ES6 module exports,\n        // we'll emit the declaration list verbatim, so emit comments too.\n\n\n        if (isES6ExportedDeclaration(node)) {\n          return true;\n        } // Otherwise, only emit if we have at least one initializer present.\n\n\n        for (var _a = 0, _b = node.declarationList.declarations; _a < _b.length; _a++) {\n          var declaration = _b[_a];\n\n          if (declaration.initializer) {\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      function emitParameter(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            if (ts.isBindingPattern(node.name)) {\n              var name_27 = createTempVariable(0\n              /* Auto */\n              );\n\n              if (!tempParameters) {\n                tempParameters = [];\n              }\n\n              tempParameters.push(name_27);\n              emit(name_27);\n            } else {\n              emit(node.name);\n            }\n          } else {\n          if (node.dotDotDotToken) {\n            write(\"...\");\n          }\n\n          emit(node.name);\n          emitOptional(\" = \", node.initializer);\n        }\n      }\n\n      function emitDefaultValueAssignments(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            var tempIndex_1 = 0;\n            ts.forEach(node.parameters, function (parameter) {\n              // A rest parameter cannot have a binding pattern or an initializer,\n              // so let's just ignore it.\n              if (parameter.dotDotDotToken) {\n                return;\n              }\n\n              var paramName = parameter.name,\n                  initializer = parameter.initializer;\n\n              if (ts.isBindingPattern(paramName)) {\n                // In cases where a binding pattern is simply '[]' or '{}',\n                // we usually don't want to emit a var declaration; however, in the presence\n                // of an initializer, we must emit that expression to preserve side effects.\n                var hasBindingElements = paramName.elements.length > 0;\n\n                if (hasBindingElements || initializer) {\n                  writeLine();\n                  write(\"var \");\n\n                  if (hasBindingElements) {\n                    emitDestructuring(parameter,\n                    /*isAssignmentExpressionStatement*/\n                    false, tempParameters[tempIndex_1]);\n                  } else {\n                    emit(tempParameters[tempIndex_1]);\n                    write(\" = \");\n                    emit(initializer);\n                  }\n\n                  write(\";\");\n                  tempIndex_1++;\n                }\n              } else if (initializer) {\n                writeLine();\n                emitStart(parameter);\n                write(\"if (\");\n                emitNodeWithoutSourceMap(paramName);\n                write(\" === void 0)\");\n                emitEnd(parameter);\n                write(\" { \");\n                emitStart(parameter);\n                emitNodeWithCommentsAndWithoutSourcemap(paramName);\n                write(\" = \");\n                emitNodeWithCommentsAndWithoutSourcemap(initializer);\n                emitEnd(parameter);\n                write(\"; }\");\n              }\n            });\n          }\n      }\n\n      function emitRestParameter(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        && ts.hasRestParameter(node)) {\n          var restIndex = node.parameters.length - 1;\n          var restParam = node.parameters[restIndex]; // A rest parameter cannot have a binding pattern, so let's just ignore it if it does.\n\n          if (ts.isBindingPattern(restParam.name)) {\n            return;\n          }\n\n          var tempName = createTempVariable(268435456\n          /* _i */\n          ).text;\n          writeLine();\n          emitLeadingComments(restParam);\n          emitStart(restParam);\n          write(\"var \");\n          emitNodeWithCommentsAndWithoutSourcemap(restParam.name);\n          write(\" = [];\");\n          emitEnd(restParam);\n          emitTrailingComments(restParam);\n          writeLine();\n          write(\"for (\");\n          emitStart(restParam);\n          write(\"var \" + tempName + \" = \" + restIndex + \";\");\n          emitEnd(restParam);\n          write(\" \");\n          emitStart(restParam);\n          write(tempName + \" < arguments.length;\");\n          emitEnd(restParam);\n          write(\" \");\n          emitStart(restParam);\n          write(tempName + \"++\");\n          emitEnd(restParam);\n          write(\") {\");\n          increaseIndent();\n          writeLine();\n          emitStart(restParam);\n          emitNodeWithCommentsAndWithoutSourcemap(restParam.name);\n          write(\"[\" + tempName + \" - \" + restIndex + \"] = arguments[\" + tempName + \"];\");\n          emitEnd(restParam);\n          decreaseIndent();\n          writeLine();\n          write(\"}\");\n        }\n      }\n\n      function emitAccessor(node) {\n        write(node.kind === 146\n        /* GetAccessor */\n        ? \"get \" : \"set \");\n        emit(node.name);\n        emitSignatureAndBody(node);\n      }\n\n      function shouldEmitAsArrowFunction(node) {\n        return node.kind === 177\n        /* ArrowFunction */\n        && languageVersion >= 2\n        /* ES6 */\n        ;\n      }\n\n      function emitDeclarationName(node) {\n        if (node.name) {\n          emitNodeWithCommentsAndWithoutSourcemap(node.name);\n        } else {\n          write(getGeneratedNameForNode(node));\n        }\n      }\n\n      function shouldEmitFunctionName(node) {\n        if (node.kind === 176\n        /* FunctionExpression */\n        ) {\n            // Emit name if one is present\n            return !!node.name;\n          }\n\n        if (node.kind === 216\n        /* FunctionDeclaration */\n        ) {\n            // Emit name if one is present, or emit generated name in down-level case (for export default case)\n            return !!node.name || modulekind !== 5\n            /* ES6 */\n            ;\n          }\n      }\n\n      function emitFunctionDeclaration(node) {\n        if (ts.nodeIsMissing(node.body)) {\n          return emitCommentsOnNotEmittedNode(node);\n        } // TODO (yuisu) : we should not have special cases to condition emitting comments\n        // but have one place to fix check for these conditions.\n\n\n        var kind = node.kind,\n            parent = node.parent;\n\n        if (kind !== 144\n        /* MethodDeclaration */\n        && kind !== 143\n        /* MethodSignature */\n        && parent && parent.kind !== 248\n        /* PropertyAssignment */\n        && parent.kind !== 171\n        /* CallExpression */\n        && parent.kind !== 167\n        /* ArrayLiteralExpression */\n        ) {\n            // 1. Methods will emit comments at their assignment declaration sites.\n            //\n            // 2. If the function is a property of object literal, emitting leading-comments\n            //    is done by emitNodeWithoutSourceMap which then call this function.\n            //    In particular, we would like to avoid emit comments twice in following case:\n            //\n            //          var obj = {\n            //              id:\n            //                  /*comment*/ () => void\n            //          }\n            //\n            // 3. If the function is an argument in call expression, emitting of comments will be\n            //    taken care of in emit list of arguments inside of 'emitCallExpression'.\n            //\n            // 4. If the function is in an array literal, 'emitLinePreservingList' will take care\n            //    of leading comments.\n            emitLeadingComments(node);\n          }\n\n        emitStart(node); // For targeting below es6, emit functions-like declaration including arrow function using function keyword.\n        // When targeting ES6, emit arrow function natively in ES6 by omitting function keyword and using fat arrow instead\n\n        if (!shouldEmitAsArrowFunction(node)) {\n          if (isES6ExportedDeclaration(node)) {\n            write(\"export \");\n\n            if (node.flags & 512\n            /* Default */\n            ) {\n                write(\"default \");\n              }\n          }\n\n          write(\"function\");\n\n          if (languageVersion >= 2\n          /* ES6 */\n          && node.asteriskToken) {\n            write(\"*\");\n          }\n\n          write(\" \");\n        }\n\n        if (shouldEmitFunctionName(node)) {\n          emitDeclarationName(node);\n        }\n\n        emitSignatureAndBody(node);\n\n        if (modulekind !== 5\n        /* ES6 */\n        && kind === 216\n        /* FunctionDeclaration */\n        && parent === currentSourceFile && node.name) {\n          emitExportMemberAssignments(node.name);\n        }\n\n        emitEnd(node);\n\n        if (kind !== 144\n        /* MethodDeclaration */\n        && kind !== 143\n        /* MethodSignature */\n        ) {\n            emitTrailingComments(node);\n          }\n      }\n\n      function emitCaptureThisForNodeIfNecessary(node) {\n        if (resolver.getNodeCheckFlags(node) & 4\n        /* CaptureThis */\n        ) {\n            writeLine();\n            emitStart(node);\n            write(\"var _this = this;\");\n            emitEnd(node);\n          }\n      }\n\n      function emitSignatureParameters(node) {\n        increaseIndent();\n        write(\"(\");\n\n        if (node) {\n          var parameters = node.parameters;\n          var omitCount = languageVersion < 2\n          /* ES6 */\n          && ts.hasRestParameter(node) ? 1 : 0;\n          emitList(parameters, 0, parameters.length - omitCount,\n          /*multiLine*/\n          false,\n          /*trailingComma*/\n          false);\n        }\n\n        write(\")\");\n        decreaseIndent();\n      }\n\n      function emitSignatureParametersForArrow(node) {\n        // Check whether the parameter list needs parentheses and preserve no-parenthesis\n        if (node.parameters.length === 1 && node.pos === node.parameters[0].pos) {\n          emit(node.parameters[0]);\n          return;\n        }\n\n        emitSignatureParameters(node);\n      }\n\n      function emitAsyncFunctionBodyForES6(node) {\n        var promiseConstructor = ts.getEntityNameFromTypeNode(node.type);\n        var isArrowFunction = node.kind === 177\n        /* ArrowFunction */\n        ;\n        var hasLexicalArguments = (resolver.getNodeCheckFlags(node) & 8192\n        /* CaptureArguments */\n        ) !== 0; // An async function is emit as an outer function that calls an inner\n        // generator function. To preserve lexical bindings, we pass the current\n        // `this` and `arguments` objects to `__awaiter`. The generator function\n        // passed to `__awaiter` is executed inside of the callback to the\n        // promise constructor.\n        //\n        // The emit for an async arrow without a lexical `arguments` binding might be:\n        //\n        //  // input\n        //  let a = async (b) => { await b; }\n        //\n        //  // output\n        //  let a = (b) => __awaiter(this, void 0, void 0, function* () {\n        //      yield b;\n        //  });\n        //\n        // The emit for an async arrow with a lexical `arguments` binding might be:\n        //\n        //  // input\n        //  let a = async (b) => { await arguments[0]; }\n        //\n        //  // output\n        //  let a = (b) => __awaiter(this, arguments, void 0, function* (arguments) {\n        //      yield arguments[0];\n        //  });\n        //\n        // The emit for an async function expression without a lexical `arguments` binding\n        // might be:\n        //\n        //  // input\n        //  let a = async function (b) {\n        //      await b;\n        //  }\n        //\n        //  // output\n        //  let a = function (b) {\n        //      return __awaiter(this, void 0, void 0, function* () {\n        //          yield b;\n        //      });\n        //  }\n        //\n        // The emit for an async function expression with a lexical `arguments` binding\n        // might be:\n        //\n        //  // input\n        //  let a = async function (b) {\n        //      await arguments[0];\n        //  }\n        //\n        //  // output\n        //  let a = function (b) {\n        //      return __awaiter(this, arguments, void 0, function* (_arguments) {\n        //          yield _arguments[0];\n        //      });\n        //  }\n        //\n        // The emit for an async function expression with a lexical `arguments` binding\n        // and a return type annotation might be:\n        //\n        //  // input\n        //  let a = async function (b): MyPromise<any> {\n        //      await arguments[0];\n        //  }\n        //\n        //  // output\n        //  let a = function (b) {\n        //      return __awaiter(this, arguments, MyPromise, function* (_arguments) {\n        //          yield _arguments[0];\n        //      });\n        //  }\n        //\n        // If this is not an async arrow, emit the opening brace of the function body\n        // and the start of the return statement.\n\n        if (!isArrowFunction) {\n          write(\" {\");\n          increaseIndent();\n          writeLine();\n\n          if (resolver.getNodeCheckFlags(node) & 4096\n          /* AsyncMethodWithSuperBinding */\n          ) {\n              writeLines(\"\\nconst _super = (function (geti, seti) {\\n    const cache = Object.create(null);\\n    return name => cache[name] || (cache[name] = { get value() { return geti(name); }, set value(v) { seti(name, v); } });\\n})(name => super[name], (name, value) => super[name] = value);\");\n              writeLine();\n            } else if (resolver.getNodeCheckFlags(node) & 2048\n          /* AsyncMethodWithSuper */\n          ) {\n              write(\"const _super = name => super[name];\");\n              writeLine();\n            }\n\n          write(\"return\");\n        }\n\n        write(\" __awaiter(this\");\n\n        if (hasLexicalArguments) {\n          write(\", arguments, \");\n        } else {\n          write(\", void 0, \");\n        }\n\n        if (!promiseConstructor || compilerOptions.noCustomAsyncPromise && languageVersion >= 2\n        /* ES6 */\n        ) {\n          write(\"void 0\");\n        } else {\n          emitEntityNameAsExpression(promiseConstructor,\n          /*useFallback*/\n          false);\n        } // Emit the call to __awaiter.\n\n\n        write(\", function* ()\"); // Emit the signature and body for the inner generator function.\n\n        emitFunctionBody(node);\n        write(\")\"); // If this is not an async arrow, emit the closing brace of the outer function body.\n\n        if (!isArrowFunction) {\n          write(\";\");\n          decreaseIndent();\n          writeLine();\n          write(\"}\");\n        }\n      }\n\n      function emitFunctionBody(node) {\n        if (!node.body) {\n          // There can be no body when there are parse errors.  Just emit an empty block\n          // in that case.\n          write(\" { }\");\n        } else {\n          if (node.body.kind === 195\n          /* Block */\n          ) {\n              emitBlockFunctionBody(node, node.body);\n            } else {\n            emitExpressionFunctionBody(node, node.body);\n          }\n        }\n      }\n\n      function emitSignatureAndBody(node) {\n        var saveConvertedLoopState = convertedLoopState;\n        var saveTempFlags = tempFlags;\n        var saveTempVariables = tempVariables;\n        var saveTempParameters = tempParameters;\n        convertedLoopState = undefined;\n        tempFlags = 0;\n        tempVariables = undefined;\n        tempParameters = undefined; // When targeting ES6, emit arrow function natively in ES6\n\n        if (shouldEmitAsArrowFunction(node)) {\n          emitSignatureParametersForArrow(node);\n          write(\" =>\");\n        } else {\n          emitSignatureParameters(node);\n        }\n\n        var isAsync = ts.isAsyncFunctionLike(node);\n\n        if (isAsync) {\n          emitAsyncFunctionBodyForES6(node);\n        } else {\n          emitFunctionBody(node);\n        }\n\n        if (!isES6ExportedDeclaration(node)) {\n          emitExportMemberAssignment(node);\n        }\n\n        ts.Debug.assert(convertedLoopState === undefined);\n        convertedLoopState = saveConvertedLoopState;\n        tempFlags = saveTempFlags;\n        tempVariables = saveTempVariables;\n        tempParameters = saveTempParameters;\n      } // Returns true if any preamble code was emitted.\n\n\n      function emitFunctionBodyPreamble(node) {\n        emitCaptureThisForNodeIfNecessary(node);\n        emitDefaultValueAssignments(node);\n        emitRestParameter(node);\n      }\n\n      function emitExpressionFunctionBody(node, body) {\n        if (languageVersion < 2\n        /* ES6 */\n        || node.flags & 256\n        /* Async */\n        ) {\n            emitDownLevelExpressionFunctionBody(node, body);\n            return;\n          } // For es6 and higher we can emit the expression as is.  However, in the case\n        // where the expression might end up looking like a block when emitted, we'll\n        // also wrap it in parentheses first.  For example if you have: a => <foo>{}\n        // then we need to generate: a => ({})\n\n\n        write(\" \"); // Unwrap all type assertions.\n\n        var current = body;\n\n        while (current.kind === 174\n        /* TypeAssertionExpression */\n        ) {\n          current = current.expression;\n        }\n\n        emitParenthesizedIf(body, current.kind === 168\n        /* ObjectLiteralExpression */\n        );\n      }\n\n      function emitDownLevelExpressionFunctionBody(node, body) {\n        write(\" {\");\n        increaseIndent();\n        var outPos = writer.getTextPos();\n        emitDetachedCommentsAndUpdateCommentsInfo(node.body);\n        emitFunctionBodyPreamble(node);\n        var preambleEmitted = writer.getTextPos() !== outPos;\n        decreaseIndent(); // If we didn't have to emit any preamble code, then attempt to keep the arrow\n        // function on one line.\n\n        if (!preambleEmitted && nodeStartPositionsAreOnSameLine(node, body)) {\n          write(\" \");\n          emitStart(body);\n          write(\"return \");\n          emit(body);\n          emitEnd(body);\n          write(\";\");\n          emitTempDeclarations(\n          /*newLine*/\n          false);\n          write(\" \");\n        } else {\n          increaseIndent();\n          writeLine();\n          emitLeadingComments(node.body);\n          emitStart(body);\n          write(\"return \");\n          emit(body);\n          emitEnd(body);\n          write(\";\");\n          emitTrailingComments(node.body);\n          emitTempDeclarations(\n          /*newLine*/\n          true);\n          decreaseIndent();\n          writeLine();\n        }\n\n        emitStart(node.body);\n        write(\"}\");\n        emitEnd(node.body);\n      }\n\n      function emitBlockFunctionBody(node, body) {\n        write(\" {\");\n        var initialTextPos = writer.getTextPos();\n        increaseIndent();\n        emitDetachedCommentsAndUpdateCommentsInfo(body.statements); // Emit all the directive prologues (like \"use strict\").  These have to come before\n        // any other preamble code we write (like parameter initializers).\n\n        var startIndex = emitDirectivePrologues(body.statements,\n        /*startWithNewLine*/\n        true);\n        emitFunctionBodyPreamble(node);\n        decreaseIndent();\n        var preambleEmitted = writer.getTextPos() !== initialTextPos;\n\n        if (!preambleEmitted && nodeEndIsOnSameLineAsNodeStart(body, body)) {\n          for (var _a = 0, _b = body.statements; _a < _b.length; _a++) {\n            var statement = _b[_a];\n            write(\" \");\n            emit(statement);\n          }\n\n          emitTempDeclarations(\n          /*newLine*/\n          false);\n          write(\" \");\n          emitLeadingCommentsOfPosition(body.statements.end);\n        } else {\n          increaseIndent();\n          emitLinesStartingAt(body.statements, startIndex);\n          emitTempDeclarations(\n          /*newLine*/\n          true);\n          writeLine();\n          emitLeadingCommentsOfPosition(body.statements.end);\n          decreaseIndent();\n        }\n\n        emitToken(16\n        /* CloseBraceToken */\n        , body.statements.end);\n      }\n      /**\n       * Return the statement at a given index if it is a super-call statement\n       * @param ctor a constructor declaration\n       * @param index an index to constructor's body to check\n       */\n\n\n      function getSuperCallAtGivenIndex(ctor, index) {\n        if (!ctor.body) {\n          return undefined;\n        }\n\n        var statements = ctor.body.statements;\n\n        if (!statements || index >= statements.length) {\n          return undefined;\n        }\n\n        var statement = statements[index];\n\n        if (statement.kind === 198\n        /* ExpressionStatement */\n        ) {\n            return ts.isSuperCallExpression(statement.expression) ? statement : undefined;\n          }\n      }\n\n      function emitParameterPropertyAssignments(node) {\n        ts.forEach(node.parameters, function (param) {\n          if (param.flags & 56\n          /* AccessibilityModifier */\n          ) {\n              writeLine();\n              emitStart(param);\n              emitStart(param.name);\n              write(\"this.\");\n              emitNodeWithoutSourceMap(param.name);\n              emitEnd(param.name);\n              write(\" = \");\n              emit(param.name);\n              write(\";\");\n              emitEnd(param);\n            }\n        });\n      }\n\n      function emitMemberAccessForPropertyName(memberName) {\n        // This does not emit source map because it is emitted by caller as caller\n        // is aware how the property name changes to the property access\n        // eg. public x = 10; becomes this.x and static x = 10 becomes className.x\n        if (memberName.kind === 9\n        /* StringLiteral */\n        || memberName.kind === 8\n        /* NumericLiteral */\n        ) {\n            write(\"[\");\n            emitNodeWithCommentsAndWithoutSourcemap(memberName);\n            write(\"]\");\n          } else if (memberName.kind === 137\n        /* ComputedPropertyName */\n        ) {\n            emitComputedPropertyName(memberName);\n          } else {\n          write(\".\");\n          emitNodeWithCommentsAndWithoutSourcemap(memberName);\n        }\n      }\n\n      function getInitializedProperties(node, isStatic) {\n        var properties = [];\n\n        for (var _a = 0, _b = node.members; _a < _b.length; _a++) {\n          var member = _b[_a];\n\n          if (member.kind === 142\n          /* PropertyDeclaration */\n          && isStatic === ((member.flags & 64\n          /* Static */\n          ) !== 0) && member.initializer) {\n            properties.push(member);\n          }\n        }\n\n        return properties;\n      }\n\n      function emitPropertyDeclarations(node, properties) {\n        for (var _a = 0, properties_6 = properties; _a < properties_6.length; _a++) {\n          var property = properties_6[_a];\n          emitPropertyDeclaration(node, property);\n        }\n      }\n\n      function emitPropertyDeclaration(node, property, receiver, isExpression) {\n        writeLine();\n        emitLeadingComments(property);\n        emitStart(property);\n        emitStart(property.name);\n\n        if (receiver) {\n          emit(receiver);\n        } else {\n          if (property.flags & 64\n          /* Static */\n          ) {\n              emitDeclarationName(node);\n            } else {\n            write(\"this\");\n          }\n        }\n\n        emitMemberAccessForPropertyName(property.name);\n        emitEnd(property.name);\n        write(\" = \");\n        emit(property.initializer);\n\n        if (!isExpression) {\n          write(\";\");\n        }\n\n        emitEnd(property);\n        emitTrailingComments(property);\n      }\n\n      function emitMemberFunctionsForES5AndLower(node) {\n        ts.forEach(node.members, function (member) {\n          if (member.kind === 194\n          /* SemicolonClassElement */\n          ) {\n              writeLine();\n              write(\";\");\n            } else if (member.kind === 144\n          /* MethodDeclaration */\n          || node.kind === 143\n          /* MethodSignature */\n          ) {\n              if (!member.body) {\n                return emitCommentsOnNotEmittedNode(member);\n              }\n\n              writeLine();\n              emitLeadingComments(member);\n              emitStart(member);\n              emitStart(member.name);\n              emitClassMemberPrefix(node, member);\n              emitMemberAccessForPropertyName(member.name);\n              emitEnd(member.name);\n              write(\" = \");\n              emitFunctionDeclaration(member);\n              emitEnd(member);\n              write(\";\");\n              emitTrailingComments(member);\n            } else if (member.kind === 146\n          /* GetAccessor */\n          || member.kind === 147\n          /* SetAccessor */\n          ) {\n              var accessors = ts.getAllAccessorDeclarations(node.members, member);\n\n              if (member === accessors.firstAccessor) {\n                writeLine();\n                emitStart(member);\n                write(\"Object.defineProperty(\");\n                emitStart(member.name);\n                emitClassMemberPrefix(node, member);\n                write(\", \");\n                emitExpressionForPropertyName(member.name);\n                emitEnd(member.name);\n                write(\", {\");\n                increaseIndent();\n\n                if (accessors.getAccessor) {\n                  writeLine();\n                  emitLeadingComments(accessors.getAccessor);\n                  write(\"get: \");\n                  emitStart(accessors.getAccessor);\n                  write(\"function \");\n                  emitSignatureAndBody(accessors.getAccessor);\n                  emitEnd(accessors.getAccessor);\n                  emitTrailingComments(accessors.getAccessor);\n                  write(\",\");\n                }\n\n                if (accessors.setAccessor) {\n                  writeLine();\n                  emitLeadingComments(accessors.setAccessor);\n                  write(\"set: \");\n                  emitStart(accessors.setAccessor);\n                  write(\"function \");\n                  emitSignatureAndBody(accessors.setAccessor);\n                  emitEnd(accessors.setAccessor);\n                  emitTrailingComments(accessors.setAccessor);\n                  write(\",\");\n                }\n\n                writeLine();\n                write(\"enumerable: true,\");\n                writeLine();\n                write(\"configurable: true\");\n                decreaseIndent();\n                writeLine();\n                write(\"});\");\n                emitEnd(member);\n              }\n            }\n        });\n      }\n\n      function emitMemberFunctionsForES6AndHigher(node) {\n        for (var _a = 0, _b = node.members; _a < _b.length; _a++) {\n          var member = _b[_a];\n\n          if ((member.kind === 144\n          /* MethodDeclaration */\n          || node.kind === 143\n          /* MethodSignature */\n          ) && !member.body) {\n            emitCommentsOnNotEmittedNode(member);\n          } else if (member.kind === 144\n          /* MethodDeclaration */\n          || member.kind === 146\n          /* GetAccessor */\n          || member.kind === 147\n          /* SetAccessor */\n          ) {\n              writeLine();\n              emitLeadingComments(member);\n              emitStart(member);\n\n              if (member.flags & 64\n              /* Static */\n              ) {\n                  write(\"static \");\n                }\n\n              if (member.kind === 146\n              /* GetAccessor */\n              ) {\n                  write(\"get \");\n                } else if (member.kind === 147\n              /* SetAccessor */\n              ) {\n                  write(\"set \");\n                }\n\n              if (member.asteriskToken) {\n                write(\"*\");\n              }\n\n              emit(member.name);\n              emitSignatureAndBody(member);\n              emitEnd(member);\n              emitTrailingComments(member);\n            } else if (member.kind === 194\n          /* SemicolonClassElement */\n          ) {\n              writeLine();\n              write(\";\");\n            }\n        }\n      }\n\n      function emitConstructor(node, baseTypeElement) {\n        var saveConvertedLoopState = convertedLoopState;\n        var saveTempFlags = tempFlags;\n        var saveTempVariables = tempVariables;\n        var saveTempParameters = tempParameters;\n        convertedLoopState = undefined;\n        tempFlags = 0;\n        tempVariables = undefined;\n        tempParameters = undefined;\n        emitConstructorWorker(node, baseTypeElement);\n        ts.Debug.assert(convertedLoopState === undefined);\n        convertedLoopState = saveConvertedLoopState;\n        tempFlags = saveTempFlags;\n        tempVariables = saveTempVariables;\n        tempParameters = saveTempParameters;\n      }\n\n      function emitConstructorWorker(node, baseTypeElement) {\n        // Check if we have property assignment inside class declaration.\n        // If there is property assignment, we need to emit constructor whether users define it or not\n        // If there is no property assignment, we can omit constructor if users do not define it\n        var hasInstancePropertyWithInitializer = false; // Emit the constructor overload pinned comments\n\n        ts.forEach(node.members, function (member) {\n          if (member.kind === 145\n          /* Constructor */\n          && !member.body) {\n            emitCommentsOnNotEmittedNode(member);\n          } // Check if there is any non-static property assignment\n\n\n          if (member.kind === 142\n          /* PropertyDeclaration */\n          && member.initializer && (member.flags & 64\n          /* Static */\n          ) === 0) {\n            hasInstancePropertyWithInitializer = true;\n          }\n        });\n        var ctor = ts.getFirstConstructorWithBody(node); // For target ES6 and above, if there is no user-defined constructor and there is no property assignment\n        // do not emit constructor in class declaration.\n\n        if (languageVersion >= 2\n        /* ES6 */\n        && !ctor && !hasInstancePropertyWithInitializer) {\n          return;\n        }\n\n        if (ctor) {\n          emitLeadingComments(ctor);\n        }\n\n        emitStart(ctor || node);\n\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            write(\"function \");\n            emitDeclarationName(node);\n            emitSignatureParameters(ctor);\n          } else {\n          write(\"constructor\");\n\n          if (ctor) {\n            emitSignatureParameters(ctor);\n          } else {\n            // Based on EcmaScript6 section 14.5.14: Runtime Semantics: ClassDefinitionEvaluation.\n            // If constructor is empty, then,\n            //      If ClassHeritageopt is present, then\n            //          Let constructor be the result of parsing the String \"constructor(... args){ super (...args);}\" using the syntactic grammar with the goal symbol MethodDefinition.\n            //      Else,\n            //          Let constructor be the result of parsing the String \"constructor( ){ }\" using the syntactic grammar with the goal symbol MethodDefinition\n            if (baseTypeElement) {\n              write(\"(...args)\");\n            } else {\n              write(\"()\");\n            }\n          }\n        }\n\n        var startIndex = 0;\n        write(\" {\");\n        increaseIndent();\n\n        if (ctor) {\n          // Emit all the directive prologues (like \"use strict\").  These have to come before\n          // any other preamble code we write (like parameter initializers).\n          startIndex = emitDirectivePrologues(ctor.body.statements,\n          /*startWithNewLine*/\n          true);\n          emitDetachedCommentsAndUpdateCommentsInfo(ctor.body.statements);\n        }\n\n        emitCaptureThisForNodeIfNecessary(node);\n        var superCall;\n\n        if (ctor) {\n          emitDefaultValueAssignments(ctor);\n          emitRestParameter(ctor);\n\n          if (baseTypeElement) {\n            superCall = getSuperCallAtGivenIndex(ctor, startIndex);\n\n            if (superCall) {\n              writeLine();\n              emit(superCall);\n            }\n          }\n\n          emitParameterPropertyAssignments(ctor);\n        } else {\n          if (baseTypeElement) {\n            writeLine();\n            emitStart(baseTypeElement);\n\n            if (languageVersion < 2\n            /* ES6 */\n            ) {\n                write(\"_super.apply(this, arguments);\");\n              } else {\n              write(\"super(...args);\");\n            }\n\n            emitEnd(baseTypeElement);\n          }\n        }\n\n        emitPropertyDeclarations(node, getInitializedProperties(node,\n        /*isStatic*/\n        false));\n\n        if (ctor) {\n          var statements = ctor.body.statements;\n\n          if (superCall) {\n            statements = statements.slice(1);\n          }\n\n          emitLinesStartingAt(statements, startIndex);\n        }\n\n        emitTempDeclarations(\n        /*newLine*/\n        true);\n        writeLine();\n\n        if (ctor) {\n          emitLeadingCommentsOfPosition(ctor.body.statements.end);\n        }\n\n        decreaseIndent();\n        emitToken(16\n        /* CloseBraceToken */\n        , ctor ? ctor.body.statements.end : node.members.end);\n        emitEnd(ctor || node);\n\n        if (ctor) {\n          emitTrailingComments(ctor);\n        }\n      }\n\n      function emitClassExpression(node) {\n        return emitClassLikeDeclaration(node);\n      }\n\n      function emitClassDeclaration(node) {\n        return emitClassLikeDeclaration(node);\n      }\n\n      function emitClassLikeDeclaration(node) {\n        if (languageVersion < 2\n        /* ES6 */\n        ) {\n            emitClassLikeDeclarationBelowES6(node);\n          } else {\n          emitClassLikeDeclarationForES6AndHigher(node);\n        }\n\n        if (modulekind !== 5\n        /* ES6 */\n        && node.parent === currentSourceFile && node.name) {\n          emitExportMemberAssignments(node.name);\n        }\n      }\n\n      function emitClassLikeDeclarationForES6AndHigher(node) {\n        var decoratedClassAlias;\n        var thisNodeIsDecorated = ts.nodeIsDecorated(node);\n\n        if (node.kind === 217\n        /* ClassDeclaration */\n        ) {\n            if (thisNodeIsDecorated) {\n              // When we emit an ES6 class that has a class decorator, we must tailor the\n              // emit to certain specific cases.\n              //\n              // In the simplest case, we emit the class declaration as a let declaration, and\n              // evaluate decorators after the close of the class body:\n              //\n              //  TypeScript                      | Javascript\n              //  --------------------------------|------------------------------------\n              //  @dec                            | let C = class C {\n              //  class C {                       | }\n              //  }                               | C = __decorate([dec], C);\n              //  --------------------------------|------------------------------------\n              //  @dec                            | export let C = class C {\n              //  export class C {                | }\n              //  }                               | C = __decorate([dec], C);\n              //  ---------------------------------------------------------------------\n              //  [Example 1]\n              //\n              // If a class declaration contains a reference to itself *inside* of the class body,\n              // this introduces two bindings to the class: One outside of the class body, and one\n              // inside of the class body. If we apply decorators as in [Example 1] above, there\n              // is the possibility that the decorator `dec` will return a new value for the\n              // constructor, which would result in the binding inside of the class no longer\n              // pointing to the same reference as the binding outside of the class.\n              //\n              // As a result, we must instead rewrite all references to the class *inside* of the\n              // class body to instead point to a local temporary alias for the class:\n              //\n              //  TypeScript                      | Javascript\n              //  --------------------------------|------------------------------------\n              //  @dec                            | let C_1;\n              //  class C {                       | let C = C_1 = class C {\n              //    static x() { return C.y; }    |   static x() { return C_1.y; }\n              //    static y = 1;                 | }\n              //  }                               | C.y = 1;\n              //                                  | C = C_1 = __decorate([dec], C);\n              //  --------------------------------|------------------------------------\n              //  @dec                            | let C_1;\n              //  export class C {                | export let C = C_1 = class C {\n              //    static x() { return C.y; }    |   static x() { return C_1.y; }\n              //    static y = 1;                 | }\n              //  }                               | C.y = 1;\n              //                                  | C = C_1 = __decorate([dec], C);\n              //  ---------------------------------------------------------------------\n              //  [Example 2]\n              //\n              // If a class declaration is the default export of a module, we instead emit\n              // the export after the decorated declaration:\n              //\n              //  TypeScript                      | Javascript\n              //  --------------------------------|------------------------------------\n              //  @dec                            | let default_1 = class {\n              //  export default class {          | }\n              //  }                               | default_1 = __decorate([dec], default_1);\n              //                                  | export default default_1;\n              //  --------------------------------|------------------------------------\n              //  @dec                            | let C = class C {\n              //  export default class {          | }\n              //  }                               | C = __decorate([dec], C);\n              //                                  | export default C;\n              //  ---------------------------------------------------------------------\n              //  [Example 3]\n              //\n              // If the class declaration is the default export and a reference to itself\n              // inside of the class body, we must emit both an alias for the class *and*\n              // move the export after the declaration:\n              //\n              //  TypeScript                      | Javascript\n              //  --------------------------------|------------------------------------\n              //  @dec                            | let C_1;\n              //  export default class C {        | let C = C_1 = class C {\n              //    static x() { return C.y; }    |   static x() { return C_1.y; }\n              //    static y = 1;                 | }\n              //  }                               | C.y = 1;\n              //                                  | C = C_1 = __decorate([dec], C);\n              //                                  | export default C;\n              //  ---------------------------------------------------------------------\n              //  [Example 4]\n              //\n              if (resolver.getNodeCheckFlags(node) & 524288\n              /* ClassWithBodyScopedClassBinding */\n              ) {\n                  decoratedClassAlias = ts.unescapeIdentifier(makeUniqueName(node.name ? node.name.text : \"default\"));\n                  decoratedClassAliases[ts.getNodeId(node)] = decoratedClassAlias;\n                  write(\"let \" + decoratedClassAlias + \";\");\n                  writeLine();\n                }\n\n              if (isES6ExportedDeclaration(node) && !(node.flags & 512\n              /* Default */\n              )) {\n                write(\"export \");\n              }\n\n              write(\"let \");\n              emitDeclarationName(node);\n\n              if (decoratedClassAlias !== undefined) {\n                write(\" = \" + decoratedClassAlias);\n              }\n\n              write(\" = \");\n            } else if (isES6ExportedDeclaration(node)) {\n              write(\"export \");\n\n              if (node.flags & 512\n              /* Default */\n              ) {\n                  write(\"default \");\n                }\n            }\n          } // If the class has static properties, and it's a class expression, then we'll need\n        // to specialize the emit a bit.  for a class expression of the form:\n        //\n        //      class C { static a = 1; static b = 2; ... }\n        //\n        // We'll emit:\n        //\n        //      (_temp = class C { ... }, _temp.a = 1, _temp.b = 2, _temp)\n        //\n        // This keeps the expression as an expression, while ensuring that the static parts\n        // of it have been initialized by the time it is used.\n\n\n        var staticProperties = getInitializedProperties(node,\n        /*isStatic*/\n        true);\n        var isClassExpressionWithStaticProperties = staticProperties.length > 0 && node.kind === 189\n        /* ClassExpression */\n        ;\n        var tempVariable;\n\n        if (isClassExpressionWithStaticProperties) {\n          tempVariable = createAndRecordTempVariable(0\n          /* Auto */\n          );\n          write(\"(\");\n          increaseIndent();\n          emit(tempVariable);\n          write(\" = \");\n        }\n\n        write(\"class\"); // emit name if\n        // - node has a name\n        // - this is default export with static initializers\n\n        if (node.name || node.flags & 512\n        /* Default */\n        && (staticProperties.length > 0 || modulekind !== 5\n        /* ES6 */\n        ) && !thisNodeIsDecorated) {\n          write(\" \");\n          emitDeclarationName(node);\n        }\n\n        var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);\n\n        if (baseTypeNode) {\n          write(\" extends \");\n          emit(baseTypeNode.expression);\n        }\n\n        write(\" {\");\n        increaseIndent();\n        writeLine();\n        emitConstructor(node, baseTypeNode);\n        emitMemberFunctionsForES6AndHigher(node);\n        decreaseIndent();\n        writeLine();\n        emitToken(16\n        /* CloseBraceToken */\n        , node.members.end);\n\n        if (thisNodeIsDecorated) {\n          decoratedClassAliases[ts.getNodeId(node)] = undefined;\n          write(\";\");\n        } // Emit static property assignment. Because classDeclaration is lexically evaluated,\n        // it is safe to emit static property assignment after classDeclaration\n        // From ES6 specification:\n        //      HasLexicalDeclaration (N) : Determines if the argument identifier has a binding in this environment record that was created using\n        //                                  a lexical declaration such as a LexicalDeclaration or a ClassDeclaration.\n\n\n        if (isClassExpressionWithStaticProperties) {\n          for (var _a = 0, staticProperties_1 = staticProperties; _a < staticProperties_1.length; _a++) {\n            var property = staticProperties_1[_a];\n            write(\",\");\n            writeLine();\n            emitPropertyDeclaration(node, property,\n            /*receiver*/\n            tempVariable,\n            /*isExpression*/\n            true);\n          }\n\n          write(\",\");\n          writeLine();\n          emit(tempVariable);\n          decreaseIndent();\n          write(\")\");\n        } else {\n          writeLine();\n          emitPropertyDeclarations(node, staticProperties);\n          emitDecoratorsOfClass(node, decoratedClassAlias);\n        }\n\n        if (!(node.flags & 2\n        /* Export */\n        )) {\n          return;\n        }\n\n        if (modulekind !== 5\n        /* ES6 */\n        ) {\n            emitExportMemberAssignment(node);\n          } else {\n          // If this is an exported class, but not on the top level (i.e. on an internal\n          // module), export it\n          if (node.flags & 512\n          /* Default */\n          ) {\n              // if this is a top level default export of decorated class, write the export after the declaration.\n              if (thisNodeIsDecorated) {\n                writeLine();\n                write(\"export default \");\n                emitDeclarationName(node);\n                write(\";\");\n              }\n            } else if (node.parent.kind !== 251\n          /* SourceFile */\n          ) {\n              writeLine();\n              emitStart(node);\n              emitModuleMemberName(node);\n              write(\" = \");\n              emitDeclarationName(node);\n              emitEnd(node);\n              write(\";\");\n            }\n        }\n      }\n\n      function emitClassLikeDeclarationBelowES6(node) {\n        if (node.kind === 217\n        /* ClassDeclaration */\n        ) {\n            // source file level classes in system modules are hoisted so 'var's for them are already defined\n            if (!shouldHoistDeclarationInSystemJsModule(node)) {\n              write(\"var \");\n            }\n\n            emitDeclarationName(node);\n            write(\" = \");\n          }\n\n        write(\"(function (\");\n        var baseTypeNode = ts.getClassExtendsHeritageClauseElement(node);\n\n        if (baseTypeNode) {\n          write(\"_super\");\n        }\n\n        write(\") {\");\n        var saveTempFlags = tempFlags;\n        var saveTempVariables = tempVariables;\n        var saveTempParameters = tempParameters;\n        var saveComputedPropertyNamesToGeneratedNames = computedPropertyNamesToGeneratedNames;\n        var saveConvertedLoopState = convertedLoopState;\n        convertedLoopState = undefined;\n        tempFlags = 0;\n        tempVariables = undefined;\n        tempParameters = undefined;\n        computedPropertyNamesToGeneratedNames = undefined;\n        increaseIndent();\n\n        if (baseTypeNode) {\n          writeLine();\n          emitStart(baseTypeNode);\n          write(\"__extends(\");\n          emitDeclarationName(node);\n          write(\", _super);\");\n          emitEnd(baseTypeNode);\n        }\n\n        writeLine();\n        emitConstructor(node, baseTypeNode);\n        emitMemberFunctionsForES5AndLower(node);\n        emitPropertyDeclarations(node, getInitializedProperties(node,\n        /*isStatic*/\n        true));\n        writeLine();\n        emitDecoratorsOfClass(node,\n        /*decoratedClassAlias*/\n        undefined);\n        writeLine();\n        emitToken(16\n        /* CloseBraceToken */\n        , node.members.end, function () {\n          write(\"return \");\n          emitDeclarationName(node);\n        });\n        write(\";\");\n        emitTempDeclarations(\n        /*newLine*/\n        true);\n        ts.Debug.assert(convertedLoopState === undefined);\n        convertedLoopState = saveConvertedLoopState;\n        tempFlags = saveTempFlags;\n        tempVariables = saveTempVariables;\n        tempParameters = saveTempParameters;\n        computedPropertyNamesToGeneratedNames = saveComputedPropertyNamesToGeneratedNames;\n        decreaseIndent();\n        writeLine();\n        emitToken(16\n        /* CloseBraceToken */\n        , node.members.end);\n        emitStart(node);\n        write(\"(\");\n\n        if (baseTypeNode) {\n          emit(baseTypeNode.expression);\n        }\n\n        write(\"))\");\n\n        if (node.kind === 217\n        /* ClassDeclaration */\n        ) {\n            write(\";\");\n          }\n\n        emitEnd(node);\n\n        if (node.kind === 217\n        /* ClassDeclaration */\n        ) {\n            emitExportMemberAssignment(node);\n          }\n      }\n\n      function emitClassMemberPrefix(node, member) {\n        emitDeclarationName(node);\n\n        if (!(member.flags & 64\n        /* Static */\n        )) {\n          write(\".prototype\");\n        }\n      }\n\n      function emitDecoratorsOfClass(node, decoratedClassAlias) {\n        emitDecoratorsOfMembers(node,\n        /*staticFlag*/\n        0);\n        emitDecoratorsOfMembers(node, 64\n        /* Static */\n        );\n        emitDecoratorsOfConstructor(node, decoratedClassAlias);\n      }\n\n      function emitDecoratorsOfConstructor(node, decoratedClassAlias) {\n        var decorators = node.decorators;\n        var constructor = ts.getFirstConstructorWithBody(node);\n        var firstParameterDecorator = constructor && ts.forEach(constructor.parameters, function (parameter) {\n          return parameter.decorators;\n        }); // skip decoration of the constructor if neither it nor its parameters are decorated\n\n        if (!decorators && !firstParameterDecorator) {\n          return;\n        } // Emit the call to __decorate. Given the class:\n        //\n        //   @dec\n        //   class C {\n        //   }\n        //\n        // The emit for the class is:\n        //\n        //   C = __decorate([dec], C);\n        //\n\n\n        writeLine();\n        emitStart(node.decorators || firstParameterDecorator);\n        emitDeclarationName(node);\n\n        if (decoratedClassAlias !== undefined) {\n          write(\" = \" + decoratedClassAlias);\n        }\n\n        write(\" = __decorate([\");\n        increaseIndent();\n        writeLine();\n        var decoratorCount = decorators ? decorators.length : 0;\n        var argumentsWritten = emitList(decorators, 0, decoratorCount,\n        /*multiLine*/\n        true,\n        /*trailingComma*/\n        false,\n        /*leadingComma*/\n        false,\n        /*noTrailingNewLine*/\n        true, function (decorator) {\n          return emit(decorator.expression);\n        });\n\n        if (firstParameterDecorator) {\n          argumentsWritten += emitDecoratorsOfParameters(constructor,\n          /*leadingComma*/\n          argumentsWritten > 0);\n        }\n\n        emitSerializedTypeMetadata(node,\n        /*leadingComma*/\n        argumentsWritten >= 0);\n        decreaseIndent();\n        writeLine();\n        write(\"], \");\n        emitDeclarationName(node);\n        write(\")\");\n        emitEnd(node.decorators || firstParameterDecorator);\n        write(\";\");\n        writeLine();\n      }\n\n      function emitDecoratorsOfMembers(node, staticFlag) {\n        for (var _a = 0, _b = node.members; _a < _b.length; _a++) {\n          var member = _b[_a]; // only emit members in the correct group\n\n          if ((member.flags & 64\n          /* Static */\n          ) !== staticFlag) {\n            continue;\n          } // skip members that cannot be decorated (such as the constructor)\n\n\n          if (!ts.nodeCanBeDecorated(member)) {\n            continue;\n          } // skip an accessor declaration if it is not the first accessor\n\n\n          var decorators = void 0;\n          var functionLikeMember = void 0;\n\n          if (ts.isAccessor(member)) {\n            var accessors = ts.getAllAccessorDeclarations(node.members, member);\n\n            if (member !== accessors.firstAccessor) {\n              continue;\n            } // get the decorators from the first accessor with decorators\n\n\n            decorators = accessors.firstAccessor.decorators;\n\n            if (!decorators && accessors.secondAccessor) {\n              decorators = accessors.secondAccessor.decorators;\n            } // we only decorate parameters of the set accessor\n\n\n            functionLikeMember = accessors.setAccessor;\n          } else {\n            decorators = member.decorators; // we only decorate the parameters here if this is a method\n\n            if (member.kind === 144\n            /* MethodDeclaration */\n            ) {\n                functionLikeMember = member;\n              }\n          }\n\n          var firstParameterDecorator = functionLikeMember && ts.forEach(functionLikeMember.parameters, function (parameter) {\n            return parameter.decorators;\n          }); // skip a member if it or any of its parameters are not decorated\n\n          if (!decorators && !firstParameterDecorator) {\n            continue;\n          } // Emit the call to __decorate. Given the following:\n          //\n          //   class C {\n          //     @dec method(@dec2 x) {}\n          //     @dec get accessor() {}\n          //     @dec prop;\n          //   }\n          //\n          // The emit for a method is:\n          //\n          //   __decorate([\n          //       dec,\n          //       __param(0, dec2),\n          //       __metadata(\"design:type\", Function),\n          //       __metadata(\"design:paramtypes\", [Object]),\n          //       __metadata(\"design:returntype\", void 0)\n          //   ], C.prototype, \"method\", undefined);\n          //\n          // The emit for an accessor is:\n          //\n          //   __decorate([\n          //       dec\n          //   ], C.prototype, \"accessor\", undefined);\n          //\n          // The emit for a property is:\n          //\n          //   __decorate([\n          //       dec\n          //   ], C.prototype, \"prop\");\n          //\n\n\n          writeLine();\n          emitStart(decorators || firstParameterDecorator);\n          write(\"__decorate([\");\n          increaseIndent();\n          writeLine();\n          var decoratorCount = decorators ? decorators.length : 0;\n          var argumentsWritten = emitList(decorators, 0, decoratorCount,\n          /*multiLine*/\n          true,\n          /*trailingComma*/\n          false,\n          /*leadingComma*/\n          false,\n          /*noTrailingNewLine*/\n          true, function (decorator) {\n            return emit(decorator.expression);\n          });\n\n          if (firstParameterDecorator) {\n            argumentsWritten += emitDecoratorsOfParameters(functionLikeMember, argumentsWritten > 0);\n          }\n\n          emitSerializedTypeMetadata(member, argumentsWritten > 0);\n          decreaseIndent();\n          writeLine();\n          write(\"], \");\n          emitClassMemberPrefix(node, member);\n          write(\", \");\n          emitExpressionForPropertyName(member.name);\n\n          if (languageVersion > 0\n          /* ES3 */\n          ) {\n              if (member.kind !== 142\n              /* PropertyDeclaration */\n              ) {\n                  // We emit `null` here to indicate to `__decorate` that it can invoke `Object.getOwnPropertyDescriptor` directly.\n                  // We have this extra argument here so that we can inject an explicit property descriptor at a later date.\n                  write(\", null\");\n                } else {\n                // We emit `void 0` here to indicate to `__decorate` that it can invoke `Object.defineProperty` directly, but that it\n                // should not invoke `Object.getOwnPropertyDescriptor`.\n                write(\", void 0\");\n              }\n            }\n\n          write(\")\");\n          emitEnd(decorators || firstParameterDecorator);\n          write(\";\");\n          writeLine();\n        }\n      }\n\n      function emitDecoratorsOfParameters(node, leadingComma) {\n        var argumentsWritten = 0;\n\n        if (node) {\n          var parameterIndex_1 = 0;\n\n          for (var _a = 0, _b = node.parameters; _a < _b.length; _a++) {\n            var parameter = _b[_a];\n\n            if (ts.nodeIsDecorated(parameter)) {\n              var decorators = parameter.decorators;\n              argumentsWritten += emitList(decorators, 0, decorators.length,\n              /*multiLine*/\n              true,\n              /*trailingComma*/\n              false,\n              /*leadingComma*/\n              leadingComma,\n              /*noTrailingNewLine*/\n              true, function (decorator) {\n                write(\"__param(\" + parameterIndex_1 + \", \");\n                emit(decorator.expression);\n                write(\")\");\n              });\n              leadingComma = true;\n            }\n\n            parameterIndex_1++;\n          }\n        }\n\n        return argumentsWritten;\n      }\n\n      function shouldEmitTypeMetadata(node) {\n        // This method determines whether to emit the \"design:type\" metadata based on the node's kind.\n        // The caller should have already tested whether the node has decorators and whether the emitDecoratorMetadata\n        // compiler option is set.\n        switch (node.kind) {\n          case 144\n          /* MethodDeclaration */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 142\n          /* PropertyDeclaration */\n          :\n            return true;\n        }\n\n        return false;\n      }\n\n      function shouldEmitReturnTypeMetadata(node) {\n        // This method determines whether to emit the \"design:returntype\" metadata based on the node's kind.\n        // The caller should have already tested whether the node has decorators and whether the emitDecoratorMetadata\n        // compiler option is set.\n        switch (node.kind) {\n          case 144\n          /* MethodDeclaration */\n          :\n            return true;\n        }\n\n        return false;\n      }\n\n      function shouldEmitParamTypesMetadata(node) {\n        // This method determines whether to emit the \"design:paramtypes\" metadata based on the node's kind.\n        // The caller should have already tested whether the node has decorators and whether the emitDecoratorMetadata\n        // compiler option is set.\n        switch (node.kind) {\n          case 217\n          /* ClassDeclaration */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            return true;\n        }\n\n        return false;\n      }\n      /** Serializes the type of a declaration to an appropriate JS constructor value. Used by the __metadata decorator for a class member. */\n\n\n      function emitSerializedTypeOfNode(node) {\n        // serialization of the type of a declaration uses the following rules:\n        //\n        // * The serialized type of a ClassDeclaration is \"Function\"\n        // * The serialized type of a ParameterDeclaration is the serialized type of its type annotation.\n        // * The serialized type of a PropertyDeclaration is the serialized type of its type annotation.\n        // * The serialized type of an AccessorDeclaration is the serialized type of the return type annotation of its getter or parameter type annotation of its setter.\n        // * The serialized type of any other FunctionLikeDeclaration is \"Function\".\n        // * The serialized type of any other node is \"void 0\".\n        //\n        // For rules on serializing type annotations, see `serializeTypeNode`.\n        switch (node.kind) {\n          case 217\n          /* ClassDeclaration */\n          :\n            write(\"Function\");\n            return;\n\n          case 142\n          /* PropertyDeclaration */\n          :\n            emitSerializedTypeNode(node.type);\n            return;\n\n          case 139\n          /* Parameter */\n          :\n            emitSerializedTypeNode(node.type);\n            return;\n\n          case 146\n          /* GetAccessor */\n          :\n            emitSerializedTypeNode(node.type);\n            return;\n\n          case 147\n          /* SetAccessor */\n          :\n            emitSerializedTypeNode(ts.getSetAccessorTypeAnnotationNode(node));\n            return;\n        }\n\n        if (ts.isFunctionLike(node)) {\n          write(\"Function\");\n          return;\n        }\n\n        write(\"void 0\");\n      }\n\n      function emitSerializedTypeNode(node) {\n        if (node) {\n          switch (node.kind) {\n            case 103\n            /* VoidKeyword */\n            :\n              write(\"void 0\");\n              return;\n\n            case 161\n            /* ParenthesizedType */\n            :\n              emitSerializedTypeNode(node.type);\n              return;\n\n            case 153\n            /* FunctionType */\n            :\n            case 154\n            /* ConstructorType */\n            :\n              write(\"Function\");\n              return;\n\n            case 157\n            /* ArrayType */\n            :\n            case 158\n            /* TupleType */\n            :\n              write(\"Array\");\n              return;\n\n            case 151\n            /* TypePredicate */\n            :\n            case 120\n            /* BooleanKeyword */\n            :\n              write(\"Boolean\");\n              return;\n\n            case 130\n            /* StringKeyword */\n            :\n            case 163\n            /* StringLiteralType */\n            :\n              write(\"String\");\n              return;\n\n            case 128\n            /* NumberKeyword */\n            :\n              write(\"Number\");\n              return;\n\n            case 131\n            /* SymbolKeyword */\n            :\n              write(\"Symbol\");\n              return;\n\n            case 152\n            /* TypeReference */\n            :\n              emitSerializedTypeReferenceNode(node);\n              return;\n\n            case 155\n            /* TypeQuery */\n            :\n            case 156\n            /* TypeLiteral */\n            :\n            case 159\n            /* UnionType */\n            :\n            case 160\n            /* IntersectionType */\n            :\n            case 117\n            /* AnyKeyword */\n            :\n            case 162\n            /* ThisType */\n            :\n              break;\n\n            default:\n              ts.Debug.fail(\"Cannot serialize unexpected type node.\");\n              break;\n          }\n        }\n\n        write(\"Object\");\n      }\n      /** Serializes a TypeReferenceNode to an appropriate JS constructor value. Used by the __metadata decorator. */\n\n\n      function emitSerializedTypeReferenceNode(node) {\n        var location = node.parent;\n\n        while (ts.isDeclaration(location) || ts.isTypeNode(location)) {\n          location = location.parent;\n        } // Clone the type name and parent it to a location outside of the current declaration.\n\n\n        var typeName = ts.cloneEntityName(node.typeName, location);\n        var result = resolver.getTypeReferenceSerializationKind(typeName);\n\n        switch (result) {\n          case ts.TypeReferenceSerializationKind.Unknown:\n            var temp = createAndRecordTempVariable(0\n            /* Auto */\n            );\n            write(\"(typeof (\");\n            emitNodeWithoutSourceMap(temp);\n            write(\" = \");\n            emitEntityNameAsExpression(typeName,\n            /*useFallback*/\n            true);\n            write(\") === 'function' && \");\n            emitNodeWithoutSourceMap(temp);\n            write(\") || Object\");\n            break;\n\n          case ts.TypeReferenceSerializationKind.TypeWithConstructSignatureAndValue:\n            emitEntityNameAsExpression(typeName,\n            /*useFallback*/\n            false);\n            break;\n\n          case ts.TypeReferenceSerializationKind.VoidType:\n            write(\"void 0\");\n            break;\n\n          case ts.TypeReferenceSerializationKind.BooleanType:\n            write(\"Boolean\");\n            break;\n\n          case ts.TypeReferenceSerializationKind.NumberLikeType:\n            write(\"Number\");\n            break;\n\n          case ts.TypeReferenceSerializationKind.StringLikeType:\n            write(\"String\");\n            break;\n\n          case ts.TypeReferenceSerializationKind.ArrayLikeType:\n            write(\"Array\");\n            break;\n\n          case ts.TypeReferenceSerializationKind.ESSymbolType:\n            if (languageVersion < 2\n            /* ES6 */\n            ) {\n                write(\"typeof Symbol === 'function' ? Symbol : Object\");\n              } else {\n              write(\"Symbol\");\n            }\n\n            break;\n\n          case ts.TypeReferenceSerializationKind.TypeWithCallSignature:\n            write(\"Function\");\n            break;\n\n          case ts.TypeReferenceSerializationKind.ObjectType:\n            write(\"Object\");\n            break;\n        }\n      }\n      /** Serializes the parameter types of a function or the constructor of a class. Used by the __metadata decorator for a method or set accessor. */\n\n\n      function emitSerializedParameterTypesOfNode(node) {\n        // serialization of parameter types uses the following rules:\n        //\n        // * If the declaration is a class, the parameters of the first constructor with a body are used.\n        // * If the declaration is function-like and has a body, the parameters of the function are used.\n        //\n        // For the rules on serializing the type of each parameter declaration, see `serializeTypeOfDeclaration`.\n        if (node) {\n          var valueDeclaration = void 0;\n\n          if (node.kind === 217\n          /* ClassDeclaration */\n          ) {\n              valueDeclaration = ts.getFirstConstructorWithBody(node);\n            } else if (ts.isFunctionLike(node) && ts.nodeIsPresent(node.body)) {\n            valueDeclaration = node;\n          }\n\n          if (valueDeclaration) {\n            var parameters = valueDeclaration.parameters;\n            var parameterCount = parameters.length;\n\n            if (parameterCount > 0) {\n              for (var i = 0; i < parameterCount; i++) {\n                if (i > 0) {\n                  write(\", \");\n                }\n\n                if (parameters[i].dotDotDotToken) {\n                  var parameterType = parameters[i].type;\n\n                  if (parameterType.kind === 157\n                  /* ArrayType */\n                  ) {\n                      parameterType = parameterType.elementType;\n                    } else if (parameterType.kind === 152\n                  /* TypeReference */\n                  && parameterType.typeArguments && parameterType.typeArguments.length === 1) {\n                    parameterType = parameterType.typeArguments[0];\n                  } else {\n                    parameterType = undefined;\n                  }\n\n                  emitSerializedTypeNode(parameterType);\n                } else {\n                  emitSerializedTypeOfNode(parameters[i]);\n                }\n              }\n            }\n          }\n        }\n      }\n      /** Serializes the return type of function. Used by the __metadata decorator for a method. */\n\n\n      function emitSerializedReturnTypeOfNode(node) {\n        if (node && ts.isFunctionLike(node) && node.type) {\n          emitSerializedTypeNode(node.type);\n          return;\n        }\n\n        write(\"void 0\");\n      }\n\n      function emitSerializedTypeMetadata(node, writeComma) {\n        // This method emits the serialized type metadata for a decorator target.\n        // The caller should have already tested whether the node has decorators.\n        var argumentsWritten = 0;\n\n        if (compilerOptions.emitDecoratorMetadata) {\n          if (shouldEmitTypeMetadata(node)) {\n            if (writeComma) {\n              write(\", \");\n            }\n\n            writeLine();\n            write(\"__metadata('design:type', \");\n            emitSerializedTypeOfNode(node);\n            write(\")\");\n            argumentsWritten++;\n          }\n\n          if (shouldEmitParamTypesMetadata(node)) {\n            if (writeComma || argumentsWritten) {\n              write(\", \");\n            }\n\n            writeLine();\n            write(\"__metadata('design:paramtypes', [\");\n            emitSerializedParameterTypesOfNode(node);\n            write(\"])\");\n            argumentsWritten++;\n          }\n\n          if (shouldEmitReturnTypeMetadata(node)) {\n            if (writeComma || argumentsWritten) {\n              write(\", \");\n            }\n\n            writeLine();\n            write(\"__metadata('design:returntype', \");\n            emitSerializedReturnTypeOfNode(node);\n            write(\")\");\n            argumentsWritten++;\n          }\n        }\n\n        return argumentsWritten;\n      }\n\n      function emitInterfaceDeclaration(node) {\n        emitCommentsOnNotEmittedNode(node);\n      }\n\n      function shouldEmitEnumDeclaration(node) {\n        var isConstEnum = ts.isConst(node);\n        return !isConstEnum || compilerOptions.preserveConstEnums || compilerOptions.isolatedModules;\n      }\n\n      function emitEnumDeclaration(node) {\n        // const enums are completely erased during compilation.\n        if (!shouldEmitEnumDeclaration(node)) {\n          return;\n        }\n\n        if (!shouldHoistDeclarationInSystemJsModule(node)) {\n          // do not emit var if variable was already hoisted\n          var isES6ExportedEnum = isES6ExportedDeclaration(node);\n\n          if (!(node.flags & 2\n          /* Export */\n          ) || isES6ExportedEnum && isFirstDeclarationOfKind(node, node.symbol && node.symbol.declarations, 220\n          /* EnumDeclaration */\n          )) {\n            emitStart(node);\n\n            if (isES6ExportedEnum) {\n              write(\"export \");\n            }\n\n            write(\"var \");\n            emit(node.name);\n            emitEnd(node);\n            write(\";\");\n          }\n        }\n\n        writeLine();\n        emitStart(node);\n        write(\"(function (\");\n        emitStart(node.name);\n        write(getGeneratedNameForNode(node));\n        emitEnd(node.name);\n        write(\") {\");\n        increaseIndent();\n        emitLines(node.members);\n        decreaseIndent();\n        writeLine();\n        emitToken(16\n        /* CloseBraceToken */\n        , node.members.end);\n        write(\")(\");\n        emitModuleMemberName(node);\n        write(\" || (\");\n        emitModuleMemberName(node);\n        write(\" = {}));\");\n        emitEnd(node);\n\n        if (!isES6ExportedDeclaration(node) && node.flags & 2\n        /* Export */\n        && !shouldHoistDeclarationInSystemJsModule(node)) {\n          // do not emit var if variable was already hoisted\n          writeLine();\n          emitStart(node);\n          write(\"var \");\n          emit(node.name);\n          write(\" = \");\n          emitModuleMemberName(node);\n          emitEnd(node);\n          write(\";\");\n        }\n\n        if (modulekind !== 5\n        /* ES6 */\n        && node.parent === currentSourceFile) {\n          if (modulekind === 4\n          /* System */\n          && node.flags & 2\n          /* Export */\n          ) {\n            // write the call to exporter for enum\n            writeLine();\n            write(exportFunctionForFile + \"(\\\"\");\n            emitDeclarationName(node);\n            write(\"\\\", \");\n            emitDeclarationName(node);\n            write(\");\");\n          }\n\n          emitExportMemberAssignments(node.name);\n        }\n      }\n\n      function emitEnumMember(node) {\n        var enumParent = node.parent;\n        emitStart(node);\n        write(getGeneratedNameForNode(enumParent));\n        write(\"[\");\n        write(getGeneratedNameForNode(enumParent));\n        write(\"[\");\n        emitExpressionForPropertyName(node.name);\n        write(\"] = \");\n        writeEnumMemberDeclarationValue(node);\n        write(\"] = \");\n        emitExpressionForPropertyName(node.name);\n        emitEnd(node);\n        write(\";\");\n      }\n\n      function writeEnumMemberDeclarationValue(member) {\n        var value = resolver.getConstantValue(member);\n\n        if (value !== undefined) {\n          write(value.toString());\n          return;\n        } else if (member.initializer) {\n          emit(member.initializer);\n        } else {\n          write(\"undefined\");\n        }\n      }\n\n      function getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration) {\n        if (moduleDeclaration.body.kind === 221\n        /* ModuleDeclaration */\n        ) {\n            var recursiveInnerModule = getInnerMostModuleDeclarationFromDottedModule(moduleDeclaration.body);\n            return recursiveInnerModule || moduleDeclaration.body;\n          }\n      }\n\n      function shouldEmitModuleDeclaration(node) {\n        return ts.isInstantiatedModule(node, compilerOptions.preserveConstEnums || compilerOptions.isolatedModules);\n      }\n\n      function isModuleMergedWithES6Class(node) {\n        return languageVersion === 2\n        /* ES6 */\n        && !!(resolver.getNodeCheckFlags(node) & 32768\n        /* LexicalModuleMergesWithClass */\n        );\n      }\n\n      function isFirstDeclarationOfKind(node, declarations, kind) {\n        return !ts.forEach(declarations, function (declaration) {\n          return declaration.kind === kind && declaration.pos < node.pos;\n        });\n      }\n\n      function emitModuleDeclaration(node) {\n        // Emit only if this module is non-ambient.\n        var shouldEmit = shouldEmitModuleDeclaration(node);\n\n        if (!shouldEmit) {\n          return emitCommentsOnNotEmittedNode(node);\n        }\n\n        var hoistedInDeclarationScope = shouldHoistDeclarationInSystemJsModule(node);\n        var emitVarForModule = !hoistedInDeclarationScope && !isModuleMergedWithES6Class(node);\n\n        if (emitVarForModule) {\n          var isES6ExportedNamespace = isES6ExportedDeclaration(node);\n\n          if (!isES6ExportedNamespace || isFirstDeclarationOfKind(node, node.symbol && node.symbol.declarations, 221\n          /* ModuleDeclaration */\n          )) {\n            emitStart(node);\n\n            if (isES6ExportedNamespace) {\n              write(\"export \");\n            }\n\n            write(\"var \");\n            emit(node.name);\n            write(\";\");\n            emitEnd(node);\n            writeLine();\n          }\n        }\n\n        emitStart(node);\n        write(\"(function (\");\n        emitStart(node.name);\n        write(getGeneratedNameForNode(node));\n        emitEnd(node.name);\n        write(\") \");\n\n        if (node.body.kind === 222\n        /* ModuleBlock */\n        ) {\n            var saveConvertedLoopState = convertedLoopState;\n            var saveTempFlags = tempFlags;\n            var saveTempVariables = tempVariables;\n            convertedLoopState = undefined;\n            tempFlags = 0;\n            tempVariables = undefined;\n            emit(node.body);\n            ts.Debug.assert(convertedLoopState === undefined);\n            convertedLoopState = saveConvertedLoopState;\n            tempFlags = saveTempFlags;\n            tempVariables = saveTempVariables;\n          } else {\n          write(\"{\");\n          increaseIndent();\n          emitCaptureThisForNodeIfNecessary(node);\n          writeLine();\n          emit(node.body);\n          decreaseIndent();\n          writeLine();\n          var moduleBlock = getInnerMostModuleDeclarationFromDottedModule(node).body;\n          emitToken(16\n          /* CloseBraceToken */\n          , moduleBlock.statements.end);\n        }\n\n        write(\")(\"); // write moduleDecl = containingModule.m only if it is not exported es6 module member\n\n        if (node.flags & 2\n        /* Export */\n        && !isES6ExportedDeclaration(node)) {\n          emit(node.name);\n          write(\" = \");\n        }\n\n        emitModuleMemberName(node);\n        write(\" || (\");\n        emitModuleMemberName(node);\n        write(\" = {}));\");\n        emitEnd(node);\n\n        if (!isES6ExportedDeclaration(node) && node.name.kind === 69\n        /* Identifier */\n        && node.parent === currentSourceFile) {\n          if (modulekind === 4\n          /* System */\n          && node.flags & 2\n          /* Export */\n          ) {\n            writeLine();\n            write(exportFunctionForFile + \"(\\\"\");\n            emitDeclarationName(node);\n            write(\"\\\", \");\n            emitDeclarationName(node);\n            write(\");\");\n          }\n\n          emitExportMemberAssignments(node.name);\n        }\n      }\n      /*\n       * Some bundlers (SystemJS builder) sometimes want to rename dependencies.\n       * Here we check if alternative name was provided for a given moduleName and return it if possible.\n       */\n\n\n      function tryRenameExternalModule(moduleName) {\n        if (renamedDependencies && ts.hasProperty(renamedDependencies, moduleName.text)) {\n          return \"\\\"\" + renamedDependencies[moduleName.text] + \"\\\"\";\n        }\n\n        return undefined;\n      }\n\n      function emitRequire(moduleName) {\n        if (moduleName.kind === 9\n        /* StringLiteral */\n        ) {\n            write(\"require(\");\n            var text = tryRenameExternalModule(moduleName);\n\n            if (text) {\n              write(text);\n            } else {\n              emitStart(moduleName);\n              emitLiteral(moduleName);\n              emitEnd(moduleName);\n            }\n\n            emitToken(18\n            /* CloseParenToken */\n            , moduleName.end);\n          } else {\n          write(\"require()\");\n        }\n      }\n\n      function getNamespaceDeclarationNode(node) {\n        if (node.kind === 224\n        /* ImportEqualsDeclaration */\n        ) {\n            return node;\n          }\n\n        var importClause = node.importClause;\n\n        if (importClause && importClause.namedBindings && importClause.namedBindings.kind === 227\n        /* NamespaceImport */\n        ) {\n            return importClause.namedBindings;\n          }\n      }\n\n      function isDefaultImport(node) {\n        return node.kind === 225\n        /* ImportDeclaration */\n        && node.importClause && !!node.importClause.name;\n      }\n\n      function emitExportImportAssignments(node) {\n        if (ts.isAliasSymbolDeclaration(node) && resolver.isValueAliasDeclaration(node)) {\n          emitExportMemberAssignments(node.name);\n        }\n\n        ts.forEachChild(node, emitExportImportAssignments);\n      }\n\n      function emitImportDeclaration(node) {\n        if (modulekind !== 5\n        /* ES6 */\n        ) {\n            return emitExternalImportDeclaration(node);\n          } // ES6 import\n\n\n        if (node.importClause) {\n          var shouldEmitDefaultBindings = resolver.isReferencedAliasDeclaration(node.importClause);\n          var shouldEmitNamedBindings = node.importClause.namedBindings && resolver.isReferencedAliasDeclaration(node.importClause.namedBindings,\n          /* checkChildren */\n          true);\n\n          if (shouldEmitDefaultBindings || shouldEmitNamedBindings) {\n            write(\"import \");\n            emitStart(node.importClause);\n\n            if (shouldEmitDefaultBindings) {\n              emit(node.importClause.name);\n\n              if (shouldEmitNamedBindings) {\n                write(\", \");\n              }\n            }\n\n            if (shouldEmitNamedBindings) {\n              emitLeadingComments(node.importClause.namedBindings);\n              emitStart(node.importClause.namedBindings);\n\n              if (node.importClause.namedBindings.kind === 227\n              /* NamespaceImport */\n              ) {\n                  write(\"* as \");\n                  emit(node.importClause.namedBindings.name);\n                } else {\n                write(\"{ \");\n                emitExportOrImportSpecifierList(node.importClause.namedBindings.elements, resolver.isReferencedAliasDeclaration);\n                write(\" }\");\n              }\n\n              emitEnd(node.importClause.namedBindings);\n              emitTrailingComments(node.importClause.namedBindings);\n            }\n\n            emitEnd(node.importClause);\n            write(\" from \");\n            emit(node.moduleSpecifier);\n            write(\";\");\n          }\n        } else {\n          write(\"import \");\n          emit(node.moduleSpecifier);\n          write(\";\");\n        }\n      }\n\n      function emitExternalImportDeclaration(node) {\n        if (ts.contains(externalImports, node)) {\n          var isExportedImport = node.kind === 224\n          /* ImportEqualsDeclaration */\n          && (node.flags & 2\n          /* Export */\n          ) !== 0;\n          var namespaceDeclaration = getNamespaceDeclarationNode(node);\n          var varOrConst = languageVersion <= 1\n          /* ES5 */\n          ? \"var \" : \"const \";\n\n          if (modulekind !== 2\n          /* AMD */\n          ) {\n              emitLeadingComments(node);\n              emitStart(node);\n\n              if (namespaceDeclaration && !isDefaultImport(node)) {\n                // import x = require(\"foo\")\n                // import * as x from \"foo\"\n                if (!isExportedImport) {\n                  write(varOrConst);\n                }\n\n                ;\n                emitModuleMemberName(namespaceDeclaration);\n                write(\" = \");\n              } else {\n                // import \"foo\"\n                // import x from \"foo\"\n                // import { x, y } from \"foo\"\n                // import d, * as x from \"foo\"\n                // import d, { x, y } from \"foo\"\n                var isNakedImport = 225\n                /* ImportDeclaration */\n                && !node.importClause;\n\n                if (!isNakedImport) {\n                  write(varOrConst);\n                  write(getGeneratedNameForNode(node));\n                  write(\" = \");\n                }\n              }\n\n              emitRequire(ts.getExternalModuleName(node));\n\n              if (namespaceDeclaration && isDefaultImport(node)) {\n                // import d, * as x from \"foo\"\n                write(\", \");\n                emitModuleMemberName(namespaceDeclaration);\n                write(\" = \");\n                write(getGeneratedNameForNode(node));\n              }\n\n              write(\";\");\n              emitEnd(node);\n              emitExportImportAssignments(node);\n              emitTrailingComments(node);\n            } else {\n            if (isExportedImport) {\n              emitModuleMemberName(namespaceDeclaration);\n              write(\" = \");\n              emit(namespaceDeclaration.name);\n              write(\";\");\n            } else if (namespaceDeclaration && isDefaultImport(node)) {\n              // import d, * as x from \"foo\"\n              write(varOrConst);\n              emitModuleMemberName(namespaceDeclaration);\n              write(\" = \");\n              write(getGeneratedNameForNode(node));\n              write(\";\");\n            }\n\n            emitExportImportAssignments(node);\n          }\n        }\n      }\n\n      function emitImportEqualsDeclaration(node) {\n        if (ts.isExternalModuleImportEqualsDeclaration(node)) {\n          emitExternalImportDeclaration(node);\n          return;\n        } // preserve old compiler's behavior: emit 'var' for import declaration (even if we do not consider them referenced) when\n        // - current file is not external module\n        // - import declaration is top level and target is value imported by entity name\n\n\n        if (resolver.isReferencedAliasDeclaration(node) || !isCurrentFileExternalModule && resolver.isTopLevelValueImportEqualsWithEntityName(node)) {\n          emitLeadingComments(node);\n          emitStart(node); // variable declaration for import-equals declaration can be hoisted in system modules\n          // in this case 'var' should be omitted and emit should contain only initialization\n\n          var variableDeclarationIsHoisted = shouldHoistVariable(node,\n          /*checkIfSourceFileLevelDecl*/\n          true); // is it top level export import v = a.b.c in system module?\n          // if yes - it needs to be rewritten as exporter('v', v = a.b.c)\n\n          var isExported = isSourceFileLevelDeclarationInSystemJsModule(node,\n          /*isExported*/\n          true);\n\n          if (!variableDeclarationIsHoisted) {\n            ts.Debug.assert(!isExported);\n\n            if (isES6ExportedDeclaration(node)) {\n              write(\"export \");\n              write(\"var \");\n            } else if (!(node.flags & 2\n            /* Export */\n            )) {\n              write(\"var \");\n            }\n          }\n\n          if (isExported) {\n            write(exportFunctionForFile + \"(\\\"\");\n            emitNodeWithoutSourceMap(node.name);\n            write(\"\\\", \");\n          }\n\n          emitModuleMemberName(node);\n          write(\" = \");\n          emit(node.moduleReference);\n\n          if (isExported) {\n            write(\")\");\n          }\n\n          write(\";\");\n          emitEnd(node);\n          emitExportImportAssignments(node);\n          emitTrailingComments(node);\n        }\n      }\n\n      function emitExportDeclaration(node) {\n        ts.Debug.assert(modulekind !== 4\n        /* System */\n        );\n\n        if (modulekind !== 5\n        /* ES6 */\n        ) {\n            if (node.moduleSpecifier && (!node.exportClause || resolver.isValueAliasDeclaration(node))) {\n              emitStart(node);\n              var generatedName = getGeneratedNameForNode(node);\n\n              if (node.exportClause) {\n                // export { x, y, ... } from \"foo\"\n                if (modulekind !== 2\n                /* AMD */\n                ) {\n                    write(\"var \");\n                    write(generatedName);\n                    write(\" = \");\n                    emitRequire(ts.getExternalModuleName(node));\n                    write(\";\");\n                  }\n\n                for (var _a = 0, _b = node.exportClause.elements; _a < _b.length; _a++) {\n                  var specifier = _b[_a];\n\n                  if (resolver.isValueAliasDeclaration(specifier)) {\n                    writeLine();\n                    emitStart(specifier);\n                    emitContainingModuleName(specifier);\n                    write(\".\");\n                    emitNodeWithCommentsAndWithoutSourcemap(specifier.name);\n                    write(\" = \");\n                    write(generatedName);\n                    write(\".\");\n                    emitNodeWithCommentsAndWithoutSourcemap(specifier.propertyName || specifier.name);\n                    write(\";\");\n                    emitEnd(specifier);\n                  }\n                }\n              } else {\n                // export * from \"foo\"\n                if (hasExportStarsToExportValues && resolver.moduleExportsSomeValue(node.moduleSpecifier)) {\n                  writeLine();\n                  write(\"__export(\");\n\n                  if (modulekind !== 2\n                  /* AMD */\n                  ) {\n                      emitRequire(ts.getExternalModuleName(node));\n                    } else {\n                    write(generatedName);\n                  }\n\n                  write(\");\");\n                }\n              }\n\n              emitEnd(node);\n            }\n          } else {\n          if (!node.exportClause || resolver.isValueAliasDeclaration(node)) {\n            write(\"export \");\n\n            if (node.exportClause) {\n              // export { x, y, ... }\n              write(\"{ \");\n              emitExportOrImportSpecifierList(node.exportClause.elements, resolver.isValueAliasDeclaration);\n              write(\" }\");\n            } else {\n              write(\"*\");\n            }\n\n            if (node.moduleSpecifier) {\n              write(\" from \");\n              emit(node.moduleSpecifier);\n            }\n\n            write(\";\");\n          }\n        }\n      }\n\n      function emitExportOrImportSpecifierList(specifiers, shouldEmit) {\n        ts.Debug.assert(modulekind === 5\n        /* ES6 */\n        );\n        var needsComma = false;\n\n        for (var _a = 0, specifiers_1 = specifiers; _a < specifiers_1.length; _a++) {\n          var specifier = specifiers_1[_a];\n\n          if (shouldEmit(specifier)) {\n            if (needsComma) {\n              write(\", \");\n            }\n\n            if (specifier.propertyName) {\n              emit(specifier.propertyName);\n              write(\" as \");\n            }\n\n            emit(specifier.name);\n            needsComma = true;\n          }\n        }\n      }\n\n      function emitExportAssignment(node) {\n        if (!node.isExportEquals && resolver.isValueAliasDeclaration(node)) {\n          if (modulekind === 5\n          /* ES6 */\n          ) {\n              writeLine();\n              emitStart(node);\n              write(\"export default \");\n              var expression = node.expression;\n              emit(expression);\n\n              if (expression.kind !== 216\n              /* FunctionDeclaration */\n              && expression.kind !== 217\n              /* ClassDeclaration */\n              ) {\n                  write(\";\");\n                }\n\n              emitEnd(node);\n            } else {\n            writeLine();\n            emitStart(node);\n\n            if (modulekind === 4\n            /* System */\n            ) {\n                write(exportFunctionForFile + \"(\\\"default\\\",\");\n                emit(node.expression);\n                write(\")\");\n              } else {\n              emitEs6ExportDefaultCompat(node);\n              emitContainingModuleName(node);\n\n              if (languageVersion === 0\n              /* ES3 */\n              ) {\n                  write(\"[\\\"default\\\"] = \");\n                } else {\n                write(\".default = \");\n              }\n\n              emit(node.expression);\n            }\n\n            write(\";\");\n            emitEnd(node);\n          }\n        }\n      }\n\n      function collectExternalModuleInfo(sourceFile) {\n        externalImports = [];\n        exportSpecifiers = {};\n        exportEquals = undefined;\n        hasExportStarsToExportValues = false;\n\n        for (var _a = 0, _b = sourceFile.statements; _a < _b.length; _a++) {\n          var node = _b[_a];\n\n          switch (node.kind) {\n            case 225\n            /* ImportDeclaration */\n            :\n              if (!node.importClause || resolver.isReferencedAliasDeclaration(node.importClause,\n              /*checkChildren*/\n              true)) {\n                // import \"mod\"\n                // import x from \"mod\" where x is referenced\n                // import * as x from \"mod\" where x is referenced\n                // import { x, y } from \"mod\" where at least one import is referenced\n                externalImports.push(node);\n              }\n\n              break;\n\n            case 224\n            /* ImportEqualsDeclaration */\n            :\n              if (node.moduleReference.kind === 235\n              /* ExternalModuleReference */\n              && resolver.isReferencedAliasDeclaration(node)) {\n                // import x = require(\"mod\") where x is referenced\n                externalImports.push(node);\n              }\n\n              break;\n\n            case 231\n            /* ExportDeclaration */\n            :\n              if (node.moduleSpecifier) {\n                if (!node.exportClause) {\n                  // export * from \"mod\"\n                  if (resolver.moduleExportsSomeValue(node.moduleSpecifier)) {\n                    externalImports.push(node);\n                    hasExportStarsToExportValues = true;\n                  }\n                } else if (resolver.isValueAliasDeclaration(node)) {\n                  // export { x, y } from \"mod\" where at least one export is a value symbol\n                  externalImports.push(node);\n                }\n              } else {\n                // export { x, y }\n                for (var _c = 0, _d = node.exportClause.elements; _c < _d.length; _c++) {\n                  var specifier = _d[_c];\n                  var name_28 = (specifier.propertyName || specifier.name).text;\n                  (exportSpecifiers[name_28] || (exportSpecifiers[name_28] = [])).push(specifier);\n                }\n              }\n\n              break;\n\n            case 230\n            /* ExportAssignment */\n            :\n              if (node.isExportEquals && !exportEquals) {\n                // export = x\n                exportEquals = node;\n              }\n\n              break;\n          }\n        }\n      }\n\n      function emitExportStarHelper() {\n        if (hasExportStarsToExportValues) {\n          writeLine();\n          write(\"function __export(m) {\");\n          increaseIndent();\n          writeLine();\n          write(\"for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\");\n          decreaseIndent();\n          writeLine();\n          write(\"}\");\n        }\n      }\n\n      function getLocalNameForExternalImport(node) {\n        var namespaceDeclaration = getNamespaceDeclarationNode(node);\n\n        if (namespaceDeclaration && !isDefaultImport(node)) {\n          return ts.getTextOfNodeFromSourceText(currentText, namespaceDeclaration.name);\n        }\n\n        if (node.kind === 225\n        /* ImportDeclaration */\n        && node.importClause) {\n          return getGeneratedNameForNode(node);\n        }\n\n        if (node.kind === 231\n        /* ExportDeclaration */\n        && node.moduleSpecifier) {\n          return getGeneratedNameForNode(node);\n        }\n      }\n\n      function getExternalModuleNameText(importNode, emitRelativePathAsModuleName) {\n        if (emitRelativePathAsModuleName) {\n          var name_29 = getExternalModuleNameFromDeclaration(host, resolver, importNode);\n\n          if (name_29) {\n            return \"\\\"\" + name_29 + \"\\\"\";\n          }\n        }\n\n        var moduleName = ts.getExternalModuleName(importNode);\n\n        if (moduleName.kind === 9\n        /* StringLiteral */\n        ) {\n            return tryRenameExternalModule(moduleName) || getLiteralText(moduleName);\n          }\n\n        return undefined;\n      }\n\n      function emitVariableDeclarationsForImports() {\n        if (externalImports.length === 0) {\n          return;\n        }\n\n        writeLine();\n        var started = false;\n\n        for (var _a = 0, externalImports_1 = externalImports; _a < externalImports_1.length; _a++) {\n          var importNode = externalImports_1[_a]; // do not create variable declaration for exports and imports that lack import clause\n\n          var skipNode = importNode.kind === 231\n          /* ExportDeclaration */\n          || importNode.kind === 225\n          /* ImportDeclaration */\n          && !importNode.importClause;\n\n          if (skipNode) {\n            continue;\n          }\n\n          if (!started) {\n            write(\"var \");\n            started = true;\n          } else {\n            write(\", \");\n          }\n\n          write(getLocalNameForExternalImport(importNode));\n        }\n\n        if (started) {\n          write(\";\");\n        }\n      }\n\n      function emitLocalStorageForExportedNamesIfNecessary(exportedDeclarations) {\n        // when resolving exports local exported entries/indirect exported entries in the module\n        // should always win over entries with similar names that were added via star exports\n        // to support this we store names of local/indirect exported entries in a set.\n        // this set is used to filter names brought by star expors.\n        if (!hasExportStarsToExportValues) {\n          // local names set is needed only in presence of star exports\n          return undefined;\n        } // local names set should only be added if we have anything exported\n\n\n        if (!exportedDeclarations && ts.isEmpty(exportSpecifiers)) {\n          // no exported declarations (export var ...) or export specifiers (export {x})\n          // check if we have any non star export declarations.\n          var hasExportDeclarationWithExportClause = false;\n\n          for (var _a = 0, externalImports_2 = externalImports; _a < externalImports_2.length; _a++) {\n            var externalImport = externalImports_2[_a];\n\n            if (externalImport.kind === 231\n            /* ExportDeclaration */\n            && externalImport.exportClause) {\n              hasExportDeclarationWithExportClause = true;\n              break;\n            }\n          }\n\n          if (!hasExportDeclarationWithExportClause) {\n            // we still need to emit exportStar helper\n            return emitExportStarFunction(\n            /*localNames*/\n            undefined);\n          }\n        }\n\n        var exportedNamesStorageRef = makeUniqueName(\"exportedNames\");\n        writeLine();\n        write(\"var \" + exportedNamesStorageRef + \" = {\");\n        increaseIndent();\n        var started = false;\n\n        if (exportedDeclarations) {\n          for (var i = 0; i < exportedDeclarations.length; i++) {\n            // write name of exported declaration, i.e 'export var x...'\n            writeExportedName(exportedDeclarations[i]);\n          }\n        }\n\n        if (exportSpecifiers) {\n          for (var n in exportSpecifiers) {\n            for (var _b = 0, _c = exportSpecifiers[n]; _b < _c.length; _b++) {\n              var specifier = _c[_b]; // write name of export specified, i.e. 'export {x}'\n\n              writeExportedName(specifier.name);\n            }\n          }\n        }\n\n        for (var _d = 0, externalImports_3 = externalImports; _d < externalImports_3.length; _d++) {\n          var externalImport = externalImports_3[_d];\n\n          if (externalImport.kind !== 231\n          /* ExportDeclaration */\n          ) {\n              continue;\n            }\n\n          var exportDecl = externalImport;\n\n          if (!exportDecl.exportClause) {\n            // export * from ...\n            continue;\n          }\n\n          for (var _e = 0, _f = exportDecl.exportClause.elements; _e < _f.length; _e++) {\n            var element = _f[_e]; // write name of indirectly exported entry, i.e. 'export {x} from ...'\n\n            writeExportedName(element.name || element.propertyName);\n          }\n        }\n\n        decreaseIndent();\n        writeLine();\n        write(\"};\");\n        return emitExportStarFunction(exportedNamesStorageRef);\n\n        function emitExportStarFunction(localNames) {\n          var exportStarFunction = makeUniqueName(\"exportStar\");\n          writeLine(); // define an export star helper function\n\n          write(\"function \" + exportStarFunction + \"(m) {\");\n          increaseIndent();\n          writeLine();\n          write(\"var exports = {};\");\n          writeLine();\n          write(\"for(var n in m) {\");\n          increaseIndent();\n          writeLine();\n          write(\"if (n !== \\\"default\\\"\");\n\n          if (localNames) {\n            write(\"&& !\" + localNames + \".hasOwnProperty(n)\");\n          }\n\n          write(\") exports[n] = m[n];\");\n          decreaseIndent();\n          writeLine();\n          write(\"}\");\n          writeLine();\n          write(exportFunctionForFile + \"(exports);\");\n          decreaseIndent();\n          writeLine();\n          write(\"}\");\n          return exportStarFunction;\n        }\n\n        function writeExportedName(node) {\n          // do not record default exports\n          // they are local to module and never overwritten (explicitly skipped) by star export\n          if (node.kind !== 69\n          /* Identifier */\n          && node.flags & 512\n          /* Default */\n          ) {\n              return;\n            }\n\n          if (started) {\n            write(\",\");\n          } else {\n            started = true;\n          }\n\n          writeLine();\n          write(\"'\");\n\n          if (node.kind === 69\n          /* Identifier */\n          ) {\n              emitNodeWithCommentsAndWithoutSourcemap(node);\n            } else {\n            emitDeclarationName(node);\n          }\n\n          write(\"': true\");\n        }\n      }\n\n      function processTopLevelVariableAndFunctionDeclarations(node) {\n        // per ES6 spec:\n        // 15.2.1.16.4 ModuleDeclarationInstantiation() Concrete Method\n        // - var declarations are initialized to undefined - 14.a.ii\n        // - function/generator declarations are instantiated - 16.a.iv\n        // this means that after module is instantiated but before its evaluation\n        // exported functions are already accessible at import sites\n        // in theory we should hoist only exported functions and its dependencies\n        // in practice to simplify things we'll hoist all source level functions and variable declaration\n        // including variables declarations for module and class declarations\n        var hoistedVars;\n        var hoistedFunctionDeclarations;\n        var exportedDeclarations;\n        visit(node);\n\n        if (hoistedVars) {\n          writeLine();\n          write(\"var \");\n          var seen = {};\n\n          for (var i = 0; i < hoistedVars.length; i++) {\n            var local = hoistedVars[i];\n            var name_30 = local.kind === 69\n            /* Identifier */\n            ? local : local.name;\n\n            if (name_30) {\n              // do not emit duplicate entries (in case of declaration merging) in the list of hoisted variables\n              var text = ts.unescapeIdentifier(name_30.text);\n\n              if (ts.hasProperty(seen, text)) {\n                continue;\n              } else {\n                seen[text] = text;\n              }\n            }\n\n            if (i !== 0) {\n              write(\", \");\n            }\n\n            if (local.kind === 217\n            /* ClassDeclaration */\n            || local.kind === 221\n            /* ModuleDeclaration */\n            || local.kind === 220\n            /* EnumDeclaration */\n            ) {\n                emitDeclarationName(local);\n              } else {\n              emit(local);\n            }\n\n            var flags = ts.getCombinedNodeFlags(local.kind === 69\n            /* Identifier */\n            ? local.parent : local);\n\n            if (flags & 2\n            /* Export */\n            ) {\n                if (!exportedDeclarations) {\n                  exportedDeclarations = [];\n                }\n\n                exportedDeclarations.push(local);\n              }\n          }\n\n          write(\";\");\n        }\n\n        if (hoistedFunctionDeclarations) {\n          for (var _a = 0, hoistedFunctionDeclarations_1 = hoistedFunctionDeclarations; _a < hoistedFunctionDeclarations_1.length; _a++) {\n            var f = hoistedFunctionDeclarations_1[_a];\n            writeLine();\n            emit(f);\n\n            if (f.flags & 2\n            /* Export */\n            ) {\n                if (!exportedDeclarations) {\n                  exportedDeclarations = [];\n                }\n\n                exportedDeclarations.push(f);\n              }\n          }\n        }\n\n        return exportedDeclarations;\n\n        function visit(node) {\n          if (node.flags & 4\n          /* Ambient */\n          ) {\n              return;\n            }\n\n          if (node.kind === 216\n          /* FunctionDeclaration */\n          ) {\n              if (!hoistedFunctionDeclarations) {\n                hoistedFunctionDeclarations = [];\n              }\n\n              hoistedFunctionDeclarations.push(node);\n              return;\n            }\n\n          if (node.kind === 217\n          /* ClassDeclaration */\n          ) {\n              if (!hoistedVars) {\n                hoistedVars = [];\n              }\n\n              hoistedVars.push(node);\n              return;\n            }\n\n          if (node.kind === 220\n          /* EnumDeclaration */\n          ) {\n              if (shouldEmitEnumDeclaration(node)) {\n                if (!hoistedVars) {\n                  hoistedVars = [];\n                }\n\n                hoistedVars.push(node);\n              }\n\n              return;\n            }\n\n          if (node.kind === 221\n          /* ModuleDeclaration */\n          ) {\n              if (shouldEmitModuleDeclaration(node)) {\n                if (!hoistedVars) {\n                  hoistedVars = [];\n                }\n\n                hoistedVars.push(node);\n              }\n\n              return;\n            }\n\n          if (node.kind === 214\n          /* VariableDeclaration */\n          || node.kind === 166\n          /* BindingElement */\n          ) {\n              if (shouldHoistVariable(node,\n              /*checkIfSourceFileLevelDecl*/\n              false)) {\n                var name_31 = node.name;\n\n                if (name_31.kind === 69\n                /* Identifier */\n                ) {\n                    if (!hoistedVars) {\n                      hoistedVars = [];\n                    }\n\n                    hoistedVars.push(name_31);\n                  } else {\n                  ts.forEachChild(name_31, visit);\n                }\n              }\n\n              return;\n            }\n\n          if (ts.isInternalModuleImportEqualsDeclaration(node) && resolver.isValueAliasDeclaration(node)) {\n            if (!hoistedVars) {\n              hoistedVars = [];\n            }\n\n            hoistedVars.push(node.name);\n            return;\n          }\n\n          if (ts.isBindingPattern(node)) {\n            ts.forEach(node.elements, visit);\n            return;\n          }\n\n          if (!ts.isDeclaration(node)) {\n            ts.forEachChild(node, visit);\n          }\n        }\n      }\n\n      function shouldHoistVariable(node, checkIfSourceFileLevelDecl) {\n        if (checkIfSourceFileLevelDecl && !shouldHoistDeclarationInSystemJsModule(node)) {\n          return false;\n        } // hoist variable if\n        // - it is not block scoped\n        // - it is top level block scoped\n        // if block scoped variables are nested in some another block then\n        // no other functions can use them except ones that are defined at least in the same block\n\n\n        return (ts.getCombinedNodeFlags(node) & 24576\n        /* BlockScoped */\n        ) === 0 || ts.getEnclosingBlockScopeContainer(node).kind === 251\n        /* SourceFile */\n        ;\n      }\n\n      function isCurrentFileSystemExternalModule() {\n        return modulekind === 4\n        /* System */\n        && isCurrentFileExternalModule;\n      }\n\n      function emitSystemModuleBody(node, dependencyGroups, startIndex) {\n        // shape of the body in system modules:\n        // function (exports) {\n        //     <list of local aliases for imports>\n        //     <hoisted function declarations>\n        //     <hoisted variable declarations>\n        //     return {\n        //         setters: [\n        //             <list of setter function for imports>\n        //         ],\n        //         execute: function() {\n        //             <module statements>\n        //         }\n        //     }\n        //     <temp declarations>\n        // }\n        // I.e:\n        // import {x} from 'file1'\n        // var y = 1;\n        // export function foo() { return y + x(); }\n        // console.log(y);\n        // will be transformed to\n        // function(exports) {\n        //     var file1; // local alias\n        //     var y;\n        //     function foo() { return y + file1.x(); }\n        //     exports(\"foo\", foo);\n        //     return {\n        //         setters: [\n        //             function(v) { file1 = v }\n        //         ],\n        //         execute(): function() {\n        //             y = 1;\n        //             console.log(y);\n        //         }\n        //     };\n        // }\n        emitVariableDeclarationsForImports();\n        writeLine();\n        var exportedDeclarations = processTopLevelVariableAndFunctionDeclarations(node);\n        var exportStarFunction = emitLocalStorageForExportedNamesIfNecessary(exportedDeclarations);\n        writeLine();\n        write(\"return {\");\n        increaseIndent();\n        writeLine();\n        emitSetters(exportStarFunction, dependencyGroups);\n        writeLine();\n        emitExecute(node, startIndex);\n        decreaseIndent();\n        writeLine();\n        write(\"}\"); // return\n\n        emitTempDeclarations(\n        /*newLine*/\n        true);\n      }\n\n      function emitSetters(exportStarFunction, dependencyGroups) {\n        write(\"setters:[\");\n\n        for (var i = 0; i < dependencyGroups.length; i++) {\n          if (i !== 0) {\n            write(\",\");\n          }\n\n          writeLine();\n          increaseIndent();\n          var group = dependencyGroups[i]; // derive a unique name for parameter from the first named entry in the group\n\n          var parameterName = makeUniqueName(ts.forEach(group, getLocalNameForExternalImport) || \"\");\n          write(\"function (\" + parameterName + \") {\");\n          increaseIndent();\n\n          for (var _a = 0, group_1 = group; _a < group_1.length; _a++) {\n            var entry = group_1[_a];\n            var importVariableName = getLocalNameForExternalImport(entry) || \"\";\n\n            switch (entry.kind) {\n              case 225\n              /* ImportDeclaration */\n              :\n                if (!entry.importClause) {\n                  // 'import \"...\"' case\n                  // module is imported only for side-effects, no emit required\n                  break;\n                }\n\n              // fall-through\n\n              case 224\n              /* ImportEqualsDeclaration */\n              :\n                ts.Debug.assert(importVariableName !== \"\");\n                writeLine(); // save import into the local\n\n                write(importVariableName + \" = \" + parameterName + \";\");\n                writeLine();\n                break;\n\n              case 231\n              /* ExportDeclaration */\n              :\n                ts.Debug.assert(importVariableName !== \"\");\n\n                if (entry.exportClause) {\n                  // export {a, b as c} from 'foo'\n                  // emit as:\n                  // exports_({\n                  //    \"a\": _[\"a\"],\n                  //    \"c\": _[\"b\"]\n                  // });\n                  writeLine();\n                  write(exportFunctionForFile + \"({\");\n                  writeLine();\n                  increaseIndent();\n\n                  for (var i_1 = 0, len = entry.exportClause.elements.length; i_1 < len; i_1++) {\n                    if (i_1 !== 0) {\n                      write(\",\");\n                      writeLine();\n                    }\n\n                    var e = entry.exportClause.elements[i_1];\n                    write(\"\\\"\");\n                    emitNodeWithCommentsAndWithoutSourcemap(e.name);\n                    write(\"\\\": \" + parameterName + \"[\\\"\");\n                    emitNodeWithCommentsAndWithoutSourcemap(e.propertyName || e.name);\n                    write(\"\\\"]\");\n                  }\n\n                  decreaseIndent();\n                  writeLine();\n                  write(\"});\");\n                } else {\n                  // collectExternalModuleInfo prefilters star exports to keep only ones that export values\n                  // this means that check 'resolver.moduleExportsSomeValue' is redundant and can be omitted here\n                  writeLine(); // export * from 'foo'\n                  // emit as:\n                  // exportStar(_foo);\n\n                  write(exportStarFunction + \"(\" + parameterName + \");\");\n                }\n\n                writeLine();\n                break;\n            }\n          }\n\n          decreaseIndent();\n          write(\"}\");\n          decreaseIndent();\n        }\n\n        write(\"],\");\n      }\n\n      function emitExecute(node, startIndex) {\n        write(\"execute: function() {\");\n        increaseIndent();\n        writeLine();\n\n        for (var i = startIndex; i < node.statements.length; i++) {\n          var statement = node.statements[i];\n\n          switch (statement.kind) {\n            // - function declarations are not emitted because they were already hoisted\n            // - import declarations are not emitted since they are already handled in setters\n            // - export declarations with module specifiers are not emitted since they were already written in setters\n            // - export declarations without module specifiers are emitted preserving the order\n            case 216\n            /* FunctionDeclaration */\n            :\n            case 225\n            /* ImportDeclaration */\n            :\n              continue;\n\n            case 231\n            /* ExportDeclaration */\n            :\n              if (!statement.moduleSpecifier) {\n                for (var _a = 0, _b = statement.exportClause.elements; _a < _b.length; _a++) {\n                  var element = _b[_a]; // write call to exporter function for every export specifier in exports list\n\n                  emitExportSpecifierInSystemModule(element);\n                }\n              }\n\n              continue;\n\n            case 224\n            /* ImportEqualsDeclaration */\n            :\n              if (!ts.isInternalModuleImportEqualsDeclaration(statement)) {\n                // - import equals declarations that import external modules are not emitted\n                continue;\n              }\n\n            // fall-though for import declarations that import internal modules\n\n            default:\n              writeLine();\n              emit(statement);\n          }\n        }\n\n        decreaseIndent();\n        writeLine();\n        write(\"}\"); // execute\n      }\n\n      function writeModuleName(node, emitRelativePathAsModuleName) {\n        var moduleName = node.moduleName;\n\n        if (moduleName || emitRelativePathAsModuleName && (moduleName = getResolvedExternalModuleName(host, node))) {\n          write(\"\\\"\" + moduleName + \"\\\", \");\n        }\n      }\n\n      function emitSystemModule(node, emitRelativePathAsModuleName) {\n        collectExternalModuleInfo(node); // System modules has the following shape\n        // System.register(['dep-1', ... 'dep-n'], function(exports) {/* module body function */})\n        // 'exports' here is a function 'exports<T>(name: string, value: T): T' that is used to publish exported values.\n        // 'exports' returns its 'value' argument so in most cases expressions\n        // that mutate exported values can be rewritten as:\n        // expr -> exports('name', expr).\n        // The only exception in this rule is postfix unary operators,\n        // see comment to 'emitPostfixUnaryExpression' for more details\n\n        ts.Debug.assert(!exportFunctionForFile); // make sure that  name of 'exports' function does not conflict with existing identifiers\n\n        exportFunctionForFile = makeUniqueName(\"exports\");\n        contextObjectForFile = makeUniqueName(\"context\");\n        writeLine();\n        write(\"System.register(\");\n        writeModuleName(node, emitRelativePathAsModuleName);\n        write(\"[\");\n        var groupIndices = {};\n        var dependencyGroups = [];\n\n        for (var i = 0; i < externalImports.length; i++) {\n          var text = getExternalModuleNameText(externalImports[i], emitRelativePathAsModuleName);\n\n          if (text === undefined) {\n            continue;\n          } // text should be quoted string\n          // for deduplication purposes in key remove leading and trailing quotes so 'a' and \"a\" will be considered the same\n\n\n          var key = text.substr(1, text.length - 2);\n\n          if (ts.hasProperty(groupIndices, key)) {\n            // deduplicate/group entries in dependency list by the dependency name\n            var groupIndex = groupIndices[key];\n            dependencyGroups[groupIndex].push(externalImports[i]);\n            continue;\n          } else {\n            groupIndices[key] = dependencyGroups.length;\n            dependencyGroups.push([externalImports[i]]);\n          }\n\n          if (i !== 0) {\n            write(\", \");\n          }\n\n          write(text);\n        }\n\n        write(\"], function(\" + exportFunctionForFile + \", \" + contextObjectForFile + \") {\");\n        writeLine();\n        increaseIndent();\n        var startIndex = emitDirectivePrologues(node.statements,\n        /*startWithNewLine*/\n        true,\n        /*ensureUseStrict*/\n        !compilerOptions.noImplicitUseStrict);\n        writeLine();\n        write(\"var __moduleName = \" + contextObjectForFile + \" && \" + contextObjectForFile + \".id;\");\n        writeLine();\n        emitEmitHelpers(node);\n        emitCaptureThisForNodeIfNecessary(node);\n        emitSystemModuleBody(node, dependencyGroups, startIndex);\n        decreaseIndent();\n        writeLine();\n        write(\"});\");\n      }\n\n      function getAMDDependencyNames(node, includeNonAmdDependencies, emitRelativePathAsModuleName) {\n        // names of modules with corresponding parameter in the factory function\n        var aliasedModuleNames = []; // names of modules with no corresponding parameters in factory function\n\n        var unaliasedModuleNames = [];\n        var importAliasNames = []; // names of the parameters in the factory function; these\n        // parameters need to match the indexes of the corresponding\n        // module names in aliasedModuleNames.\n        // Fill in amd-dependency tags\n\n        for (var _a = 0, _b = node.amdDependencies; _a < _b.length; _a++) {\n          var amdDependency = _b[_a];\n\n          if (amdDependency.name) {\n            aliasedModuleNames.push(\"\\\"\" + amdDependency.path + \"\\\"\");\n            importAliasNames.push(amdDependency.name);\n          } else {\n            unaliasedModuleNames.push(\"\\\"\" + amdDependency.path + \"\\\"\");\n          }\n        }\n\n        for (var _c = 0, externalImports_4 = externalImports; _c < externalImports_4.length; _c++) {\n          var importNode = externalImports_4[_c]; // Find the name of the external module\n\n          var externalModuleName = getExternalModuleNameText(importNode, emitRelativePathAsModuleName); // Find the name of the module alias, if there is one\n\n          var importAliasName = getLocalNameForExternalImport(importNode);\n\n          if (includeNonAmdDependencies && importAliasName) {\n            aliasedModuleNames.push(externalModuleName);\n            importAliasNames.push(importAliasName);\n          } else {\n            unaliasedModuleNames.push(externalModuleName);\n          }\n        }\n\n        return {\n          aliasedModuleNames: aliasedModuleNames,\n          unaliasedModuleNames: unaliasedModuleNames,\n          importAliasNames: importAliasNames\n        };\n      }\n\n      function emitAMDDependencies(node, includeNonAmdDependencies, emitRelativePathAsModuleName) {\n        // An AMD define function has the following shape:\n        //     define(id?, dependencies?, factory);\n        //\n        // This has the shape of\n        //     define(name, [\"module1\", \"module2\"], function (module1Alias) {\n        // The location of the alias in the parameter list in the factory function needs to\n        // match the position of the module name in the dependency list.\n        //\n        // To ensure this is true in cases of modules with no aliases, e.g.:\n        // `import \"module\"` or `<amd-dependency path= \"a.css\" />`\n        // we need to add modules without alias names to the end of the dependencies list\n        var dependencyNames = getAMDDependencyNames(node, includeNonAmdDependencies, emitRelativePathAsModuleName);\n        emitAMDDependencyList(dependencyNames);\n        write(\", \");\n        emitAMDFactoryHeader(dependencyNames);\n      }\n\n      function emitAMDDependencyList(_a) {\n        var aliasedModuleNames = _a.aliasedModuleNames,\n            unaliasedModuleNames = _a.unaliasedModuleNames;\n        write(\"[\\\"require\\\", \\\"exports\\\"\");\n\n        if (aliasedModuleNames.length) {\n          write(\", \");\n          write(aliasedModuleNames.join(\", \"));\n        }\n\n        if (unaliasedModuleNames.length) {\n          write(\", \");\n          write(unaliasedModuleNames.join(\", \"));\n        }\n\n        write(\"]\");\n      }\n\n      function emitAMDFactoryHeader(_a) {\n        var importAliasNames = _a.importAliasNames;\n        write(\"function (require, exports\");\n\n        if (importAliasNames.length) {\n          write(\", \");\n          write(importAliasNames.join(\", \"));\n        }\n\n        write(\") {\");\n      }\n\n      function emitAMDModule(node, emitRelativePathAsModuleName) {\n        emitEmitHelpers(node);\n        collectExternalModuleInfo(node);\n        writeLine();\n        write(\"define(\");\n        writeModuleName(node, emitRelativePathAsModuleName);\n        emitAMDDependencies(node,\n        /*includeNonAmdDependencies*/\n        true, emitRelativePathAsModuleName);\n        increaseIndent();\n        var startIndex = emitDirectivePrologues(node.statements,\n        /*startWithNewLine*/\n        true,\n        /*ensureUseStrict*/\n        !compilerOptions.noImplicitUseStrict);\n        emitExportStarHelper();\n        emitCaptureThisForNodeIfNecessary(node);\n        emitLinesStartingAt(node.statements, startIndex);\n        emitTempDeclarations(\n        /*newLine*/\n        true);\n        emitExportEquals(\n        /*emitAsReturn*/\n        true);\n        decreaseIndent();\n        writeLine();\n        write(\"});\");\n      }\n\n      function emitCommonJSModule(node) {\n        var startIndex = emitDirectivePrologues(node.statements,\n        /*startWithNewLine*/\n        false,\n        /*ensureUseStrict*/\n        !compilerOptions.noImplicitUseStrict);\n        emitEmitHelpers(node);\n        collectExternalModuleInfo(node);\n        emitExportStarHelper();\n        emitCaptureThisForNodeIfNecessary(node);\n        emitLinesStartingAt(node.statements, startIndex);\n        emitTempDeclarations(\n        /*newLine*/\n        true);\n        emitExportEquals(\n        /*emitAsReturn*/\n        false);\n      }\n\n      function emitUMDModule(node) {\n        emitEmitHelpers(node);\n        collectExternalModuleInfo(node);\n        var dependencyNames = getAMDDependencyNames(node,\n        /*includeNonAmdDependencies*/\n        false); // Module is detected first to support Browserify users that load into a browser with an AMD loader\n\n        writeLines(\"(function (factory) {\\n    if (typeof module === 'object' && typeof module.exports === 'object') {\\n        var v = factory(require, exports); if (v !== undefined) module.exports = v;\\n    }\\n    else if (typeof define === 'function' && define.amd) {\\n        define(\");\n        emitAMDDependencyList(dependencyNames);\n        write(\", factory);\");\n        writeLines(\"    }\\n})(\");\n        emitAMDFactoryHeader(dependencyNames);\n        increaseIndent();\n        var startIndex = emitDirectivePrologues(node.statements,\n        /*startWithNewLine*/\n        true,\n        /*ensureUseStrict*/\n        !compilerOptions.noImplicitUseStrict);\n        emitExportStarHelper();\n        emitCaptureThisForNodeIfNecessary(node);\n        emitLinesStartingAt(node.statements, startIndex);\n        emitTempDeclarations(\n        /*newLine*/\n        true);\n        emitExportEquals(\n        /*emitAsReturn*/\n        true);\n        decreaseIndent();\n        writeLine();\n        write(\"});\");\n      }\n\n      function emitES6Module(node) {\n        externalImports = undefined;\n        exportSpecifiers = undefined;\n        exportEquals = undefined;\n        hasExportStarsToExportValues = false;\n        var startIndex = emitDirectivePrologues(node.statements,\n        /*startWithNewLine*/\n        false);\n        emitEmitHelpers(node);\n        emitCaptureThisForNodeIfNecessary(node);\n        emitLinesStartingAt(node.statements, startIndex);\n        emitTempDeclarations(\n        /*newLine*/\n        true); // Emit exportDefault if it exists will happen as part\n        // or normal statement emit.\n      }\n\n      function emitExportEquals(emitAsReturn) {\n        if (exportEquals && resolver.isValueAliasDeclaration(exportEquals)) {\n          writeLine();\n          emitStart(exportEquals);\n          write(emitAsReturn ? \"return \" : \"module.exports = \");\n          emit(exportEquals.expression);\n          write(\";\");\n          emitEnd(exportEquals);\n        }\n      }\n\n      function emitJsxElement(node) {\n        switch (compilerOptions.jsx) {\n          case 2\n          /* React */\n          :\n            jsxEmitReact(node);\n            break;\n\n          case 1\n          /* Preserve */\n          : // Fall back to preserve if None was specified (we'll error earlier)\n\n          default:\n            jsxEmitPreserve(node);\n            break;\n        }\n      }\n\n      function trimReactWhitespaceAndApplyEntities(node) {\n        var result = undefined;\n        var text = ts.getTextOfNode(node,\n        /*includeTrivia*/\n        true);\n        var firstNonWhitespace = 0;\n        var lastNonWhitespace = -1; // JSX trims whitespace at the end and beginning of lines, except that the\n        // start/end of a tag is considered a start/end of a line only if that line is\n        // on the same line as the closing tag. See examples in tests/cases/conformance/jsx/tsxReactEmitWhitespace.tsx\n\n        for (var i = 0; i < text.length; i++) {\n          var c = text.charCodeAt(i);\n\n          if (ts.isLineBreak(c)) {\n            if (firstNonWhitespace !== -1 && lastNonWhitespace - firstNonWhitespace + 1 > 0) {\n              var part = text.substr(firstNonWhitespace, lastNonWhitespace - firstNonWhitespace + 1);\n              result = (result ? result + \"\\\" + ' ' + \\\"\" : \"\") + ts.escapeString(part);\n            }\n\n            firstNonWhitespace = -1;\n          } else if (!ts.isWhiteSpace(c)) {\n            lastNonWhitespace = i;\n\n            if (firstNonWhitespace === -1) {\n              firstNonWhitespace = i;\n            }\n          }\n        }\n\n        if (firstNonWhitespace !== -1) {\n          var part = text.substr(firstNonWhitespace);\n          result = (result ? result + \"\\\" + ' ' + \\\"\" : \"\") + ts.escapeString(part);\n        }\n\n        if (result) {\n          // Replace entities like &nbsp;\n          result = result.replace(/&(\\w+);/g, function (s, m) {\n            if (entities[m] !== undefined) {\n              var ch = String.fromCharCode(entities[m]); // &quot; needs to be escaped\n\n              return ch === \"\\\"\" ? \"\\\\\\\"\" : ch;\n            } else {\n              return s;\n            }\n          });\n        }\n\n        return result;\n      }\n\n      function getTextToEmit(node) {\n        switch (compilerOptions.jsx) {\n          case 2\n          /* React */\n          :\n            var text = trimReactWhitespaceAndApplyEntities(node);\n\n            if (text === undefined || text.length === 0) {\n              return undefined;\n            } else {\n              return text;\n            }\n\n          case 1\n          /* Preserve */\n          :\n          default:\n            return ts.getTextOfNode(node,\n            /*includeTrivia*/\n            true);\n        }\n      }\n\n      function emitJsxText(node) {\n        switch (compilerOptions.jsx) {\n          case 2\n          /* React */\n          :\n            write(\"\\\"\");\n            write(trimReactWhitespaceAndApplyEntities(node));\n            write(\"\\\"\");\n            break;\n\n          case 1\n          /* Preserve */\n          :\n          default:\n            writer.writeLiteral(ts.getTextOfNode(node,\n            /*includeTrivia*/\n            true));\n            break;\n        }\n      }\n\n      function emitJsxExpression(node) {\n        if (node.expression) {\n          switch (compilerOptions.jsx) {\n            case 1\n            /* Preserve */\n            :\n            default:\n              write(\"{\");\n              emit(node.expression);\n              write(\"}\");\n              break;\n\n            case 2\n            /* React */\n            :\n              emit(node.expression);\n              break;\n          }\n        }\n      }\n\n      function isUseStrictPrologue(node) {\n        return !!node.expression.text.match(/use strict/);\n      }\n\n      function ensureUseStrictPrologue(startWithNewLine, writeUseStrict) {\n        if (writeUseStrict) {\n          if (startWithNewLine) {\n            writeLine();\n          }\n\n          write(\"\\\"use strict\\\";\");\n        }\n      }\n\n      function emitDirectivePrologues(statements, startWithNewLine, ensureUseStrict) {\n        var foundUseStrict = false;\n\n        for (var i = 0; i < statements.length; i++) {\n          if (ts.isPrologueDirective(statements[i])) {\n            if (isUseStrictPrologue(statements[i])) {\n              foundUseStrict = true;\n            }\n\n            if (startWithNewLine || i > 0) {\n              writeLine();\n            }\n\n            emit(statements[i]);\n          } else {\n            ensureUseStrictPrologue(startWithNewLine || i > 0, !foundUseStrict && ensureUseStrict); // return index of the first non prologue directive\n\n            return i;\n          }\n        }\n\n        ensureUseStrictPrologue(startWithNewLine, !foundUseStrict && ensureUseStrict);\n        return statements.length;\n      }\n\n      function writeLines(text) {\n        var lines = text.split(/\\r\\n|\\r|\\n/g);\n\n        for (var i = 0; i < lines.length; i++) {\n          var line = lines[i];\n\n          if (line.length) {\n            writeLine();\n            write(line);\n          }\n        }\n      }\n\n      function emitEmitHelpers(node) {\n        // Only emit helpers if the user did not say otherwise.\n        if (!compilerOptions.noEmitHelpers) {\n          // Only Emit __extends function when target ES5.\n          // For target ES6 and above, we can emit classDeclaration as is.\n          if (languageVersion < 2\n          /* ES6 */\n          && !extendsEmitted && node.flags & 4194304\n          /* HasClassExtends */\n          ) {\n              writeLines(extendsHelper);\n              extendsEmitted = true;\n            }\n\n          if (compilerOptions.jsx !== 1\n          /* Preserve */\n          && !assignEmitted && node.flags & 1073741824\n          /* HasJsxSpreadAttribute */\n          ) {\n            writeLines(assignHelper);\n            assignEmitted = true;\n          }\n\n          if (!decorateEmitted && node.flags & 8388608\n          /* HasDecorators */\n          ) {\n              writeLines(decorateHelper);\n\n              if (compilerOptions.emitDecoratorMetadata) {\n                writeLines(metadataHelper);\n              }\n\n              decorateEmitted = true;\n            }\n\n          if (!paramEmitted && node.flags & 16777216\n          /* HasParamDecorators */\n          ) {\n              writeLines(paramHelper);\n              paramEmitted = true;\n            }\n\n          if (!awaiterEmitted && node.flags & 33554432\n          /* HasAsyncFunctions */\n          ) {\n              writeLines(awaiterHelper);\n              awaiterEmitted = true;\n            }\n        }\n      }\n\n      function emitSourceFileNode(node) {\n        // Start new file on new line\n        writeLine();\n        emitShebang();\n        emitDetachedCommentsAndUpdateCommentsInfo(node);\n\n        if (ts.isExternalModule(node) || compilerOptions.isolatedModules) {\n          if (isOwnFileEmit || !ts.isExternalModule(node) && compilerOptions.isolatedModules) {\n            var emitModule = moduleEmitDelegates[modulekind] || moduleEmitDelegates[1\n            /* CommonJS */\n            ];\n            emitModule(node);\n          } else {\n            bundleEmitDelegates[modulekind](node,\n            /*emitRelativePathAsModuleName*/\n            true);\n          }\n        } else {\n          // emit prologue directives prior to __extends\n          var startIndex = emitDirectivePrologues(node.statements,\n          /*startWithNewLine*/\n          false);\n          externalImports = undefined;\n          exportSpecifiers = undefined;\n          exportEquals = undefined;\n          hasExportStarsToExportValues = false;\n          emitEmitHelpers(node);\n          emitCaptureThisForNodeIfNecessary(node);\n          emitLinesStartingAt(node.statements, startIndex);\n          emitTempDeclarations(\n          /*newLine*/\n          true);\n        }\n\n        emitLeadingComments(node.endOfFileToken);\n      }\n\n      function emit(node) {\n        emitNodeConsideringCommentsOption(node, emitNodeWithSourceMap);\n      }\n\n      function emitNodeWithCommentsAndWithoutSourcemap(node) {\n        emitNodeConsideringCommentsOption(node, emitNodeWithoutSourceMap);\n      }\n\n      function emitNodeConsideringCommentsOption(node, emitNodeConsideringSourcemap) {\n        if (node) {\n          if (node.flags & 4\n          /* Ambient */\n          ) {\n              return emitCommentsOnNotEmittedNode(node);\n            }\n\n          if (isSpecializedCommentHandling(node)) {\n            // This is the node that will handle its own comments and sourcemap\n            return emitNodeWithoutSourceMap(node);\n          }\n\n          var emitComments_1 = shouldEmitLeadingAndTrailingComments(node);\n\n          if (emitComments_1) {\n            emitLeadingComments(node);\n          }\n\n          emitNodeConsideringSourcemap(node);\n\n          if (emitComments_1) {\n            emitTrailingComments(node);\n          }\n        }\n      }\n\n      function emitNodeWithSourceMap(node) {\n        if (node) {\n          emitStart(node);\n          emitNodeWithoutSourceMap(node);\n          emitEnd(node);\n        }\n      }\n\n      function emitNodeWithoutSourceMap(node) {\n        if (node) {\n          emitJavaScriptWorker(node);\n        }\n      }\n\n      function changeSourceMapEmit(writer) {\n        sourceMap = writer;\n        emitStart = writer.emitStart;\n        emitEnd = writer.emitEnd;\n        emitPos = writer.emitPos;\n        setSourceFile = writer.setSourceFile;\n      }\n\n      function withTemporaryNoSourceMap(callback) {\n        var prevSourceMap = sourceMap;\n        setSourceMapWriterEmit(ts.getNullSourceMapWriter());\n        callback();\n        setSourceMapWriterEmit(prevSourceMap);\n      }\n\n      function isSpecializedCommentHandling(node) {\n        switch (node.kind) {\n          // All of these entities are emitted in a specialized fashion.  As such, we allow\n          // the specialized methods for each to handle the comments on the nodes.\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 225\n          /* ImportDeclaration */\n          :\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n          case 219\n          /* TypeAliasDeclaration */\n          :\n          case 230\n          /* ExportAssignment */\n          :\n            return true;\n        }\n      }\n\n      function shouldEmitLeadingAndTrailingComments(node) {\n        switch (node.kind) {\n          case 196\n          /* VariableStatement */\n          :\n            return shouldEmitLeadingAndTrailingCommentsForVariableStatement(node);\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            // Only emit the leading/trailing comments for a module if we're actually\n            // emitting the module as well.\n            return shouldEmitModuleDeclaration(node);\n\n          case 220\n          /* EnumDeclaration */\n          :\n            // Only emit the leading/trailing comments for an enum if we're actually\n            // emitting the module as well.\n            return shouldEmitEnumDeclaration(node);\n        } // If the node is emitted in specialized fashion, dont emit comments as this node will handle\n        // emitting comments when emitting itself\n\n\n        ts.Debug.assert(!isSpecializedCommentHandling(node)); // If this is the expression body of an arrow function that we're down-leveling,\n        // then we don't want to emit comments when we emit the body.  It will have already\n        // been taken care of when we emitted the 'return' statement for the function\n        // expression body.\n\n        if (node.kind !== 195\n        /* Block */\n        && node.parent && node.parent.kind === 177\n        /* ArrowFunction */\n        && node.parent.body === node && compilerOptions.target <= 1\n        /* ES5 */\n        ) {\n            return false;\n          } // Emit comments for everything else.\n\n\n        return true;\n      }\n\n      function emitJavaScriptWorker(node) {\n        // Check if the node can be emitted regardless of the ScriptTarget\n        switch (node.kind) {\n          case 69\n          /* Identifier */\n          :\n            return emitIdentifier(node);\n\n          case 139\n          /* Parameter */\n          :\n            return emitParameter(node);\n\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            return emitMethod(node);\n\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            return emitAccessor(node);\n\n          case 97\n          /* ThisKeyword */\n          :\n            return emitThis(node);\n\n          case 95\n          /* SuperKeyword */\n          :\n            return emitSuper(node);\n\n          case 93\n          /* NullKeyword */\n          :\n            return write(\"null\");\n\n          case 99\n          /* TrueKeyword */\n          :\n            return write(\"true\");\n\n          case 84\n          /* FalseKeyword */\n          :\n            return write(\"false\");\n\n          case 8\n          /* NumericLiteral */\n          :\n          case 9\n          /* StringLiteral */\n          :\n          case 10\n          /* RegularExpressionLiteral */\n          :\n          case 11\n          /* NoSubstitutionTemplateLiteral */\n          :\n          case 12\n          /* TemplateHead */\n          :\n          case 13\n          /* TemplateMiddle */\n          :\n          case 14\n          /* TemplateTail */\n          :\n            return emitLiteral(node);\n\n          case 186\n          /* TemplateExpression */\n          :\n            return emitTemplateExpression(node);\n\n          case 193\n          /* TemplateSpan */\n          :\n            return emitTemplateSpan(node);\n\n          case 236\n          /* JsxElement */\n          :\n          case 237\n          /* JsxSelfClosingElement */\n          :\n            return emitJsxElement(node);\n\n          case 239\n          /* JsxText */\n          :\n            return emitJsxText(node);\n\n          case 243\n          /* JsxExpression */\n          :\n            return emitJsxExpression(node);\n\n          case 136\n          /* QualifiedName */\n          :\n            return emitQualifiedName(node);\n\n          case 164\n          /* ObjectBindingPattern */\n          :\n            return emitObjectBindingPattern(node);\n\n          case 165\n          /* ArrayBindingPattern */\n          :\n            return emitArrayBindingPattern(node);\n\n          case 166\n          /* BindingElement */\n          :\n            return emitBindingElement(node);\n\n          case 167\n          /* ArrayLiteralExpression */\n          :\n            return emitArrayLiteral(node);\n\n          case 168\n          /* ObjectLiteralExpression */\n          :\n            return emitObjectLiteral(node);\n\n          case 248\n          /* PropertyAssignment */\n          :\n            return emitPropertyAssignment(node);\n\n          case 249\n          /* ShorthandPropertyAssignment */\n          :\n            return emitShorthandPropertyAssignment(node);\n\n          case 137\n          /* ComputedPropertyName */\n          :\n            return emitComputedPropertyName(node);\n\n          case 169\n          /* PropertyAccessExpression */\n          :\n            return emitPropertyAccess(node);\n\n          case 170\n          /* ElementAccessExpression */\n          :\n            return emitIndexedAccess(node);\n\n          case 171\n          /* CallExpression */\n          :\n            return emitCallExpression(node);\n\n          case 172\n          /* NewExpression */\n          :\n            return emitNewExpression(node);\n\n          case 173\n          /* TaggedTemplateExpression */\n          :\n            return emitTaggedTemplateExpression(node);\n\n          case 174\n          /* TypeAssertionExpression */\n          :\n            return emit(node.expression);\n\n          case 192\n          /* AsExpression */\n          :\n            return emit(node.expression);\n\n          case 175\n          /* ParenthesizedExpression */\n          :\n            return emitParenExpression(node);\n\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n            return emitFunctionDeclaration(node);\n\n          case 178\n          /* DeleteExpression */\n          :\n            return emitDeleteExpression(node);\n\n          case 179\n          /* TypeOfExpression */\n          :\n            return emitTypeOfExpression(node);\n\n          case 180\n          /* VoidExpression */\n          :\n            return emitVoidExpression(node);\n\n          case 181\n          /* AwaitExpression */\n          :\n            return emitAwaitExpression(node);\n\n          case 182\n          /* PrefixUnaryExpression */\n          :\n            return emitPrefixUnaryExpression(node);\n\n          case 183\n          /* PostfixUnaryExpression */\n          :\n            return emitPostfixUnaryExpression(node);\n\n          case 184\n          /* BinaryExpression */\n          :\n            return emitBinaryExpression(node);\n\n          case 185\n          /* ConditionalExpression */\n          :\n            return emitConditionalExpression(node);\n\n          case 188\n          /* SpreadElementExpression */\n          :\n            return emitSpreadElementExpression(node);\n\n          case 187\n          /* YieldExpression */\n          :\n            return emitYieldExpression(node);\n\n          case 190\n          /* OmittedExpression */\n          :\n            return;\n\n          case 195\n          /* Block */\n          :\n          case 222\n          /* ModuleBlock */\n          :\n            return emitBlock(node);\n\n          case 196\n          /* VariableStatement */\n          :\n            return emitVariableStatement(node);\n\n          case 197\n          /* EmptyStatement */\n          :\n            return write(\";\");\n\n          case 198\n          /* ExpressionStatement */\n          :\n            return emitExpressionStatement(node);\n\n          case 199\n          /* IfStatement */\n          :\n            return emitIfStatement(node);\n\n          case 200\n          /* DoStatement */\n          :\n            return emitDoStatement(node);\n\n          case 201\n          /* WhileStatement */\n          :\n            return emitWhileStatement(node);\n\n          case 202\n          /* ForStatement */\n          :\n            return emitForStatement(node);\n\n          case 204\n          /* ForOfStatement */\n          :\n          case 203\n          /* ForInStatement */\n          :\n            return emitForInOrForOfStatement(node);\n\n          case 205\n          /* ContinueStatement */\n          :\n          case 206\n          /* BreakStatement */\n          :\n            return emitBreakOrContinueStatement(node);\n\n          case 207\n          /* ReturnStatement */\n          :\n            return emitReturnStatement(node);\n\n          case 208\n          /* WithStatement */\n          :\n            return emitWithStatement(node);\n\n          case 209\n          /* SwitchStatement */\n          :\n            return emitSwitchStatement(node);\n\n          case 244\n          /* CaseClause */\n          :\n          case 245\n          /* DefaultClause */\n          :\n            return emitCaseOrDefaultClause(node);\n\n          case 210\n          /* LabeledStatement */\n          :\n            return emitLabeledStatement(node);\n\n          case 211\n          /* ThrowStatement */\n          :\n            return emitThrowStatement(node);\n\n          case 212\n          /* TryStatement */\n          :\n            return emitTryStatement(node);\n\n          case 247\n          /* CatchClause */\n          :\n            return emitCatchClause(node);\n\n          case 213\n          /* DebuggerStatement */\n          :\n            return emitDebuggerStatement(node);\n\n          case 214\n          /* VariableDeclaration */\n          :\n            return emitVariableDeclaration(node);\n\n          case 189\n          /* ClassExpression */\n          :\n            return emitClassExpression(node);\n\n          case 217\n          /* ClassDeclaration */\n          :\n            return emitClassDeclaration(node);\n\n          case 218\n          /* InterfaceDeclaration */\n          :\n            return emitInterfaceDeclaration(node);\n\n          case 220\n          /* EnumDeclaration */\n          :\n            return emitEnumDeclaration(node);\n\n          case 250\n          /* EnumMember */\n          :\n            return emitEnumMember(node);\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            return emitModuleDeclaration(node);\n\n          case 225\n          /* ImportDeclaration */\n          :\n            return emitImportDeclaration(node);\n\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n            return emitImportEqualsDeclaration(node);\n\n          case 231\n          /* ExportDeclaration */\n          :\n            return emitExportDeclaration(node);\n\n          case 230\n          /* ExportAssignment */\n          :\n            return emitExportAssignment(node);\n\n          case 251\n          /* SourceFile */\n          :\n            return emitSourceFileNode(node);\n        }\n      }\n\n      function hasDetachedComments(pos) {\n        return detachedCommentsInfo !== undefined && ts.lastOrUndefined(detachedCommentsInfo).nodePos === pos;\n      }\n\n      function getLeadingCommentsWithoutDetachedComments() {\n        // get the leading comments from detachedPos\n        var leadingComments = ts.getLeadingCommentRanges(currentText, ts.lastOrUndefined(detachedCommentsInfo).detachedCommentEndPos);\n\n        if (detachedCommentsInfo.length - 1) {\n          detachedCommentsInfo.pop();\n        } else {\n          detachedCommentsInfo = undefined;\n        }\n\n        return leadingComments;\n      }\n      /**\n       * Determine if the given comment is a triple-slash\n       *\n       * @return true if the comment is a triple-slash comment else false\n       **/\n\n\n      function isTripleSlashComment(comment) {\n        // Verify this is /// comment, but do the regexp match only when we first can find /// in the comment text\n        // so that we don't end up computing comment string and doing match for all // comments\n        if (currentText.charCodeAt(comment.pos + 1) === 47\n        /* slash */\n        && comment.pos + 2 < comment.end && currentText.charCodeAt(comment.pos + 2) === 47\n        /* slash */\n        ) {\n            var textSubStr = currentText.substring(comment.pos, comment.end);\n            return textSubStr.match(ts.fullTripleSlashReferencePathRegEx) || textSubStr.match(ts.fullTripleSlashAMDReferencePathRegEx) ? true : false;\n          }\n\n        return false;\n      }\n\n      function getLeadingCommentsToEmit(node) {\n        // Emit the leading comments only if the parent's pos doesn't match because parent should take care of emitting these comments\n        if (node.parent) {\n          if (node.parent.kind === 251\n          /* SourceFile */\n          || node.pos !== node.parent.pos) {\n            if (hasDetachedComments(node.pos)) {\n              // get comments without detached comments\n              return getLeadingCommentsWithoutDetachedComments();\n            } else {\n              // get the leading comments from the node\n              return ts.getLeadingCommentRangesOfNodeFromText(node, currentText);\n            }\n          }\n        }\n      }\n\n      function getTrailingCommentsToEmit(node) {\n        // Emit the trailing comments only if the parent's pos doesn't match because parent should take care of emitting these comments\n        if (node.parent) {\n          if (node.parent.kind === 251\n          /* SourceFile */\n          || node.end !== node.parent.end) {\n            return ts.getTrailingCommentRanges(currentText, node.end);\n          }\n        }\n      }\n      /**\n       * Emit comments associated with node that will not be emitted into JS file\n       */\n\n\n      function emitCommentsOnNotEmittedNode(node) {\n        emitLeadingCommentsWorker(node,\n        /*isEmittedNode*/\n        false);\n      }\n\n      function emitLeadingComments(node) {\n        return emitLeadingCommentsWorker(node,\n        /*isEmittedNode*/\n        true);\n      }\n\n      function emitLeadingCommentsWorker(node, isEmittedNode) {\n        if (compilerOptions.removeComments) {\n          return;\n        }\n\n        var leadingComments;\n\n        if (isEmittedNode) {\n          leadingComments = getLeadingCommentsToEmit(node);\n        } else {\n          // If the node will not be emitted in JS, remove all the comments(normal, pinned and ///) associated with the node,\n          // unless it is a triple slash comment at the top of the file.\n          // For Example:\n          //      /// <reference-path ...>\n          //      declare var x;\n          //      /// <reference-path ...>\n          //      interface F {}\n          //  The first /// will NOT be removed while the second one will be removed eventhough both node will not be emitted\n          if (node.pos === 0) {\n            leadingComments = ts.filter(getLeadingCommentsToEmit(node), isTripleSlashComment);\n          }\n        }\n\n        ts.emitNewLineBeforeLeadingComments(currentLineMap, writer, node, leadingComments); // Leading comments are emitted at /*leading comment1 */space/*leading comment*/space\n\n        ts.emitComments(currentText, currentLineMap, writer, leadingComments,\n        /*trailingSeparator*/\n        true, newLine, writeComment);\n      }\n\n      function emitTrailingComments(node) {\n        if (compilerOptions.removeComments) {\n          return;\n        } // Emit the trailing comments only if the parent's end doesn't match\n\n\n        var trailingComments = getTrailingCommentsToEmit(node); // trailing comments are emitted at space/*trailing comment1 */space/*trailing comment*/\n\n        ts.emitComments(currentText, currentLineMap, writer, trailingComments,\n        /*trailingSeparator*/\n        false, newLine, writeComment);\n      }\n      /**\n       * Emit trailing comments at the position. The term trailing comment is used here to describe following comment:\n       *      x, /comment1/ y\n       *        ^ => pos; the function will emit \"comment1\" in the emitJS\n       */\n\n\n      function emitTrailingCommentsOfPosition(pos) {\n        if (compilerOptions.removeComments) {\n          return;\n        }\n\n        var trailingComments = ts.getTrailingCommentRanges(currentText, pos); // trailing comments are emitted at space/*trailing comment1 */space/*trailing comment*/\n\n        ts.emitComments(currentText, currentLineMap, writer, trailingComments,\n        /*trailingSeparator*/\n        true, newLine, writeComment);\n      }\n\n      function emitLeadingCommentsOfPositionWorker(pos) {\n        if (compilerOptions.removeComments) {\n          return;\n        }\n\n        var leadingComments;\n\n        if (hasDetachedComments(pos)) {\n          // get comments without detached comments\n          leadingComments = getLeadingCommentsWithoutDetachedComments();\n        } else {\n          // get the leading comments from the node\n          leadingComments = ts.getLeadingCommentRanges(currentText, pos);\n        }\n\n        ts.emitNewLineBeforeLeadingComments(currentLineMap, writer, {\n          pos: pos,\n          end: pos\n        }, leadingComments); // Leading comments are emitted at /*leading comment1 */space/*leading comment*/space\n\n        ts.emitComments(currentText, currentLineMap, writer, leadingComments,\n        /*trailingSeparator*/\n        true, newLine, writeComment);\n      }\n\n      function emitDetachedCommentsAndUpdateCommentsInfo(node) {\n        var currentDetachedCommentInfo = ts.emitDetachedComments(currentText, currentLineMap, writer, writeComment, node, newLine, compilerOptions.removeComments);\n\n        if (currentDetachedCommentInfo) {\n          if (detachedCommentsInfo) {\n            detachedCommentsInfo.push(currentDetachedCommentInfo);\n          } else {\n            detachedCommentsInfo = [currentDetachedCommentInfo];\n          }\n        }\n      }\n\n      function writeComment(text, lineMap, writer, comment, newLine) {\n        emitPos(comment.pos);\n        ts.writeCommentRange(text, lineMap, writer, comment, newLine);\n        emitPos(comment.end);\n      }\n\n      function emitShebang() {\n        var shebang = ts.getShebang(currentText);\n\n        if (shebang) {\n          write(shebang);\n          writeLine();\n        }\n      }\n\n      var _a, _b;\n    }\n\n    function emitFile(_a, sourceFiles, isBundledEmit) {\n      var jsFilePath = _a.jsFilePath,\n          sourceMapFilePath = _a.sourceMapFilePath,\n          declarationFilePath = _a.declarationFilePath; // Make sure not to write js File and source map file if any of them cannot be written\n\n      if (!host.isEmitBlocked(jsFilePath) && !compilerOptions.noEmit) {\n        emitJavaScript(jsFilePath, sourceMapFilePath, sourceFiles, isBundledEmit);\n      } else {\n        emitSkipped = true;\n      }\n\n      if (declarationFilePath) {\n        emitSkipped = ts.writeDeclarationFile(declarationFilePath, sourceFiles, isBundledEmit, host, resolver, emitterDiagnostics) || emitSkipped;\n      }\n    }\n  }\n\n  ts.emitFiles = emitFiles;\n})(ts || (ts = {})); /// <reference path=\"sys.ts\" />\n/// <reference path=\"emitter.ts\" />\n/// <reference path=\"core.ts\" />\n\n\nvar ts;\n\n(function (ts) {\n  /* @internal */\n  ts.programTime = 0;\n  /* @internal */\n\n  ts.emitTime = 0;\n  /* @internal */\n\n  ts.ioReadTime = 0;\n  /* @internal */\n\n  ts.ioWriteTime = 0;\n  /* @internal */\n\n  ts.maxProgramSizeForNonTsFiles = 20 * 1024 * 1024;\n  /** The version of the TypeScript compiler release */\n\n  var emptyArray = [];\n  ts.version = \"1.8.10\";\n\n  function findConfigFile(searchPath, fileExists) {\n    var fileName = \"tsconfig.json\";\n\n    while (true) {\n      if (fileExists(fileName)) {\n        return fileName;\n      }\n\n      var parentPath = ts.getDirectoryPath(searchPath);\n\n      if (parentPath === searchPath) {\n        break;\n      }\n\n      searchPath = parentPath;\n      fileName = \"../\" + fileName;\n    }\n\n    return undefined;\n  }\n\n  ts.findConfigFile = findConfigFile;\n\n  function resolveTripleslashReference(moduleName, containingFile) {\n    var basePath = ts.getDirectoryPath(containingFile);\n    var referencedFileName = ts.isRootedDiskPath(moduleName) ? moduleName : ts.combinePaths(basePath, moduleName);\n    return ts.normalizePath(referencedFileName);\n  }\n\n  ts.resolveTripleslashReference = resolveTripleslashReference;\n\n  function resolveModuleName(moduleName, containingFile, compilerOptions, host) {\n    var moduleResolution = compilerOptions.moduleResolution !== undefined ? compilerOptions.moduleResolution : ts.getEmitModuleKind(compilerOptions) === 1\n    /* CommonJS */\n    ? 2\n    /* NodeJs */\n    : 1\n    /* Classic */\n    ;\n\n    switch (moduleResolution) {\n      case 2\n      /* NodeJs */\n      :\n        return nodeModuleNameResolver(moduleName, containingFile, compilerOptions, host);\n\n      case 1\n      /* Classic */\n      :\n        return classicNameResolver(moduleName, containingFile, compilerOptions, host);\n    }\n  }\n\n  ts.resolveModuleName = resolveModuleName;\n\n  function nodeModuleNameResolver(moduleName, containingFile, compilerOptions, host) {\n    var containingDirectory = ts.getDirectoryPath(containingFile);\n    var supportedExtensions = ts.getSupportedExtensions(compilerOptions);\n\n    if (ts.getRootLength(moduleName) !== 0 || nameStartsWithDotSlashOrDotDotSlash(moduleName)) {\n      var failedLookupLocations = [];\n      var candidate = ts.normalizePath(ts.combinePaths(containingDirectory, moduleName));\n      var resolvedFileName = loadNodeModuleFromFile(supportedExtensions, candidate, failedLookupLocations,\n      /*onlyRecordFailures*/\n      false, host);\n\n      if (resolvedFileName) {\n        return {\n          resolvedModule: {\n            resolvedFileName: resolvedFileName\n          },\n          failedLookupLocations: failedLookupLocations\n        };\n      }\n\n      resolvedFileName = loadNodeModuleFromDirectory(supportedExtensions, candidate, failedLookupLocations,\n      /*onlyRecordFailures*/\n      false, host);\n      return resolvedFileName ? {\n        resolvedModule: {\n          resolvedFileName: resolvedFileName\n        },\n        failedLookupLocations: failedLookupLocations\n      } : {\n        resolvedModule: undefined,\n        failedLookupLocations: failedLookupLocations\n      };\n    } else {\n      return loadModuleFromNodeModules(moduleName, containingDirectory, host);\n    }\n  }\n\n  ts.nodeModuleNameResolver = nodeModuleNameResolver;\n  /* @internal */\n\n  function directoryProbablyExists(directoryName, host) {\n    // if host does not support 'directoryExists' assume that directory will exist\n    return !host.directoryExists || host.directoryExists(directoryName);\n  }\n\n  ts.directoryProbablyExists = directoryProbablyExists;\n  /**\n   * @param {boolean} onlyRecordFailures - if true then function won't try to actually load files but instead record all attempts as failures. This flag is necessary\n   * in cases when we know upfront that all load attempts will fail (because containing folder does not exists) however we still need to record all failed lookup locations.\n   */\n\n  function loadNodeModuleFromFile(extensions, candidate, failedLookupLocation, onlyRecordFailures, host) {\n    return ts.forEach(extensions, tryLoad);\n\n    function tryLoad(ext) {\n      var fileName = ts.fileExtensionIs(candidate, ext) ? candidate : candidate + ext;\n\n      if (!onlyRecordFailures && host.fileExists(fileName)) {\n        return fileName;\n      } else {\n        failedLookupLocation.push(fileName);\n        return undefined;\n      }\n    }\n  }\n\n  function loadNodeModuleFromDirectory(extensions, candidate, failedLookupLocation, onlyRecordFailures, host) {\n    var packageJsonPath = ts.combinePaths(candidate, \"package.json\");\n    var directoryExists = !onlyRecordFailures && directoryProbablyExists(candidate, host);\n\n    if (directoryExists && host.fileExists(packageJsonPath)) {\n      var jsonContent = void 0;\n\n      try {\n        var jsonText = host.readFile(packageJsonPath);\n        jsonContent = jsonText ? JSON.parse(jsonText) : {\n          typings: undefined\n        };\n      } catch (e) {\n        // gracefully handle if readFile fails or returns not JSON \n        jsonContent = {\n          typings: undefined\n        };\n      }\n\n      if (typeof jsonContent.typings === \"string\") {\n        var path = ts.normalizePath(ts.combinePaths(candidate, jsonContent.typings));\n        var result = loadNodeModuleFromFile(extensions, path, failedLookupLocation, !directoryProbablyExists(ts.getDirectoryPath(path), host), host);\n\n        if (result) {\n          return result;\n        }\n      }\n    } else {\n      // record package json as one of failed lookup locations - in the future if this file will appear it will invalidate resolution results\n      failedLookupLocation.push(packageJsonPath);\n    }\n\n    return loadNodeModuleFromFile(extensions, ts.combinePaths(candidate, \"index\"), failedLookupLocation, !directoryExists, host);\n  }\n\n  function loadModuleFromNodeModules(moduleName, directory, host) {\n    var failedLookupLocations = [];\n    directory = ts.normalizeSlashes(directory);\n\n    while (true) {\n      var baseName = ts.getBaseFileName(directory);\n\n      if (baseName !== \"node_modules\") {\n        var nodeModulesFolder = ts.combinePaths(directory, \"node_modules\");\n        var nodeModulesFolderExists = directoryProbablyExists(nodeModulesFolder, host);\n        var candidate = ts.normalizePath(ts.combinePaths(nodeModulesFolder, moduleName)); // Load only typescript files irrespective of allowJs option if loading from node modules\n\n        var result = loadNodeModuleFromFile(ts.supportedTypeScriptExtensions, candidate, failedLookupLocations, !nodeModulesFolderExists, host);\n\n        if (result) {\n          return {\n            resolvedModule: {\n              resolvedFileName: result,\n              isExternalLibraryImport: true\n            },\n            failedLookupLocations: failedLookupLocations\n          };\n        }\n\n        result = loadNodeModuleFromDirectory(ts.supportedTypeScriptExtensions, candidate, failedLookupLocations, !nodeModulesFolderExists, host);\n\n        if (result) {\n          return {\n            resolvedModule: {\n              resolvedFileName: result,\n              isExternalLibraryImport: true\n            },\n            failedLookupLocations: failedLookupLocations\n          };\n        }\n      }\n\n      var parentPath = ts.getDirectoryPath(directory);\n\n      if (parentPath === directory) {\n        break;\n      }\n\n      directory = parentPath;\n    }\n\n    return {\n      resolvedModule: undefined,\n      failedLookupLocations: failedLookupLocations\n    };\n  }\n\n  function nameStartsWithDotSlashOrDotDotSlash(name) {\n    var i = name.lastIndexOf(\"./\", 1);\n    return i === 0 || i === 1 && name.charCodeAt(0) === 46\n    /* dot */\n    ;\n  }\n\n  function classicNameResolver(moduleName, containingFile, compilerOptions, host) {\n    // module names that contain '!' are used to reference resources and are not resolved to actual files on disk\n    if (moduleName.indexOf(\"!\") != -1) {\n      return {\n        resolvedModule: undefined,\n        failedLookupLocations: []\n      };\n    }\n\n    var searchPath = ts.getDirectoryPath(containingFile);\n    var searchName;\n    var failedLookupLocations = [];\n    var referencedSourceFile;\n    var supportedExtensions = ts.getSupportedExtensions(compilerOptions);\n\n    while (true) {\n      searchName = ts.normalizePath(ts.combinePaths(searchPath, moduleName));\n      referencedSourceFile = ts.forEach(supportedExtensions, function (extension) {\n        if (extension === \".tsx\" && !compilerOptions.jsx) {\n          // resolve .tsx files only if jsx support is enabled \n          // 'logical not' handles both undefined and None cases\n          return undefined;\n        }\n\n        var candidate = searchName + extension;\n\n        if (host.fileExists(candidate)) {\n          return candidate;\n        } else {\n          failedLookupLocations.push(candidate);\n        }\n      });\n\n      if (referencedSourceFile) {\n        break;\n      }\n\n      var parentPath = ts.getDirectoryPath(searchPath);\n\n      if (parentPath === searchPath) {\n        break;\n      }\n\n      searchPath = parentPath;\n    }\n\n    return referencedSourceFile ? {\n      resolvedModule: {\n        resolvedFileName: referencedSourceFile\n      },\n      failedLookupLocations: failedLookupLocations\n    } : {\n      resolvedModule: undefined,\n      failedLookupLocations: failedLookupLocations\n    };\n  }\n\n  ts.classicNameResolver = classicNameResolver;\n  /* @internal */\n\n  ts.defaultInitCompilerOptions = {\n    module: 1\n    /* CommonJS */\n    ,\n    target: 1\n    /* ES5 */\n    ,\n    noImplicitAny: false,\n    sourceMap: false\n  };\n\n  function createCompilerHost(options, setParentNodes) {\n    var existingDirectories = {};\n\n    function getCanonicalFileName(fileName) {\n      // if underlying system can distinguish between two files whose names differs only in cases then file name already in canonical form.\n      // otherwise use toLowerCase as a canonical form.\n      return ts.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase();\n    } // returned by CScript sys environment\n\n\n    var unsupportedFileEncodingErrorCode = -2147024809;\n\n    function getSourceFile(fileName, languageVersion, onError) {\n      var text;\n\n      try {\n        var start = new Date().getTime();\n        text = ts.sys.readFile(fileName, options.charset);\n        ts.ioReadTime += new Date().getTime() - start;\n      } catch (e) {\n        if (onError) {\n          onError(e.number === unsupportedFileEncodingErrorCode ? ts.createCompilerDiagnostic(ts.Diagnostics.Unsupported_file_encoding).messageText : e.message);\n        }\n\n        text = \"\";\n      }\n\n      return text !== undefined ? ts.createSourceFile(fileName, text, languageVersion, setParentNodes) : undefined;\n    }\n\n    function directoryExists(directoryPath) {\n      if (ts.hasProperty(existingDirectories, directoryPath)) {\n        return true;\n      }\n\n      if (ts.sys.directoryExists(directoryPath)) {\n        existingDirectories[directoryPath] = true;\n        return true;\n      }\n\n      return false;\n    }\n\n    function ensureDirectoriesExist(directoryPath) {\n      if (directoryPath.length > ts.getRootLength(directoryPath) && !directoryExists(directoryPath)) {\n        var parentDirectory = ts.getDirectoryPath(directoryPath);\n        ensureDirectoriesExist(parentDirectory);\n        ts.sys.createDirectory(directoryPath);\n      }\n    }\n\n    function writeFile(fileName, data, writeByteOrderMark, onError) {\n      try {\n        var start = new Date().getTime();\n        ensureDirectoriesExist(ts.getDirectoryPath(ts.normalizePath(fileName)));\n        ts.sys.writeFile(fileName, data, writeByteOrderMark);\n        ts.ioWriteTime += new Date().getTime() - start;\n      } catch (e) {\n        if (onError) {\n          onError(e.message);\n        }\n      }\n    }\n\n    var newLine = ts.getNewLineCharacter(options);\n    return {\n      getSourceFile: getSourceFile,\n      getDefaultLibFileName: function getDefaultLibFileName(options) {\n        return ts.combinePaths(ts.getDirectoryPath(ts.normalizePath(ts.sys.getExecutingFilePath())), ts.getDefaultLibFileName(options));\n      },\n      writeFile: writeFile,\n      getCurrentDirectory: ts.memoize(function () {\n        return ts.sys.getCurrentDirectory();\n      }),\n      useCaseSensitiveFileNames: function useCaseSensitiveFileNames() {\n        return ts.sys.useCaseSensitiveFileNames;\n      },\n      getCanonicalFileName: getCanonicalFileName,\n      getNewLine: function getNewLine() {\n        return newLine;\n      },\n      fileExists: function fileExists(fileName) {\n        return ts.sys.fileExists(fileName);\n      },\n      readFile: function readFile(fileName) {\n        return ts.sys.readFile(fileName);\n      },\n      directoryExists: function directoryExists(directoryName) {\n        return ts.sys.directoryExists(directoryName);\n      }\n    };\n  }\n\n  ts.createCompilerHost = createCompilerHost;\n\n  function getPreEmitDiagnostics(program, sourceFile, cancellationToken) {\n    var diagnostics = program.getOptionsDiagnostics(cancellationToken).concat(program.getSyntacticDiagnostics(sourceFile, cancellationToken), program.getGlobalDiagnostics(cancellationToken), program.getSemanticDiagnostics(sourceFile, cancellationToken));\n\n    if (program.getCompilerOptions().declaration) {\n      diagnostics = diagnostics.concat(program.getDeclarationDiagnostics(sourceFile, cancellationToken));\n    }\n\n    return ts.sortAndDeduplicateDiagnostics(diagnostics);\n  }\n\n  ts.getPreEmitDiagnostics = getPreEmitDiagnostics;\n\n  function flattenDiagnosticMessageText(messageText, newLine) {\n    if (typeof messageText === \"string\") {\n      return messageText;\n    } else {\n      var diagnosticChain = messageText;\n      var result = \"\";\n      var indent = 0;\n\n      while (diagnosticChain) {\n        if (indent) {\n          result += newLine;\n\n          for (var i = 0; i < indent; i++) {\n            result += \"  \";\n          }\n        }\n\n        result += diagnosticChain.messageText;\n        indent++;\n        diagnosticChain = diagnosticChain.next;\n      }\n\n      return result;\n    }\n  }\n\n  ts.flattenDiagnosticMessageText = flattenDiagnosticMessageText;\n\n  function createProgram(rootNames, options, host, oldProgram) {\n    var program;\n    var files = [];\n    var fileProcessingDiagnostics = ts.createDiagnosticCollection();\n    var programDiagnostics = ts.createDiagnosticCollection();\n    var commonSourceDirectory;\n    var diagnosticsProducingTypeChecker;\n    var noDiagnosticsTypeChecker;\n    var classifiableNames;\n    var programSizeLimitExceeded = -1;\n    var programSizeForNonTsFiles = 0;\n    var skipDefaultLib = options.noLib;\n    var supportedExtensions = ts.getSupportedExtensions(options);\n    var start = new Date().getTime();\n    host = host || createCompilerHost(options); // Map storing if there is emit blocking diagnostics for given input\n\n    var hasEmitBlockingDiagnostics = ts.createFileMap(getCanonicalFileName);\n    var currentDirectory = host.getCurrentDirectory();\n    var resolveModuleNamesWorker = host.resolveModuleNames ? function (moduleNames, containingFile) {\n      return host.resolveModuleNames(moduleNames, containingFile);\n    } : function (moduleNames, containingFile) {\n      var resolvedModuleNames = []; // resolveModuleName does not store any results between calls.\n      // lookup is a local cache to avoid resolving the same module name several times\n\n      var lookup = {};\n\n      for (var _i = 0, moduleNames_1 = moduleNames; _i < moduleNames_1.length; _i++) {\n        var moduleName = moduleNames_1[_i];\n        var resolvedName = void 0;\n\n        if (ts.hasProperty(lookup, moduleName)) {\n          resolvedName = lookup[moduleName];\n        } else {\n          resolvedName = resolveModuleName(moduleName, containingFile, options, host).resolvedModule;\n          lookup[moduleName] = resolvedName;\n        }\n\n        resolvedModuleNames.push(resolvedName);\n      }\n\n      return resolvedModuleNames;\n    };\n    var filesByName = ts.createFileMap(); // stores 'filename -> file association' ignoring case\n    // used to track cases when two file names differ only in casing \n\n    var filesByNameIgnoreCase = host.useCaseSensitiveFileNames() ? ts.createFileMap(function (fileName) {\n      return fileName.toLowerCase();\n    }) : undefined;\n\n    if (oldProgram) {\n      // check properties that can affect structure of the program or module resolution strategy\n      // if any of these properties has changed - structure cannot be reused\n      var oldOptions = oldProgram.getCompilerOptions();\n\n      if (oldOptions.module !== options.module || oldOptions.noResolve !== options.noResolve || oldOptions.target !== options.target || oldOptions.noLib !== options.noLib || oldOptions.jsx !== options.jsx || oldOptions.allowJs !== options.allowJs || oldOptions.disableSizeLimit !== options.disableSizeLimit) {\n        oldProgram = undefined;\n      }\n    }\n\n    if (!tryReuseStructureFromOldProgram()) {\n      ts.forEach(rootNames, function (name) {\n        return processRootFile(name,\n        /*isDefaultLib*/\n        false);\n      }); // Do not process the default library if:\n      //  - The '--noLib' flag is used.\n      //  - A 'no-default-lib' reference comment is encountered in\n      //      processing the root files.\n\n      if (!skipDefaultLib) {\n        processRootFile(host.getDefaultLibFileName(options),\n        /*isDefaultLib*/\n        true);\n      }\n    } // unconditionally set oldProgram to undefined to prevent it from being captured in closure\n\n\n    oldProgram = undefined;\n    program = {\n      getRootFileNames: function getRootFileNames() {\n        return rootNames;\n      },\n      getSourceFile: getSourceFile,\n      getSourceFiles: function getSourceFiles() {\n        return files;\n      },\n      getCompilerOptions: function getCompilerOptions() {\n        return options;\n      },\n      getSyntacticDiagnostics: getSyntacticDiagnostics,\n      getOptionsDiagnostics: getOptionsDiagnostics,\n      getGlobalDiagnostics: getGlobalDiagnostics,\n      getSemanticDiagnostics: getSemanticDiagnostics,\n      getDeclarationDiagnostics: getDeclarationDiagnostics,\n      getTypeChecker: getTypeChecker,\n      getClassifiableNames: getClassifiableNames,\n      getDiagnosticsProducingTypeChecker: getDiagnosticsProducingTypeChecker,\n      getCommonSourceDirectory: getCommonSourceDirectory,\n      emit: emit,\n      getCurrentDirectory: function getCurrentDirectory() {\n        return currentDirectory;\n      },\n      getNodeCount: function getNodeCount() {\n        return getDiagnosticsProducingTypeChecker().getNodeCount();\n      },\n      getIdentifierCount: function getIdentifierCount() {\n        return getDiagnosticsProducingTypeChecker().getIdentifierCount();\n      },\n      getSymbolCount: function getSymbolCount() {\n        return getDiagnosticsProducingTypeChecker().getSymbolCount();\n      },\n      getTypeCount: function getTypeCount() {\n        return getDiagnosticsProducingTypeChecker().getTypeCount();\n      },\n      getFileProcessingDiagnostics: function getFileProcessingDiagnostics() {\n        return fileProcessingDiagnostics;\n      }\n    };\n    verifyCompilerOptions();\n    ts.programTime += new Date().getTime() - start;\n    return program;\n\n    function exceedProgramSizeLimit() {\n      return !options.disableSizeLimit && programSizeForNonTsFiles === programSizeLimitExceeded;\n    }\n\n    function getCommonSourceDirectory() {\n      if (typeof commonSourceDirectory === \"undefined\") {\n        if (options.rootDir && checkSourceFilesBelongToPath(files, options.rootDir)) {\n          // If a rootDir is specified and is valid use it as the commonSourceDirectory\n          commonSourceDirectory = ts.getNormalizedAbsolutePath(options.rootDir, currentDirectory);\n        } else {\n          commonSourceDirectory = computeCommonSourceDirectory(files);\n        }\n\n        if (commonSourceDirectory && commonSourceDirectory[commonSourceDirectory.length - 1] !== ts.directorySeparator) {\n          // Make sure directory path ends with directory separator so this string can directly\n          // used to replace with \"\" to get the relative path of the source file and the relative path doesn't\n          // start with / making it rooted path\n          commonSourceDirectory += ts.directorySeparator;\n        }\n      }\n\n      return commonSourceDirectory;\n    }\n\n    function getClassifiableNames() {\n      if (!classifiableNames) {\n        // Initialize a checker so that all our files are bound.\n        getTypeChecker();\n        classifiableNames = {};\n\n        for (var _i = 0, files_3 = files; _i < files_3.length; _i++) {\n          var sourceFile = files_3[_i];\n          ts.copyMap(sourceFile.classifiableNames, classifiableNames);\n        }\n      }\n\n      return classifiableNames;\n    }\n\n    function tryReuseStructureFromOldProgram() {\n      if (!oldProgram) {\n        return false;\n      }\n\n      ts.Debug.assert(!oldProgram.structureIsReused); // there is an old program, check if we can reuse its structure\n\n      var oldRootNames = oldProgram.getRootFileNames();\n\n      if (!ts.arrayIsEqualTo(oldRootNames, rootNames)) {\n        return false;\n      } // check if program source files has changed in the way that can affect structure of the program\n\n\n      var newSourceFiles = [];\n      var filePaths = [];\n      var modifiedSourceFiles = [];\n\n      for (var _i = 0, _a = oldProgram.getSourceFiles(); _i < _a.length; _i++) {\n        var oldSourceFile = _a[_i];\n        var newSourceFile = host.getSourceFile(oldSourceFile.fileName, options.target);\n\n        if (!newSourceFile) {\n          return false;\n        }\n\n        newSourceFile.path = oldSourceFile.path;\n        filePaths.push(newSourceFile.path);\n\n        if (oldSourceFile !== newSourceFile) {\n          if (oldSourceFile.hasNoDefaultLib !== newSourceFile.hasNoDefaultLib) {\n            // value of no-default-lib has changed\n            // this will affect if default library is injected into the list of files\n            return false;\n          } // check tripleslash references\n\n\n          if (!ts.arrayIsEqualTo(oldSourceFile.referencedFiles, newSourceFile.referencedFiles, fileReferenceIsEqualTo)) {\n            // tripleslash references has changed\n            return false;\n          } // check imports and module augmentations\n\n\n          collectExternalModuleReferences(newSourceFile);\n\n          if (!ts.arrayIsEqualTo(oldSourceFile.imports, newSourceFile.imports, moduleNameIsEqualTo)) {\n            // imports has changed\n            return false;\n          }\n\n          if (!ts.arrayIsEqualTo(oldSourceFile.moduleAugmentations, newSourceFile.moduleAugmentations, moduleNameIsEqualTo)) {\n            // moduleAugmentations has changed\n            return false;\n          }\n\n          if (resolveModuleNamesWorker) {\n            var moduleNames = ts.map(ts.concatenate(newSourceFile.imports, newSourceFile.moduleAugmentations), getTextOfLiteral);\n            var resolutions = resolveModuleNamesWorker(moduleNames, ts.getNormalizedAbsolutePath(newSourceFile.fileName, currentDirectory)); // ensure that module resolution results are still correct\n\n            for (var i = 0; i < moduleNames.length; i++) {\n              var newResolution = resolutions[i];\n              var oldResolution = ts.getResolvedModule(oldSourceFile, moduleNames[i]);\n              var resolutionChanged = oldResolution ? !newResolution || oldResolution.resolvedFileName !== newResolution.resolvedFileName || !!oldResolution.isExternalLibraryImport !== !!newResolution.isExternalLibraryImport : newResolution;\n\n              if (resolutionChanged) {\n                return false;\n              }\n            }\n          } // pass the cache of module resolutions from the old source file\n\n\n          newSourceFile.resolvedModules = oldSourceFile.resolvedModules;\n          modifiedSourceFiles.push(newSourceFile);\n        } else {\n          // file has no changes - use it as is\n          newSourceFile = oldSourceFile;\n        } // if file has passed all checks it should be safe to reuse it\n\n\n        newSourceFiles.push(newSourceFile);\n      } // update fileName -> file mapping\n\n\n      for (var i = 0, len = newSourceFiles.length; i < len; i++) {\n        filesByName.set(filePaths[i], newSourceFiles[i]);\n      }\n\n      files = newSourceFiles;\n      fileProcessingDiagnostics = oldProgram.getFileProcessingDiagnostics();\n\n      for (var _b = 0, modifiedSourceFiles_1 = modifiedSourceFiles; _b < modifiedSourceFiles_1.length; _b++) {\n        var modifiedFile = modifiedSourceFiles_1[_b];\n        fileProcessingDiagnostics.reattachFileDiagnostics(modifiedFile);\n      }\n\n      oldProgram.structureIsReused = true;\n      return true;\n    }\n\n    function getEmitHost(writeFileCallback) {\n      return {\n        getCanonicalFileName: getCanonicalFileName,\n        getCommonSourceDirectory: program.getCommonSourceDirectory,\n        getCompilerOptions: program.getCompilerOptions,\n        getCurrentDirectory: function getCurrentDirectory() {\n          return currentDirectory;\n        },\n        getNewLine: function getNewLine() {\n          return host.getNewLine();\n        },\n        getSourceFile: program.getSourceFile,\n        getSourceFiles: program.getSourceFiles,\n        writeFile: writeFileCallback || function (fileName, data, writeByteOrderMark, onError) {\n          return host.writeFile(fileName, data, writeByteOrderMark, onError);\n        },\n        isEmitBlocked: isEmitBlocked\n      };\n    }\n\n    function getDiagnosticsProducingTypeChecker() {\n      return diagnosticsProducingTypeChecker || (diagnosticsProducingTypeChecker = ts.createTypeChecker(program,\n      /*produceDiagnostics:*/\n      true));\n    }\n\n    function getTypeChecker() {\n      return noDiagnosticsTypeChecker || (noDiagnosticsTypeChecker = ts.createTypeChecker(program,\n      /*produceDiagnostics:*/\n      false));\n    }\n\n    function emit(sourceFile, writeFileCallback, cancellationToken) {\n      var _this = this;\n\n      return runWithCancellationToken(function () {\n        return emitWorker(_this, sourceFile, writeFileCallback, cancellationToken);\n      });\n    }\n\n    function isEmitBlocked(emitFileName) {\n      return hasEmitBlockingDiagnostics.contains(ts.toPath(emitFileName, currentDirectory, getCanonicalFileName));\n    }\n\n    function emitWorker(program, sourceFile, writeFileCallback, cancellationToken) {\n      // If the noEmitOnError flag is set, then check if we have any errors so far.  If so,\n      // immediately bail out.  Note that we pass 'undefined' for 'sourceFile' so that we\n      // get any preEmit diagnostics, not just the ones\n      if (options.noEmitOnError) {\n        var diagnostics = program.getOptionsDiagnostics(cancellationToken).concat(program.getSyntacticDiagnostics(sourceFile, cancellationToken), program.getGlobalDiagnostics(cancellationToken), program.getSemanticDiagnostics(sourceFile, cancellationToken));\n        var declarationDiagnostics = [];\n\n        if (diagnostics.length === 0 && program.getCompilerOptions().declaration) {\n          declarationDiagnostics = program.getDeclarationDiagnostics(\n          /*sourceFile*/\n          undefined, cancellationToken);\n        }\n\n        if (diagnostics.length > 0 || declarationDiagnostics.length > 0) {\n          return {\n            diagnostics: declarationDiagnostics,\n            sourceMaps: undefined,\n            emitSkipped: true\n          };\n        }\n      } // Create the emit resolver outside of the \"emitTime\" tracking code below.  That way\n      // any cost associated with it (like type checking) are appropriate associated with\n      // the type-checking counter.\n      //\n      // If the -out option is specified, we should not pass the source file to getEmitResolver.\n      // This is because in the -out scenario all files need to be emitted, and therefore all\n      // files need to be type checked. And the way to specify that all files need to be type\n      // checked is to not pass the file to getEmitResolver.\n\n\n      var emitResolver = getDiagnosticsProducingTypeChecker().getEmitResolver(options.outFile || options.out ? undefined : sourceFile);\n      var start = new Date().getTime();\n      var emitResult = ts.emitFiles(emitResolver, getEmitHost(writeFileCallback), sourceFile);\n      ts.emitTime += new Date().getTime() - start;\n      return emitResult;\n    }\n\n    function getSourceFile(fileName) {\n      return filesByName.get(ts.toPath(fileName, currentDirectory, getCanonicalFileName));\n    }\n\n    function getDiagnosticsHelper(sourceFile, getDiagnostics, cancellationToken) {\n      if (sourceFile) {\n        return getDiagnostics(sourceFile, cancellationToken);\n      }\n\n      var allDiagnostics = [];\n      ts.forEach(program.getSourceFiles(), function (sourceFile) {\n        if (cancellationToken) {\n          cancellationToken.throwIfCancellationRequested();\n        }\n\n        ts.addRange(allDiagnostics, getDiagnostics(sourceFile, cancellationToken));\n      });\n      return ts.sortAndDeduplicateDiagnostics(allDiagnostics);\n    }\n\n    function getSyntacticDiagnostics(sourceFile, cancellationToken) {\n      return getDiagnosticsHelper(sourceFile, getSyntacticDiagnosticsForFile, cancellationToken);\n    }\n\n    function getSemanticDiagnostics(sourceFile, cancellationToken) {\n      return getDiagnosticsHelper(sourceFile, getSemanticDiagnosticsForFile, cancellationToken);\n    }\n\n    function getDeclarationDiagnostics(sourceFile, cancellationToken) {\n      var options = program.getCompilerOptions(); // collect diagnostics from the program only once if either no source file was specified or out/outFile is set (bundled emit)\n\n      if (!sourceFile || options.out || options.outFile) {\n        return getDeclarationDiagnosticsWorker(sourceFile, cancellationToken);\n      } else {\n        return getDiagnosticsHelper(sourceFile, getDeclarationDiagnosticsForFile, cancellationToken);\n      }\n    }\n\n    function getSyntacticDiagnosticsForFile(sourceFile, cancellationToken) {\n      return sourceFile.parseDiagnostics;\n    }\n\n    function runWithCancellationToken(func) {\n      try {\n        return func();\n      } catch (e) {\n        if (e instanceof ts.OperationCanceledException) {\n          // We were canceled while performing the operation.  Because our type checker\n          // might be a bad state, we need to throw it away.\n          //\n          // Note: we are overly agressive here.  We do not actually *have* to throw away\n          // the \"noDiagnosticsTypeChecker\".  However, for simplicity, i'd like to keep\n          // the lifetimes of these two TypeCheckers the same.  Also, we generally only\n          // cancel when the user has made a change anyways.  And, in that case, we (the\n          // program instance) will get thrown away anyways.  So trying to keep one of\n          // these type checkers alive doesn't serve much purpose.\n          noDiagnosticsTypeChecker = undefined;\n          diagnosticsProducingTypeChecker = undefined;\n        }\n\n        throw e;\n      }\n    }\n\n    function getSemanticDiagnosticsForFile(sourceFile, cancellationToken) {\n      return runWithCancellationToken(function () {\n        var typeChecker = getDiagnosticsProducingTypeChecker();\n        ts.Debug.assert(!!sourceFile.bindDiagnostics);\n        var bindDiagnostics = sourceFile.bindDiagnostics; // For JavaScript files, we don't want to report the normal typescript semantic errors.\n        // Instead, we just report errors for using TypeScript-only constructs from within a\n        // JavaScript file.\n\n        var checkDiagnostics = ts.isSourceFileJavaScript(sourceFile) ? getJavaScriptSemanticDiagnosticsForFile(sourceFile, cancellationToken) : typeChecker.getDiagnostics(sourceFile, cancellationToken);\n        var fileProcessingDiagnosticsInFile = fileProcessingDiagnostics.getDiagnostics(sourceFile.fileName);\n        var programDiagnosticsInFile = programDiagnostics.getDiagnostics(sourceFile.fileName);\n        return bindDiagnostics.concat(checkDiagnostics).concat(fileProcessingDiagnosticsInFile).concat(programDiagnosticsInFile);\n      });\n    }\n\n    function getJavaScriptSemanticDiagnosticsForFile(sourceFile, cancellationToken) {\n      return runWithCancellationToken(function () {\n        var diagnostics = [];\n        walk(sourceFile);\n        return diagnostics;\n\n        function walk(node) {\n          if (!node) {\n            return false;\n          }\n\n          switch (node.kind) {\n            case 224\n            /* ImportEqualsDeclaration */\n            :\n              diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.import_can_only_be_used_in_a_ts_file));\n              return true;\n\n            case 230\n            /* ExportAssignment */\n            :\n              if (node.isExportEquals) {\n                diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.export_can_only_be_used_in_a_ts_file));\n                return true;\n              }\n\n              break;\n\n            case 217\n            /* ClassDeclaration */\n            :\n              var classDeclaration = node;\n\n              if (checkModifiers(classDeclaration.modifiers) || checkTypeParameters(classDeclaration.typeParameters)) {\n                return true;\n              }\n\n              break;\n\n            case 246\n            /* HeritageClause */\n            :\n              var heritageClause = node;\n\n              if (heritageClause.token === 106\n              /* ImplementsKeyword */\n              ) {\n                  diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.implements_clauses_can_only_be_used_in_a_ts_file));\n                  return true;\n                }\n\n              break;\n\n            case 218\n            /* InterfaceDeclaration */\n            :\n              diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.interface_declarations_can_only_be_used_in_a_ts_file));\n              return true;\n\n            case 221\n            /* ModuleDeclaration */\n            :\n              diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.module_declarations_can_only_be_used_in_a_ts_file));\n              return true;\n\n            case 219\n            /* TypeAliasDeclaration */\n            :\n              diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.type_aliases_can_only_be_used_in_a_ts_file));\n              return true;\n\n            case 144\n            /* MethodDeclaration */\n            :\n            case 143\n            /* MethodSignature */\n            :\n            case 145\n            /* Constructor */\n            :\n            case 146\n            /* GetAccessor */\n            :\n            case 147\n            /* SetAccessor */\n            :\n            case 176\n            /* FunctionExpression */\n            :\n            case 216\n            /* FunctionDeclaration */\n            :\n            case 177\n            /* ArrowFunction */\n            :\n            case 216\n            /* FunctionDeclaration */\n            :\n              var functionDeclaration = node;\n\n              if (checkModifiers(functionDeclaration.modifiers) || checkTypeParameters(functionDeclaration.typeParameters) || checkTypeAnnotation(functionDeclaration.type)) {\n                return true;\n              }\n\n              break;\n\n            case 196\n            /* VariableStatement */\n            :\n              var variableStatement = node;\n\n              if (checkModifiers(variableStatement.modifiers)) {\n                return true;\n              }\n\n              break;\n\n            case 214\n            /* VariableDeclaration */\n            :\n              var variableDeclaration = node;\n\n              if (checkTypeAnnotation(variableDeclaration.type)) {\n                return true;\n              }\n\n              break;\n\n            case 171\n            /* CallExpression */\n            :\n            case 172\n            /* NewExpression */\n            :\n              var expression = node;\n\n              if (expression.typeArguments && expression.typeArguments.length > 0) {\n                var start_2 = expression.typeArguments.pos;\n                diagnostics.push(ts.createFileDiagnostic(sourceFile, start_2, expression.typeArguments.end - start_2, ts.Diagnostics.type_arguments_can_only_be_used_in_a_ts_file));\n                return true;\n              }\n\n              break;\n\n            case 139\n            /* Parameter */\n            :\n              var parameter = node;\n\n              if (parameter.modifiers) {\n                var start_3 = parameter.modifiers.pos;\n                diagnostics.push(ts.createFileDiagnostic(sourceFile, start_3, parameter.modifiers.end - start_3, ts.Diagnostics.parameter_modifiers_can_only_be_used_in_a_ts_file));\n                return true;\n              }\n\n              if (parameter.questionToken) {\n                diagnostics.push(ts.createDiagnosticForNode(parameter.questionToken, ts.Diagnostics._0_can_only_be_used_in_a_ts_file, \"?\"));\n                return true;\n              }\n\n              if (parameter.type) {\n                diagnostics.push(ts.createDiagnosticForNode(parameter.type, ts.Diagnostics.types_can_only_be_used_in_a_ts_file));\n                return true;\n              }\n\n              break;\n\n            case 142\n            /* PropertyDeclaration */\n            :\n              diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.property_declarations_can_only_be_used_in_a_ts_file));\n              return true;\n\n            case 220\n            /* EnumDeclaration */\n            :\n              diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.enum_declarations_can_only_be_used_in_a_ts_file));\n              return true;\n\n            case 174\n            /* TypeAssertionExpression */\n            :\n              var typeAssertionExpression = node;\n              diagnostics.push(ts.createDiagnosticForNode(typeAssertionExpression.type, ts.Diagnostics.type_assertion_expressions_can_only_be_used_in_a_ts_file));\n              return true;\n\n            case 140\n            /* Decorator */\n            :\n              if (!options.experimentalDecorators) {\n                diagnostics.push(ts.createDiagnosticForNode(node, ts.Diagnostics.Experimental_support_for_decorators_is_a_feature_that_is_subject_to_change_in_a_future_release_Set_the_experimentalDecorators_option_to_remove_this_warning));\n              }\n\n              return true;\n          }\n\n          return ts.forEachChild(node, walk);\n        }\n\n        function checkTypeParameters(typeParameters) {\n          if (typeParameters) {\n            var start_4 = typeParameters.pos;\n            diagnostics.push(ts.createFileDiagnostic(sourceFile, start_4, typeParameters.end - start_4, ts.Diagnostics.type_parameter_declarations_can_only_be_used_in_a_ts_file));\n            return true;\n          }\n\n          return false;\n        }\n\n        function checkTypeAnnotation(type) {\n          if (type) {\n            diagnostics.push(ts.createDiagnosticForNode(type, ts.Diagnostics.types_can_only_be_used_in_a_ts_file));\n            return true;\n          }\n\n          return false;\n        }\n\n        function checkModifiers(modifiers) {\n          if (modifiers) {\n            for (var _i = 0, modifiers_1 = modifiers; _i < modifiers_1.length; _i++) {\n              var modifier = modifiers_1[_i];\n\n              switch (modifier.kind) {\n                case 112\n                /* PublicKeyword */\n                :\n                case 110\n                /* PrivateKeyword */\n                :\n                case 111\n                /* ProtectedKeyword */\n                :\n                case 122\n                /* DeclareKeyword */\n                :\n                  diagnostics.push(ts.createDiagnosticForNode(modifier, ts.Diagnostics._0_can_only_be_used_in_a_ts_file, ts.tokenToString(modifier.kind)));\n                  return true;\n                // These are all legal modifiers.\n\n                case 113\n                /* StaticKeyword */\n                :\n                case 82\n                /* ExportKeyword */\n                :\n                case 74\n                /* ConstKeyword */\n                :\n                case 77\n                /* DefaultKeyword */\n                :\n                case 115\n                /* AbstractKeyword */\n                :\n              }\n            }\n          }\n\n          return false;\n        }\n      });\n    }\n\n    function getDeclarationDiagnosticsWorker(sourceFile, cancellationToken) {\n      return runWithCancellationToken(function () {\n        var resolver = getDiagnosticsProducingTypeChecker().getEmitResolver(sourceFile, cancellationToken); // Don't actually write any files since we're just getting diagnostics.\n\n        var writeFile = function writeFile() {};\n\n        return ts.getDeclarationDiagnostics(getEmitHost(writeFile), resolver, sourceFile);\n      });\n    }\n\n    function getDeclarationDiagnosticsForFile(sourceFile, cancellationToken) {\n      return ts.isDeclarationFile(sourceFile) ? [] : getDeclarationDiagnosticsWorker(sourceFile, cancellationToken);\n    }\n\n    function getOptionsDiagnostics() {\n      var allDiagnostics = [];\n      ts.addRange(allDiagnostics, fileProcessingDiagnostics.getGlobalDiagnostics());\n      ts.addRange(allDiagnostics, programDiagnostics.getGlobalDiagnostics());\n      return ts.sortAndDeduplicateDiagnostics(allDiagnostics);\n    }\n\n    function getGlobalDiagnostics() {\n      var allDiagnostics = [];\n      ts.addRange(allDiagnostics, getDiagnosticsProducingTypeChecker().getGlobalDiagnostics());\n      return ts.sortAndDeduplicateDiagnostics(allDiagnostics);\n    }\n\n    function hasExtension(fileName) {\n      return ts.getBaseFileName(fileName).indexOf(\".\") >= 0;\n    }\n\n    function processRootFile(fileName, isDefaultLib) {\n      processSourceFile(ts.normalizePath(fileName), isDefaultLib);\n    }\n\n    function fileReferenceIsEqualTo(a, b) {\n      return a.fileName === b.fileName;\n    }\n\n    function moduleNameIsEqualTo(a, b) {\n      return a.text === b.text;\n    }\n\n    function getTextOfLiteral(literal) {\n      return literal.text;\n    }\n\n    function collectExternalModuleReferences(file) {\n      if (file.imports) {\n        return;\n      }\n\n      var isJavaScriptFile = ts.isSourceFileJavaScript(file);\n      var isExternalModuleFile = ts.isExternalModule(file);\n      var imports;\n      var moduleAugmentations;\n\n      for (var _i = 0, _a = file.statements; _i < _a.length; _i++) {\n        var node = _a[_i];\n        collectModuleReferences(node,\n        /*inAmbientModule*/\n        false);\n\n        if (isJavaScriptFile) {\n          collectRequireCalls(node);\n        }\n      }\n\n      file.imports = imports || emptyArray;\n      file.moduleAugmentations = moduleAugmentations || emptyArray;\n      return;\n\n      function collectModuleReferences(node, inAmbientModule) {\n        switch (node.kind) {\n          case 225\n          /* ImportDeclaration */\n          :\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n          case 231\n          /* ExportDeclaration */\n          :\n            var moduleNameExpr = ts.getExternalModuleName(node);\n\n            if (!moduleNameExpr || moduleNameExpr.kind !== 9\n            /* StringLiteral */\n            ) {\n                break;\n              }\n\n            if (!moduleNameExpr.text) {\n              break;\n            } // TypeScript 1.0 spec (April 2014): 12.1.6\n            // An ExternalImportDeclaration in an AmbientExternalModuleDeclaration may reference other external modules \n            // only through top - level external module names. Relative external module names are not permitted.\n\n\n            if (!inAmbientModule || !ts.isExternalModuleNameRelative(moduleNameExpr.text)) {\n              (imports || (imports = [])).push(moduleNameExpr);\n            }\n\n            break;\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            if (ts.isAmbientModule(node) && (inAmbientModule || node.flags & 4\n            /* Ambient */\n            || ts.isDeclarationFile(file))) {\n              var moduleName = node.name; // Ambient module declarations can be interpreted as augmentations for some existing external modules.\n              // This will happen in two cases:\n              // - if current file is external module then module augmentation is a ambient module declaration defined in the top level scope\n              // - if current file is not external module then module augmentation is an ambient module declaration with non-relative module name\n              //   immediately nested in top level ambient module declaration .\n\n              if (isExternalModuleFile || inAmbientModule && !ts.isExternalModuleNameRelative(moduleName.text)) {\n                (moduleAugmentations || (moduleAugmentations = [])).push(moduleName);\n              } else if (!inAmbientModule) {\n                // An AmbientExternalModuleDeclaration declares an external module. \n                // This type of declaration is permitted only in the global module.\n                // The StringLiteral must specify a top - level external module name.\n                // Relative external module names are not permitted\n                // NOTE: body of ambient module is always a module block\n                for (var _i = 0, _a = node.body.statements; _i < _a.length; _i++) {\n                  var statement = _a[_i];\n                  collectModuleReferences(statement,\n                  /*inAmbientModule*/\n                  true);\n                }\n              }\n            }\n\n        }\n      }\n\n      function collectRequireCalls(node) {\n        if (ts.isRequireCall(node,\n        /*checkArgumentIsStringLiteral*/\n        true)) {\n          (imports || (imports = [])).push(node.arguments[0]);\n        } else {\n          ts.forEachChild(node, collectRequireCalls);\n        }\n      }\n    }\n\n    function processSourceFile(fileName, isDefaultLib, refFile, refPos, refEnd) {\n      var diagnosticArgument;\n      var diagnostic;\n\n      if (hasExtension(fileName)) {\n        if (!options.allowNonTsExtensions && !ts.forEach(supportedExtensions, function (extension) {\n          return ts.fileExtensionIs(host.getCanonicalFileName(fileName), extension);\n        })) {\n          diagnostic = ts.Diagnostics.File_0_has_unsupported_extension_The_only_supported_extensions_are_1;\n          diagnosticArgument = [fileName, \"'\" + supportedExtensions.join(\"', '\") + \"'\"];\n        } else if (!findSourceFile(fileName, ts.toPath(fileName, currentDirectory, getCanonicalFileName), isDefaultLib, refFile, refPos, refEnd)) {\n          diagnostic = ts.Diagnostics.File_0_not_found;\n          diagnosticArgument = [fileName];\n        } else if (refFile && host.getCanonicalFileName(fileName) === host.getCanonicalFileName(refFile.fileName)) {\n          diagnostic = ts.Diagnostics.A_file_cannot_have_a_reference_to_itself;\n          diagnosticArgument = [fileName];\n        }\n      } else {\n        var nonTsFile = options.allowNonTsExtensions && findSourceFile(fileName, ts.toPath(fileName, currentDirectory, getCanonicalFileName), isDefaultLib, refFile, refPos, refEnd);\n\n        if (!nonTsFile) {\n          if (options.allowNonTsExtensions) {\n            diagnostic = ts.Diagnostics.File_0_not_found;\n            diagnosticArgument = [fileName];\n          } else if (!ts.forEach(supportedExtensions, function (extension) {\n            return findSourceFile(fileName + extension, ts.toPath(fileName + extension, currentDirectory, getCanonicalFileName), isDefaultLib, refFile, refPos, refEnd);\n          })) {\n            diagnostic = ts.Diagnostics.File_0_not_found;\n            fileName += \".ts\";\n            diagnosticArgument = [fileName];\n          }\n        }\n      }\n\n      if (diagnostic && !exceedProgramSizeLimit()) {\n        if (refFile !== undefined && refEnd !== undefined && refPos !== undefined) {\n          fileProcessingDiagnostics.add(ts.createFileDiagnostic.apply(void 0, [refFile, refPos, refEnd - refPos, diagnostic].concat(diagnosticArgument)));\n        } else {\n          fileProcessingDiagnostics.add(ts.createCompilerDiagnostic.apply(void 0, [diagnostic].concat(diagnosticArgument)));\n        }\n      }\n    }\n\n    function reportFileNamesDifferOnlyInCasingError(fileName, existingFileName, refFile, refPos, refEnd) {\n      if (refFile !== undefined && refPos !== undefined && refEnd !== undefined) {\n        fileProcessingDiagnostics.add(ts.createFileDiagnostic(refFile, refPos, refEnd - refPos, ts.Diagnostics.File_name_0_differs_from_already_included_file_name_1_only_in_casing, fileName, existingFileName));\n      } else {\n        fileProcessingDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.File_name_0_differs_from_already_included_file_name_1_only_in_casing, fileName, existingFileName));\n      }\n    } // Get source file from normalized fileName\n\n\n    function findSourceFile(fileName, path, isDefaultLib, refFile, refPos, refEnd) {\n      if (filesByName.contains(path)) {\n        var file_1 = filesByName.get(path); // try to check if we've already seen this file but with a different casing in path\n        // NOTE: this only makes sense for case-insensitive file systems\n\n        if (file_1 && options.forceConsistentCasingInFileNames && ts.getNormalizedAbsolutePath(file_1.fileName, currentDirectory) !== ts.getNormalizedAbsolutePath(fileName, currentDirectory)) {\n          reportFileNamesDifferOnlyInCasingError(fileName, file_1.fileName, refFile, refPos, refEnd);\n        }\n\n        return file_1;\n      }\n\n      var isNonTsFile = !ts.hasTypeScriptFileExtension(fileName);\n\n      if (isNonTsFile && exceedProgramSizeLimit()) {\n        return undefined;\n      } // We haven't looked for this file, do so now and cache result\n\n\n      var file = host.getSourceFile(fileName, options.target, function (hostErrorMessage) {\n        if (refFile !== undefined && refPos !== undefined && refEnd !== undefined) {\n          fileProcessingDiagnostics.add(ts.createFileDiagnostic(refFile, refPos, refEnd - refPos, ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, hostErrorMessage));\n        } else {\n          fileProcessingDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, hostErrorMessage));\n        }\n      });\n\n      if (isNonTsFile && !options.disableSizeLimit && file && file.text) {\n        programSizeForNonTsFiles += file.text.length;\n\n        if (programSizeForNonTsFiles > ts.maxProgramSizeForNonTsFiles) {\n          // If the program size limit was reached when processing a file, this file is\n          // likely in the problematic folder than contains too many files.\n          // Normally the folder is one level down from the commonSourceDirectory, for example,\n          // if the commonSourceDirectory is \"/src/\", and the last processed path was \"/src/node_modules/a/b.js\",\n          // we should show in the error message \"/src/node_modules/\".\n          var commonSourceDirectory_1 = getCommonSourceDirectory();\n          var rootLevelDirectory = path.substring(0, Math.max(commonSourceDirectory_1.length, path.indexOf(ts.directorySeparator, commonSourceDirectory_1.length)));\n\n          if (rootLevelDirectory[rootLevelDirectory.length - 1] !== ts.directorySeparator) {\n            rootLevelDirectory += ts.directorySeparator;\n          }\n\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Too_many_JavaScript_files_in_the_project_Consider_specifying_the_exclude_setting_in_project_configuration_to_limit_included_source_folders_The_likely_folder_to_exclude_is_0_To_disable_the_project_size_limit_set_the_disableSizeLimit_compiler_option_to_true, rootLevelDirectory));\n          programSizeForNonTsFiles = programSizeLimitExceeded;\n          return undefined;\n        }\n      }\n\n      filesByName.set(path, file);\n\n      if (file) {\n        file.path = path;\n\n        if (host.useCaseSensitiveFileNames()) {\n          // for case-sensitive file systems check if we've already seen some file with similar filename ignoring case\n          var existingFile = filesByNameIgnoreCase.get(path);\n\n          if (existingFile) {\n            reportFileNamesDifferOnlyInCasingError(fileName, existingFile.fileName, refFile, refPos, refEnd);\n          } else {\n            filesByNameIgnoreCase.set(path, file);\n          }\n        }\n\n        skipDefaultLib = skipDefaultLib || file.hasNoDefaultLib;\n        var basePath = ts.getDirectoryPath(fileName);\n\n        if (!options.noResolve) {\n          processReferencedFiles(file, basePath);\n        } // always process imported modules to record module name resolutions\n\n\n        processImportedModules(file, basePath);\n\n        if (isDefaultLib) {\n          files.unshift(file);\n        } else {\n          files.push(file);\n        }\n      }\n\n      return file;\n    }\n\n    function processReferencedFiles(file, basePath) {\n      ts.forEach(file.referencedFiles, function (ref) {\n        var referencedFileName = resolveTripleslashReference(ref.fileName, file.fileName);\n        processSourceFile(referencedFileName,\n        /*isDefaultLib*/\n        false, file, ref.pos, ref.end);\n      });\n    }\n\n    function getCanonicalFileName(fileName) {\n      return host.getCanonicalFileName(fileName);\n    }\n\n    function processImportedModules(file, basePath) {\n      collectExternalModuleReferences(file);\n\n      if (file.imports.length || file.moduleAugmentations.length) {\n        file.resolvedModules = {};\n        var moduleNames = ts.map(ts.concatenate(file.imports, file.moduleAugmentations), getTextOfLiteral);\n        var resolutions = resolveModuleNamesWorker(moduleNames, ts.getNormalizedAbsolutePath(file.fileName, currentDirectory));\n\n        for (var i = 0; i < moduleNames.length; i++) {\n          var resolution = resolutions[i];\n          ts.setResolvedModule(file, moduleNames[i], resolution); // add file to program only if:\n          // - resolution was successfull\n          // - noResolve is falsy\n          // - module name come from the list fo imports\n\n          var shouldAddFile = resolution && !options.noResolve && i < file.imports.length;\n\n          if (shouldAddFile) {\n            var importedFile = findSourceFile(resolution.resolvedFileName, ts.toPath(resolution.resolvedFileName, currentDirectory, getCanonicalFileName),\n            /*isDefaultLib*/\n            false, file, ts.skipTrivia(file.text, file.imports[i].pos), file.imports[i].end);\n\n            if (importedFile && resolution.isExternalLibraryImport) {\n              // Since currently irrespective of allowJs, we only look for supportedTypeScript extension external module files,\n              // this check is ok. Otherwise this would be never true for javascript file\n              if (!ts.isExternalModule(importedFile) && importedFile.statements.length) {\n                var start_5 = ts.getTokenPosOfNode(file.imports[i], file);\n                fileProcessingDiagnostics.add(ts.createFileDiagnostic(file, start_5, file.imports[i].end - start_5, ts.Diagnostics.Exported_external_package_typings_file_0_is_not_a_module_Please_contact_the_package_author_to_update_the_package_definition, importedFile.fileName));\n              } else if (importedFile.referencedFiles.length) {\n                var firstRef = importedFile.referencedFiles[0];\n                fileProcessingDiagnostics.add(ts.createFileDiagnostic(importedFile, firstRef.pos, firstRef.end - firstRef.pos, ts.Diagnostics.Exported_external_package_typings_file_cannot_contain_tripleslash_references_Please_contact_the_package_author_to_update_the_package_definition));\n              }\n            }\n          }\n        }\n      } else {\n        // no imports - drop cached module resolutions\n        file.resolvedModules = undefined;\n      }\n\n      return;\n    }\n\n    function computeCommonSourceDirectory(sourceFiles) {\n      var commonPathComponents;\n      var failed = ts.forEach(files, function (sourceFile) {\n        // Each file contributes into common source file path\n        if (ts.isDeclarationFile(sourceFile)) {\n          return;\n        }\n\n        var sourcePathComponents = ts.getNormalizedPathComponents(sourceFile.fileName, currentDirectory);\n        sourcePathComponents.pop(); // The base file name is not part of the common directory path\n\n        if (!commonPathComponents) {\n          // first file\n          commonPathComponents = sourcePathComponents;\n          return;\n        }\n\n        for (var i = 0, n = Math.min(commonPathComponents.length, sourcePathComponents.length); i < n; i++) {\n          if (getCanonicalFileName(commonPathComponents[i]) !== getCanonicalFileName(sourcePathComponents[i])) {\n            if (i === 0) {\n              // Failed to find any common path component\n              return true;\n            } // New common path found that is 0 -> i-1\n\n\n            commonPathComponents.length = i;\n            break;\n          }\n        } // If the sourcePathComponents was shorter than the commonPathComponents, truncate to the sourcePathComponents\n\n\n        if (sourcePathComponents.length < commonPathComponents.length) {\n          commonPathComponents.length = sourcePathComponents.length;\n        }\n      }); // A common path can not be found when paths span multiple drives on windows, for example\n\n      if (failed) {\n        return \"\";\n      }\n\n      if (!commonPathComponents) {\n        return currentDirectory;\n      }\n\n      return ts.getNormalizedPathFromPathComponents(commonPathComponents);\n    }\n\n    function checkSourceFilesBelongToPath(sourceFiles, rootDirectory) {\n      var allFilesBelongToPath = true;\n\n      if (sourceFiles) {\n        var absoluteRootDirectoryPath = host.getCanonicalFileName(ts.getNormalizedAbsolutePath(rootDirectory, currentDirectory));\n\n        for (var _i = 0, sourceFiles_2 = sourceFiles; _i < sourceFiles_2.length; _i++) {\n          var sourceFile = sourceFiles_2[_i];\n\n          if (!ts.isDeclarationFile(sourceFile)) {\n            var absoluteSourceFilePath = host.getCanonicalFileName(ts.getNormalizedAbsolutePath(sourceFile.fileName, currentDirectory));\n\n            if (absoluteSourceFilePath.indexOf(absoluteRootDirectoryPath) !== 0) {\n              programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.File_0_is_not_under_rootDir_1_rootDir_is_expected_to_contain_all_source_files, sourceFile.fileName, options.rootDir));\n              allFilesBelongToPath = false;\n            }\n          }\n        }\n      }\n\n      return allFilesBelongToPath;\n    }\n\n    function verifyCompilerOptions() {\n      if (options.isolatedModules) {\n        if (options.declaration) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"declaration\", \"isolatedModules\"));\n        }\n\n        if (options.noEmitOnError) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"noEmitOnError\", \"isolatedModules\"));\n        }\n\n        if (options.out) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"out\", \"isolatedModules\"));\n        }\n\n        if (options.outFile) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"outFile\", \"isolatedModules\"));\n        }\n      }\n\n      if (options.inlineSourceMap) {\n        if (options.sourceMap) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"sourceMap\", \"inlineSourceMap\"));\n        }\n\n        if (options.mapRoot) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"mapRoot\", \"inlineSourceMap\"));\n        }\n      }\n\n      if (options.inlineSources) {\n        if (!options.sourceMap && !options.inlineSourceMap) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_inlineSources_can_only_be_used_when_either_option_inlineSourceMap_or_option_sourceMap_is_provided));\n        }\n\n        if (options.sourceRoot) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"sourceRoot\", \"inlineSources\"));\n        }\n      }\n\n      if (options.out && options.outFile) {\n        programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"out\", \"outFile\"));\n      }\n\n      if (!options.sourceMap && (options.mapRoot || options.sourceRoot)) {\n        // Error to specify --mapRoot or --sourceRoot without mapSourceFiles\n        if (options.mapRoot) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"mapRoot\", \"sourceMap\"));\n        }\n\n        if (options.sourceRoot && !options.inlineSourceMap) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"sourceRoot\", \"sourceMap\"));\n        }\n      }\n\n      var languageVersion = options.target || 0\n      /* ES3 */\n      ;\n      var outFile = options.outFile || options.out;\n      var firstExternalModuleSourceFile = ts.forEach(files, function (f) {\n        return ts.isExternalModule(f) ? f : undefined;\n      });\n\n      if (options.isolatedModules) {\n        if (options.module === 0\n        /* None */\n        && languageVersion < 2\n        /* ES6 */\n        ) {\n            programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_isolatedModules_can_only_be_used_when_either_option_module_is_provided_or_option_target_is_ES2015_or_higher));\n          }\n\n        var firstNonExternalModuleSourceFile = ts.forEach(files, function (f) {\n          return !ts.isExternalModule(f) && !ts.isDeclarationFile(f) ? f : undefined;\n        });\n\n        if (firstNonExternalModuleSourceFile) {\n          var span = ts.getErrorSpanForNode(firstNonExternalModuleSourceFile, firstNonExternalModuleSourceFile);\n          programDiagnostics.add(ts.createFileDiagnostic(firstNonExternalModuleSourceFile, span.start, span.length, ts.Diagnostics.Cannot_compile_namespaces_when_the_isolatedModules_flag_is_provided));\n        }\n      } else if (firstExternalModuleSourceFile && languageVersion < 2\n      /* ES6 */\n      && options.module === 0\n      /* None */\n      ) {\n          // We cannot use createDiagnosticFromNode because nodes do not have parents yet\n          var span = ts.getErrorSpanForNode(firstExternalModuleSourceFile, firstExternalModuleSourceFile.externalModuleIndicator);\n          programDiagnostics.add(ts.createFileDiagnostic(firstExternalModuleSourceFile, span.start, span.length, ts.Diagnostics.Cannot_compile_modules_unless_the_module_flag_is_provided_with_a_valid_module_type_Consider_setting_the_module_compiler_option_in_a_tsconfig_json_file));\n        } // Cannot specify module gen target of es6 when below es6\n\n\n      if (options.module === 5\n      /* ES6 */\n      && languageVersion < 2\n      /* ES6 */\n      ) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_compile_modules_into_es2015_when_targeting_ES5_or_lower));\n        } // Cannot specify module gen that isn't amd or system with --out\n\n\n      if (outFile && options.module && !(options.module === 2\n      /* AMD */\n      || options.module === 4\n      /* System */\n      )) {\n        programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Only_amd_and_system_modules_are_supported_alongside_0, options.out ? \"out\" : \"outFile\"));\n      } // there has to be common source directory if user specified --outdir || --sourceRoot\n      // if user specified --mapRoot, there needs to be common source directory if there would be multiple files being emitted\n\n\n      if (options.outDir || options.sourceRoot || options.mapRoot) {\n        // Precalculate and cache the common source directory\n        var dir = getCommonSourceDirectory(); // If we failed to find a good common directory, but outDir is specified and at least one of our files is on a windows drive/URL/other resource, add a failure\n\n        if (options.outDir && dir === \"\" && ts.forEach(files, function (file) {\n          return ts.getRootLength(file.fileName) > 1;\n        })) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_find_the_common_subdirectory_path_for_the_input_files));\n        }\n      }\n\n      if (options.noEmit) {\n        if (options.out) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"noEmit\", \"out\"));\n        }\n\n        if (options.outFile) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"noEmit\", \"outFile\"));\n        }\n\n        if (options.outDir) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"noEmit\", \"outDir\"));\n        }\n\n        if (options.declaration) {\n          programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"noEmit\", \"declaration\"));\n        }\n      } else if (options.allowJs && options.declaration) {\n        programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_with_option_1, \"allowJs\", \"declaration\"));\n      }\n\n      if (options.emitDecoratorMetadata && !options.experimentalDecorators) {\n        programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_cannot_be_specified_without_specifying_option_1, \"emitDecoratorMetadata\", \"experimentalDecorators\"));\n      }\n\n      if (options.reactNamespace && !ts.isIdentifier(options.reactNamespace, languageVersion)) {\n        programDiagnostics.add(ts.createCompilerDiagnostic(ts.Diagnostics.Invalide_value_for_reactNamespace_0_is_not_a_valid_identifier, options.reactNamespace));\n      } // If the emit is enabled make sure that every output file is unique and not overwriting any of the input files\n\n\n      if (!options.noEmit && !options.suppressOutputPathCheck) {\n        var emitHost = getEmitHost();\n        var emitFilesSeen_1 = ts.createFileMap(!host.useCaseSensitiveFileNames() ? function (key) {\n          return key.toLocaleLowerCase();\n        } : undefined);\n        ts.forEachExpectedEmitFile(emitHost, function (emitFileNames, sourceFiles, isBundledEmit) {\n          verifyEmitFilePath(emitFileNames.jsFilePath, emitFilesSeen_1);\n          verifyEmitFilePath(emitFileNames.declarationFilePath, emitFilesSeen_1);\n        });\n      } // Verify that all the emit files are unique and don't overwrite input files\n\n\n      function verifyEmitFilePath(emitFileName, emitFilesSeen) {\n        if (emitFileName) {\n          var emitFilePath = ts.toPath(emitFileName, currentDirectory, getCanonicalFileName); // Report error if the output overwrites input file\n\n          if (filesByName.contains(emitFilePath)) {\n            createEmitBlockingDiagnostics(emitFileName, emitFilePath, ts.Diagnostics.Cannot_write_file_0_because_it_would_overwrite_input_file);\n          } // Report error if multiple files write into same file\n\n\n          if (emitFilesSeen.contains(emitFilePath)) {\n            // Already seen the same emit file - report error\n            createEmitBlockingDiagnostics(emitFileName, emitFilePath, ts.Diagnostics.Cannot_write_file_0_because_it_would_be_overwritten_by_multiple_input_files);\n          } else {\n            emitFilesSeen.set(emitFilePath, true);\n          }\n        }\n      }\n    }\n\n    function createEmitBlockingDiagnostics(emitFileName, emitFilePath, message) {\n      hasEmitBlockingDiagnostics.set(ts.toPath(emitFileName, currentDirectory, getCanonicalFileName), true);\n      programDiagnostics.add(ts.createCompilerDiagnostic(message, emitFileName));\n    }\n  }\n\n  ts.createProgram = createProgram;\n})(ts || (ts = {})); /// <reference path=\"sys.ts\"/>\n/// <reference path=\"types.ts\"/>\n/// <reference path=\"core.ts\"/>\n/// <reference path=\"diagnosticInformationMap.generated.ts\"/>\n/// <reference path=\"scanner.ts\"/>\n\n\nvar ts;\n\n(function (ts) {\n  /* @internal */\n  ts.optionDeclarations = [{\n    name: \"charset\",\n    type: \"string\"\n  }, {\n    name: \"declaration\",\n    shortName: \"d\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Generates_corresponding_d_ts_file\n  }, {\n    name: \"diagnostics\",\n    type: \"boolean\"\n  }, {\n    name: \"emitBOM\",\n    type: \"boolean\"\n  }, {\n    name: \"help\",\n    shortName: \"h\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Print_this_message\n  }, {\n    name: \"init\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Initializes_a_TypeScript_project_and_creates_a_tsconfig_json_file\n  }, {\n    name: \"inlineSourceMap\",\n    type: \"boolean\"\n  }, {\n    name: \"inlineSources\",\n    type: \"boolean\"\n  }, {\n    name: \"jsx\",\n    type: {\n      \"preserve\": 1\n      /* Preserve */\n      ,\n      \"react\": 2\n      /* React */\n\n    },\n    paramType: ts.Diagnostics.KIND,\n    description: ts.Diagnostics.Specify_JSX_code_generation_Colon_preserve_or_react,\n    error: ts.Diagnostics.Argument_for_jsx_must_be_preserve_or_react\n  }, {\n    name: \"reactNamespace\",\n    type: \"string\",\n    description: ts.Diagnostics.Specifies_the_object_invoked_for_createElement_and_spread_when_targeting_react_JSX_emit\n  }, {\n    name: \"listFiles\",\n    type: \"boolean\"\n  }, {\n    name: \"locale\",\n    type: \"string\"\n  }, {\n    name: \"mapRoot\",\n    type: \"string\",\n    isFilePath: true,\n    description: ts.Diagnostics.Specifies_the_location_where_debugger_should_locate_map_files_instead_of_generated_locations,\n    paramType: ts.Diagnostics.LOCATION\n  }, {\n    name: \"module\",\n    shortName: \"m\",\n    type: {\n      \"none\": 0\n      /* None */\n      ,\n      \"commonjs\": 1\n      /* CommonJS */\n      ,\n      \"amd\": 2\n      /* AMD */\n      ,\n      \"system\": 4\n      /* System */\n      ,\n      \"umd\": 3\n      /* UMD */\n      ,\n      \"es6\": 5\n      /* ES6 */\n      ,\n      \"es2015\": 5\n      /* ES2015 */\n\n    },\n    description: ts.Diagnostics.Specify_module_code_generation_Colon_commonjs_amd_system_umd_or_es2015,\n    paramType: ts.Diagnostics.KIND,\n    error: ts.Diagnostics.Argument_for_module_option_must_be_commonjs_amd_system_umd_es2015_or_none\n  }, {\n    name: \"newLine\",\n    type: {\n      \"crlf\": 0\n      /* CarriageReturnLineFeed */\n      ,\n      \"lf\": 1\n      /* LineFeed */\n\n    },\n    description: ts.Diagnostics.Specifies_the_end_of_line_sequence_to_be_used_when_emitting_files_Colon_CRLF_dos_or_LF_unix,\n    paramType: ts.Diagnostics.NEWLINE,\n    error: ts.Diagnostics.Argument_for_newLine_option_must_be_CRLF_or_LF\n  }, {\n    name: \"noEmit\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_emit_outputs\n  }, {\n    name: \"noEmitHelpers\",\n    type: \"boolean\"\n  }, {\n    name: \"noEmitOnError\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_emit_outputs_if_any_errors_were_reported\n  }, {\n    name: \"noImplicitAny\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Raise_error_on_expressions_and_declarations_with_an_implied_any_type\n  }, {\n    name: \"noLib\",\n    type: \"boolean\"\n  }, {\n    name: \"noResolve\",\n    type: \"boolean\"\n  }, {\n    name: \"skipDefaultLibCheck\",\n    type: \"boolean\"\n  }, {\n    name: \"out\",\n    type: \"string\",\n    isFilePath: false,\n    // for correct behaviour, please use outFile\n    paramType: ts.Diagnostics.FILE\n  }, {\n    name: \"outFile\",\n    type: \"string\",\n    isFilePath: true,\n    description: ts.Diagnostics.Concatenate_and_emit_output_to_single_file,\n    paramType: ts.Diagnostics.FILE\n  }, {\n    name: \"outDir\",\n    type: \"string\",\n    isFilePath: true,\n    description: ts.Diagnostics.Redirect_output_structure_to_the_directory,\n    paramType: ts.Diagnostics.DIRECTORY\n  }, {\n    name: \"preserveConstEnums\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_erase_const_enum_declarations_in_generated_code\n  }, {\n    name: \"pretty\",\n    paramType: ts.Diagnostics.KIND,\n    description: ts.Diagnostics.Stylize_errors_and_messages_using_color_and_context_experimental,\n    type: \"boolean\"\n  }, {\n    name: \"project\",\n    shortName: \"p\",\n    type: \"string\",\n    isFilePath: true,\n    description: ts.Diagnostics.Compile_the_project_in_the_given_directory,\n    paramType: ts.Diagnostics.DIRECTORY\n  }, {\n    name: \"removeComments\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_emit_comments_to_output\n  }, {\n    name: \"rootDir\",\n    type: \"string\",\n    isFilePath: true,\n    description: ts.Diagnostics.Specifies_the_root_directory_of_input_files_Use_to_control_the_output_directory_structure_with_outDir,\n    paramType: ts.Diagnostics.LOCATION\n  }, {\n    name: \"isolatedModules\",\n    type: \"boolean\"\n  }, {\n    name: \"sourceMap\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Generates_corresponding_map_file\n  }, {\n    name: \"sourceRoot\",\n    type: \"string\",\n    isFilePath: true,\n    description: ts.Diagnostics.Specifies_the_location_where_debugger_should_locate_TypeScript_files_instead_of_source_locations,\n    paramType: ts.Diagnostics.LOCATION\n  }, {\n    name: \"suppressExcessPropertyErrors\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Suppress_excess_property_checks_for_object_literals,\n    experimental: true\n  }, {\n    name: \"suppressImplicitAnyIndexErrors\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Suppress_noImplicitAny_errors_for_indexing_objects_lacking_index_signatures\n  }, {\n    name: \"stripInternal\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_emit_declarations_for_code_that_has_an_internal_annotation,\n    experimental: true\n  }, {\n    name: \"target\",\n    shortName: \"t\",\n    type: {\n      \"es3\": 0\n      /* ES3 */\n      ,\n      \"es5\": 1\n      /* ES5 */\n      ,\n      \"es6\": 2\n      /* ES6 */\n      ,\n      \"es2015\": 2\n      /* ES2015 */\n\n    },\n    description: ts.Diagnostics.Specify_ECMAScript_target_version_Colon_ES3_default_ES5_or_ES2015_experimental,\n    paramType: ts.Diagnostics.VERSION,\n    error: ts.Diagnostics.Argument_for_target_option_must_be_ES3_ES5_or_ES2015\n  }, {\n    name: \"version\",\n    shortName: \"v\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Print_the_compiler_s_version\n  }, {\n    name: \"watch\",\n    shortName: \"w\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Watch_input_files\n  }, {\n    name: \"experimentalDecorators\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Enables_experimental_support_for_ES7_decorators\n  }, {\n    name: \"emitDecoratorMetadata\",\n    type: \"boolean\",\n    experimental: true,\n    description: ts.Diagnostics.Enables_experimental_support_for_emitting_type_metadata_for_decorators\n  }, {\n    name: \"moduleResolution\",\n    type: {\n      \"node\": 2\n      /* NodeJs */\n      ,\n      \"classic\": 1\n      /* Classic */\n\n    },\n    description: ts.Diagnostics.Specifies_module_resolution_strategy_Colon_node_Node_js_or_classic_TypeScript_pre_1_6,\n    error: ts.Diagnostics.Argument_for_moduleResolution_option_must_be_node_or_classic\n  }, {\n    name: \"allowUnusedLabels\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_report_errors_on_unused_labels\n  }, {\n    name: \"noImplicitReturns\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Report_error_when_not_all_code_paths_in_function_return_a_value\n  }, {\n    name: \"noFallthroughCasesInSwitch\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Report_errors_for_fallthrough_cases_in_switch_statement\n  }, {\n    name: \"allowUnreachableCode\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_report_errors_on_unreachable_code\n  }, {\n    name: \"forceConsistentCasingInFileNames\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Disallow_inconsistently_cased_references_to_the_same_file\n  }, {\n    name: \"allowSyntheticDefaultImports\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Allow_default_imports_from_modules_with_no_default_export_This_does_not_affect_code_emit_just_typechecking\n  }, {\n    name: \"allowJs\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Allow_javascript_files_to_be_compiled\n  }, {\n    name: \"noImplicitUseStrict\",\n    type: \"boolean\",\n    description: ts.Diagnostics.Do_not_emit_use_strict_directives_in_module_output\n  }, {\n    name: \"noCustomAsyncPromise\",\n    type: \"boolean\",\n    experimental: true\n  }, {\n    name: \"disableSizeLimit\",\n    type: \"boolean\"\n  }];\n  var optionNameMapCache;\n  /* @internal */\n\n  function getOptionNameMap() {\n    if (optionNameMapCache) {\n      return optionNameMapCache;\n    }\n\n    var optionNameMap = {};\n    var shortOptionNames = {};\n    ts.forEach(ts.optionDeclarations, function (option) {\n      optionNameMap[option.name.toLowerCase()] = option;\n\n      if (option.shortName) {\n        shortOptionNames[option.shortName] = option.name;\n      }\n    });\n    optionNameMapCache = {\n      optionNameMap: optionNameMap,\n      shortOptionNames: shortOptionNames\n    };\n    return optionNameMapCache;\n  }\n\n  ts.getOptionNameMap = getOptionNameMap;\n\n  function parseCommandLine(commandLine, readFile) {\n    var options = {};\n    var fileNames = [];\n    var errors = [];\n\n    var _a = getOptionNameMap(),\n        optionNameMap = _a.optionNameMap,\n        shortOptionNames = _a.shortOptionNames;\n\n    parseStrings(commandLine);\n    return {\n      options: options,\n      fileNames: fileNames,\n      errors: errors\n    };\n\n    function parseStrings(args) {\n      var i = 0;\n\n      while (i < args.length) {\n        var s = args[i];\n        i++;\n\n        if (s.charCodeAt(0) === 64\n        /* at */\n        ) {\n            parseResponseFile(s.slice(1));\n          } else if (s.charCodeAt(0) === 45\n        /* minus */\n        ) {\n            s = s.slice(s.charCodeAt(1) === 45\n            /* minus */\n            ? 2 : 1).toLowerCase(); // Try to translate short option names to their full equivalents.\n\n            if (ts.hasProperty(shortOptionNames, s)) {\n              s = shortOptionNames[s];\n            }\n\n            if (ts.hasProperty(optionNameMap, s)) {\n              var opt = optionNameMap[s]; // Check to see if no argument was provided (e.g. \"--locale\" is the last command-line argument).\n\n              if (!args[i] && opt.type !== \"boolean\") {\n                errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Compiler_option_0_expects_an_argument, opt.name));\n              }\n\n              switch (opt.type) {\n                case \"number\":\n                  options[opt.name] = parseInt(args[i]);\n                  i++;\n                  break;\n\n                case \"boolean\":\n                  options[opt.name] = true;\n                  break;\n\n                case \"string\":\n                  options[opt.name] = args[i] || \"\";\n                  i++;\n                  break;\n                // If not a primitive, the possible types are specified in what is effectively a map of options.\n\n                default:\n                  var map_1 = opt.type;\n                  var key = (args[i] || \"\").toLowerCase();\n                  i++;\n\n                  if (ts.hasProperty(map_1, key)) {\n                    options[opt.name] = map_1[key];\n                  } else {\n                    errors.push(ts.createCompilerDiagnostic(opt.error));\n                  }\n\n              }\n            } else {\n              errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unknown_compiler_option_0, s));\n            }\n          } else {\n          fileNames.push(s);\n        }\n      }\n    }\n\n    function parseResponseFile(fileName) {\n      var text = readFile ? readFile(fileName) : ts.sys.readFile(fileName);\n\n      if (!text) {\n        errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.File_0_not_found, fileName));\n        return;\n      }\n\n      var args = [];\n      var pos = 0;\n\n      while (true) {\n        while (pos < text.length && text.charCodeAt(pos) <= 32\n        /* space */\n        ) {\n          pos++;\n        }\n\n        if (pos >= text.length) break;\n        var start = pos;\n\n        if (text.charCodeAt(start) === 34\n        /* doubleQuote */\n        ) {\n            pos++;\n\n            while (pos < text.length && text.charCodeAt(pos) !== 34\n            /* doubleQuote */\n            ) {\n              pos++;\n            }\n\n            if (pos < text.length) {\n              args.push(text.substring(start + 1, pos));\n              pos++;\n            } else {\n              errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unterminated_quoted_string_in_response_file_0, fileName));\n            }\n          } else {\n          while (text.charCodeAt(pos) > 32\n          /* space */\n          ) {\n            pos++;\n          }\n\n          args.push(text.substring(start, pos));\n        }\n      }\n\n      parseStrings(args);\n    }\n  }\n\n  ts.parseCommandLine = parseCommandLine;\n  /**\n    * Read tsconfig.json file\n    * @param fileName The path to the config file\n    */\n\n  function readConfigFile(fileName, readFile) {\n    var text = \"\";\n\n    try {\n      text = readFile(fileName);\n    } catch (e) {\n      return {\n        error: ts.createCompilerDiagnostic(ts.Diagnostics.Cannot_read_file_0_Colon_1, fileName, e.message)\n      };\n    }\n\n    return parseConfigFileTextToJson(fileName, text);\n  }\n\n  ts.readConfigFile = readConfigFile;\n  /**\n    * Parse the text of the tsconfig.json file\n    * @param fileName The path to the config file\n    * @param jsonText The text of the config file\n    */\n\n  function parseConfigFileTextToJson(fileName, jsonText) {\n    try {\n      var jsonTextWithoutComments = removeComments(jsonText);\n      return {\n        config: /\\S/.test(jsonTextWithoutComments) ? JSON.parse(jsonTextWithoutComments) : {}\n      };\n    } catch (e) {\n      return {\n        error: ts.createCompilerDiagnostic(ts.Diagnostics.Failed_to_parse_file_0_Colon_1, fileName, e.message)\n      };\n    }\n  }\n\n  ts.parseConfigFileTextToJson = parseConfigFileTextToJson;\n  /**\n   * Remove the comments from a json like text.\n   * Comments can be single line comments (starting with # or //) or multiline comments using / * * /\n   *\n   * This method replace comment content by whitespace rather than completely remove them to keep positions in json parsing error reporting accurate.\n   */\n\n  function removeComments(jsonText) {\n    var output = \"\";\n    var scanner = ts.createScanner(1\n    /* ES5 */\n    ,\n    /* skipTrivia */\n    false, 0\n    /* Standard */\n    , jsonText);\n    var token;\n\n    while ((token = scanner.scan()) !== 1\n    /* EndOfFileToken */\n    ) {\n      switch (token) {\n        case 2\n        /* SingleLineCommentTrivia */\n        :\n        case 3\n        /* MultiLineCommentTrivia */\n        :\n          // replace comments with whitespace to preserve original character positions\n          output += scanner.getTokenText().replace(/\\S/g, \" \");\n          break;\n\n        default:\n          output += scanner.getTokenText();\n          break;\n      }\n    }\n\n    return output;\n  }\n  /**\n    * Parse the contents of a config file (tsconfig.json).\n    * @param json The contents of the config file to parse\n    * @param host Instance of ParseConfigHost used to enumerate files in folder.\n    * @param basePath A root directory to resolve relative path entries in the config\n    *    file to. e.g. outDir\n    */\n\n\n  function parseJsonConfigFileContent(json, host, basePath, existingOptions, configFileName) {\n    if (existingOptions === void 0) {\n      existingOptions = {};\n    }\n\n    var _a = convertCompilerOptionsFromJson(json[\"compilerOptions\"], basePath, configFileName),\n        optionsFromJsonConfigFile = _a.options,\n        errors = _a.errors;\n\n    var options = ts.extend(existingOptions, optionsFromJsonConfigFile);\n    return {\n      options: options,\n      fileNames: getFileNames(),\n      typingOptions: getTypingOptions(),\n      errors: errors\n    };\n\n    function getFileNames() {\n      var fileNames = [];\n\n      if (ts.hasProperty(json, \"files\")) {\n        if (json[\"files\"] instanceof Array) {\n          fileNames = ts.map(json[\"files\"], function (s) {\n            return ts.combinePaths(basePath, s);\n          });\n        } else {\n          errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Compiler_option_0_requires_a_value_of_type_1, \"files\", \"Array\"));\n        }\n      } else {\n        var filesSeen = {};\n        var exclude = [];\n\n        if (json[\"exclude\"] instanceof Array) {\n          exclude = json[\"exclude\"];\n        } else {\n          // by default exclude node_modules, and any specificied output directory\n          exclude = [\"node_modules\", \"bower_components\"];\n          var outDir = json[\"compilerOptions\"] && json[\"compilerOptions\"][\"outDir\"];\n\n          if (outDir) {\n            exclude.push(outDir);\n          }\n        }\n\n        exclude = ts.map(exclude, ts.normalizeSlashes);\n        var supportedExtensions = ts.getSupportedExtensions(options);\n        ts.Debug.assert(ts.indexOf(supportedExtensions, \".ts\") < ts.indexOf(supportedExtensions, \".d.ts\"), \"Changed priority of extensions to pick\"); // Get files of supported extensions in their order of resolution\n\n        for (var _i = 0, supportedExtensions_1 = supportedExtensions; _i < supportedExtensions_1.length; _i++) {\n          var extension = supportedExtensions_1[_i];\n          var filesInDirWithExtension = host.readDirectory(basePath, extension, exclude);\n\n          for (var _a = 0, filesInDirWithExtension_1 = filesInDirWithExtension; _a < filesInDirWithExtension_1.length; _a++) {\n            var fileName = filesInDirWithExtension_1[_a]; // .ts extension would read the .d.ts extension files too but since .d.ts is lower priority extension,\n            // lets pick them when its turn comes up\n\n            if (extension === \".ts\" && ts.fileExtensionIs(fileName, \".d.ts\")) {\n              continue;\n            } // Skip over any minified JavaScript files (ending in \".min.js\")\n\n\n            if (/\\.min\\.js$/.test(fileName)) {\n              continue;\n            } // If this is one of the output extension (which would be .d.ts and .js if we are allowing compilation of js files)\n            // do not include this file if we included .ts or .tsx file with same base name as it could be output of the earlier compilation\n\n\n            if (extension === \".d.ts\" || options.allowJs && ts.contains(ts.supportedJavascriptExtensions, extension)) {\n              var baseName = fileName.substr(0, fileName.length - extension.length);\n\n              if (ts.hasProperty(filesSeen, baseName + \".ts\") || ts.hasProperty(filesSeen, baseName + \".tsx\")) {\n                continue;\n              }\n            }\n\n            filesSeen[fileName] = true;\n            fileNames.push(fileName);\n          }\n        }\n      }\n\n      return fileNames;\n    }\n\n    function getTypingOptions() {\n      var options = ts.getBaseFileName(configFileName) === \"jsconfig.json\" ? {\n        enableAutoDiscovery: true,\n        include: [],\n        exclude: []\n      } : {\n        enableAutoDiscovery: false,\n        include: [],\n        exclude: []\n      };\n      var jsonTypingOptions = json[\"typingOptions\"];\n\n      if (jsonTypingOptions) {\n        for (var id in jsonTypingOptions) {\n          if (id === \"enableAutoDiscovery\") {\n            if (typeof jsonTypingOptions[id] === \"boolean\") {\n              options.enableAutoDiscovery = jsonTypingOptions[id];\n            } else {\n              errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unknown_typing_option_0, id));\n            }\n          } else if (id === \"include\") {\n            options.include = convertJsonOptionToStringArray(id, jsonTypingOptions[id], errors);\n          } else if (id === \"exclude\") {\n            options.exclude = convertJsonOptionToStringArray(id, jsonTypingOptions[id], errors);\n          } else {\n            errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unknown_typing_option_0, id));\n          }\n        }\n      }\n\n      return options;\n    }\n  }\n\n  ts.parseJsonConfigFileContent = parseJsonConfigFileContent;\n\n  function convertCompilerOptionsFromJson(jsonOptions, basePath, configFileName) {\n    var options = {};\n    var errors = [];\n\n    if (configFileName && ts.getBaseFileName(configFileName) === \"jsconfig.json\") {\n      options.allowJs = true;\n    }\n\n    if (!jsonOptions) {\n      return {\n        options: options,\n        errors: errors\n      };\n    }\n\n    var optionNameMap = ts.arrayToMap(ts.optionDeclarations, function (opt) {\n      return opt.name;\n    });\n\n    for (var id in jsonOptions) {\n      if (ts.hasProperty(optionNameMap, id)) {\n        var opt = optionNameMap[id];\n        var optType = opt.type;\n        var value = jsonOptions[id];\n        var expectedType = typeof optType === \"string\" ? optType : \"string\";\n\n        if (typeof value === expectedType) {\n          if (typeof optType !== \"string\") {\n            var key = value.toLowerCase();\n\n            if (ts.hasProperty(optType, key)) {\n              value = optType[key];\n            } else {\n              errors.push(ts.createCompilerDiagnostic(opt.error));\n              value = 0;\n            }\n          }\n\n          if (opt.isFilePath) {\n            value = ts.normalizePath(ts.combinePaths(basePath, value));\n\n            if (value === \"\") {\n              value = \".\";\n            }\n          }\n\n          options[opt.name] = value;\n        } else {\n          errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Compiler_option_0_requires_a_value_of_type_1, id, expectedType));\n        }\n      } else {\n        errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Unknown_compiler_option_0, id));\n      }\n    }\n\n    return {\n      options: options,\n      errors: errors\n    };\n  }\n\n  ts.convertCompilerOptionsFromJson = convertCompilerOptionsFromJson;\n\n  function convertJsonOptionToStringArray(optionName, optionJson, errors, func) {\n    var items = [];\n    var invalidOptionType = false;\n\n    if (!ts.isArray(optionJson)) {\n      invalidOptionType = true;\n    } else {\n      for (var _i = 0, _a = optionJson; _i < _a.length; _i++) {\n        var element = _a[_i];\n\n        if (typeof element === \"string\") {\n          var item = func ? func(element) : element;\n          items.push(item);\n        } else {\n          invalidOptionType = true;\n          break;\n        }\n      }\n    }\n\n    if (invalidOptionType) {\n      errors.push(ts.createCompilerDiagnostic(ts.Diagnostics.Option_0_should_have_array_of_strings_as_a_value, optionName));\n    }\n\n    return items;\n  }\n})(ts || (ts = {}));\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var OutliningElementsCollector;\n\n  (function (OutliningElementsCollector) {\n    function collectElements(sourceFile) {\n      var elements = [];\n      var collapseText = \"...\";\n\n      function addOutliningSpan(hintSpanNode, startElement, endElement, autoCollapse) {\n        if (hintSpanNode && startElement && endElement) {\n          var span = {\n            textSpan: ts.createTextSpanFromBounds(startElement.pos, endElement.end),\n            hintSpan: ts.createTextSpanFromBounds(hintSpanNode.getStart(), hintSpanNode.end),\n            bannerText: collapseText,\n            autoCollapse: autoCollapse\n          };\n          elements.push(span);\n        }\n      }\n\n      function addOutliningSpanComments(commentSpan, autoCollapse) {\n        if (commentSpan) {\n          var span = {\n            textSpan: ts.createTextSpanFromBounds(commentSpan.pos, commentSpan.end),\n            hintSpan: ts.createTextSpanFromBounds(commentSpan.pos, commentSpan.end),\n            bannerText: collapseText,\n            autoCollapse: autoCollapse\n          };\n          elements.push(span);\n        }\n      }\n\n      function addOutliningForLeadingCommentsForNode(n) {\n        var comments = ts.getLeadingCommentRangesOfNode(n, sourceFile);\n\n        if (comments) {\n          var firstSingleLineCommentStart = -1;\n          var lastSingleLineCommentEnd = -1;\n          var isFirstSingleLineComment = true;\n          var singleLineCommentCount = 0;\n\n          for (var _i = 0, comments_2 = comments; _i < comments_2.length; _i++) {\n            var currentComment = comments_2[_i]; // For single line comments, combine consecutive ones (2 or more) into\n            // a single span from the start of the first till the end of the last\n\n            if (currentComment.kind === 2\n            /* SingleLineCommentTrivia */\n            ) {\n                if (isFirstSingleLineComment) {\n                  firstSingleLineCommentStart = currentComment.pos;\n                }\n\n                isFirstSingleLineComment = false;\n                lastSingleLineCommentEnd = currentComment.end;\n                singleLineCommentCount++;\n              } else if (currentComment.kind === 3\n            /* MultiLineCommentTrivia */\n            ) {\n                combineAndAddMultipleSingleLineComments(singleLineCommentCount, firstSingleLineCommentStart, lastSingleLineCommentEnd);\n                addOutliningSpanComments(currentComment,\n                /*autoCollapse*/\n                false);\n                singleLineCommentCount = 0;\n                lastSingleLineCommentEnd = -1;\n                isFirstSingleLineComment = true;\n              }\n          }\n\n          combineAndAddMultipleSingleLineComments(singleLineCommentCount, firstSingleLineCommentStart, lastSingleLineCommentEnd);\n        }\n      }\n\n      function combineAndAddMultipleSingleLineComments(count, start, end) {\n        // Only outline spans of two or more consecutive single line comments\n        if (count > 1) {\n          var multipleSingleLineComments = {\n            pos: start,\n            end: end,\n            kind: 2\n            /* SingleLineCommentTrivia */\n\n          };\n          addOutliningSpanComments(multipleSingleLineComments,\n          /*autoCollapse*/\n          false);\n        }\n      }\n\n      function autoCollapse(node) {\n        return ts.isFunctionBlock(node) && node.parent.kind !== 177\n        /* ArrowFunction */\n        ;\n      }\n\n      var depth = 0;\n      var maxDepth = 20;\n\n      function walk(n) {\n        if (depth > maxDepth) {\n          return;\n        }\n\n        if (ts.isDeclaration(n)) {\n          addOutliningForLeadingCommentsForNode(n);\n        }\n\n        switch (n.kind) {\n          case 195\n          /* Block */\n          :\n            if (!ts.isFunctionBlock(n)) {\n              var parent_9 = n.parent;\n              var openBrace = ts.findChildOfKind(n, 15\n              /* OpenBraceToken */\n              , sourceFile);\n              var closeBrace = ts.findChildOfKind(n, 16\n              /* CloseBraceToken */\n              , sourceFile); // Check if the block is standalone, or 'attached' to some parent statement.\n              // If the latter, we want to collaps the block, but consider its hint span\n              // to be the entire span of the parent.\n\n              if (parent_9.kind === 200\n              /* DoStatement */\n              || parent_9.kind === 203\n              /* ForInStatement */\n              || parent_9.kind === 204\n              /* ForOfStatement */\n              || parent_9.kind === 202\n              /* ForStatement */\n              || parent_9.kind === 199\n              /* IfStatement */\n              || parent_9.kind === 201\n              /* WhileStatement */\n              || parent_9.kind === 208\n              /* WithStatement */\n              || parent_9.kind === 247\n              /* CatchClause */\n              ) {\n                  addOutliningSpan(parent_9, openBrace, closeBrace, autoCollapse(n));\n                  break;\n                }\n\n              if (parent_9.kind === 212\n              /* TryStatement */\n              ) {\n                  // Could be the try-block, or the finally-block.\n                  var tryStatement = parent_9;\n\n                  if (tryStatement.tryBlock === n) {\n                    addOutliningSpan(parent_9, openBrace, closeBrace, autoCollapse(n));\n                    break;\n                  } else if (tryStatement.finallyBlock === n) {\n                    var finallyKeyword = ts.findChildOfKind(tryStatement, 85\n                    /* FinallyKeyword */\n                    , sourceFile);\n\n                    if (finallyKeyword) {\n                      addOutliningSpan(finallyKeyword, openBrace, closeBrace, autoCollapse(n));\n                      break;\n                    }\n                  }\n                } // Block was a standalone block.  In this case we want to only collapse\n              // the span of the block, independent of any parent span.\n\n\n              var span = ts.createTextSpanFromBounds(n.getStart(), n.end);\n              elements.push({\n                textSpan: span,\n                hintSpan: span,\n                bannerText: collapseText,\n                autoCollapse: autoCollapse(n)\n              });\n              break;\n            }\n\n          // Fallthrough.\n\n          case 222\n          /* ModuleBlock */\n          :\n            {\n              var openBrace = ts.findChildOfKind(n, 15\n              /* OpenBraceToken */\n              , sourceFile);\n              var closeBrace = ts.findChildOfKind(n, 16\n              /* CloseBraceToken */\n              , sourceFile);\n              addOutliningSpan(n.parent, openBrace, closeBrace, autoCollapse(n));\n              break;\n            }\n\n          case 217\n          /* ClassDeclaration */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n          case 168\n          /* ObjectLiteralExpression */\n          :\n          case 223\n          /* CaseBlock */\n          :\n            {\n              var openBrace = ts.findChildOfKind(n, 15\n              /* OpenBraceToken */\n              , sourceFile);\n              var closeBrace = ts.findChildOfKind(n, 16\n              /* CloseBraceToken */\n              , sourceFile);\n              addOutliningSpan(n, openBrace, closeBrace, autoCollapse(n));\n              break;\n            }\n\n          case 167\n          /* ArrayLiteralExpression */\n          :\n            var openBracket = ts.findChildOfKind(n, 19\n            /* OpenBracketToken */\n            , sourceFile);\n            var closeBracket = ts.findChildOfKind(n, 20\n            /* CloseBracketToken */\n            , sourceFile);\n            addOutliningSpan(n, openBracket, closeBracket, autoCollapse(n));\n            break;\n        }\n\n        depth++;\n        ts.forEachChild(n, walk);\n        depth--;\n      }\n\n      walk(sourceFile);\n      return elements;\n    }\n\n    OutliningElementsCollector.collectElements = collectElements;\n  })(OutliningElementsCollector = ts.OutliningElementsCollector || (ts.OutliningElementsCollector = {}));\n})(ts || (ts = {}));\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var NavigateTo;\n\n  (function (NavigateTo) {\n    function getNavigateToItems(program, cancellationToken, searchValue, maxResultCount) {\n      var patternMatcher = ts.createPatternMatcher(searchValue);\n      var rawItems = []; // This means \"compare in a case insensitive manner.\"\n\n      var baseSensitivity = {\n        sensitivity: \"base\"\n      }; // Search the declarations in all files and output matched NavigateToItem into array of NavigateToItem[] \n\n      ts.forEach(program.getSourceFiles(), function (sourceFile) {\n        cancellationToken.throwIfCancellationRequested();\n        var nameToDeclarations = sourceFile.getNamedDeclarations();\n\n        for (var name_32 in nameToDeclarations) {\n          var declarations = ts.getProperty(nameToDeclarations, name_32);\n\n          if (declarations) {\n            // First do a quick check to see if the name of the declaration matches the \n            // last portion of the (possibly) dotted name they're searching for.\n            var matches = patternMatcher.getMatchesForLastSegmentOfPattern(name_32);\n\n            if (!matches) {\n              continue;\n            }\n\n            for (var _i = 0, declarations_6 = declarations; _i < declarations_6.length; _i++) {\n              var declaration = declarations_6[_i]; // It was a match!  If the pattern has dots in it, then also see if the \n              // declaration container matches as well.\n\n              if (patternMatcher.patternContainsDots) {\n                var containers = getContainers(declaration);\n\n                if (!containers) {\n                  return undefined;\n                }\n\n                matches = patternMatcher.getMatches(containers, name_32);\n\n                if (!matches) {\n                  continue;\n                }\n              }\n\n              var fileName = sourceFile.fileName;\n              var matchKind = bestMatchKind(matches);\n              rawItems.push({\n                name: name_32,\n                fileName: fileName,\n                matchKind: matchKind,\n                isCaseSensitive: allMatchesAreCaseSensitive(matches),\n                declaration: declaration\n              });\n            }\n          }\n        }\n      });\n      rawItems.sort(compareNavigateToItems);\n\n      if (maxResultCount !== undefined) {\n        rawItems = rawItems.slice(0, maxResultCount);\n      }\n\n      var items = ts.map(rawItems, createNavigateToItem);\n      return items;\n\n      function allMatchesAreCaseSensitive(matches) {\n        ts.Debug.assert(matches.length > 0); // This is a case sensitive match, only if all the submatches were case sensitive.\n\n        for (var _i = 0, matches_1 = matches; _i < matches_1.length; _i++) {\n          var match = matches_1[_i];\n\n          if (!match.isCaseSensitive) {\n            return false;\n          }\n        }\n\n        return true;\n      }\n\n      function getTextOfIdentifierOrLiteral(node) {\n        if (node) {\n          if (node.kind === 69\n          /* Identifier */\n          || node.kind === 9\n          /* StringLiteral */\n          || node.kind === 8\n          /* NumericLiteral */\n          ) {\n              return node.text;\n            }\n        }\n\n        return undefined;\n      }\n\n      function tryAddSingleDeclarationName(declaration, containers) {\n        if (declaration && declaration.name) {\n          var text = getTextOfIdentifierOrLiteral(declaration.name);\n\n          if (text !== undefined) {\n            containers.unshift(text);\n          } else if (declaration.name.kind === 137\n          /* ComputedPropertyName */\n          ) {\n              return tryAddComputedPropertyName(declaration.name.expression, containers,\n              /*includeLastPortion*/\n              true);\n            } else {\n            // Don't know how to add this.\n            return false;\n          }\n        }\n\n        return true;\n      } // Only added the names of computed properties if they're simple dotted expressions, like:\n      //\n      //      [X.Y.Z]() { }\n\n\n      function tryAddComputedPropertyName(expression, containers, includeLastPortion) {\n        var text = getTextOfIdentifierOrLiteral(expression);\n\n        if (text !== undefined) {\n          if (includeLastPortion) {\n            containers.unshift(text);\n          }\n\n          return true;\n        }\n\n        if (expression.kind === 169\n        /* PropertyAccessExpression */\n        ) {\n            var propertyAccess = expression;\n\n            if (includeLastPortion) {\n              containers.unshift(propertyAccess.name.text);\n            }\n\n            return tryAddComputedPropertyName(propertyAccess.expression, containers,\n            /*includeLastPortion*/\n            true);\n          }\n\n        return false;\n      }\n\n      function getContainers(declaration) {\n        var containers = []; // First, if we started with a computed property name, then add all but the last\n        // portion into the container array.\n\n        if (declaration.name.kind === 137\n        /* ComputedPropertyName */\n        ) {\n            if (!tryAddComputedPropertyName(declaration.name.expression, containers,\n            /*includeLastPortion*/\n            false)) {\n              return undefined;\n            }\n          } // Now, walk up our containers, adding all their names to the container array.\n\n\n        declaration = ts.getContainerNode(declaration);\n\n        while (declaration) {\n          if (!tryAddSingleDeclarationName(declaration, containers)) {\n            return undefined;\n          }\n\n          declaration = ts.getContainerNode(declaration);\n        }\n\n        return containers;\n      }\n\n      function bestMatchKind(matches) {\n        ts.Debug.assert(matches.length > 0);\n        var bestMatchKind = ts.PatternMatchKind.camelCase;\n\n        for (var _i = 0, matches_2 = matches; _i < matches_2.length; _i++) {\n          var match = matches_2[_i];\n          var kind = match.kind;\n\n          if (kind < bestMatchKind) {\n            bestMatchKind = kind;\n          }\n        }\n\n        return bestMatchKind;\n      }\n\n      function compareNavigateToItems(i1, i2) {\n        // TODO(cyrusn): get the gamut of comparisons that VS already uses here.\n        // Right now we just sort by kind first, and then by name of the item.\n        // We first sort case insensitively.  So \"Aaa\" will come before \"bar\".\n        // Then we sort case sensitively, so \"aaa\" will come before \"Aaa\".\n        return i1.matchKind - i2.matchKind || i1.name.localeCompare(i2.name, undefined, baseSensitivity) || i1.name.localeCompare(i2.name);\n      }\n\n      function createNavigateToItem(rawItem) {\n        var declaration = rawItem.declaration;\n        var container = ts.getContainerNode(declaration);\n        return {\n          name: rawItem.name,\n          kind: ts.getNodeKind(declaration),\n          kindModifiers: ts.getNodeModifiers(declaration),\n          matchKind: ts.PatternMatchKind[rawItem.matchKind],\n          isCaseSensitive: rawItem.isCaseSensitive,\n          fileName: rawItem.fileName,\n          textSpan: ts.createTextSpanFromBounds(declaration.getStart(), declaration.getEnd()),\n          // TODO(jfreeman): What should be the containerName when the container has a computed name?\n          containerName: container && container.name ? container.name.text : \"\",\n          containerKind: container && container.name ? ts.getNodeKind(container) : \"\"\n        };\n      }\n    }\n\n    NavigateTo.getNavigateToItems = getNavigateToItems;\n  })(NavigateTo = ts.NavigateTo || (ts.NavigateTo = {}));\n})(ts || (ts = {})); /// <reference path='services.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var NavigationBar;\n\n  (function (NavigationBar) {\n    function getNavigationBarItems(sourceFile, compilerOptions) {\n      // TODO: Handle JS files differently in 'navbar' calls for now, but ideally we should unify\n      // the 'navbar' and 'navto' logic for TypeScript and JavaScript.\n      if (ts.isSourceFileJavaScript(sourceFile)) {\n        return getJsNavigationBarItems(sourceFile, compilerOptions);\n      } // If the source file has any child items, then it included in the tree\n      // and takes lexical ownership of all other top-level items.\n\n\n      var hasGlobalNode = false;\n      return getItemsWorker(getTopLevelNodes(sourceFile), createTopLevelItem);\n\n      function getIndent(node) {\n        // If we have a global node in the tree,\n        // then it adds an extra layer of depth to all subnodes.\n        var indent = hasGlobalNode ? 1 : 0;\n        var current = node.parent;\n\n        while (current) {\n          switch (current.kind) {\n            case 221\n            /* ModuleDeclaration */\n            :\n              // If we have a module declared as A.B.C, it is more \"intuitive\"\n              // to say it only has a single layer of depth\n              do {\n                current = current.parent;\n              } while (current.kind === 221\n              /* ModuleDeclaration */\n              );\n\n            // fall through\n\n            case 217\n            /* ClassDeclaration */\n            :\n            case 220\n            /* EnumDeclaration */\n            :\n            case 218\n            /* InterfaceDeclaration */\n            :\n            case 216\n            /* FunctionDeclaration */\n            :\n              indent++;\n          }\n\n          current = current.parent;\n        }\n\n        return indent;\n      }\n\n      function getChildNodes(nodes) {\n        var childNodes = [];\n\n        function visit(node) {\n          switch (node.kind) {\n            case 196\n            /* VariableStatement */\n            :\n              ts.forEach(node.declarationList.declarations, visit);\n              break;\n\n            case 164\n            /* ObjectBindingPattern */\n            :\n            case 165\n            /* ArrayBindingPattern */\n            :\n              ts.forEach(node.elements, visit);\n              break;\n\n            case 231\n            /* ExportDeclaration */\n            :\n              // Handle named exports case e.g.:\n              //    export {a, b as B} from \"mod\";\n              if (node.exportClause) {\n                ts.forEach(node.exportClause.elements, visit);\n              }\n\n              break;\n\n            case 225\n            /* ImportDeclaration */\n            :\n              var importClause = node.importClause;\n\n              if (importClause) {\n                // Handle default import case e.g.:\n                //    import d from \"mod\";\n                if (importClause.name) {\n                  childNodes.push(importClause);\n                } // Handle named bindings in imports e.g.:\n                //    import * as NS from \"mod\";\n                //    import {a, b as B} from \"mod\";\n\n\n                if (importClause.namedBindings) {\n                  if (importClause.namedBindings.kind === 227\n                  /* NamespaceImport */\n                  ) {\n                      childNodes.push(importClause.namedBindings);\n                    } else {\n                    ts.forEach(importClause.namedBindings.elements, visit);\n                  }\n                }\n              }\n\n              break;\n\n            case 166\n            /* BindingElement */\n            :\n            case 214\n            /* VariableDeclaration */\n            :\n              if (ts.isBindingPattern(node.name)) {\n                visit(node.name);\n                break;\n              }\n\n            // Fall through\n\n            case 217\n            /* ClassDeclaration */\n            :\n            case 220\n            /* EnumDeclaration */\n            :\n            case 218\n            /* InterfaceDeclaration */\n            :\n            case 221\n            /* ModuleDeclaration */\n            :\n            case 216\n            /* FunctionDeclaration */\n            :\n            case 224\n            /* ImportEqualsDeclaration */\n            :\n            case 229\n            /* ImportSpecifier */\n            :\n            case 233\n            /* ExportSpecifier */\n            :\n              childNodes.push(node);\n              break;\n          }\n        } //for (let i = 0, n = nodes.length; i < n; i++) {\n        //    let node = nodes[i];\n        //    if (node.kind === SyntaxKind.ClassDeclaration ||\n        //        node.kind === SyntaxKind.EnumDeclaration ||\n        //        node.kind === SyntaxKind.InterfaceDeclaration ||\n        //        node.kind === SyntaxKind.ModuleDeclaration ||\n        //        node.kind === SyntaxKind.FunctionDeclaration) {\n        //        childNodes.push(node);\n        //    }\n        //    else if (node.kind === SyntaxKind.VariableStatement) {\n        //        childNodes.push.apply(childNodes, (<VariableStatement>node).declarations);\n        //    }\n        //}\n\n\n        ts.forEach(nodes, visit);\n        return sortNodes(childNodes);\n      }\n\n      function getTopLevelNodes(node) {\n        var topLevelNodes = [];\n        topLevelNodes.push(node);\n        addTopLevelNodes(node.statements, topLevelNodes);\n        return topLevelNodes;\n      }\n\n      function sortNodes(nodes) {\n        return nodes.slice(0).sort(function (n1, n2) {\n          if (n1.name && n2.name) {\n            return ts.getPropertyNameForPropertyNameNode(n1.name).localeCompare(ts.getPropertyNameForPropertyNameNode(n2.name));\n          } else if (n1.name) {\n            return 1;\n          } else if (n2.name) {\n            return -1;\n          } else {\n            return n1.kind - n2.kind;\n          }\n        });\n      }\n\n      function addTopLevelNodes(nodes, topLevelNodes) {\n        nodes = sortNodes(nodes);\n\n        for (var _i = 0, nodes_4 = nodes; _i < nodes_4.length; _i++) {\n          var node = nodes_4[_i];\n\n          switch (node.kind) {\n            case 217\n            /* ClassDeclaration */\n            :\n            case 220\n            /* EnumDeclaration */\n            :\n            case 218\n            /* InterfaceDeclaration */\n            :\n              topLevelNodes.push(node);\n              break;\n\n            case 221\n            /* ModuleDeclaration */\n            :\n              var moduleDeclaration = node;\n              topLevelNodes.push(node);\n              addTopLevelNodes(getInnermostModule(moduleDeclaration).body.statements, topLevelNodes);\n              break;\n\n            case 216\n            /* FunctionDeclaration */\n            :\n              var functionDeclaration = node;\n\n              if (isTopLevelFunctionDeclaration(functionDeclaration)) {\n                topLevelNodes.push(node);\n                addTopLevelNodes(functionDeclaration.body.statements, topLevelNodes);\n              }\n\n              break;\n          }\n        }\n      }\n\n      function isTopLevelFunctionDeclaration(functionDeclaration) {\n        if (functionDeclaration.kind === 216\n        /* FunctionDeclaration */\n        ) {\n            // A function declaration is 'top level' if it contains any function declarations\n            // within it.\n            if (functionDeclaration.body && functionDeclaration.body.kind === 195\n            /* Block */\n            ) {\n                // Proper function declarations can only have identifier names\n                if (ts.forEach(functionDeclaration.body.statements, function (s) {\n                  return s.kind === 216\n                  /* FunctionDeclaration */\n                  && !isEmpty(s.name.text);\n                })) {\n                  return true;\n                } // Or if it is not parented by another function.  i.e all functions\n                // at module scope are 'top level'.\n\n\n                if (!ts.isFunctionBlock(functionDeclaration.parent)) {\n                  return true;\n                }\n              }\n          }\n\n        return false;\n      }\n\n      function getItemsWorker(nodes, createItem) {\n        var items = [];\n        var keyToItem = {};\n\n        for (var _i = 0, nodes_5 = nodes; _i < nodes_5.length; _i++) {\n          var child = nodes_5[_i];\n          var item = createItem(child);\n\n          if (item !== undefined) {\n            if (item.text.length > 0) {\n              var key = item.text + \"-\" + item.kind + \"-\" + item.indent;\n              var itemWithSameName = keyToItem[key];\n\n              if (itemWithSameName) {\n                // We had an item with the same name.  Merge these items together.\n                merge(itemWithSameName, item);\n              } else {\n                keyToItem[key] = item;\n                items.push(item);\n              }\n            }\n          }\n        }\n\n        return items;\n      }\n\n      function merge(target, source) {\n        // First, add any spans in the source to the target.\n        ts.addRange(target.spans, source.spans);\n\n        if (source.childItems) {\n          if (!target.childItems) {\n            target.childItems = [];\n          } // Next, recursively merge or add any children in the source as appropriate.\n\n\n          outer: for (var _i = 0, _a = source.childItems; _i < _a.length; _i++) {\n            var sourceChild = _a[_i];\n\n            for (var _b = 0, _c = target.childItems; _b < _c.length; _b++) {\n              var targetChild = _c[_b];\n\n              if (targetChild.text === sourceChild.text && targetChild.kind === sourceChild.kind) {\n                // Found a match.  merge them.\n                merge(targetChild, sourceChild);\n                continue outer;\n              }\n            } // Didn't find a match, just add this child to the list.\n\n\n            target.childItems.push(sourceChild);\n          }\n        }\n      }\n\n      function createChildItem(node) {\n        switch (node.kind) {\n          case 139\n          /* Parameter */\n          :\n            if (ts.isBindingPattern(node.name)) {\n              break;\n            }\n\n            if ((node.flags & 1022\n            /* Modifier */\n            ) === 0) {\n              return undefined;\n            }\n\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.memberVariableElement);\n\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.memberFunctionElement);\n\n          case 146\n          /* GetAccessor */\n          :\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.memberGetAccessorElement);\n\n          case 147\n          /* SetAccessor */\n          :\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.memberSetAccessorElement);\n\n          case 150\n          /* IndexSignature */\n          :\n            return createItem(node, \"[]\", ts.ScriptElementKind.indexSignatureElement);\n\n          case 250\n          /* EnumMember */\n          :\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.memberVariableElement);\n\n          case 148\n          /* CallSignature */\n          :\n            return createItem(node, \"()\", ts.ScriptElementKind.callSignatureElement);\n\n          case 149\n          /* ConstructSignature */\n          :\n            return createItem(node, \"new()\", ts.ScriptElementKind.constructSignatureElement);\n\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.memberVariableElement);\n\n          case 216\n          /* FunctionDeclaration */\n          :\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.functionElement);\n\n          case 214\n          /* VariableDeclaration */\n          :\n          case 166\n          /* BindingElement */\n          :\n            var variableDeclarationNode = void 0;\n            var name_33;\n\n            if (node.kind === 166\n            /* BindingElement */\n            ) {\n                name_33 = node.name;\n                variableDeclarationNode = node; // binding elements are added only for variable declarations\n                // bubble up to the containing variable declaration\n\n                while (variableDeclarationNode && variableDeclarationNode.kind !== 214\n                /* VariableDeclaration */\n                ) {\n                  variableDeclarationNode = variableDeclarationNode.parent;\n                }\n\n                ts.Debug.assert(variableDeclarationNode !== undefined);\n              } else {\n              ts.Debug.assert(!ts.isBindingPattern(node.name));\n              variableDeclarationNode = node;\n              name_33 = node.name;\n            }\n\n            if (ts.isConst(variableDeclarationNode)) {\n              return createItem(node, getTextOfNode(name_33), ts.ScriptElementKind.constElement);\n            } else if (ts.isLet(variableDeclarationNode)) {\n              return createItem(node, getTextOfNode(name_33), ts.ScriptElementKind.letElement);\n            } else {\n              return createItem(node, getTextOfNode(name_33), ts.ScriptElementKind.variableElement);\n            }\n\n          case 145\n          /* Constructor */\n          :\n            return createItem(node, \"constructor\", ts.ScriptElementKind.constructorImplementationElement);\n\n          case 233\n          /* ExportSpecifier */\n          :\n          case 229\n          /* ImportSpecifier */\n          :\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n          case 226\n          /* ImportClause */\n          :\n          case 227\n          /* NamespaceImport */\n          :\n            return createItem(node, getTextOfNode(node.name), ts.ScriptElementKind.alias);\n        }\n\n        return undefined;\n\n        function createItem(node, name, scriptElementKind) {\n          return getNavigationBarItem(name, scriptElementKind, ts.getNodeModifiers(node), [getNodeSpan(node)]);\n        }\n      }\n\n      function isEmpty(text) {\n        return !text || text.trim() === \"\";\n      }\n\n      function getNavigationBarItem(text, kind, kindModifiers, spans, childItems, indent) {\n        if (childItems === void 0) {\n          childItems = [];\n        }\n\n        if (indent === void 0) {\n          indent = 0;\n        }\n\n        if (isEmpty(text)) {\n          return undefined;\n        }\n\n        return {\n          text: text,\n          kind: kind,\n          kindModifiers: kindModifiers,\n          spans: spans,\n          childItems: childItems,\n          indent: indent,\n          bolded: false,\n          grayed: false\n        };\n      }\n\n      function createTopLevelItem(node) {\n        switch (node.kind) {\n          case 251\n          /* SourceFile */\n          :\n            return createSourceFileItem(node);\n\n          case 217\n          /* ClassDeclaration */\n          :\n            return createClassItem(node);\n\n          case 220\n          /* EnumDeclaration */\n          :\n            return createEnumItem(node);\n\n          case 218\n          /* InterfaceDeclaration */\n          :\n            return createIterfaceItem(node);\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            return createModuleItem(node);\n\n          case 216\n          /* FunctionDeclaration */\n          :\n            return createFunctionItem(node);\n        }\n\n        return undefined;\n\n        function getModuleName(moduleDeclaration) {\n          // We want to maintain quotation marks.\n          if (ts.isAmbientModule(moduleDeclaration)) {\n            return getTextOfNode(moduleDeclaration.name);\n          } // Otherwise, we need to aggregate each identifier to build up the qualified name.\n\n\n          var result = [];\n          result.push(moduleDeclaration.name.text);\n\n          while (moduleDeclaration.body && moduleDeclaration.body.kind === 221\n          /* ModuleDeclaration */\n          ) {\n            moduleDeclaration = moduleDeclaration.body;\n            result.push(moduleDeclaration.name.text);\n          }\n\n          return result.join(\".\");\n        }\n\n        function createModuleItem(node) {\n          var moduleName = getModuleName(node);\n          var childItems = getItemsWorker(getChildNodes(getInnermostModule(node).body.statements), createChildItem);\n          return getNavigationBarItem(moduleName, ts.ScriptElementKind.moduleElement, ts.getNodeModifiers(node), [getNodeSpan(node)], childItems, getIndent(node));\n        }\n\n        function createFunctionItem(node) {\n          if (node.body && node.body.kind === 195\n          /* Block */\n          ) {\n              var childItems = getItemsWorker(sortNodes(node.body.statements), createChildItem);\n              return getNavigationBarItem(!node.name ? \"default\" : node.name.text, ts.ScriptElementKind.functionElement, ts.getNodeModifiers(node), [getNodeSpan(node)], childItems, getIndent(node));\n            }\n\n          return undefined;\n        }\n\n        function createSourceFileItem(node) {\n          var childItems = getItemsWorker(getChildNodes(node.statements), createChildItem);\n\n          if (childItems === undefined || childItems.length === 0) {\n            return undefined;\n          }\n\n          hasGlobalNode = true;\n          var rootName = ts.isExternalModule(node) ? \"\\\"\" + ts.escapeString(ts.getBaseFileName(ts.removeFileExtension(ts.normalizePath(node.fileName)))) + \"\\\"\" : \"<global>\";\n          return getNavigationBarItem(rootName, ts.ScriptElementKind.moduleElement, ts.ScriptElementKindModifier.none, [getNodeSpan(node)], childItems);\n        }\n\n        function createClassItem(node) {\n          var childItems;\n\n          if (node.members) {\n            var constructor = ts.forEach(node.members, function (member) {\n              return member.kind === 145\n              /* Constructor */\n              && member;\n            }); // Add the constructor parameters in as children of the class (for property parameters).\n            // Note that *all non-binding pattern named* parameters will be added to the nodes array, but parameters that\n            // are not properties will be filtered out later by createChildItem.\n\n            var nodes = removeDynamicallyNamedProperties(node);\n\n            if (constructor) {\n              ts.addRange(nodes, ts.filter(constructor.parameters, function (p) {\n                return !ts.isBindingPattern(p.name);\n              }));\n            }\n\n            childItems = getItemsWorker(sortNodes(nodes), createChildItem);\n          }\n\n          var nodeName = !node.name ? \"default\" : node.name.text;\n          return getNavigationBarItem(nodeName, ts.ScriptElementKind.classElement, ts.getNodeModifiers(node), [getNodeSpan(node)], childItems, getIndent(node));\n        }\n\n        function createEnumItem(node) {\n          var childItems = getItemsWorker(sortNodes(removeComputedProperties(node)), createChildItem);\n          return getNavigationBarItem(node.name.text, ts.ScriptElementKind.enumElement, ts.getNodeModifiers(node), [getNodeSpan(node)], childItems, getIndent(node));\n        }\n\n        function createIterfaceItem(node) {\n          var childItems = getItemsWorker(sortNodes(removeDynamicallyNamedProperties(node)), createChildItem);\n          return getNavigationBarItem(node.name.text, ts.ScriptElementKind.interfaceElement, ts.getNodeModifiers(node), [getNodeSpan(node)], childItems, getIndent(node));\n        }\n      }\n\n      function removeComputedProperties(node) {\n        return ts.filter(node.members, function (member) {\n          return member.name === undefined || member.name.kind !== 137\n          /* ComputedPropertyName */\n          ;\n        });\n      }\n      /**\n       * Like removeComputedProperties, but retains the properties with well known symbol names\n       */\n\n\n      function removeDynamicallyNamedProperties(node) {\n        return ts.filter(node.members, function (member) {\n          return !ts.hasDynamicName(member);\n        });\n      }\n\n      function getInnermostModule(node) {\n        while (node.body.kind === 221\n        /* ModuleDeclaration */\n        ) {\n          node = node.body;\n        }\n\n        return node;\n      }\n\n      function getNodeSpan(node) {\n        return node.kind === 251\n        /* SourceFile */\n        ? ts.createTextSpanFromBounds(node.getFullStart(), node.getEnd()) : ts.createTextSpanFromBounds(node.getStart(), node.getEnd());\n      }\n\n      function getTextOfNode(node) {\n        return ts.getTextOfNodeFromSourceText(sourceFile.text, node);\n      }\n    }\n\n    NavigationBar.getNavigationBarItems = getNavigationBarItems;\n\n    function getJsNavigationBarItems(sourceFile, compilerOptions) {\n      var anonFnText = \"<function>\";\n      var anonClassText = \"<class>\";\n      var indent = 0;\n      var rootName = ts.isExternalModule(sourceFile) ? \"\\\"\" + ts.escapeString(ts.getBaseFileName(ts.removeFileExtension(ts.normalizePath(sourceFile.fileName)))) + \"\\\"\" : \"<global>\";\n      var sourceFileItem = getNavBarItem(rootName, ts.ScriptElementKind.moduleElement, [getNodeSpan(sourceFile)]);\n      var topItem = sourceFileItem; // Walk the whole file, because we want to also find function expressions - which may be in variable initializer,\n      // call arguments, expressions, etc...\n\n      ts.forEachChild(sourceFile, visitNode);\n\n      function visitNode(node) {\n        var newItem = createNavBarItem(node);\n\n        if (newItem) {\n          topItem.childItems.push(newItem);\n        } // Add a level if traversing into a container\n\n\n        if (newItem && (ts.isFunctionLike(node) || ts.isClassLike(node))) {\n          var lastTop = topItem;\n          indent++;\n          topItem = newItem;\n          ts.forEachChild(node, visitNode);\n          topItem = lastTop;\n          indent--; // If the last item added was an anonymous function expression, and it had no children, discard it.\n\n          if (newItem && newItem.text === anonFnText && newItem.childItems.length === 0) {\n            topItem.childItems.pop();\n          }\n        } else {\n          ts.forEachChild(node, visitNode);\n        }\n      }\n\n      function createNavBarItem(node) {\n        switch (node.kind) {\n          case 214\n          /* VariableDeclaration */\n          :\n            // Only add to the navbar if at the top-level of the file\n            // Note: \"const\" and \"let\" are also SyntaxKind.VariableDeclarations\n            if (node.parent\n            /*VariableDeclarationList*/\n            .parent\n            /*VariableStatement*/\n            .parent\n            /*SourceFile*/\n            .kind !== 251\n            /* SourceFile */\n            ) {\n                return undefined;\n              } // If it is initialized with a function expression, handle it when we reach the function expression node\n\n\n            var varDecl = node;\n\n            if (varDecl.initializer && (varDecl.initializer.kind === 176\n            /* FunctionExpression */\n            || varDecl.initializer.kind === 177\n            /* ArrowFunction */\n            || varDecl.initializer.kind === 189\n            /* ClassExpression */\n            )) {\n              return undefined;\n            }\n\n          // Fall through\n\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            // \"export default function()..\" looks just like a regular function/class declaration, except with the 'default' flag\n            var name_34 = node.flags && node.flags & 512\n            /* Default */\n            && !node.name ? \"default\" : node.kind === 145\n            /* Constructor */\n            ? \"constructor\" : ts.declarationNameToString(node.name);\n            return getNavBarItem(name_34, getScriptKindForElementKind(node.kind), [getNodeSpan(node)]);\n\n          case 176\n          /* FunctionExpression */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n          case 189\n          /* ClassExpression */\n          :\n            return getDefineModuleItem(node) || getFunctionOrClassExpressionItem(node);\n\n          case 144\n          /* MethodDeclaration */\n          :\n            var methodDecl = node;\n            return getNavBarItem(ts.declarationNameToString(methodDecl.name), ts.ScriptElementKind.memberFunctionElement, [getNodeSpan(node)]);\n\n          case 230\n          /* ExportAssignment */\n          :\n            // e.g. \"export default <expr>\"\n            return getNavBarItem(\"default\", ts.ScriptElementKind.variableElement, [getNodeSpan(node)]);\n\n          case 226\n          /* ImportClause */\n          :\n            if (!node.name) {\n              // No default import (this node is still a parent of named & namespace imports, which are handled below)\n              return undefined;\n            }\n\n          // fall through\n\n          case 229\n          /* ImportSpecifier */\n          : // e.g. 'id' in: import {id} from 'mod' (in NamedImports, in ImportClause)\n\n          case 227\n          /* NamespaceImport */\n          : // e.g. '* as ns' in: import * as ns from 'mod' (in ImportClause)\n\n          case 233\n          /* ExportSpecifier */\n          :\n            // Export specifiers are only interesting if they are reexports from another module, or renamed, else they are already globals\n            if (node.kind === 233\n            /* ExportSpecifier */\n            ) {\n                if (!node.parent.parent.moduleSpecifier && !node.propertyName) {\n                  return undefined;\n                }\n              }\n\n            var decl = node;\n\n            if (!decl.name) {\n              return undefined;\n            }\n\n            var declName = ts.declarationNameToString(decl.name);\n            return getNavBarItem(declName, ts.ScriptElementKind.constElement, [getNodeSpan(node)]);\n\n          default:\n            return undefined;\n        }\n      }\n\n      function getNavBarItem(text, kind, spans, kindModifiers) {\n        if (kindModifiers === void 0) {\n          kindModifiers = ts.ScriptElementKindModifier.none;\n        }\n\n        return {\n          text: text,\n          kind: kind,\n          kindModifiers: kindModifiers,\n          spans: spans,\n          childItems: [],\n          indent: indent,\n          bolded: false,\n          grayed: false\n        };\n      }\n\n      function getDefineModuleItem(node) {\n        if (node.kind !== 176\n        /* FunctionExpression */\n        && node.kind !== 177\n        /* ArrowFunction */\n        ) {\n            return undefined;\n          } // No match if this is not a call expression to an identifier named 'define'\n\n\n        if (node.parent.kind !== 171\n        /* CallExpression */\n        ) {\n            return undefined;\n          }\n\n        var callExpr = node.parent;\n\n        if (callExpr.expression.kind !== 69\n        /* Identifier */\n        || callExpr.expression.getText() !== 'define') {\n          return undefined;\n        } // Return a module of either the given text in the first argument, or of the source file path\n\n\n        var defaultName = node.getSourceFile().fileName;\n\n        if (callExpr.arguments[0].kind === 9\n        /* StringLiteral */\n        ) {\n            defaultName = callExpr.arguments[0].text;\n          }\n\n        return getNavBarItem(defaultName, ts.ScriptElementKind.moduleElement, [getNodeSpan(node.parent)]);\n      }\n\n      function getFunctionOrClassExpressionItem(node) {\n        if (node.kind !== 176\n        /* FunctionExpression */\n        && node.kind !== 177\n        /* ArrowFunction */\n        && node.kind !== 189\n        /* ClassExpression */\n        ) {\n            return undefined;\n          }\n\n        var fnExpr = node;\n        var fnName;\n\n        if (fnExpr.name && ts.getFullWidth(fnExpr.name) > 0) {\n          // The expression has an identifier, so use that as the name\n          fnName = ts.declarationNameToString(fnExpr.name);\n        } else {\n          // See if it is a var initializer. If so, use the var name.\n          if (fnExpr.parent.kind === 214\n          /* VariableDeclaration */\n          ) {\n              fnName = ts.declarationNameToString(fnExpr.parent.name);\n            } else if (fnExpr.parent.kind === 184\n          /* BinaryExpression */\n          && fnExpr.parent.operatorToken.kind === 56\n          /* EqualsToken */\n          ) {\n              fnName = fnExpr.parent.left.getText();\n\n              if (fnName.length > 20) {\n                fnName = fnName.substring(0, 17) + \"...\";\n              }\n            } else if (fnExpr.parent.kind === 248\n          /* PropertyAssignment */\n          && fnExpr.parent.name) {\n            fnName = fnExpr.parent.name.getText();\n          } else {\n            fnName = node.kind === 189\n            /* ClassExpression */\n            ? anonClassText : anonFnText;\n          }\n        }\n\n        var scriptKind = node.kind === 189\n        /* ClassExpression */\n        ? ts.ScriptElementKind.classElement : ts.ScriptElementKind.functionElement;\n        return getNavBarItem(fnName, scriptKind, [getNodeSpan(node)]);\n      }\n\n      function getNodeSpan(node) {\n        return node.kind === 251\n        /* SourceFile */\n        ? ts.createTextSpanFromBounds(node.getFullStart(), node.getEnd()) : ts.createTextSpanFromBounds(node.getStart(), node.getEnd());\n      }\n\n      function getScriptKindForElementKind(kind) {\n        switch (kind) {\n          case 214\n          /* VariableDeclaration */\n          :\n            return ts.ScriptElementKind.variableElement;\n\n          case 216\n          /* FunctionDeclaration */\n          :\n            return ts.ScriptElementKind.functionElement;\n\n          case 217\n          /* ClassDeclaration */\n          :\n            return ts.ScriptElementKind.classElement;\n\n          case 145\n          /* Constructor */\n          :\n            return ts.ScriptElementKind.constructorImplementationElement;\n\n          case 146\n          /* GetAccessor */\n          :\n            return ts.ScriptElementKind.memberGetAccessorElement;\n\n          case 147\n          /* SetAccessor */\n          :\n            return ts.ScriptElementKind.memberSetAccessorElement;\n\n          default:\n            return \"unknown\";\n        }\n      }\n\n      return sourceFileItem.childItems;\n    }\n\n    NavigationBar.getJsNavigationBarItems = getJsNavigationBarItems;\n  })(NavigationBar = ts.NavigationBar || (ts.NavigationBar = {}));\n})(ts || (ts = {}));\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  // Note(cyrusn): this enum is ordered from strongest match type to weakest match type.\n  (function (PatternMatchKind) {\n    PatternMatchKind[PatternMatchKind[\"exact\"] = 0] = \"exact\";\n    PatternMatchKind[PatternMatchKind[\"prefix\"] = 1] = \"prefix\";\n    PatternMatchKind[PatternMatchKind[\"substring\"] = 2] = \"substring\";\n    PatternMatchKind[PatternMatchKind[\"camelCase\"] = 3] = \"camelCase\";\n  })(ts.PatternMatchKind || (ts.PatternMatchKind = {}));\n\n  var PatternMatchKind = ts.PatternMatchKind;\n\n  function createPatternMatch(kind, punctuationStripped, isCaseSensitive, camelCaseWeight) {\n    return {\n      kind: kind,\n      punctuationStripped: punctuationStripped,\n      isCaseSensitive: isCaseSensitive,\n      camelCaseWeight: camelCaseWeight\n    };\n  }\n\n  function createPatternMatcher(pattern) {\n    // We'll often see the same candidate string many times when searching (For example, when\n    // we see the name of a module that is used everywhere, or the name of an overload).  As\n    // such, we cache the information we compute about the candidate for the life of this\n    // pattern matcher so we don't have to compute it multiple times.\n    var stringToWordSpans = {};\n    pattern = pattern.trim();\n    var dotSeparatedSegments = pattern.split(\".\").map(function (p) {\n      return createSegment(p.trim());\n    });\n    var invalidPattern = dotSeparatedSegments.length === 0 || ts.forEach(dotSeparatedSegments, segmentIsInvalid);\n    return {\n      getMatches: getMatches,\n      getMatchesForLastSegmentOfPattern: getMatchesForLastSegmentOfPattern,\n      patternContainsDots: dotSeparatedSegments.length > 1\n    }; // Quick checks so we can bail out when asked to match a candidate.\n\n    function skipMatch(candidate) {\n      return invalidPattern || !candidate;\n    }\n\n    function getMatchesForLastSegmentOfPattern(candidate) {\n      if (skipMatch(candidate)) {\n        return undefined;\n      }\n\n      return matchSegment(candidate, ts.lastOrUndefined(dotSeparatedSegments));\n    }\n\n    function getMatches(candidateContainers, candidate) {\n      if (skipMatch(candidate)) {\n        return undefined;\n      } // First, check that the last part of the dot separated pattern matches the name of the\n      // candidate.  If not, then there's no point in proceeding and doing the more\n      // expensive work.\n\n\n      var candidateMatch = matchSegment(candidate, ts.lastOrUndefined(dotSeparatedSegments));\n\n      if (!candidateMatch) {\n        return undefined;\n      }\n\n      candidateContainers = candidateContainers || []; // -1 because the last part was checked against the name, and only the rest\n      // of the parts are checked against the container.\n\n      if (dotSeparatedSegments.length - 1 > candidateContainers.length) {\n        // There weren't enough container parts to match against the pattern parts.\n        // So this definitely doesn't match.\n        return undefined;\n      } // So far so good.  Now break up the container for the candidate and check if all\n      // the dotted parts match up correctly.\n\n\n      var totalMatch = candidateMatch;\n\n      for (var i = dotSeparatedSegments.length - 2, j = candidateContainers.length - 1; i >= 0; i -= 1, j -= 1) {\n        var segment = dotSeparatedSegments[i];\n        var containerName = candidateContainers[j];\n        var containerMatch = matchSegment(containerName, segment);\n\n        if (!containerMatch) {\n          // This container didn't match the pattern piece.  So there's no match at all.\n          return undefined;\n        }\n\n        ts.addRange(totalMatch, containerMatch);\n      } // Success, this symbol's full name matched against the dotted name the user was asking\n      // about.\n\n\n      return totalMatch;\n    }\n\n    function getWordSpans(word) {\n      if (!ts.hasProperty(stringToWordSpans, word)) {\n        stringToWordSpans[word] = breakIntoWordSpans(word);\n      }\n\n      return stringToWordSpans[word];\n    }\n\n    function matchTextChunk(candidate, chunk, punctuationStripped) {\n      var index = indexOfIgnoringCase(candidate, chunk.textLowerCase);\n\n      if (index === 0) {\n        if (chunk.text.length === candidate.length) {\n          // a) Check if the part matches the candidate entirely, in an case insensitive or\n          //    sensitive manner.  If it does, return that there was an exact match.\n          return createPatternMatch(PatternMatchKind.exact, punctuationStripped,\n          /*isCaseSensitive:*/\n          candidate === chunk.text);\n        } else {\n          // b) Check if the part is a prefix of the candidate, in a case insensitive or sensitive\n          //    manner.  If it does, return that there was a prefix match.\n          return createPatternMatch(PatternMatchKind.prefix, punctuationStripped,\n          /*isCaseSensitive:*/\n          startsWith(candidate, chunk.text));\n        }\n      }\n\n      var isLowercase = chunk.isLowerCase;\n\n      if (isLowercase) {\n        if (index > 0) {\n          // c) If the part is entirely lowercase, then check if it is contained anywhere in the\n          //    candidate in a case insensitive manner.  If so, return that there was a substring\n          //    match.\n          //\n          //    Note: We only have a substring match if the lowercase part is prefix match of some\n          //    word part. That way we don't match something like 'Class' when the user types 'a'.\n          //    But we would match 'FooAttribute' (since 'Attribute' starts with 'a').\n          var wordSpans = getWordSpans(candidate);\n\n          for (var _i = 0, wordSpans_1 = wordSpans; _i < wordSpans_1.length; _i++) {\n            var span = wordSpans_1[_i];\n\n            if (partStartsWith(candidate, span, chunk.text,\n            /*ignoreCase:*/\n            true)) {\n              return createPatternMatch(PatternMatchKind.substring, punctuationStripped,\n              /*isCaseSensitive:*/\n              partStartsWith(candidate, span, chunk.text,\n              /*ignoreCase:*/\n              false));\n            }\n          }\n        }\n      } else {\n        // d) If the part was not entirely lowercase, then check if it is contained in the\n        //    candidate in a case *sensitive* manner. If so, return that there was a substring\n        //    match.\n        if (candidate.indexOf(chunk.text) > 0) {\n          return createPatternMatch(PatternMatchKind.substring, punctuationStripped,\n          /*isCaseSensitive:*/\n          true);\n        }\n      }\n\n      if (!isLowercase) {\n        // e) If the part was not entirely lowercase, then attempt a camel cased match as well.\n        if (chunk.characterSpans.length > 0) {\n          var candidateParts = getWordSpans(candidate);\n          var camelCaseWeight = tryCamelCaseMatch(candidate, candidateParts, chunk,\n          /*ignoreCase:*/\n          false);\n\n          if (camelCaseWeight !== undefined) {\n            return createPatternMatch(PatternMatchKind.camelCase, punctuationStripped,\n            /*isCaseSensitive:*/\n            true,\n            /*camelCaseWeight:*/\n            camelCaseWeight);\n          }\n\n          camelCaseWeight = tryCamelCaseMatch(candidate, candidateParts, chunk,\n          /*ignoreCase:*/\n          true);\n\n          if (camelCaseWeight !== undefined) {\n            return createPatternMatch(PatternMatchKind.camelCase, punctuationStripped,\n            /*isCaseSensitive:*/\n            false,\n            /*camelCaseWeight:*/\n            camelCaseWeight);\n          }\n        }\n      }\n\n      if (isLowercase) {\n        // f) Is the pattern a substring of the candidate starting on one of the candidate's word boundaries?\n        // We could check every character boundary start of the candidate for the pattern. However, that's\n        // an m * n operation in the wost case. Instead, find the first instance of the pattern\n        // substring, and see if it starts on a capital letter. It seems unlikely that the user will try to\n        // filter the list based on a substring that starts on a capital letter and also with a lowercase one.\n        // (Pattern: fogbar, Candidate: quuxfogbarFogBar).\n        if (chunk.text.length < candidate.length) {\n          if (index > 0 && isUpperCaseLetter(candidate.charCodeAt(index))) {\n            return createPatternMatch(PatternMatchKind.substring, punctuationStripped,\n            /*isCaseSensitive:*/\n            false);\n          }\n        }\n      }\n\n      return undefined;\n    }\n\n    function containsSpaceOrAsterisk(text) {\n      for (var i = 0; i < text.length; i++) {\n        var ch = text.charCodeAt(i);\n\n        if (ch === 32\n        /* space */\n        || ch === 42\n        /* asterisk */\n        ) {\n            return true;\n          }\n      }\n\n      return false;\n    }\n\n    function matchSegment(candidate, segment) {\n      // First check if the segment matches as is.  This is also useful if the segment contains\n      // characters we would normally strip when splitting into parts that we also may want to\n      // match in the candidate.  For example if the segment is \"@int\" and the candidate is\n      // \"@int\", then that will show up as an exact match here.\n      //\n      // Note: if the segment contains a space or an asterisk then we must assume that it's a\n      // multi-word segment.\n      if (!containsSpaceOrAsterisk(segment.totalTextChunk.text)) {\n        var match = matchTextChunk(candidate, segment.totalTextChunk,\n        /*punctuationStripped:*/\n        false);\n\n        if (match) {\n          return [match];\n        }\n      } // The logic for pattern matching is now as follows:\n      //\n      // 1) Break the segment passed in into words.  Breaking is rather simple and a\n      //    good way to think about it that if gives you all the individual alphanumeric words\n      //    of the pattern.\n      //\n      // 2) For each word try to match the word against the candidate value.\n      //\n      // 3) Matching is as follows:\n      //\n      //   a) Check if the word matches the candidate entirely, in an case insensitive or\n      //    sensitive manner.  If it does, return that there was an exact match.\n      //\n      //   b) Check if the word is a prefix of the candidate, in a case insensitive or\n      //      sensitive manner.  If it does, return that there was a prefix match.\n      //\n      //   c) If the word is entirely lowercase, then check if it is contained anywhere in the\n      //      candidate in a case insensitive manner.  If so, return that there was a substring\n      //      match.\n      //\n      //      Note: We only have a substring match if the lowercase part is prefix match of\n      //      some word part. That way we don't match something like 'Class' when the user\n      //      types 'a'. But we would match 'FooAttribute' (since 'Attribute' starts with\n      //      'a').\n      //\n      //   d) If the word was not entirely lowercase, then check if it is contained in the\n      //      candidate in a case *sensitive* manner. If so, return that there was a substring\n      //      match.\n      //\n      //   e) If the word was not entirely lowercase, then attempt a camel cased match as\n      //      well.\n      //\n      //   f) The word is all lower case. Is it a case insensitive substring of the candidate starting\n      //      on a part boundary of the candidate?\n      //\n      // Only if all words have some sort of match is the pattern considered matched.\n\n\n      var subWordTextChunks = segment.subWordTextChunks;\n      var matches = undefined;\n\n      for (var _i = 0, subWordTextChunks_1 = subWordTextChunks; _i < subWordTextChunks_1.length; _i++) {\n        var subWordTextChunk = subWordTextChunks_1[_i]; // Try to match the candidate with this word\n\n        var result = matchTextChunk(candidate, subWordTextChunk,\n        /*punctuationStripped:*/\n        true);\n\n        if (!result) {\n          return undefined;\n        }\n\n        matches = matches || [];\n        matches.push(result);\n      }\n\n      return matches;\n    }\n\n    function partStartsWith(candidate, candidateSpan, pattern, ignoreCase, patternSpan) {\n      var patternPartStart = patternSpan ? patternSpan.start : 0;\n      var patternPartLength = patternSpan ? patternSpan.length : pattern.length;\n\n      if (patternPartLength > candidateSpan.length) {\n        // Pattern part is longer than the candidate part. There can never be a match.\n        return false;\n      }\n\n      if (ignoreCase) {\n        for (var i = 0; i < patternPartLength; i++) {\n          var ch1 = pattern.charCodeAt(patternPartStart + i);\n          var ch2 = candidate.charCodeAt(candidateSpan.start + i);\n\n          if (toLowerCase(ch1) !== toLowerCase(ch2)) {\n            return false;\n          }\n        }\n      } else {\n        for (var i = 0; i < patternPartLength; i++) {\n          var ch1 = pattern.charCodeAt(patternPartStart + i);\n          var ch2 = candidate.charCodeAt(candidateSpan.start + i);\n\n          if (ch1 !== ch2) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    }\n\n    function tryCamelCaseMatch(candidate, candidateParts, chunk, ignoreCase) {\n      var chunkCharacterSpans = chunk.characterSpans; // Note: we may have more pattern parts than candidate parts.  This is because multiple\n      // pattern parts may match a candidate part.  For example \"SiUI\" against \"SimpleUI\".\n      // We'll have 3 pattern parts Si/U/I against two candidate parts Simple/UI.  However, U\n      // and I will both match in UI.\n\n      var currentCandidate = 0;\n      var currentChunkSpan = 0;\n      var firstMatch = undefined;\n      var contiguous = undefined;\n\n      while (true) {\n        // Let's consider our termination cases\n        if (currentChunkSpan === chunkCharacterSpans.length) {\n          // We did match! We shall assign a weight to this\n          var weight = 0; // Was this contiguous?\n\n          if (contiguous) {\n            weight += 1;\n          } // Did we start at the beginning of the candidate?\n\n\n          if (firstMatch === 0) {\n            weight += 2;\n          }\n\n          return weight;\n        } else if (currentCandidate === candidateParts.length) {\n          // No match, since we still have more of the pattern to hit\n          return undefined;\n        }\n\n        var candidatePart = candidateParts[currentCandidate];\n        var gotOneMatchThisCandidate = false; // Consider the case of matching SiUI against SimpleUIElement. The candidate parts\n        // will be Simple/UI/Element, and the pattern parts will be Si/U/I.  We'll match 'Si'\n        // against 'Simple' first.  Then we'll match 'U' against 'UI'. However, we want to\n        // still keep matching pattern parts against that candidate part.\n\n        for (; currentChunkSpan < chunkCharacterSpans.length; currentChunkSpan++) {\n          var chunkCharacterSpan = chunkCharacterSpans[currentChunkSpan];\n\n          if (gotOneMatchThisCandidate) {\n            // We've already gotten one pattern part match in this candidate.  We will\n            // only continue trying to consumer pattern parts if the last part and this\n            // part are both upper case.\n            if (!isUpperCaseLetter(chunk.text.charCodeAt(chunkCharacterSpans[currentChunkSpan - 1].start)) || !isUpperCaseLetter(chunk.text.charCodeAt(chunkCharacterSpans[currentChunkSpan].start))) {\n              break;\n            }\n          }\n\n          if (!partStartsWith(candidate, candidatePart, chunk.text, ignoreCase, chunkCharacterSpan)) {\n            break;\n          }\n\n          gotOneMatchThisCandidate = true;\n          firstMatch = firstMatch === undefined ? currentCandidate : firstMatch; // If we were contiguous, then keep that value.  If we weren't, then keep that\n          // value.  If we don't know, then set the value to 'true' as an initial match is\n          // obviously contiguous.\n\n          contiguous = contiguous === undefined ? true : contiguous;\n          candidatePart = ts.createTextSpan(candidatePart.start + chunkCharacterSpan.length, candidatePart.length - chunkCharacterSpan.length);\n        } // Check if we matched anything at all.  If we didn't, then we need to unset the\n        // contiguous bit if we currently had it set.\n        // If we haven't set the bit yet, then that means we haven't matched anything so\n        // far, and we don't want to change that.\n\n\n        if (!gotOneMatchThisCandidate && contiguous !== undefined) {\n          contiguous = false;\n        } // Move onto the next candidate.\n\n\n        currentCandidate++;\n      }\n    }\n  }\n\n  ts.createPatternMatcher = createPatternMatcher;\n\n  function createSegment(text) {\n    return {\n      totalTextChunk: createTextChunk(text),\n      subWordTextChunks: breakPatternIntoTextChunks(text)\n    };\n  } // A segment is considered invalid if we couldn't find any words in it.\n\n\n  function segmentIsInvalid(segment) {\n    return segment.subWordTextChunks.length === 0;\n  }\n\n  function isUpperCaseLetter(ch) {\n    // Fast check for the ascii range.\n    if (ch >= 65\n    /* A */\n    && ch <= 90\n    /* Z */\n    ) {\n        return true;\n      }\n\n    if (ch < 127\n    /* maxAsciiCharacter */\n    || !ts.isUnicodeIdentifierStart(ch, 2\n    /* Latest */\n    )) {\n      return false;\n    } // TODO: find a way to determine this for any unicode characters in a\n    // non-allocating manner.\n\n\n    var str = String.fromCharCode(ch);\n    return str === str.toUpperCase();\n  }\n\n  function isLowerCaseLetter(ch) {\n    // Fast check for the ascii range.\n    if (ch >= 97\n    /* a */\n    && ch <= 122\n    /* z */\n    ) {\n        return true;\n      }\n\n    if (ch < 127\n    /* maxAsciiCharacter */\n    || !ts.isUnicodeIdentifierStart(ch, 2\n    /* Latest */\n    )) {\n      return false;\n    } // TODO: find a way to determine this for any unicode characters in a\n    // non-allocating manner.\n\n\n    var str = String.fromCharCode(ch);\n    return str === str.toLowerCase();\n  }\n\n  function startsWith(string, search) {\n    for (var i = 0, n = search.length; i < n; i++) {\n      if (string.charCodeAt(i) !== search.charCodeAt(i)) {\n        return false;\n      }\n    }\n\n    return true;\n  } // Assumes 'value' is already lowercase.\n\n\n  function indexOfIgnoringCase(string, value) {\n    for (var i = 0, n = string.length - value.length; i <= n; i++) {\n      if (startsWithIgnoringCase(string, value, i)) {\n        return i;\n      }\n    }\n\n    return -1;\n  } // Assumes 'value' is already lowercase.\n\n\n  function startsWithIgnoringCase(string, value, start) {\n    for (var i = 0, n = value.length; i < n; i++) {\n      var ch1 = toLowerCase(string.charCodeAt(i + start));\n      var ch2 = value.charCodeAt(i);\n\n      if (ch1 !== ch2) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  function toLowerCase(ch) {\n    // Fast convert for the ascii range.\n    if (ch >= 65\n    /* A */\n    && ch <= 90\n    /* Z */\n    ) {\n        return 97\n        /* a */\n        + (ch - 65\n        /* A */\n        );\n      }\n\n    if (ch < 127\n    /* maxAsciiCharacter */\n    ) {\n        return ch;\n      } // TODO: find a way to compute this for any unicode characters in a\n    // non-allocating manner.\n\n\n    return String.fromCharCode(ch).toLowerCase().charCodeAt(0);\n  }\n\n  function isDigit(ch) {\n    // TODO(cyrusn): Find a way to support this for unicode digits.\n    return ch >= 48\n    /* _0 */\n    && ch <= 57\n    /* _9 */\n    ;\n  }\n\n  function isWordChar(ch) {\n    return isUpperCaseLetter(ch) || isLowerCaseLetter(ch) || isDigit(ch) || ch === 95\n    /* _ */\n    || ch === 36\n    /* $ */\n    ;\n  }\n\n  function breakPatternIntoTextChunks(pattern) {\n    var result = [];\n    var wordStart = 0;\n    var wordLength = 0;\n\n    for (var i = 0; i < pattern.length; i++) {\n      var ch = pattern.charCodeAt(i);\n\n      if (isWordChar(ch)) {\n        if (wordLength === 0) {\n          wordStart = i;\n        }\n\n        wordLength++;\n      } else {\n        if (wordLength > 0) {\n          result.push(createTextChunk(pattern.substr(wordStart, wordLength)));\n          wordLength = 0;\n        }\n      }\n    }\n\n    if (wordLength > 0) {\n      result.push(createTextChunk(pattern.substr(wordStart, wordLength)));\n    }\n\n    return result;\n  }\n\n  function createTextChunk(text) {\n    var textLowerCase = text.toLowerCase();\n    return {\n      text: text,\n      textLowerCase: textLowerCase,\n      isLowerCase: text === textLowerCase,\n      characterSpans: breakIntoCharacterSpans(text)\n    };\n  }\n  /* @internal */\n\n\n  function breakIntoCharacterSpans(identifier) {\n    return breakIntoSpans(identifier,\n    /*word:*/\n    false);\n  }\n\n  ts.breakIntoCharacterSpans = breakIntoCharacterSpans;\n  /* @internal */\n\n  function breakIntoWordSpans(identifier) {\n    return breakIntoSpans(identifier,\n    /*word:*/\n    true);\n  }\n\n  ts.breakIntoWordSpans = breakIntoWordSpans;\n\n  function breakIntoSpans(identifier, word) {\n    var result = [];\n    var wordStart = 0;\n\n    for (var i = 1, n = identifier.length; i < n; i++) {\n      var lastIsDigit = isDigit(identifier.charCodeAt(i - 1));\n      var currentIsDigit = isDigit(identifier.charCodeAt(i));\n      var hasTransitionFromLowerToUpper = transitionFromLowerToUpper(identifier, word, i);\n      var hasTransitionFromUpperToLower = transitionFromUpperToLower(identifier, word, i, wordStart);\n\n      if (charIsPunctuation(identifier.charCodeAt(i - 1)) || charIsPunctuation(identifier.charCodeAt(i)) || lastIsDigit !== currentIsDigit || hasTransitionFromLowerToUpper || hasTransitionFromUpperToLower) {\n        if (!isAllPunctuation(identifier, wordStart, i)) {\n          result.push(ts.createTextSpan(wordStart, i - wordStart));\n        }\n\n        wordStart = i;\n      }\n    }\n\n    if (!isAllPunctuation(identifier, wordStart, identifier.length)) {\n      result.push(ts.createTextSpan(wordStart, identifier.length - wordStart));\n    }\n\n    return result;\n  }\n\n  function charIsPunctuation(ch) {\n    switch (ch) {\n      case 33\n      /* exclamation */\n      :\n      case 34\n      /* doubleQuote */\n      :\n      case 35\n      /* hash */\n      :\n      case 37\n      /* percent */\n      :\n      case 38\n      /* ampersand */\n      :\n      case 39\n      /* singleQuote */\n      :\n      case 40\n      /* openParen */\n      :\n      case 41\n      /* closeParen */\n      :\n      case 42\n      /* asterisk */\n      :\n      case 44\n      /* comma */\n      :\n      case 45\n      /* minus */\n      :\n      case 46\n      /* dot */\n      :\n      case 47\n      /* slash */\n      :\n      case 58\n      /* colon */\n      :\n      case 59\n      /* semicolon */\n      :\n      case 63\n      /* question */\n      :\n      case 64\n      /* at */\n      :\n      case 91\n      /* openBracket */\n      :\n      case 92\n      /* backslash */\n      :\n      case 93\n      /* closeBracket */\n      :\n      case 95\n      /* _ */\n      :\n      case 123\n      /* openBrace */\n      :\n      case 125\n      /* closeBrace */\n      :\n        return true;\n    }\n\n    return false;\n  }\n\n  function isAllPunctuation(identifier, start, end) {\n    for (var i = start; i < end; i++) {\n      var ch = identifier.charCodeAt(i); // We don't consider _ or $ as punctuation as there may be things with that name.\n\n      if (!charIsPunctuation(ch) || ch === 95\n      /* _ */\n      || ch === 36\n      /* $ */\n      ) {\n          return false;\n        }\n    }\n\n    return true;\n  }\n\n  function transitionFromUpperToLower(identifier, word, index, wordStart) {\n    if (word) {\n      // Cases this supports:\n      // 1) IDisposable -> I, Disposable\n      // 2) UIElement -> UI, Element\n      // 3) HTMLDocument -> HTML, Document\n      //\n      // etc.\n      if (index !== wordStart && index + 1 < identifier.length) {\n        var currentIsUpper = isUpperCaseLetter(identifier.charCodeAt(index));\n        var nextIsLower = isLowerCaseLetter(identifier.charCodeAt(index + 1));\n\n        if (currentIsUpper && nextIsLower) {\n          // We have a transition from an upper to a lower letter here.  But we only\n          // want to break if all the letters that preceded are uppercase.  i.e. if we\n          // have \"Foo\" we don't want to break that into \"F, oo\".  But if we have\n          // \"IFoo\" or \"UIFoo\", then we want to break that into \"I, Foo\" and \"UI,\n          // Foo\".  i.e. the last uppercase letter belongs to the lowercase letters\n          // that follows.  Note: this will make the following not split properly:\n          // \"HELLOthere\".  However, these sorts of names do not show up in .Net\n          // programs.\n          for (var i = wordStart; i < index; i++) {\n            if (!isUpperCaseLetter(identifier.charCodeAt(i))) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  function transitionFromLowerToUpper(identifier, word, index) {\n    var lastIsUpper = isUpperCaseLetter(identifier.charCodeAt(index - 1));\n    var currentIsUpper = isUpperCaseLetter(identifier.charCodeAt(index)); // See if the casing indicates we're starting a new word. Note: if we're breaking on\n    // words, then just seeing an upper case character isn't enough.  Instead, it has to\n    // be uppercase and the previous character can't be uppercase.\n    //\n    // For example, breaking \"AddMetadata\" on words would make: Add Metadata\n    //\n    // on characters would be: A dd M etadata\n    //\n    // Break \"AM\" on words would be: AM\n    //\n    // on characters would be: A M\n    //\n    // We break the search string on characters.  But we break the symbol name on words.\n\n    var transition = word ? currentIsUpper && !lastIsUpper : currentIsUpper;\n    return transition;\n  }\n})(ts || (ts = {})); ///<reference path='services.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var SignatureHelp;\n\n  (function (SignatureHelp) {\n    // A partially written generic type expression is not guaranteed to have the correct syntax tree. the expression could be parsed as less than/greater than expression or a comma expression\n    // or some other combination depending on what the user has typed so far. For the purposes of signature help we need to consider any location after \"<\" as a possible generic type reference. \n    // To do this, the method will back parse the expression starting at the position required. it will try to parse the current expression as a generic type expression, if it did succeed it \n    // will return the generic identifier that started the expression (e.g. \"foo\" in \"foo<any, |\"). It is then up to the caller to ensure that this is a valid generic expression through \n    // looking up the type. The method will also keep track of the parameter index inside the expression.\n    //public static isInPartiallyWrittenTypeArgumentList(syntaxTree: TypeScript.SyntaxTree, position: number): any {\n    //    let token = Syntax.findTokenOnLeft(syntaxTree.sourceUnit(), position, /*includeSkippedTokens*/ true);\n    //    if (token && TypeScript.Syntax.hasAncestorOfKind(token, TypeScript.SyntaxKind.TypeParameterList)) {\n    //        // We are in the wrong generic list. bail out\n    //        return null;\n    //    }\n    //    let stack = 0;\n    //    let argumentIndex = 0;\n    //    whileLoop:\n    //    while (token) {\n    //        switch (token.kind()) {\n    //            case TypeScript.SyntaxKind.LessThanToken:\n    //                if (stack === 0) {\n    //                    // Found the beginning of the generic argument expression\n    //                    let lessThanToken = token;\n    //                    token = previousToken(token, /*includeSkippedTokens*/ true);\n    //                    if (!token || token.kind() !== TypeScript.SyntaxKind.IdentifierName) {\n    //                        break whileLoop;\n    //                    }\n    //                    // Found the name, return the data\n    //                    return {\n    //                        genericIdentifer: token,\n    //                        lessThanToken: lessThanToken,\n    //                        argumentIndex: argumentIndex\n    //                    };\n    //                }\n    //                else if (stack < 0) {\n    //                    // Seen one too many less than tokens, bail out\n    //                    break whileLoop;\n    //                }\n    //                else {\n    //                    stack--;\n    //                }\n    //                break;\n    //            case TypeScript.SyntaxKind.GreaterThanGreaterThanGreaterThanToken:\n    //                stack++;\n    //            // Intentaion fall through\n    //            case TypeScript.SyntaxKind.GreaterThanToken:\n    //                stack++;\n    //                break;\n    //            case TypeScript.SyntaxKind.CommaToken:\n    //                if (stack == 0) {\n    //                    argumentIndex++;\n    //                }\n    //                break;\n    //            case TypeScript.SyntaxKind.CloseBraceToken:\n    //                // This can be object type, skip untill we find the matching open brace token\n    //                let unmatchedOpenBraceTokens = 0;\n    //                // Skip untill the matching open brace token\n    //                token = SignatureInfoHelpers.moveBackUpTillMatchingTokenKind(token, TypeScript.SyntaxKind.CloseBraceToken, TypeScript.SyntaxKind.OpenBraceToken);\n    //                if (!token) {\n    //                    // No matching token was found. bail out\n    //                    break whileLoop;\n    //                }\n    //                break;\n    //            case TypeScript.SyntaxKind.EqualsGreaterThanToken:\n    //                // This can be a function type or a constructor type. In either case, we want to skip the function defintion\n    //                token = previousToken(token, /*includeSkippedTokens*/ true);\n    //                if (token && token.kind() === TypeScript.SyntaxKind.CloseParenToken) {\n    //                    // Skip untill the matching open paren token\n    //                    token = SignatureInfoHelpers.moveBackUpTillMatchingTokenKind(token, TypeScript.SyntaxKind.CloseParenToken, TypeScript.SyntaxKind.OpenParenToken);\n    //                    if (token && token.kind() === TypeScript.SyntaxKind.GreaterThanToken) {\n    //                        // Another generic type argument list, skip it\\\n    //                        token = SignatureInfoHelpers.moveBackUpTillMatchingTokenKind(token, TypeScript.SyntaxKind.GreaterThanToken, TypeScript.SyntaxKind.LessThanToken);\n    //                    }\n    //                    if (token && token.kind() === TypeScript.SyntaxKind.NewKeyword) {\n    //                        // In case this was a constructor type, skip the new keyword\n    //                        token = previousToken(token, /*includeSkippedTokens*/ true);\n    //                    }\n    //                    if (!token) {\n    //                        // No matching token was found. bail out\n    //                        break whileLoop;\n    //                    }\n    //                }\n    //                else {\n    //                    // This is not a funtion type. exit the main loop\n    //                    break whileLoop;\n    //                }\n    //                break;\n    //            case TypeScript.SyntaxKind.IdentifierName:\n    //            case TypeScript.SyntaxKind.AnyKeyword:\n    //            case TypeScript.SyntaxKind.NumberKeyword:\n    //            case TypeScript.SyntaxKind.StringKeyword:\n    //            case TypeScript.SyntaxKind.VoidKeyword:\n    //            case TypeScript.SyntaxKind.BooleanKeyword:\n    //            case TypeScript.SyntaxKind.DotToken:\n    //            case TypeScript.SyntaxKind.OpenBracketToken:\n    //            case TypeScript.SyntaxKind.CloseBracketToken:\n    //                // Valid tokens in a type name. Skip.\n    //                break;\n    //            default:\n    //                break whileLoop;\n    //        }\n    //        token = previousToken(token, /*includeSkippedTokens*/ true);\n    //    }\n    //    return null;\n    //}\n    //private static moveBackUpTillMatchingTokenKind(token: TypeScript.ISyntaxToken, tokenKind: TypeScript.SyntaxKind, matchingTokenKind: TypeScript.SyntaxKind): TypeScript.ISyntaxToken {\n    //    if (!token || token.kind() !== tokenKind) {\n    //        throw TypeScript.Errors.invalidOperation();\n    //    }\n    //    // Skip the current token\n    //    token = previousToken(token, /*includeSkippedTokens*/ true);\n    //    let stack = 0;\n    //    while (token) {\n    //        if (token.kind() === matchingTokenKind) {\n    //            if (stack === 0) {\n    //                // Found the matching token, return\n    //                return token;\n    //            }\n    //            else if (stack < 0) {\n    //                // tokens overlapped.. bail out.\n    //                break;\n    //            }\n    //            else {\n    //                stack--;\n    //            }\n    //        }\n    //        else if (token.kind() === tokenKind) {\n    //            stack++;\n    //        }\n    //        // Move back\n    //        token = previousToken(token, /*includeSkippedTokens*/ true);\n    //    }\n    //    // Did not find matching token\n    //    return null;\n    //}\n    var emptyArray = [];\n    var ArgumentListKind;\n\n    (function (ArgumentListKind) {\n      ArgumentListKind[ArgumentListKind[\"TypeArguments\"] = 0] = \"TypeArguments\";\n      ArgumentListKind[ArgumentListKind[\"CallArguments\"] = 1] = \"CallArguments\";\n      ArgumentListKind[ArgumentListKind[\"TaggedTemplateArguments\"] = 2] = \"TaggedTemplateArguments\";\n    })(ArgumentListKind || (ArgumentListKind = {}));\n\n    function getSignatureHelpItems(program, sourceFile, position, cancellationToken) {\n      var typeChecker = program.getTypeChecker(); // Decide whether to show signature help\n\n      var startingToken = ts.findTokenOnLeftOfPosition(sourceFile, position);\n\n      if (!startingToken) {\n        // We are at the beginning of the file\n        return undefined;\n      }\n\n      var argumentInfo = getContainingArgumentInfo(startingToken);\n      cancellationToken.throwIfCancellationRequested(); // Semantic filtering of signature help\n\n      if (!argumentInfo) {\n        return undefined;\n      }\n\n      var call = argumentInfo.invocation;\n      var candidates = [];\n      var resolvedSignature = typeChecker.getResolvedSignature(call, candidates);\n      cancellationToken.throwIfCancellationRequested();\n\n      if (!candidates.length) {\n        // We didn't have any sig help items produced by the TS compiler.  If this is a JS \n        // file, then see if we can figure out anything better.\n        if (ts.isSourceFileJavaScript(sourceFile)) {\n          return createJavaScriptSignatureHelpItems(argumentInfo);\n        }\n\n        return undefined;\n      }\n\n      return createSignatureHelpItems(candidates, resolvedSignature, argumentInfo);\n\n      function createJavaScriptSignatureHelpItems(argumentInfo) {\n        if (argumentInfo.invocation.kind !== 171\n        /* CallExpression */\n        ) {\n            return undefined;\n          } // See if we can find some symbol with the call expression name that has call signatures.\n\n\n        var callExpression = argumentInfo.invocation;\n        var expression = callExpression.expression;\n        var name = expression.kind === 69\n        /* Identifier */\n        ? expression : expression.kind === 169\n        /* PropertyAccessExpression */\n        ? expression.name : undefined;\n\n        if (!name || !name.text) {\n          return undefined;\n        }\n\n        var typeChecker = program.getTypeChecker();\n\n        for (var _i = 0, _a = program.getSourceFiles(); _i < _a.length; _i++) {\n          var sourceFile_1 = _a[_i];\n          var nameToDeclarations = sourceFile_1.getNamedDeclarations();\n          var declarations = ts.getProperty(nameToDeclarations, name.text);\n\n          if (declarations) {\n            for (var _b = 0, declarations_7 = declarations; _b < declarations_7.length; _b++) {\n              var declaration = declarations_7[_b];\n              var symbol = declaration.symbol;\n\n              if (symbol) {\n                var type = typeChecker.getTypeOfSymbolAtLocation(symbol, declaration);\n\n                if (type) {\n                  var callSignatures = type.getCallSignatures();\n\n                  if (callSignatures && callSignatures.length) {\n                    return createSignatureHelpItems(callSignatures, callSignatures[0], argumentInfo);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n      /**\n       * Returns relevant information for the argument list and the current argument if we are\n       * in the argument of an invocation; returns undefined otherwise.\n       */\n\n\n      function getImmediatelyContainingArgumentInfo(node) {\n        if (node.parent.kind === 171\n        /* CallExpression */\n        || node.parent.kind === 172\n        /* NewExpression */\n        ) {\n            var callExpression = node.parent; // There are 3 cases to handle:\n            //   1. The token introduces a list, and should begin a sig help session\n            //   2. The token is either not associated with a list, or ends a list, so the session should end\n            //   3. The token is buried inside a list, and should give sig help\n            //\n            // The following are examples of each:\n            //\n            //    Case 1:\n            //          foo<#T, U>(#a, b)    -> The token introduces a list, and should begin a sig help session\n            //    Case 2:\n            //          fo#o<T, U>#(a, b)#   -> The token is either not associated with a list, or ends a list, so the session should end\n            //    Case 3:\n            //          foo<T#, U#>(a#, #b#) -> The token is buried inside a list, and should give sig help\n            // Find out if 'node' is an argument, a type argument, or neither\n\n            if (node.kind === 25\n            /* LessThanToken */\n            || node.kind === 17\n            /* OpenParenToken */\n            ) {\n                // Find the list that starts right *after* the < or ( token.\n                // If the user has just opened a list, consider this item 0.\n                var list = getChildListThatStartsWithOpenerToken(callExpression, node, sourceFile);\n                var isTypeArgList = callExpression.typeArguments && callExpression.typeArguments.pos === list.pos;\n                ts.Debug.assert(list !== undefined);\n                return {\n                  kind: isTypeArgList ? 0\n                  /* TypeArguments */\n                  : 1\n                  /* CallArguments */\n                  ,\n                  invocation: callExpression,\n                  argumentsSpan: getApplicableSpanForArguments(list),\n                  argumentIndex: 0,\n                  argumentCount: getArgumentCount(list)\n                };\n              } // findListItemInfo can return undefined if we are not in parent's argument list\n            // or type argument list. This includes cases where the cursor is:\n            //   - To the right of the closing paren, non-substitution template, or template tail.\n            //   - Between the type arguments and the arguments (greater than token)\n            //   - On the target of the call (parent.func)\n            //   - On the 'new' keyword in a 'new' expression\n\n\n            var listItemInfo = ts.findListItemInfo(node);\n\n            if (listItemInfo) {\n              var list = listItemInfo.list;\n              var isTypeArgList = callExpression.typeArguments && callExpression.typeArguments.pos === list.pos;\n              var argumentIndex = getArgumentIndex(list, node);\n              var argumentCount = getArgumentCount(list);\n              ts.Debug.assert(argumentIndex === 0 || argumentIndex < argumentCount, \"argumentCount < argumentIndex, \" + argumentCount + \" < \" + argumentIndex);\n              return {\n                kind: isTypeArgList ? 0\n                /* TypeArguments */\n                : 1\n                /* CallArguments */\n                ,\n                invocation: callExpression,\n                argumentsSpan: getApplicableSpanForArguments(list),\n                argumentIndex: argumentIndex,\n                argumentCount: argumentCount\n              };\n            }\n          } else if (node.kind === 11\n        /* NoSubstitutionTemplateLiteral */\n        && node.parent.kind === 173\n        /* TaggedTemplateExpression */\n        ) {\n            // Check if we're actually inside the template;\n            // otherwise we'll fall out and return undefined.\n            if (ts.isInsideTemplateLiteral(node, position)) {\n              return getArgumentListInfoForTemplate(node.parent,\n              /*argumentIndex*/\n              0);\n            }\n          } else if (node.kind === 12\n        /* TemplateHead */\n        && node.parent.parent.kind === 173\n        /* TaggedTemplateExpression */\n        ) {\n            var templateExpression = node.parent;\n            var tagExpression = templateExpression.parent;\n            ts.Debug.assert(templateExpression.kind === 186\n            /* TemplateExpression */\n            );\n            var argumentIndex = ts.isInsideTemplateLiteral(node, position) ? 0 : 1;\n            return getArgumentListInfoForTemplate(tagExpression, argumentIndex);\n          } else if (node.parent.kind === 193\n        /* TemplateSpan */\n        && node.parent.parent.parent.kind === 173\n        /* TaggedTemplateExpression */\n        ) {\n            var templateSpan = node.parent;\n            var templateExpression = templateSpan.parent;\n            var tagExpression = templateExpression.parent;\n            ts.Debug.assert(templateExpression.kind === 186\n            /* TemplateExpression */\n            ); // If we're just after a template tail, don't show signature help.\n\n            if (node.kind === 14\n            /* TemplateTail */\n            && !ts.isInsideTemplateLiteral(node, position)) {\n              return undefined;\n            }\n\n            var spanIndex = templateExpression.templateSpans.indexOf(templateSpan);\n            var argumentIndex = getArgumentIndexForTemplatePiece(spanIndex, node);\n            return getArgumentListInfoForTemplate(tagExpression, argumentIndex);\n          }\n\n        return undefined;\n      }\n\n      function getArgumentIndex(argumentsList, node) {\n        // The list we got back can include commas.  In the presence of errors it may \n        // also just have nodes without commas.  For example \"Foo(a b c)\" will have 3 \n        // args without commas.   We want to find what index we're at.  So we count\n        // forward until we hit ourselves, only incrementing the index if it isn't a\n        // comma.\n        //\n        // Note: the subtlety around trailing commas (in getArgumentCount) does not apply\n        // here.  That's because we're only walking forward until we hit the node we're\n        // on.  In that case, even if we're after the trailing comma, we'll still see\n        // that trailing comma in the list, and we'll have generated the appropriate\n        // arg index.\n        var argumentIndex = 0;\n        var listChildren = argumentsList.getChildren();\n\n        for (var _i = 0, listChildren_1 = listChildren; _i < listChildren_1.length; _i++) {\n          var child = listChildren_1[_i];\n\n          if (child === node) {\n            break;\n          }\n\n          if (child.kind !== 24\n          /* CommaToken */\n          ) {\n              argumentIndex++;\n            }\n        }\n\n        return argumentIndex;\n      }\n\n      function getArgumentCount(argumentsList) {\n        // The argument count for a list is normally the number of non-comma children it has.\n        // For example, if you have \"Foo(a,b)\" then there will be three children of the arg\n        // list 'a' '<comma>' 'b'.  So, in this case the arg count will be 2.  However, there\n        // is a small subtlety.  If you have  \"Foo(a,)\", then the child list will just have\n        // 'a' '<comma>'.  So, in the case where the last child is a comma, we increase the\n        // arg count by one to compensate.\n        //\n        // Note: this subtlety only applies to the last comma.  If you had \"Foo(a,,\"  then \n        // we'll have:  'a' '<comma>' '<missing>' \n        // That will give us 2 non-commas.  We then add one for the last comma, givin us an\n        // arg count of 3.\n        var listChildren = argumentsList.getChildren();\n        var argumentCount = ts.countWhere(listChildren, function (arg) {\n          return arg.kind !== 24\n          /* CommaToken */\n          ;\n        });\n\n        if (listChildren.length > 0 && ts.lastOrUndefined(listChildren).kind === 24\n        /* CommaToken */\n        ) {\n            argumentCount++;\n          }\n\n        return argumentCount;\n      } // spanIndex is either the index for a given template span.\n      // This does not give appropriate results for a NoSubstitutionTemplateLiteral\n\n\n      function getArgumentIndexForTemplatePiece(spanIndex, node) {\n        // Because the TemplateStringsArray is the first argument, we have to offset each substitution expression by 1.\n        // There are three cases we can encounter:\n        //      1. We are precisely in the template literal (argIndex = 0).\n        //      2. We are in or to the right of the substitution expression (argIndex = spanIndex + 1).\n        //      3. We are directly to the right of the template literal, but because we look for the token on the left,\n        //          not enough to put us in the substitution expression; we should consider ourselves part of\n        //          the *next* span's expression by offsetting the index (argIndex = (spanIndex + 1) + 1).\n        //\n        // Example: f  `# abcd $#{#  1 + 1#  }# efghi ${ #\"#hello\"#  }  #  `\n        //              ^       ^ ^       ^   ^          ^ ^      ^     ^\n        // Case:        1       1 3       2   1          3 2      2     1\n        ts.Debug.assert(position >= node.getStart(), \"Assumed 'position' could not occur before node.\");\n\n        if (ts.isTemplateLiteralKind(node.kind)) {\n          if (ts.isInsideTemplateLiteral(node, position)) {\n            return 0;\n          }\n\n          return spanIndex + 2;\n        }\n\n        return spanIndex + 1;\n      }\n\n      function getArgumentListInfoForTemplate(tagExpression, argumentIndex) {\n        // argumentCount is either 1 or (numSpans + 1) to account for the template strings array argument.\n        var argumentCount = tagExpression.template.kind === 11\n        /* NoSubstitutionTemplateLiteral */\n        ? 1 : tagExpression.template.templateSpans.length + 1;\n        ts.Debug.assert(argumentIndex === 0 || argumentIndex < argumentCount, \"argumentCount < argumentIndex, \" + argumentCount + \" < \" + argumentIndex);\n        return {\n          kind: 2\n          /* TaggedTemplateArguments */\n          ,\n          invocation: tagExpression,\n          argumentsSpan: getApplicableSpanForTaggedTemplate(tagExpression),\n          argumentIndex: argumentIndex,\n          argumentCount: argumentCount\n        };\n      }\n\n      function getApplicableSpanForArguments(argumentsList) {\n        // We use full start and skip trivia on the end because we want to include trivia on\n        // both sides. For example,\n        //\n        //    foo(   /*comment */     a, b, c      /*comment*/     )\n        //        |                                               |\n        //\n        // The applicable span is from the first bar to the second bar (inclusive,\n        // but not including parentheses)\n        var applicableSpanStart = argumentsList.getFullStart();\n        var applicableSpanEnd = ts.skipTrivia(sourceFile.text, argumentsList.getEnd(),\n        /*stopAfterLineBreak*/\n        false);\n        return ts.createTextSpan(applicableSpanStart, applicableSpanEnd - applicableSpanStart);\n      }\n\n      function getApplicableSpanForTaggedTemplate(taggedTemplate) {\n        var template = taggedTemplate.template;\n        var applicableSpanStart = template.getStart();\n        var applicableSpanEnd = template.getEnd(); // We need to adjust the end position for the case where the template does not have a tail.\n        // Otherwise, we will not show signature help past the expression.\n        // For example,\n        //\n        //      `  ${ 1 + 1        foo(10)\n        //       |        |\n        //\n        // This is because a Missing node has no width. However, what we actually want is to include trivia\n        // leading up to the next token in case the user is about to type in a TemplateMiddle or TemplateTail.\n\n        if (template.kind === 186\n        /* TemplateExpression */\n        ) {\n            var lastSpan = ts.lastOrUndefined(template.templateSpans);\n\n            if (lastSpan.literal.getFullWidth() === 0) {\n              applicableSpanEnd = ts.skipTrivia(sourceFile.text, applicableSpanEnd,\n              /*stopAfterLineBreak*/\n              false);\n            }\n          }\n\n        return ts.createTextSpan(applicableSpanStart, applicableSpanEnd - applicableSpanStart);\n      }\n\n      function getContainingArgumentInfo(node) {\n        for (var n = node; n.kind !== 251\n        /* SourceFile */\n        ; n = n.parent) {\n          if (ts.isFunctionBlock(n)) {\n            return undefined;\n          } // If the node is not a subspan of its parent, this is a big problem.\n          // There have been crashes that might be caused by this violation.\n\n\n          if (n.pos < n.parent.pos || n.end > n.parent.end) {\n            ts.Debug.fail(\"Node of kind \" + n.kind + \" is not a subspan of its parent of kind \" + n.parent.kind);\n          }\n\n          var argumentInfo_1 = getImmediatelyContainingArgumentInfo(n);\n\n          if (argumentInfo_1) {\n            return argumentInfo_1;\n          }\n        }\n\n        return undefined;\n      }\n\n      function getChildListThatStartsWithOpenerToken(parent, openerToken, sourceFile) {\n        var children = parent.getChildren(sourceFile);\n        var indexOfOpenerToken = children.indexOf(openerToken);\n        ts.Debug.assert(indexOfOpenerToken >= 0 && children.length > indexOfOpenerToken + 1);\n        return children[indexOfOpenerToken + 1];\n      }\n      /**\n       * The selectedItemIndex could be negative for several reasons.\n       *     1. There are too many arguments for all of the overloads\n       *     2. None of the overloads were type compatible\n       * The solution here is to try to pick the best overload by picking\n       * either the first one that has an appropriate number of parameters,\n       * or the one with the most parameters.\n       */\n\n\n      function selectBestInvalidOverloadIndex(candidates, argumentCount) {\n        var maxParamsSignatureIndex = -1;\n        var maxParams = -1;\n\n        for (var i = 0; i < candidates.length; i++) {\n          var candidate = candidates[i];\n\n          if (candidate.hasRestParameter || candidate.parameters.length >= argumentCount) {\n            return i;\n          }\n\n          if (candidate.parameters.length > maxParams) {\n            maxParams = candidate.parameters.length;\n            maxParamsSignatureIndex = i;\n          }\n        }\n\n        return maxParamsSignatureIndex;\n      }\n\n      function createSignatureHelpItems(candidates, bestSignature, argumentListInfo) {\n        var applicableSpan = argumentListInfo.argumentsSpan;\n        var isTypeParameterList = argumentListInfo.kind === 0\n        /* TypeArguments */\n        ;\n        var invocation = argumentListInfo.invocation;\n        var callTarget = ts.getInvokedExpression(invocation);\n        var callTargetSymbol = typeChecker.getSymbolAtLocation(callTarget);\n        var callTargetDisplayParts = callTargetSymbol && ts.symbolToDisplayParts(typeChecker, callTargetSymbol,\n        /*enclosingDeclaration*/\n        undefined,\n        /*meaning*/\n        undefined);\n        var items = ts.map(candidates, function (candidateSignature) {\n          var signatureHelpParameters;\n          var prefixDisplayParts = [];\n          var suffixDisplayParts = [];\n\n          if (callTargetDisplayParts) {\n            ts.addRange(prefixDisplayParts, callTargetDisplayParts);\n          }\n\n          if (isTypeParameterList) {\n            prefixDisplayParts.push(ts.punctuationPart(25\n            /* LessThanToken */\n            ));\n            var typeParameters = candidateSignature.typeParameters;\n            signatureHelpParameters = typeParameters && typeParameters.length > 0 ? ts.map(typeParameters, createSignatureHelpParameterForTypeParameter) : emptyArray;\n            suffixDisplayParts.push(ts.punctuationPart(27\n            /* GreaterThanToken */\n            ));\n            var parameterParts = ts.mapToDisplayParts(function (writer) {\n              return typeChecker.getSymbolDisplayBuilder().buildDisplayForParametersAndDelimiters(candidateSignature.parameters, writer, invocation);\n            });\n            ts.addRange(suffixDisplayParts, parameterParts);\n          } else {\n            var typeParameterParts = ts.mapToDisplayParts(function (writer) {\n              return typeChecker.getSymbolDisplayBuilder().buildDisplayForTypeParametersAndDelimiters(candidateSignature.typeParameters, writer, invocation);\n            });\n            ts.addRange(prefixDisplayParts, typeParameterParts);\n            prefixDisplayParts.push(ts.punctuationPart(17\n            /* OpenParenToken */\n            ));\n            var parameters = candidateSignature.parameters;\n            signatureHelpParameters = parameters.length > 0 ? ts.map(parameters, createSignatureHelpParameterForParameter) : emptyArray;\n            suffixDisplayParts.push(ts.punctuationPart(18\n            /* CloseParenToken */\n            ));\n          }\n\n          var returnTypeParts = ts.mapToDisplayParts(function (writer) {\n            return typeChecker.getSymbolDisplayBuilder().buildReturnTypeDisplay(candidateSignature, writer, invocation);\n          });\n          ts.addRange(suffixDisplayParts, returnTypeParts);\n          return {\n            isVariadic: candidateSignature.hasRestParameter,\n            prefixDisplayParts: prefixDisplayParts,\n            suffixDisplayParts: suffixDisplayParts,\n            separatorDisplayParts: [ts.punctuationPart(24\n            /* CommaToken */\n            ), ts.spacePart()],\n            parameters: signatureHelpParameters,\n            documentation: candidateSignature.getDocumentationComment()\n          };\n        });\n        var argumentIndex = argumentListInfo.argumentIndex; // argumentCount is the *apparent* number of arguments.\n\n        var argumentCount = argumentListInfo.argumentCount;\n        var selectedItemIndex = candidates.indexOf(bestSignature);\n\n        if (selectedItemIndex < 0) {\n          selectedItemIndex = selectBestInvalidOverloadIndex(candidates, argumentCount);\n        }\n\n        ts.Debug.assert(argumentIndex === 0 || argumentIndex < argumentCount, \"argumentCount < argumentIndex, \" + argumentCount + \" < \" + argumentIndex);\n        return {\n          items: items,\n          applicableSpan: applicableSpan,\n          selectedItemIndex: selectedItemIndex,\n          argumentIndex: argumentIndex,\n          argumentCount: argumentCount\n        };\n\n        function createSignatureHelpParameterForParameter(parameter) {\n          var displayParts = ts.mapToDisplayParts(function (writer) {\n            return typeChecker.getSymbolDisplayBuilder().buildParameterDisplay(parameter, writer, invocation);\n          });\n          return {\n            name: parameter.name,\n            documentation: parameter.getDocumentationComment(),\n            displayParts: displayParts,\n            isOptional: typeChecker.isOptionalParameter(parameter.valueDeclaration)\n          };\n        }\n\n        function createSignatureHelpParameterForTypeParameter(typeParameter) {\n          var displayParts = ts.mapToDisplayParts(function (writer) {\n            return typeChecker.getSymbolDisplayBuilder().buildTypeParameterDisplay(typeParameter, writer, invocation);\n          });\n          return {\n            name: typeParameter.symbol.name,\n            documentation: emptyArray,\n            displayParts: displayParts,\n            isOptional: false\n          };\n        }\n      }\n    }\n\n    SignatureHelp.getSignatureHelpItems = getSignatureHelpItems;\n  })(SignatureHelp = ts.SignatureHelp || (ts.SignatureHelp = {}));\n})(ts || (ts = {})); // These utilities are common to multiple language service features.\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  function getEndLinePosition(line, sourceFile) {\n    ts.Debug.assert(line >= 0);\n    var lineStarts = sourceFile.getLineStarts();\n    var lineIndex = line;\n\n    if (lineIndex + 1 === lineStarts.length) {\n      // last line - return EOF\n      return sourceFile.text.length - 1;\n    } else {\n      // current line start\n      var start = lineStarts[lineIndex]; // take the start position of the next line -1 = it should be some line break\n\n      var pos = lineStarts[lineIndex + 1] - 1;\n      ts.Debug.assert(ts.isLineBreak(sourceFile.text.charCodeAt(pos))); // walk backwards skipping line breaks, stop the the beginning of current line.\n      // i.e:\n      // <some text>\n      // $ <- end of line for this position should match the start position\n\n      while (start <= pos && ts.isLineBreak(sourceFile.text.charCodeAt(pos))) {\n        pos--;\n      }\n\n      return pos;\n    }\n  }\n\n  ts.getEndLinePosition = getEndLinePosition;\n\n  function getLineStartPositionForPosition(position, sourceFile) {\n    var lineStarts = sourceFile.getLineStarts();\n    var line = sourceFile.getLineAndCharacterOfPosition(position).line;\n    return lineStarts[line];\n  }\n\n  ts.getLineStartPositionForPosition = getLineStartPositionForPosition;\n\n  function rangeContainsRange(r1, r2) {\n    return startEndContainsRange(r1.pos, r1.end, r2);\n  }\n\n  ts.rangeContainsRange = rangeContainsRange;\n\n  function startEndContainsRange(start, end, range) {\n    return start <= range.pos && end >= range.end;\n  }\n\n  ts.startEndContainsRange = startEndContainsRange;\n\n  function rangeContainsStartEnd(range, start, end) {\n    return range.pos <= start && range.end >= end;\n  }\n\n  ts.rangeContainsStartEnd = rangeContainsStartEnd;\n\n  function rangeOverlapsWithStartEnd(r1, start, end) {\n    return startEndOverlapsWithStartEnd(r1.pos, r1.end, start, end);\n  }\n\n  ts.rangeOverlapsWithStartEnd = rangeOverlapsWithStartEnd;\n\n  function startEndOverlapsWithStartEnd(start1, end1, start2, end2) {\n    var start = Math.max(start1, start2);\n    var end = Math.min(end1, end2);\n    return start < end;\n  }\n\n  ts.startEndOverlapsWithStartEnd = startEndOverlapsWithStartEnd;\n\n  function positionBelongsToNode(candidate, position, sourceFile) {\n    return candidate.end > position || !isCompletedNode(candidate, sourceFile);\n  }\n\n  ts.positionBelongsToNode = positionBelongsToNode;\n\n  function isCompletedNode(n, sourceFile) {\n    if (ts.nodeIsMissing(n)) {\n      return false;\n    }\n\n    switch (n.kind) {\n      case 217\n      /* ClassDeclaration */\n      :\n      case 218\n      /* InterfaceDeclaration */\n      :\n      case 220\n      /* EnumDeclaration */\n      :\n      case 168\n      /* ObjectLiteralExpression */\n      :\n      case 164\n      /* ObjectBindingPattern */\n      :\n      case 156\n      /* TypeLiteral */\n      :\n      case 195\n      /* Block */\n      :\n      case 222\n      /* ModuleBlock */\n      :\n      case 223\n      /* CaseBlock */\n      :\n        return nodeEndsWith(n, 16\n        /* CloseBraceToken */\n        , sourceFile);\n\n      case 247\n      /* CatchClause */\n      :\n        return isCompletedNode(n.block, sourceFile);\n\n      case 172\n      /* NewExpression */\n      :\n        if (!n.arguments) {\n          return true;\n        }\n\n      // fall through\n\n      case 171\n      /* CallExpression */\n      :\n      case 175\n      /* ParenthesizedExpression */\n      :\n      case 161\n      /* ParenthesizedType */\n      :\n        return nodeEndsWith(n, 18\n        /* CloseParenToken */\n        , sourceFile);\n\n      case 153\n      /* FunctionType */\n      :\n      case 154\n      /* ConstructorType */\n      :\n        return isCompletedNode(n.type, sourceFile);\n\n      case 145\n      /* Constructor */\n      :\n      case 146\n      /* GetAccessor */\n      :\n      case 147\n      /* SetAccessor */\n      :\n      case 216\n      /* FunctionDeclaration */\n      :\n      case 176\n      /* FunctionExpression */\n      :\n      case 144\n      /* MethodDeclaration */\n      :\n      case 143\n      /* MethodSignature */\n      :\n      case 149\n      /* ConstructSignature */\n      :\n      case 148\n      /* CallSignature */\n      :\n      case 177\n      /* ArrowFunction */\n      :\n        if (n.body) {\n          return isCompletedNode(n.body, sourceFile);\n        }\n\n        if (n.type) {\n          return isCompletedNode(n.type, sourceFile);\n        } // Even though type parameters can be unclosed, we can get away with\n        // having at least a closing paren.\n\n\n        return hasChildOfKind(n, 18\n        /* CloseParenToken */\n        , sourceFile);\n\n      case 221\n      /* ModuleDeclaration */\n      :\n        return n.body && isCompletedNode(n.body, sourceFile);\n\n      case 199\n      /* IfStatement */\n      :\n        if (n.elseStatement) {\n          return isCompletedNode(n.elseStatement, sourceFile);\n        }\n\n        return isCompletedNode(n.thenStatement, sourceFile);\n\n      case 198\n      /* ExpressionStatement */\n      :\n        return isCompletedNode(n.expression, sourceFile) || hasChildOfKind(n, 23\n        /* SemicolonToken */\n        );\n\n      case 167\n      /* ArrayLiteralExpression */\n      :\n      case 165\n      /* ArrayBindingPattern */\n      :\n      case 170\n      /* ElementAccessExpression */\n      :\n      case 137\n      /* ComputedPropertyName */\n      :\n      case 158\n      /* TupleType */\n      :\n        return nodeEndsWith(n, 20\n        /* CloseBracketToken */\n        , sourceFile);\n\n      case 150\n      /* IndexSignature */\n      :\n        if (n.type) {\n          return isCompletedNode(n.type, sourceFile);\n        }\n\n        return hasChildOfKind(n, 20\n        /* CloseBracketToken */\n        , sourceFile);\n\n      case 244\n      /* CaseClause */\n      :\n      case 245\n      /* DefaultClause */\n      :\n        // there is no such thing as terminator token for CaseClause/DefaultClause so for simplicitly always consider them non-completed\n        return false;\n\n      case 202\n      /* ForStatement */\n      :\n      case 203\n      /* ForInStatement */\n      :\n      case 204\n      /* ForOfStatement */\n      :\n      case 201\n      /* WhileStatement */\n      :\n        return isCompletedNode(n.statement, sourceFile);\n\n      case 200\n      /* DoStatement */\n      :\n        // rough approximation: if DoStatement has While keyword - then if node is completed is checking the presence of ')';\n        var hasWhileKeyword = findChildOfKind(n, 104\n        /* WhileKeyword */\n        , sourceFile);\n\n        if (hasWhileKeyword) {\n          return nodeEndsWith(n, 18\n          /* CloseParenToken */\n          , sourceFile);\n        }\n\n        return isCompletedNode(n.statement, sourceFile);\n\n      case 155\n      /* TypeQuery */\n      :\n        return isCompletedNode(n.exprName, sourceFile);\n\n      case 179\n      /* TypeOfExpression */\n      :\n      case 178\n      /* DeleteExpression */\n      :\n      case 180\n      /* VoidExpression */\n      :\n      case 187\n      /* YieldExpression */\n      :\n      case 188\n      /* SpreadElementExpression */\n      :\n        var unaryWordExpression = n;\n        return isCompletedNode(unaryWordExpression.expression, sourceFile);\n\n      case 173\n      /* TaggedTemplateExpression */\n      :\n        return isCompletedNode(n.template, sourceFile);\n\n      case 186\n      /* TemplateExpression */\n      :\n        var lastSpan = ts.lastOrUndefined(n.templateSpans);\n        return isCompletedNode(lastSpan, sourceFile);\n\n      case 193\n      /* TemplateSpan */\n      :\n        return ts.nodeIsPresent(n.literal);\n\n      case 182\n      /* PrefixUnaryExpression */\n      :\n        return isCompletedNode(n.operand, sourceFile);\n\n      case 184\n      /* BinaryExpression */\n      :\n        return isCompletedNode(n.right, sourceFile);\n\n      case 185\n      /* ConditionalExpression */\n      :\n        return isCompletedNode(n.whenFalse, sourceFile);\n\n      default:\n        return true;\n    }\n  }\n\n  ts.isCompletedNode = isCompletedNode;\n  /*\n   * Checks if node ends with 'expectedLastToken'.\n   * If child at position 'length - 1' is 'SemicolonToken' it is skipped and 'expectedLastToken' is compared with child at position 'length - 2'.\n   */\n\n  function nodeEndsWith(n, expectedLastToken, sourceFile) {\n    var children = n.getChildren(sourceFile);\n\n    if (children.length) {\n      var last = ts.lastOrUndefined(children);\n\n      if (last.kind === expectedLastToken) {\n        return true;\n      } else if (last.kind === 23\n      /* SemicolonToken */\n      && children.length !== 1) {\n        return children[children.length - 2].kind === expectedLastToken;\n      }\n    }\n\n    return false;\n  }\n\n  function findListItemInfo(node) {\n    var list = findContainingList(node); // It is possible at this point for syntaxList to be undefined, either if\n    // node.parent had no list child, or if none of its list children contained\n    // the span of node. If this happens, return undefined. The caller should\n    // handle this case.\n\n    if (!list) {\n      return undefined;\n    }\n\n    var children = list.getChildren();\n    var listItemIndex = ts.indexOf(children, node);\n    return {\n      listItemIndex: listItemIndex,\n      list: list\n    };\n  }\n\n  ts.findListItemInfo = findListItemInfo;\n\n  function hasChildOfKind(n, kind, sourceFile) {\n    return !!findChildOfKind(n, kind, sourceFile);\n  }\n\n  ts.hasChildOfKind = hasChildOfKind;\n\n  function findChildOfKind(n, kind, sourceFile) {\n    return ts.forEach(n.getChildren(sourceFile), function (c) {\n      return c.kind === kind && c;\n    });\n  }\n\n  ts.findChildOfKind = findChildOfKind;\n\n  function findContainingList(node) {\n    // The node might be a list element (nonsynthetic) or a comma (synthetic). Either way, it will\n    // be parented by the container of the SyntaxList, not the SyntaxList itself.\n    // In order to find the list item index, we first need to locate SyntaxList itself and then search\n    // for the position of the relevant node (or comma).\n    var syntaxList = ts.forEach(node.parent.getChildren(), function (c) {\n      // find syntax list that covers the span of the node\n      if (c.kind === 274\n      /* SyntaxList */\n      && c.pos <= node.pos && c.end >= node.end) {\n        return c;\n      }\n    }); // Either we didn't find an appropriate list, or the list must contain us.\n\n    ts.Debug.assert(!syntaxList || ts.contains(syntaxList.getChildren(), node));\n    return syntaxList;\n  }\n\n  ts.findContainingList = findContainingList;\n  /* Gets the token whose text has range [start, end) and\n   * position >= start and (position < end or (position === end && token is keyword or identifier))\n   */\n\n  function getTouchingWord(sourceFile, position) {\n    return getTouchingToken(sourceFile, position, function (n) {\n      return isWord(n.kind);\n    });\n  }\n\n  ts.getTouchingWord = getTouchingWord;\n  /* Gets the token whose text has range [start, end) and position >= start\n   * and (position < end or (position === end && token is keyword or identifier or numeric\\string litera))\n   */\n\n  function getTouchingPropertyName(sourceFile, position) {\n    return getTouchingToken(sourceFile, position, function (n) {\n      return isPropertyName(n.kind);\n    });\n  }\n\n  ts.getTouchingPropertyName = getTouchingPropertyName;\n  /** Returns the token if position is in [start, end) or if position === end and includeItemAtEndPosition(token) === true */\n\n  function getTouchingToken(sourceFile, position, includeItemAtEndPosition) {\n    return getTokenAtPositionWorker(sourceFile, position,\n    /*allowPositionInLeadingTrivia*/\n    false, includeItemAtEndPosition);\n  }\n\n  ts.getTouchingToken = getTouchingToken;\n  /** Returns a token if position is in [start-of-leading-trivia, end) */\n\n  function getTokenAtPosition(sourceFile, position) {\n    return getTokenAtPositionWorker(sourceFile, position,\n    /*allowPositionInLeadingTrivia*/\n    true,\n    /*includeItemAtEndPosition*/\n    undefined);\n  }\n\n  ts.getTokenAtPosition = getTokenAtPosition;\n  /** Get the token whose text contains the position */\n\n  function getTokenAtPositionWorker(sourceFile, position, allowPositionInLeadingTrivia, includeItemAtEndPosition) {\n    var current = sourceFile;\n\n    outer: while (true) {\n      if (isToken(current)) {\n        // exit early\n        return current;\n      } // find the child that contains 'position'\n\n\n      for (var i = 0, n = current.getChildCount(sourceFile); i < n; i++) {\n        var child = current.getChildAt(i);\n        var start = allowPositionInLeadingTrivia ? child.getFullStart() : child.getStart(sourceFile);\n\n        if (start <= position) {\n          var end = child.getEnd();\n\n          if (position < end || position === end && child.kind === 1\n          /* EndOfFileToken */\n          ) {\n            current = child;\n            continue outer;\n          } else if (includeItemAtEndPosition && end === position) {\n            var previousToken = findPrecedingToken(position, sourceFile, child);\n\n            if (previousToken && includeItemAtEndPosition(previousToken)) {\n              return previousToken;\n            }\n          }\n        }\n      }\n\n      return current;\n    }\n  }\n  /**\n    * The token on the left of the position is the token that strictly includes the position\n    * or sits to the left of the cursor if it is on a boundary. For example\n    *\n    *   fo|o               -> will return foo\n    *   foo <comment> |bar -> will return foo\n    *\n    */\n\n\n  function findTokenOnLeftOfPosition(file, position) {\n    // Ideally, getTokenAtPosition should return a token. However, it is currently\n    // broken, so we do a check to make sure the result was indeed a token.\n    var tokenAtPosition = getTokenAtPosition(file, position);\n\n    if (isToken(tokenAtPosition) && position > tokenAtPosition.getStart(file) && position < tokenAtPosition.getEnd()) {\n      return tokenAtPosition;\n    }\n\n    return findPrecedingToken(position, file);\n  }\n\n  ts.findTokenOnLeftOfPosition = findTokenOnLeftOfPosition;\n\n  function findNextToken(previousToken, parent) {\n    return find(parent);\n\n    function find(n) {\n      if (isToken(n) && n.pos === previousToken.end) {\n        // this is token that starts at the end of previous token - return it\n        return n;\n      }\n\n      var children = n.getChildren();\n\n      for (var _i = 0, children_1 = children; _i < children_1.length; _i++) {\n        var child = children_1[_i];\n        var shouldDiveInChildNode = // previous token is enclosed somewhere in the child\n        child.pos <= previousToken.pos && child.end > previousToken.end || // previous token ends exactly at the beginning of child\n        child.pos === previousToken.end;\n\n        if (shouldDiveInChildNode && nodeHasTokens(child)) {\n          return find(child);\n        }\n      }\n\n      return undefined;\n    }\n  }\n\n  ts.findNextToken = findNextToken;\n\n  function findPrecedingToken(position, sourceFile, startNode) {\n    return find(startNode || sourceFile);\n\n    function findRightmostToken(n) {\n      if (isToken(n) || n.kind === 239\n      /* JsxText */\n      ) {\n          return n;\n        }\n\n      var children = n.getChildren();\n      var candidate = findRightmostChildNodeWithTokens(children,\n      /*exclusiveStartPosition*/\n      children.length);\n      return candidate && findRightmostToken(candidate);\n    }\n\n    function find(n) {\n      if (isToken(n) || n.kind === 239\n      /* JsxText */\n      ) {\n          return n;\n        }\n\n      var children = n.getChildren();\n\n      for (var i = 0, len = children.length; i < len; i++) {\n        var child = children[i]; // condition 'position < child.end' checks if child node end after the position\n        // in the example below this condition will be false for 'aaaa' and 'bbbb' and true for 'ccc'\n        // aaaa___bbbb___$__ccc\n        // after we found child node with end after the position we check if start of the node is after the position.\n        // if yes - then position is in the trivia and we need to look into the previous child to find the token in question.\n        // if no - position is in the node itself so we should recurse in it.\n        // NOTE: JsxText is a weird kind of node that can contain only whitespaces (since they are not counted as trivia).\n        // if this is the case - then we should assume that token in question is located in previous child.\n\n        if (position < child.end && (nodeHasTokens(child) || child.kind === 239\n        /* JsxText */\n        )) {\n          var start = child.getStart(sourceFile);\n          var lookInPreviousChild = start >= position || child.kind === 239\n          /* JsxText */\n          && start === child.end; // whitespace only JsxText\n\n          if (lookInPreviousChild) {\n            // actual start of the node is past the position - previous token should be at the end of previous child\n            var candidate = findRightmostChildNodeWithTokens(children,\n            /*exclusiveStartPosition*/\n            i);\n            return candidate && findRightmostToken(candidate);\n          } else {\n            // candidate should be in this node\n            return find(child);\n          }\n        }\n      }\n\n      ts.Debug.assert(startNode !== undefined || n.kind === 251\n      /* SourceFile */\n      ); // Here we know that none of child token nodes embrace the position,\n      // the only known case is when position is at the end of the file.\n      // Try to find the rightmost token in the file without filtering.\n      // Namely we are skipping the check: 'position < node.end'\n\n      if (children.length) {\n        var candidate = findRightmostChildNodeWithTokens(children,\n        /*exclusiveStartPosition*/\n        children.length);\n        return candidate && findRightmostToken(candidate);\n      }\n    } /// finds last node that is considered as candidate for search (isCandidate(node) === true) starting from 'exclusiveStartPosition'\n\n\n    function findRightmostChildNodeWithTokens(children, exclusiveStartPosition) {\n      for (var i = exclusiveStartPosition - 1; i >= 0; --i) {\n        if (nodeHasTokens(children[i])) {\n          return children[i];\n        }\n      }\n    }\n  }\n\n  ts.findPrecedingToken = findPrecedingToken;\n\n  function isInString(sourceFile, position) {\n    var token = getTokenAtPosition(sourceFile, position);\n    return token && (token.kind === 9\n    /* StringLiteral */\n    || token.kind === 163\n    /* StringLiteralType */\n    ) && position > token.getStart();\n  }\n\n  ts.isInString = isInString;\n\n  function isInComment(sourceFile, position) {\n    return isInCommentHelper(sourceFile, position,\n    /*predicate*/\n    undefined);\n  }\n\n  ts.isInComment = isInComment;\n  /**\n   * Returns true if the cursor at position in sourceFile is within a comment that additionally\n   * satisfies predicate, and false otherwise.\n   */\n\n  function isInCommentHelper(sourceFile, position, predicate) {\n    var token = getTokenAtPosition(sourceFile, position);\n\n    if (token && position <= token.getStart()) {\n      var commentRanges = ts.getLeadingCommentRanges(sourceFile.text, token.pos); // The end marker of a single-line comment does not include the newline character.\n      // In the following case, we are inside a comment (^ denotes the cursor position):\n      //\n      //    // asdf   ^\\n\n      //\n      // But for multi-line comments, we don't want to be inside the comment in the following case:\n      //\n      //    /* asdf */^\n      //\n      // Internally, we represent the end of the comment at the newline and closing '/', respectively.\n\n      return predicate ? ts.forEach(commentRanges, function (c) {\n        return c.pos < position && (c.kind == 2\n        /* SingleLineCommentTrivia */\n        ? position <= c.end : position < c.end) && predicate(c);\n      }) : ts.forEach(commentRanges, function (c) {\n        return c.pos < position && (c.kind == 2\n        /* SingleLineCommentTrivia */\n        ? position <= c.end : position < c.end);\n      });\n    }\n\n    return false;\n  }\n\n  ts.isInCommentHelper = isInCommentHelper;\n\n  function hasDocComment(sourceFile, position) {\n    var token = getTokenAtPosition(sourceFile, position); // First, we have to see if this position actually landed in a comment.\n\n    var commentRanges = ts.getLeadingCommentRanges(sourceFile.text, token.pos);\n    return ts.forEach(commentRanges, jsDocPrefix);\n\n    function jsDocPrefix(c) {\n      var text = sourceFile.text;\n      return text.length >= c.pos + 3 && text[c.pos] === '/' && text[c.pos + 1] === '*' && text[c.pos + 2] === '*';\n    }\n  }\n\n  ts.hasDocComment = hasDocComment;\n  /**\n   * Get the corresponding JSDocTag node if the position is in a jsDoc comment\n   */\n\n  function getJsDocTagAtPosition(sourceFile, position) {\n    var node = ts.getTokenAtPosition(sourceFile, position);\n\n    if (isToken(node)) {\n      switch (node.kind) {\n        case 102\n        /* VarKeyword */\n        :\n        case 108\n        /* LetKeyword */\n        :\n        case 74\n        /* ConstKeyword */\n        :\n          // if the current token is var, let or const, skip the VariableDeclarationList\n          node = node.parent === undefined ? undefined : node.parent.parent;\n          break;\n\n        default:\n          node = node.parent;\n          break;\n      }\n    }\n\n    if (node) {\n      var jsDocComment = node.jsDocComment;\n\n      if (jsDocComment) {\n        for (var _i = 0, _a = jsDocComment.tags; _i < _a.length; _i++) {\n          var tag = _a[_i];\n\n          if (tag.pos <= position && position <= tag.end) {\n            return tag;\n          }\n        }\n      }\n    }\n\n    return undefined;\n  }\n\n  ts.getJsDocTagAtPosition = getJsDocTagAtPosition;\n\n  function nodeHasTokens(n) {\n    // If we have a token or node that has a non-zero width, it must have tokens.\n    // Note, that getWidth() does not take trivia into account.\n    return n.getWidth() !== 0;\n  }\n\n  function getNodeModifiers(node) {\n    var flags = ts.getCombinedNodeFlags(node);\n    var result = [];\n    if (flags & 16\n    /* Private */\n    ) result.push(ts.ScriptElementKindModifier.privateMemberModifier);\n    if (flags & 32\n    /* Protected */\n    ) result.push(ts.ScriptElementKindModifier.protectedMemberModifier);\n    if (flags & 8\n    /* Public */\n    ) result.push(ts.ScriptElementKindModifier.publicMemberModifier);\n    if (flags & 64\n    /* Static */\n    ) result.push(ts.ScriptElementKindModifier.staticModifier);\n    if (flags & 128\n    /* Abstract */\n    ) result.push(ts.ScriptElementKindModifier.abstractModifier);\n    if (flags & 2\n    /* Export */\n    ) result.push(ts.ScriptElementKindModifier.exportedModifier);\n    if (ts.isInAmbientContext(node)) result.push(ts.ScriptElementKindModifier.ambientModifier);\n    return result.length > 0 ? result.join(',') : ts.ScriptElementKindModifier.none;\n  }\n\n  ts.getNodeModifiers = getNodeModifiers;\n\n  function getTypeArgumentOrTypeParameterList(node) {\n    if (node.kind === 152\n    /* TypeReference */\n    || node.kind === 171\n    /* CallExpression */\n    ) {\n        return node.typeArguments;\n      }\n\n    if (ts.isFunctionLike(node) || node.kind === 217\n    /* ClassDeclaration */\n    || node.kind === 218\n    /* InterfaceDeclaration */\n    ) {\n        return node.typeParameters;\n      }\n\n    return undefined;\n  }\n\n  ts.getTypeArgumentOrTypeParameterList = getTypeArgumentOrTypeParameterList;\n\n  function isToken(n) {\n    return n.kind >= 0\n    /* FirstToken */\n    && n.kind <= 135\n    /* LastToken */\n    ;\n  }\n\n  ts.isToken = isToken;\n\n  function isWord(kind) {\n    return kind === 69\n    /* Identifier */\n    || ts.isKeyword(kind);\n  }\n\n  ts.isWord = isWord;\n\n  function isPropertyName(kind) {\n    return kind === 9\n    /* StringLiteral */\n    || kind === 8\n    /* NumericLiteral */\n    || isWord(kind);\n  }\n\n  function isComment(kind) {\n    return kind === 2\n    /* SingleLineCommentTrivia */\n    || kind === 3\n    /* MultiLineCommentTrivia */\n    ;\n  }\n\n  ts.isComment = isComment;\n\n  function isStringOrRegularExpressionOrTemplateLiteral(kind) {\n    if (kind === 9\n    /* StringLiteral */\n    || kind === 163\n    /* StringLiteralType */\n    || kind === 10\n    /* RegularExpressionLiteral */\n    || ts.isTemplateLiteralKind(kind)) {\n      return true;\n    }\n\n    return false;\n  }\n\n  ts.isStringOrRegularExpressionOrTemplateLiteral = isStringOrRegularExpressionOrTemplateLiteral;\n\n  function isPunctuation(kind) {\n    return 15\n    /* FirstPunctuation */\n    <= kind && kind <= 68\n    /* LastPunctuation */\n    ;\n  }\n\n  ts.isPunctuation = isPunctuation;\n\n  function isInsideTemplateLiteral(node, position) {\n    return ts.isTemplateLiteralKind(node.kind) && node.getStart() < position && position < node.getEnd() || !!node.isUnterminated && position === node.getEnd();\n  }\n\n  ts.isInsideTemplateLiteral = isInsideTemplateLiteral;\n\n  function isAccessibilityModifier(kind) {\n    switch (kind) {\n      case 112\n      /* PublicKeyword */\n      :\n      case 110\n      /* PrivateKeyword */\n      :\n      case 111\n      /* ProtectedKeyword */\n      :\n        return true;\n    }\n\n    return false;\n  }\n\n  ts.isAccessibilityModifier = isAccessibilityModifier;\n\n  function compareDataObjects(dst, src) {\n    for (var e in dst) {\n      if (typeof dst[e] === \"object\") {\n        if (!compareDataObjects(dst[e], src[e])) {\n          return false;\n        }\n      } else if (typeof dst[e] !== \"function\") {\n        if (dst[e] !== src[e]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  ts.compareDataObjects = compareDataObjects;\n\n  function isArrayLiteralOrObjectLiteralDestructuringPattern(node) {\n    if (node.kind === 167\n    /* ArrayLiteralExpression */\n    || node.kind === 168\n    /* ObjectLiteralExpression */\n    ) {\n        // [a,b,c] from:\n        // [a, b, c] = someExpression;\n        if (node.parent.kind === 184\n        /* BinaryExpression */\n        && node.parent.left === node && node.parent.operatorToken.kind === 56\n        /* EqualsToken */\n        ) {\n            return true;\n          } // [a, b, c] from:\n        // for([a, b, c] of expression)\n\n\n        if (node.parent.kind === 204\n        /* ForOfStatement */\n        && node.parent.initializer === node) {\n          return true;\n        } // [a, b, c] of\n        // [x, [a, b, c] ] = someExpression\n        // or \n        // {x, a: {a, b, c} } = someExpression\n\n\n        if (isArrayLiteralOrObjectLiteralDestructuringPattern(node.parent.kind === 248\n        /* PropertyAssignment */\n        ? node.parent.parent : node.parent)) {\n          return true;\n        }\n      }\n\n    return false;\n  }\n\n  ts.isArrayLiteralOrObjectLiteralDestructuringPattern = isArrayLiteralOrObjectLiteralDestructuringPattern;\n})(ts || (ts = {})); // Display-part writer helpers\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  function isFirstDeclarationOfSymbolParameter(symbol) {\n    return symbol.declarations && symbol.declarations.length > 0 && symbol.declarations[0].kind === 139\n    /* Parameter */\n    ;\n  }\n\n  ts.isFirstDeclarationOfSymbolParameter = isFirstDeclarationOfSymbolParameter;\n  var displayPartWriter = getDisplayPartWriter();\n\n  function getDisplayPartWriter() {\n    var _displayParts;\n\n    var lineStart;\n    var indent;\n    resetWriter();\n    return {\n      displayParts: function displayParts() {\n        return _displayParts;\n      },\n      writeKeyword: function writeKeyword(text) {\n        return writeKind(text, ts.SymbolDisplayPartKind.keyword);\n      },\n      writeOperator: function writeOperator(text) {\n        return writeKind(text, ts.SymbolDisplayPartKind.operator);\n      },\n      writePunctuation: function writePunctuation(text) {\n        return writeKind(text, ts.SymbolDisplayPartKind.punctuation);\n      },\n      writeSpace: function writeSpace(text) {\n        return writeKind(text, ts.SymbolDisplayPartKind.space);\n      },\n      writeStringLiteral: function writeStringLiteral(text) {\n        return writeKind(text, ts.SymbolDisplayPartKind.stringLiteral);\n      },\n      writeParameter: function writeParameter(text) {\n        return writeKind(text, ts.SymbolDisplayPartKind.parameterName);\n      },\n      writeSymbol: writeSymbol,\n      writeLine: writeLine,\n      increaseIndent: function increaseIndent() {\n        indent++;\n      },\n      decreaseIndent: function decreaseIndent() {\n        indent--;\n      },\n      clear: resetWriter,\n      trackSymbol: function trackSymbol() {},\n      reportInaccessibleThisError: function reportInaccessibleThisError() {}\n    };\n\n    function writeIndent() {\n      if (lineStart) {\n        var indentString = ts.getIndentString(indent);\n\n        if (indentString) {\n          _displayParts.push(displayPart(indentString, ts.SymbolDisplayPartKind.space));\n        }\n\n        lineStart = false;\n      }\n    }\n\n    function writeKind(text, kind) {\n      writeIndent();\n\n      _displayParts.push(displayPart(text, kind));\n    }\n\n    function writeSymbol(text, symbol) {\n      writeIndent();\n\n      _displayParts.push(symbolPart(text, symbol));\n    }\n\n    function writeLine() {\n      _displayParts.push(lineBreakPart());\n\n      lineStart = true;\n    }\n\n    function resetWriter() {\n      _displayParts = [];\n      lineStart = true;\n      indent = 0;\n    }\n  }\n\n  function symbolPart(text, symbol) {\n    return displayPart(text, displayPartKind(symbol), symbol);\n\n    function displayPartKind(symbol) {\n      var flags = symbol.flags;\n\n      if (flags & 3\n      /* Variable */\n      ) {\n          return isFirstDeclarationOfSymbolParameter(symbol) ? ts.SymbolDisplayPartKind.parameterName : ts.SymbolDisplayPartKind.localName;\n        } else if (flags & 4\n      /* Property */\n      ) {\n          return ts.SymbolDisplayPartKind.propertyName;\n        } else if (flags & 32768\n      /* GetAccessor */\n      ) {\n          return ts.SymbolDisplayPartKind.propertyName;\n        } else if (flags & 65536\n      /* SetAccessor */\n      ) {\n          return ts.SymbolDisplayPartKind.propertyName;\n        } else if (flags & 8\n      /* EnumMember */\n      ) {\n          return ts.SymbolDisplayPartKind.enumMemberName;\n        } else if (flags & 16\n      /* Function */\n      ) {\n          return ts.SymbolDisplayPartKind.functionName;\n        } else if (flags & 32\n      /* Class */\n      ) {\n          return ts.SymbolDisplayPartKind.className;\n        } else if (flags & 64\n      /* Interface */\n      ) {\n          return ts.SymbolDisplayPartKind.interfaceName;\n        } else if (flags & 384\n      /* Enum */\n      ) {\n          return ts.SymbolDisplayPartKind.enumName;\n        } else if (flags & 1536\n      /* Module */\n      ) {\n          return ts.SymbolDisplayPartKind.moduleName;\n        } else if (flags & 8192\n      /* Method */\n      ) {\n          return ts.SymbolDisplayPartKind.methodName;\n        } else if (flags & 262144\n      /* TypeParameter */\n      ) {\n          return ts.SymbolDisplayPartKind.typeParameterName;\n        } else if (flags & 524288\n      /* TypeAlias */\n      ) {\n          return ts.SymbolDisplayPartKind.aliasName;\n        } else if (flags & 8388608\n      /* Alias */\n      ) {\n          return ts.SymbolDisplayPartKind.aliasName;\n        }\n\n      return ts.SymbolDisplayPartKind.text;\n    }\n  }\n\n  ts.symbolPart = symbolPart;\n\n  function displayPart(text, kind, symbol) {\n    return {\n      text: text,\n      kind: ts.SymbolDisplayPartKind[kind]\n    };\n  }\n\n  ts.displayPart = displayPart;\n\n  function spacePart() {\n    return displayPart(\" \", ts.SymbolDisplayPartKind.space);\n  }\n\n  ts.spacePart = spacePart;\n\n  function keywordPart(kind) {\n    return displayPart(ts.tokenToString(kind), ts.SymbolDisplayPartKind.keyword);\n  }\n\n  ts.keywordPart = keywordPart;\n\n  function punctuationPart(kind) {\n    return displayPart(ts.tokenToString(kind), ts.SymbolDisplayPartKind.punctuation);\n  }\n\n  ts.punctuationPart = punctuationPart;\n\n  function operatorPart(kind) {\n    return displayPart(ts.tokenToString(kind), ts.SymbolDisplayPartKind.operator);\n  }\n\n  ts.operatorPart = operatorPart;\n\n  function textOrKeywordPart(text) {\n    var kind = ts.stringToToken(text);\n    return kind === undefined ? textPart(text) : keywordPart(kind);\n  }\n\n  ts.textOrKeywordPart = textOrKeywordPart;\n\n  function textPart(text) {\n    return displayPart(text, ts.SymbolDisplayPartKind.text);\n  }\n\n  ts.textPart = textPart;\n  var carriageReturnLineFeed = \"\\r\\n\";\n  /**\n   * The default is CRLF.\n   */\n\n  function getNewLineOrDefaultFromHost(host) {\n    return host.getNewLine ? host.getNewLine() : carriageReturnLineFeed;\n  }\n\n  ts.getNewLineOrDefaultFromHost = getNewLineOrDefaultFromHost;\n\n  function lineBreakPart() {\n    return displayPart(\"\\n\", ts.SymbolDisplayPartKind.lineBreak);\n  }\n\n  ts.lineBreakPart = lineBreakPart;\n\n  function mapToDisplayParts(writeDisplayParts) {\n    writeDisplayParts(displayPartWriter);\n    var result = displayPartWriter.displayParts();\n    displayPartWriter.clear();\n    return result;\n  }\n\n  ts.mapToDisplayParts = mapToDisplayParts;\n\n  function typeToDisplayParts(typechecker, type, enclosingDeclaration, flags) {\n    return mapToDisplayParts(function (writer) {\n      typechecker.getSymbolDisplayBuilder().buildTypeDisplay(type, writer, enclosingDeclaration, flags);\n    });\n  }\n\n  ts.typeToDisplayParts = typeToDisplayParts;\n\n  function symbolToDisplayParts(typeChecker, symbol, enclosingDeclaration, meaning, flags) {\n    return mapToDisplayParts(function (writer) {\n      typeChecker.getSymbolDisplayBuilder().buildSymbolDisplay(symbol, writer, enclosingDeclaration, meaning, flags);\n    });\n  }\n\n  ts.symbolToDisplayParts = symbolToDisplayParts;\n\n  function signatureToDisplayParts(typechecker, signature, enclosingDeclaration, flags) {\n    return mapToDisplayParts(function (writer) {\n      typechecker.getSymbolDisplayBuilder().buildSignatureDisplay(signature, writer, enclosingDeclaration, flags);\n    });\n  }\n\n  ts.signatureToDisplayParts = signatureToDisplayParts;\n\n  function getDeclaredName(typeChecker, symbol, location) {\n    // If this is an export or import specifier it could have been renamed using the 'as' syntax.\n    // If so we want to search for whatever is under the cursor.\n    if (isImportOrExportSpecifierName(location)) {\n      return location.getText();\n    } // Try to get the local symbol if we're dealing with an 'export default'\n    // since that symbol has the \"true\" name.\n\n\n    var localExportDefaultSymbol = ts.getLocalSymbolForExportDefault(symbol);\n    var name = typeChecker.symbolToString(localExportDefaultSymbol || symbol);\n    return name;\n  }\n\n  ts.getDeclaredName = getDeclaredName;\n\n  function isImportOrExportSpecifierName(location) {\n    return location.parent && (location.parent.kind === 229\n    /* ImportSpecifier */\n    || location.parent.kind === 233\n    /* ExportSpecifier */\n    ) && location.parent.propertyName === location;\n  }\n\n  ts.isImportOrExportSpecifierName = isImportOrExportSpecifierName;\n  /**\n   * Strip off existed single quotes or double quotes from a given string\n   *\n   * @return non-quoted string\n   */\n\n  function stripQuotes(name) {\n    var length = name.length;\n\n    if (length >= 2 && name.charCodeAt(0) === name.charCodeAt(length - 1) && (name.charCodeAt(0) === 34\n    /* doubleQuote */\n    || name.charCodeAt(0) === 39\n    /* singleQuote */\n    )) {\n      return name.substring(1, length - 1);\n    }\n\n    ;\n    return name;\n  }\n\n  ts.stripQuotes = stripQuotes;\n\n  function scriptKindIs(fileName, host) {\n    var scriptKinds = [];\n\n    for (var _i = 2; _i < arguments.length; _i++) {\n      scriptKinds[_i - 2] = arguments[_i];\n    }\n\n    var scriptKind = getScriptKind(fileName, host);\n    return ts.forEach(scriptKinds, function (k) {\n      return k === scriptKind;\n    });\n  }\n\n  ts.scriptKindIs = scriptKindIs;\n\n  function getScriptKind(fileName, host) {\n    // First check to see if the script kind can be determined from the file name\n    var scriptKind = ts.getScriptKindFromFileName(fileName);\n\n    if (scriptKind === 0\n    /* Unknown */\n    && host && host.getScriptKind) {\n      // Next check to see if the host can resolve the script kind\n      scriptKind = host.getScriptKind(fileName);\n    }\n\n    return ts.ensureScriptKind(fileName, scriptKind);\n  }\n\n  ts.getScriptKind = getScriptKind;\n})(ts || (ts = {})); // Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0.\n// See LICENSE.txt in the project root for complete license information.\n/// <reference path='services.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var JsTyping;\n\n  (function (JsTyping) {\n    ;\n    ; // A map of loose file names to library names\n    // that we are confident require typings\n\n    var safeList;\n    /**\n     * @param host is the object providing I/O related operations.\n     * @param fileNames are the file names that belong to the same project\n     * @param projectRootPath is the path to the project root directory\n     * @param safeListPath is the path used to retrieve the safe list\n     * @param packageNameToTypingLocation is the map of package names to their cached typing locations\n     * @param typingOptions are used to customize the typing inference process\n     * @param compilerOptions are used as a source for typing inference\n     */\n\n    function discoverTypings(host, fileNames, projectRootPath, safeListPath, packageNameToTypingLocation, typingOptions, compilerOptions) {\n      // A typing name to typing file path mapping\n      var inferredTypings = {};\n\n      if (!typingOptions || !typingOptions.enableAutoDiscovery) {\n        return {\n          cachedTypingPaths: [],\n          newTypingNames: [],\n          filesToWatch: []\n        };\n      } // Only infer typings for .js and .jsx files\n\n\n      fileNames = ts.filter(ts.map(fileNames, ts.normalizePath), function (f) {\n        return ts.scriptKindIs(f,\n        /*LanguageServiceHost*/\n        undefined, 1\n        /* JS */\n        , 2\n        /* JSX */\n        );\n      });\n\n      if (!safeList) {\n        var result = ts.readConfigFile(safeListPath, function (path) {\n          return host.readFile(path);\n        });\n\n        if (result.config) {\n          safeList = result.config;\n        } else {\n          safeList = {};\n        }\n      }\n\n      var filesToWatch = []; // Directories to search for package.json, bower.json and other typing information\n\n      var searchDirs = [];\n      var exclude = [];\n      mergeTypings(typingOptions.include);\n      exclude = typingOptions.exclude || [];\n      var possibleSearchDirs = ts.map(fileNames, ts.getDirectoryPath);\n\n      if (projectRootPath !== undefined) {\n        possibleSearchDirs.push(projectRootPath);\n      }\n\n      searchDirs = ts.deduplicate(possibleSearchDirs);\n\n      for (var _i = 0, searchDirs_1 = searchDirs; _i < searchDirs_1.length; _i++) {\n        var searchDir = searchDirs_1[_i];\n        var packageJsonPath = ts.combinePaths(searchDir, \"package.json\");\n        getTypingNamesFromJson(packageJsonPath, filesToWatch);\n        var bowerJsonPath = ts.combinePaths(searchDir, \"bower.json\");\n        getTypingNamesFromJson(bowerJsonPath, filesToWatch);\n        var nodeModulesPath = ts.combinePaths(searchDir, \"node_modules\");\n        getTypingNamesFromNodeModuleFolder(nodeModulesPath);\n      }\n\n      getTypingNamesFromSourceFileNames(fileNames); // Add the cached typing locations for inferred typings that are already installed\n\n      for (var name_35 in packageNameToTypingLocation) {\n        if (ts.hasProperty(inferredTypings, name_35) && !inferredTypings[name_35]) {\n          inferredTypings[name_35] = packageNameToTypingLocation[name_35];\n        }\n      } // Remove typings that the user has added to the exclude list\n\n\n      for (var _a = 0, exclude_1 = exclude; _a < exclude_1.length; _a++) {\n        var excludeTypingName = exclude_1[_a];\n        delete inferredTypings[excludeTypingName];\n      }\n\n      var newTypingNames = [];\n      var cachedTypingPaths = [];\n\n      for (var typing in inferredTypings) {\n        if (inferredTypings[typing] !== undefined) {\n          cachedTypingPaths.push(inferredTypings[typing]);\n        } else {\n          newTypingNames.push(typing);\n        }\n      }\n\n      return {\n        cachedTypingPaths: cachedTypingPaths,\n        newTypingNames: newTypingNames,\n        filesToWatch: filesToWatch\n      };\n      /**\n       * Merge a given list of typingNames to the inferredTypings map\n       */\n\n      function mergeTypings(typingNames) {\n        if (!typingNames) {\n          return;\n        }\n\n        for (var _i = 0, typingNames_1 = typingNames; _i < typingNames_1.length; _i++) {\n          var typing = typingNames_1[_i];\n\n          if (!ts.hasProperty(inferredTypings, typing)) {\n            inferredTypings[typing] = undefined;\n          }\n        }\n      }\n      /**\n       * Get the typing info from common package manager json files like package.json or bower.json\n       */\n\n\n      function getTypingNamesFromJson(jsonPath, filesToWatch) {\n        var result = ts.readConfigFile(jsonPath, function (path) {\n          return host.readFile(path);\n        });\n\n        if (result.config) {\n          var jsonConfig = result.config;\n          filesToWatch.push(jsonPath);\n\n          if (jsonConfig.dependencies) {\n            mergeTypings(ts.getKeys(jsonConfig.dependencies));\n          }\n\n          if (jsonConfig.devDependencies) {\n            mergeTypings(ts.getKeys(jsonConfig.devDependencies));\n          }\n\n          if (jsonConfig.optionalDependencies) {\n            mergeTypings(ts.getKeys(jsonConfig.optionalDependencies));\n          }\n\n          if (jsonConfig.peerDependencies) {\n            mergeTypings(ts.getKeys(jsonConfig.peerDependencies));\n          }\n        }\n      }\n      /**\n       * Infer typing names from given file names. For example, the file name \"jquery-min.2.3.4.js\"\n       * should be inferred to the 'jquery' typing name; and \"angular-route.1.2.3.js\" should be inferred\n       * to the 'angular-route' typing name.\n       * @param fileNames are the names for source files in the project\n       */\n\n\n      function getTypingNamesFromSourceFileNames(fileNames) {\n        var jsFileNames = ts.filter(fileNames, ts.hasJavaScriptFileExtension);\n        var inferredTypingNames = ts.map(jsFileNames, function (f) {\n          return ts.removeFileExtension(ts.getBaseFileName(f.toLowerCase()));\n        });\n        var cleanedTypingNames = ts.map(inferredTypingNames, function (f) {\n          return f.replace(/((?:\\.|-)min(?=\\.|$))|((?:-|\\.)\\d+)/g, \"\");\n        });\n\n        if (safeList === undefined) {\n          mergeTypings(cleanedTypingNames);\n        } else {\n          mergeTypings(ts.filter(cleanedTypingNames, function (f) {\n            return ts.hasProperty(safeList, f);\n          }));\n        }\n\n        var hasJsxFile = ts.forEach(fileNames, function (f) {\n          return ts.scriptKindIs(f,\n          /*LanguageServiceHost*/\n          undefined, 2\n          /* JSX */\n          );\n        });\n\n        if (hasJsxFile) {\n          mergeTypings([\"react\"]);\n        }\n      }\n      /**\n       * Infer typing names from node_module folder\n       * @param nodeModulesPath is the path to the \"node_modules\" folder\n       */\n\n\n      function getTypingNamesFromNodeModuleFolder(nodeModulesPath) {\n        // Todo: add support for ModuleResolutionHost too\n        if (!host.directoryExists(nodeModulesPath)) {\n          return;\n        }\n\n        var typingNames = [];\n        var fileNames = host.readDirectory(nodeModulesPath, \"*.json\",\n        /*exclude*/\n        undefined,\n        /*depth*/\n        2);\n\n        for (var _i = 0, fileNames_1 = fileNames; _i < fileNames_1.length; _i++) {\n          var fileName = fileNames_1[_i];\n          var normalizedFileName = ts.normalizePath(fileName);\n\n          if (ts.getBaseFileName(normalizedFileName) !== \"package.json\") {\n            continue;\n          }\n\n          var result = ts.readConfigFile(normalizedFileName, function (path) {\n            return host.readFile(path);\n          });\n\n          if (!result.config) {\n            continue;\n          }\n\n          var packageJson = result.config; // npm 3's package.json contains a \"_requiredBy\" field\n          // we should include all the top level module names for npm 2, and only module names whose\n          // \"_requiredBy\" field starts with \"#\" or equals \"/\" for npm 3.\n\n          if (packageJson._requiredBy && ts.filter(packageJson._requiredBy, function (r) {\n            return r[0] === \"#\" || r === \"/\";\n          }).length === 0) {\n            continue;\n          } // If the package has its own d.ts typings, those will take precedence. Otherwise the package name will be used\n          // to download d.ts files from DefinitelyTyped\n\n\n          if (!packageJson.name) {\n            continue;\n          }\n\n          if (packageJson.typings) {\n            var absolutePath = ts.getNormalizedAbsolutePath(packageJson.typings, ts.getDirectoryPath(normalizedFileName));\n            inferredTypings[packageJson.name] = absolutePath;\n          } else {\n            typingNames.push(packageJson.name);\n          }\n        }\n\n        mergeTypings(typingNames);\n      }\n    }\n\n    JsTyping.discoverTypings = discoverTypings;\n  })(JsTyping = ts.JsTyping || (ts.JsTyping = {}));\n})(ts || (ts = {})); /// <reference path=\"formatting.ts\"/>\n/// <reference path=\"..\\..\\compiler\\scanner.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var standardScanner = ts.createScanner(2\n    /* Latest */\n    ,\n    /*skipTrivia*/\n    false, 0\n    /* Standard */\n    );\n    var jsxScanner = ts.createScanner(2\n    /* Latest */\n    ,\n    /*skipTrivia*/\n    false, 1\n    /* JSX */\n    );\n    /**\n     * Scanner that is currently used for formatting\n     */\n\n    var scanner;\n    var ScanAction;\n\n    (function (ScanAction) {\n      ScanAction[ScanAction[\"Scan\"] = 0] = \"Scan\";\n      ScanAction[ScanAction[\"RescanGreaterThanToken\"] = 1] = \"RescanGreaterThanToken\";\n      ScanAction[ScanAction[\"RescanSlashToken\"] = 2] = \"RescanSlashToken\";\n      ScanAction[ScanAction[\"RescanTemplateToken\"] = 3] = \"RescanTemplateToken\";\n      ScanAction[ScanAction[\"RescanJsxIdentifier\"] = 4] = \"RescanJsxIdentifier\";\n    })(ScanAction || (ScanAction = {}));\n\n    function getFormattingScanner(sourceFile, startPos, endPos) {\n      ts.Debug.assert(scanner === undefined);\n      scanner = sourceFile.languageVariant === 1\n      /* JSX */\n      ? jsxScanner : standardScanner;\n      scanner.setText(sourceFile.text);\n      scanner.setTextPos(startPos);\n      var wasNewLine = true;\n      var leadingTrivia;\n      var trailingTrivia;\n      var savedPos;\n      var lastScanAction;\n      var lastTokenInfo;\n      return {\n        advance: advance,\n        readTokenInfo: readTokenInfo,\n        isOnToken: isOnToken,\n        getCurrentLeadingTrivia: function getCurrentLeadingTrivia() {\n          return leadingTrivia;\n        },\n        lastTrailingTriviaWasNewLine: function lastTrailingTriviaWasNewLine() {\n          return wasNewLine;\n        },\n        close: function close() {\n          ts.Debug.assert(scanner !== undefined);\n          lastTokenInfo = undefined;\n          scanner.setText(undefined);\n          scanner = undefined;\n        }\n      };\n\n      function advance() {\n        ts.Debug.assert(scanner !== undefined);\n        lastTokenInfo = undefined;\n        var isStarted = scanner.getStartPos() !== startPos;\n\n        if (isStarted) {\n          if (trailingTrivia) {\n            ts.Debug.assert(trailingTrivia.length !== 0);\n            wasNewLine = ts.lastOrUndefined(trailingTrivia).kind === 4\n            /* NewLineTrivia */\n            ;\n          } else {\n            wasNewLine = false;\n          }\n        }\n\n        leadingTrivia = undefined;\n        trailingTrivia = undefined;\n\n        if (!isStarted) {\n          scanner.scan();\n        }\n\n        var t;\n        var pos = scanner.getStartPos(); // Read leading trivia and token\n\n        while (pos < endPos) {\n          var t_1 = scanner.getToken();\n\n          if (!ts.isTrivia(t_1)) {\n            break;\n          } // consume leading trivia\n\n\n          scanner.scan();\n          var item = {\n            pos: pos,\n            end: scanner.getStartPos(),\n            kind: t_1\n          };\n          pos = scanner.getStartPos();\n\n          if (!leadingTrivia) {\n            leadingTrivia = [];\n          }\n\n          leadingTrivia.push(item);\n        }\n\n        savedPos = scanner.getStartPos();\n      }\n\n      function shouldRescanGreaterThanToken(node) {\n        if (node) {\n          switch (node.kind) {\n            case 29\n            /* GreaterThanEqualsToken */\n            :\n            case 64\n            /* GreaterThanGreaterThanEqualsToken */\n            :\n            case 65\n            /* GreaterThanGreaterThanGreaterThanEqualsToken */\n            :\n            case 45\n            /* GreaterThanGreaterThanGreaterThanToken */\n            :\n            case 44\n            /* GreaterThanGreaterThanToken */\n            :\n              return true;\n          }\n        }\n\n        return false;\n      }\n\n      function shouldRescanJsxIdentifier(node) {\n        if (node.parent) {\n          switch (node.parent.kind) {\n            case 241\n            /* JsxAttribute */\n            :\n            case 238\n            /* JsxOpeningElement */\n            :\n            case 240\n            /* JsxClosingElement */\n            :\n            case 237\n            /* JsxSelfClosingElement */\n            :\n              return node.kind === 69\n              /* Identifier */\n              ;\n          }\n        }\n\n        return false;\n      }\n\n      function shouldRescanSlashToken(container) {\n        return container.kind === 10\n        /* RegularExpressionLiteral */\n        ;\n      }\n\n      function shouldRescanTemplateToken(container) {\n        return container.kind === 13\n        /* TemplateMiddle */\n        || container.kind === 14\n        /* TemplateTail */\n        ;\n      }\n\n      function startsWithSlashToken(t) {\n        return t === 39\n        /* SlashToken */\n        || t === 61\n        /* SlashEqualsToken */\n        ;\n      }\n\n      function readTokenInfo(n) {\n        ts.Debug.assert(scanner !== undefined);\n\n        if (!isOnToken()) {\n          // scanner is not on the token (either advance was not called yet or scanner is already past the end position)\n          return {\n            leadingTrivia: leadingTrivia,\n            trailingTrivia: undefined,\n            token: undefined\n          };\n        } // normally scanner returns the smallest available token\n        // check the kind of context node to determine if scanner should have more greedy behavior and consume more text.\n\n\n        var expectedScanAction = shouldRescanGreaterThanToken(n) ? 1\n        /* RescanGreaterThanToken */\n        : shouldRescanSlashToken(n) ? 2\n        /* RescanSlashToken */\n        : shouldRescanTemplateToken(n) ? 3\n        /* RescanTemplateToken */\n        : shouldRescanJsxIdentifier(n) ? 4\n        /* RescanJsxIdentifier */\n        : 0\n        /* Scan */\n        ;\n\n        if (lastTokenInfo && expectedScanAction === lastScanAction) {\n          // readTokenInfo was called before with the same expected scan action.\n          // No need to re-scan text, return existing 'lastTokenInfo'\n          // it is ok to call fixTokenKind here since it does not affect\n          // what portion of text is consumed. In opposize rescanning can change it,\n          // i.e. for '>=' when originally scanner eats just one character\n          // and rescanning forces it to consume more.\n          return fixTokenKind(lastTokenInfo, n);\n        }\n\n        if (scanner.getStartPos() !== savedPos) {\n          ts.Debug.assert(lastTokenInfo !== undefined); // readTokenInfo was called before but scan action differs - rescan text\n\n          scanner.setTextPos(savedPos);\n          scanner.scan();\n        }\n\n        var currentToken = scanner.getToken();\n\n        if (expectedScanAction === 1\n        /* RescanGreaterThanToken */\n        && currentToken === 27\n        /* GreaterThanToken */\n        ) {\n            currentToken = scanner.reScanGreaterToken();\n            ts.Debug.assert(n.kind === currentToken);\n            lastScanAction = 1\n            /* RescanGreaterThanToken */\n            ;\n          } else if (expectedScanAction === 2\n        /* RescanSlashToken */\n        && startsWithSlashToken(currentToken)) {\n          currentToken = scanner.reScanSlashToken();\n          ts.Debug.assert(n.kind === currentToken);\n          lastScanAction = 2\n          /* RescanSlashToken */\n          ;\n        } else if (expectedScanAction === 3\n        /* RescanTemplateToken */\n        && currentToken === 16\n        /* CloseBraceToken */\n        ) {\n            currentToken = scanner.reScanTemplateToken();\n            lastScanAction = 3\n            /* RescanTemplateToken */\n            ;\n          } else if (expectedScanAction === 4\n        /* RescanJsxIdentifier */\n        && currentToken === 69\n        /* Identifier */\n        ) {\n            currentToken = scanner.scanJsxIdentifier();\n            lastScanAction = 4\n            /* RescanJsxIdentifier */\n            ;\n          } else {\n          lastScanAction = 0\n          /* Scan */\n          ;\n        }\n\n        var token = {\n          pos: scanner.getStartPos(),\n          end: scanner.getTextPos(),\n          kind: currentToken\n        }; // consume trailing trivia\n\n        if (trailingTrivia) {\n          trailingTrivia = undefined;\n        }\n\n        while (scanner.getStartPos() < endPos) {\n          currentToken = scanner.scan();\n\n          if (!ts.isTrivia(currentToken)) {\n            break;\n          }\n\n          var trivia = {\n            pos: scanner.getStartPos(),\n            end: scanner.getTextPos(),\n            kind: currentToken\n          };\n\n          if (!trailingTrivia) {\n            trailingTrivia = [];\n          }\n\n          trailingTrivia.push(trivia);\n\n          if (currentToken === 4\n          /* NewLineTrivia */\n          ) {\n              // move past new line\n              scanner.scan();\n              break;\n            }\n        }\n\n        lastTokenInfo = {\n          leadingTrivia: leadingTrivia,\n          trailingTrivia: trailingTrivia,\n          token: token\n        };\n        return fixTokenKind(lastTokenInfo, n);\n      }\n\n      function isOnToken() {\n        ts.Debug.assert(scanner !== undefined);\n        var current = lastTokenInfo && lastTokenInfo.token.kind || scanner.getToken();\n        var startPos = lastTokenInfo && lastTokenInfo.token.pos || scanner.getStartPos();\n        return startPos < endPos && current !== 1\n        /* EndOfFileToken */\n        && !ts.isTrivia(current);\n      } // when containing node in the tree is token \n      // but its kind differs from the kind that was returned by the scanner,\n      // then kind needs to be fixed. This might happen in cases \n      // when parser interprets token differently, i.e keyword treated as identifier\n\n\n      function fixTokenKind(tokenInfo, container) {\n        if (ts.isToken(container) && tokenInfo.token.kind !== container.kind) {\n          tokenInfo.token.kind = container.kind;\n        }\n\n        return tokenInfo;\n      }\n    }\n\n    formatting.getFormattingScanner = getFormattingScanner;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); /// <reference path=\"references.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var FormattingContext = function () {\n      function FormattingContext(sourceFile, formattingRequestKind) {\n        this.sourceFile = sourceFile;\n        this.formattingRequestKind = formattingRequestKind;\n      }\n\n      FormattingContext.prototype.updateContext = function (currentRange, currentTokenParent, nextRange, nextTokenParent, commonParent) {\n        ts.Debug.assert(currentRange !== undefined, \"currentTokenSpan is null\");\n        ts.Debug.assert(currentTokenParent !== undefined, \"currentTokenParent is null\");\n        ts.Debug.assert(nextRange !== undefined, \"nextTokenSpan is null\");\n        ts.Debug.assert(nextTokenParent !== undefined, \"nextTokenParent is null\");\n        ts.Debug.assert(commonParent !== undefined, \"commonParent is null\");\n        this.currentTokenSpan = currentRange;\n        this.currentTokenParent = currentTokenParent;\n        this.nextTokenSpan = nextRange;\n        this.nextTokenParent = nextTokenParent;\n        this.contextNode = commonParent; // drop cached results\n\n        this.contextNodeAllOnSameLine = undefined;\n        this.nextNodeAllOnSameLine = undefined;\n        this.tokensAreOnSameLine = undefined;\n        this.contextNodeBlockIsOnOneLine = undefined;\n        this.nextNodeBlockIsOnOneLine = undefined;\n      };\n\n      FormattingContext.prototype.ContextNodeAllOnSameLine = function () {\n        if (this.contextNodeAllOnSameLine === undefined) {\n          this.contextNodeAllOnSameLine = this.NodeIsOnOneLine(this.contextNode);\n        }\n\n        return this.contextNodeAllOnSameLine;\n      };\n\n      FormattingContext.prototype.NextNodeAllOnSameLine = function () {\n        if (this.nextNodeAllOnSameLine === undefined) {\n          this.nextNodeAllOnSameLine = this.NodeIsOnOneLine(this.nextTokenParent);\n        }\n\n        return this.nextNodeAllOnSameLine;\n      };\n\n      FormattingContext.prototype.TokensAreOnSameLine = function () {\n        if (this.tokensAreOnSameLine === undefined) {\n          var startLine = this.sourceFile.getLineAndCharacterOfPosition(this.currentTokenSpan.pos).line;\n          var endLine = this.sourceFile.getLineAndCharacterOfPosition(this.nextTokenSpan.pos).line;\n          this.tokensAreOnSameLine = startLine === endLine;\n        }\n\n        return this.tokensAreOnSameLine;\n      };\n\n      FormattingContext.prototype.ContextNodeBlockIsOnOneLine = function () {\n        if (this.contextNodeBlockIsOnOneLine === undefined) {\n          this.contextNodeBlockIsOnOneLine = this.BlockIsOnOneLine(this.contextNode);\n        }\n\n        return this.contextNodeBlockIsOnOneLine;\n      };\n\n      FormattingContext.prototype.NextNodeBlockIsOnOneLine = function () {\n        if (this.nextNodeBlockIsOnOneLine === undefined) {\n          this.nextNodeBlockIsOnOneLine = this.BlockIsOnOneLine(this.nextTokenParent);\n        }\n\n        return this.nextNodeBlockIsOnOneLine;\n      };\n\n      FormattingContext.prototype.NodeIsOnOneLine = function (node) {\n        var startLine = this.sourceFile.getLineAndCharacterOfPosition(node.getStart(this.sourceFile)).line;\n        var endLine = this.sourceFile.getLineAndCharacterOfPosition(node.getEnd()).line;\n        return startLine === endLine;\n      };\n\n      FormattingContext.prototype.BlockIsOnOneLine = function (node) {\n        var openBrace = ts.findChildOfKind(node, 15\n        /* OpenBraceToken */\n        , this.sourceFile);\n        var closeBrace = ts.findChildOfKind(node, 16\n        /* CloseBraceToken */\n        , this.sourceFile);\n\n        if (openBrace && closeBrace) {\n          var startLine = this.sourceFile.getLineAndCharacterOfPosition(openBrace.getEnd()).line;\n          var endLine = this.sourceFile.getLineAndCharacterOfPosition(closeBrace.getStart(this.sourceFile)).line;\n          return startLine === endLine;\n        }\n\n        return false;\n      };\n\n      return FormattingContext;\n    }();\n\n    formatting.FormattingContext = FormattingContext;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); /// <reference path=\"references.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    (function (FormattingRequestKind) {\n      FormattingRequestKind[FormattingRequestKind[\"FormatDocument\"] = 0] = \"FormatDocument\";\n      FormattingRequestKind[FormattingRequestKind[\"FormatSelection\"] = 1] = \"FormatSelection\";\n      FormattingRequestKind[FormattingRequestKind[\"FormatOnEnter\"] = 2] = \"FormatOnEnter\";\n      FormattingRequestKind[FormattingRequestKind[\"FormatOnSemicolon\"] = 3] = \"FormatOnSemicolon\";\n      FormattingRequestKind[FormattingRequestKind[\"FormatOnClosingCurlyBrace\"] = 4] = \"FormatOnClosingCurlyBrace\";\n    })(formatting.FormattingRequestKind || (formatting.FormattingRequestKind = {}));\n\n    var FormattingRequestKind = formatting.FormattingRequestKind;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var Rule = function () {\n      function Rule(Descriptor, Operation, Flag) {\n        if (Flag === void 0) {\n          Flag = 0\n          /* None */\n          ;\n        }\n\n        this.Descriptor = Descriptor;\n        this.Operation = Operation;\n        this.Flag = Flag;\n      }\n\n      Rule.prototype.toString = function () {\n        return \"[desc=\" + this.Descriptor + \",\" + \"operation=\" + this.Operation + \",\" + \"flag=\" + this.Flag + \"]\";\n      };\n\n      return Rule;\n    }();\n\n    formatting.Rule = Rule;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    (function (RuleAction) {\n      RuleAction[RuleAction[\"Ignore\"] = 1] = \"Ignore\";\n      RuleAction[RuleAction[\"Space\"] = 2] = \"Space\";\n      RuleAction[RuleAction[\"NewLine\"] = 4] = \"NewLine\";\n      RuleAction[RuleAction[\"Delete\"] = 8] = \"Delete\";\n    })(formatting.RuleAction || (formatting.RuleAction = {}));\n\n    var RuleAction = formatting.RuleAction;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var RuleDescriptor = function () {\n      function RuleDescriptor(LeftTokenRange, RightTokenRange) {\n        this.LeftTokenRange = LeftTokenRange;\n        this.RightTokenRange = RightTokenRange;\n      }\n\n      RuleDescriptor.prototype.toString = function () {\n        return \"[leftRange=\" + this.LeftTokenRange + \",\" + \"rightRange=\" + this.RightTokenRange + \"]\";\n      };\n\n      RuleDescriptor.create1 = function (left, right) {\n        return RuleDescriptor.create4(formatting.Shared.TokenRange.FromToken(left), formatting.Shared.TokenRange.FromToken(right));\n      };\n\n      RuleDescriptor.create2 = function (left, right) {\n        return RuleDescriptor.create4(left, formatting.Shared.TokenRange.FromToken(right));\n      };\n\n      RuleDescriptor.create3 = function (left, right) {\n        return RuleDescriptor.create4(formatting.Shared.TokenRange.FromToken(left), right);\n      };\n\n      RuleDescriptor.create4 = function (left, right) {\n        return new RuleDescriptor(left, right);\n      };\n\n      return RuleDescriptor;\n    }();\n\n    formatting.RuleDescriptor = RuleDescriptor;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    (function (RuleFlags) {\n      RuleFlags[RuleFlags[\"None\"] = 0] = \"None\";\n      RuleFlags[RuleFlags[\"CanDeleteNewLines\"] = 1] = \"CanDeleteNewLines\";\n    })(formatting.RuleFlags || (formatting.RuleFlags = {}));\n\n    var RuleFlags = formatting.RuleFlags;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var RuleOperation = function () {\n      function RuleOperation() {\n        this.Context = null;\n        this.Action = null;\n      }\n\n      RuleOperation.prototype.toString = function () {\n        return \"[context=\" + this.Context + \",\" + \"action=\" + this.Action + \"]\";\n      };\n\n      RuleOperation.create1 = function (action) {\n        return RuleOperation.create2(formatting.RuleOperationContext.Any, action);\n      };\n\n      RuleOperation.create2 = function (context, action) {\n        var result = new RuleOperation();\n        result.Context = context;\n        result.Action = action;\n        return result;\n      };\n\n      return RuleOperation;\n    }();\n\n    formatting.RuleOperation = RuleOperation;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var RuleOperationContext = function () {\n      function RuleOperationContext() {\n        var funcs = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          funcs[_i - 0] = arguments[_i];\n        }\n\n        this.customContextChecks = funcs;\n      }\n\n      RuleOperationContext.prototype.IsAny = function () {\n        return this === RuleOperationContext.Any;\n      };\n\n      RuleOperationContext.prototype.InContext = function (context) {\n        if (this.IsAny()) {\n          return true;\n        }\n\n        for (var _i = 0, _a = this.customContextChecks; _i < _a.length; _i++) {\n          var check = _a[_i];\n\n          if (!check(context)) {\n            return false;\n          }\n        }\n\n        return true;\n      };\n\n      RuleOperationContext.Any = new RuleOperationContext();\n      return RuleOperationContext;\n    }();\n\n    formatting.RuleOperationContext = RuleOperationContext;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var Rules = function () {\n      function Rules() {\n        ///\n        /// Common Rules\n        ///\n        // Leave comments alone\n        this.IgnoreBeforeComment = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.Comments), formatting.RuleOperation.create1(1\n        /* Ignore */\n        ));\n        this.IgnoreAfterLineComment = new formatting.Rule(formatting.RuleDescriptor.create3(2\n        /* SingleLineCommentTrivia */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create1(1\n        /* Ignore */\n        )); // Space after keyword but not before ; or : or ?\n\n        this.NoSpaceBeforeSemicolon = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 23\n        /* SemicolonToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBeforeColon = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 54\n        /* ColonToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNotBinaryOpContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBeforeQuestionMark = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 53\n        /* QuestionToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNotBinaryOpContext), 8\n        /* Delete */\n        ));\n        this.SpaceAfterColon = new formatting.Rule(formatting.RuleDescriptor.create3(54\n        /* ColonToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNotBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterQuestionMarkInConditionalOperator = new formatting.Rule(formatting.RuleDescriptor.create3(53\n        /* QuestionToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsConditionalOperatorContext), 2\n        /* Space */\n        ));\n        this.NoSpaceAfterQuestionMark = new formatting.Rule(formatting.RuleDescriptor.create3(53\n        /* QuestionToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.SpaceAfterSemicolon = new formatting.Rule(formatting.RuleDescriptor.create3(23\n        /* SemicolonToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        )); // Space after }.\n\n        this.SpaceAfterCloseBrace = new formatting.Rule(formatting.RuleDescriptor.create3(16\n        /* CloseBraceToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsAfterCodeBlockContext), 2\n        /* Space */\n        )); // Special case for (}, else) and (}, while) since else & while tokens are not part of the tree which makes SpaceAfterCloseBrace rule not applied\n\n        this.SpaceBetweenCloseBraceAndElse = new formatting.Rule(formatting.RuleDescriptor.create1(16\n        /* CloseBraceToken */\n        , 80\n        /* ElseKeyword */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.SpaceBetweenCloseBraceAndWhile = new formatting.Rule(formatting.RuleDescriptor.create1(16\n        /* CloseBraceToken */\n        , 104\n        /* WhileKeyword */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.NoSpaceAfterCloseBrace = new formatting.Rule(formatting.RuleDescriptor.create3(16\n        /* CloseBraceToken */\n        , formatting.Shared.TokenRange.FromTokens([18\n        /* CloseParenToken */\n        , 20\n        /* CloseBracketToken */\n        , 24\n        /* CommaToken */\n        , 23\n        /* SemicolonToken */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // No space for dot\n\n        this.NoSpaceBeforeDot = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 21\n        /* DotToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterDot = new formatting.Rule(formatting.RuleDescriptor.create3(21\n        /* DotToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // No space before and after indexer\n\n        this.NoSpaceBeforeOpenBracket = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 19\n        /* OpenBracketToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterCloseBracket = new formatting.Rule(formatting.RuleDescriptor.create3(20\n        /* CloseBracketToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNotBeforeBlockInFunctionDeclarationContext), 8\n        /* Delete */\n        )); // Place a space before open brace in a function declaration\n\n        this.FunctionOpenBraceLeftTokenRange = formatting.Shared.TokenRange.AnyIncludingMultilineComments;\n        this.SpaceBeforeOpenBraceInFunction = new formatting.Rule(formatting.RuleDescriptor.create2(this.FunctionOpenBraceLeftTokenRange, 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclContext, Rules.IsBeforeBlockContext, Rules.IsNotFormatOnEnter, Rules.IsSameLineTokenOrBeforeMultilineBlockContext), 2\n        /* Space */\n        ), 1\n        /* CanDeleteNewLines */\n        ); // Place a space before open brace in a TypeScript declaration that has braces as children (class, module, enum, etc)\n\n        this.TypeScriptOpenBraceLeftTokenRange = formatting.Shared.TokenRange.FromTokens([69\n        /* Identifier */\n        , 3\n        /* MultiLineCommentTrivia */\n        , 73\n        /* ClassKeyword */\n        ]);\n        this.SpaceBeforeOpenBraceInTypeScriptDeclWithBlock = new formatting.Rule(formatting.RuleDescriptor.create2(this.TypeScriptOpenBraceLeftTokenRange, 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsTypeScriptDeclWithBlockContext, Rules.IsNotFormatOnEnter, Rules.IsSameLineTokenOrBeforeMultilineBlockContext), 2\n        /* Space */\n        ), 1\n        /* CanDeleteNewLines */\n        ); // Place a space before open brace in a control flow construct\n\n        this.ControlOpenBraceLeftTokenRange = formatting.Shared.TokenRange.FromTokens([18\n        /* CloseParenToken */\n        , 3\n        /* MultiLineCommentTrivia */\n        , 79\n        /* DoKeyword */\n        , 100\n        /* TryKeyword */\n        , 85\n        /* FinallyKeyword */\n        , 80\n        /* ElseKeyword */\n        ]);\n        this.SpaceBeforeOpenBraceInControl = new formatting.Rule(formatting.RuleDescriptor.create2(this.ControlOpenBraceLeftTokenRange, 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsControlDeclContext, Rules.IsNotFormatOnEnter, Rules.IsSameLineTokenOrBeforeMultilineBlockContext), 2\n        /* Space */\n        ), 1\n        /* CanDeleteNewLines */\n        ); // Insert a space after { and before } in single-line contexts, but remove space from empty object literals {}.\n\n        this.SpaceAfterOpenBrace = new formatting.Rule(formatting.RuleDescriptor.create3(15\n        /* OpenBraceToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSingleLineBlockContext), 2\n        /* Space */\n        ));\n        this.SpaceBeforeCloseBrace = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 16\n        /* CloseBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSingleLineBlockContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBetweenEmptyBraceBrackets = new formatting.Rule(formatting.RuleDescriptor.create1(15\n        /* OpenBraceToken */\n        , 16\n        /* CloseBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsObjectContext), 8\n        /* Delete */\n        )); // Insert new line after { and before } in multi-line contexts.\n\n        this.NewLineAfterOpenBraceInBlockContext = new formatting.Rule(formatting.RuleDescriptor.create3(15\n        /* OpenBraceToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsMultilineBlockContext), 4\n        /* NewLine */\n        )); // For functions and control block place } on a new line    [multi-line rule]\n\n        this.NewLineBeforeCloseBraceInBlockContext = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.AnyIncludingMultilineComments, 16\n        /* CloseBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsMultilineBlockContext), 4\n        /* NewLine */\n        )); // Special handling of unary operators.\n        // Prefix operators generally shouldn't have a space between\n        // them and their target unary expression.\n\n        this.NoSpaceAfterUnaryPrefixOperator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.UnaryPrefixOperators, formatting.Shared.TokenRange.UnaryPrefixExpressions), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNotBinaryOpContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterUnaryPreincrementOperator = new formatting.Rule(formatting.RuleDescriptor.create3(41\n        /* PlusPlusToken */\n        , formatting.Shared.TokenRange.UnaryPreincrementExpressions), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterUnaryPredecrementOperator = new formatting.Rule(formatting.RuleDescriptor.create3(42\n        /* MinusMinusToken */\n        , formatting.Shared.TokenRange.UnaryPredecrementExpressions), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBeforeUnaryPostincrementOperator = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.UnaryPostincrementExpressions, 41\n        /* PlusPlusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBeforeUnaryPostdecrementOperator = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.UnaryPostdecrementExpressions, 42\n        /* MinusMinusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // More unary operator special-casing.\n        // DevDiv 181814:  Be careful when removing leading whitespace\n        // around unary operators.  Examples:\n        //      1 - -2  --X-->  1--2\n        //      a + ++b --X-->  a+++b\n\n        this.SpaceAfterPostincrementWhenFollowedByAdd = new formatting.Rule(formatting.RuleDescriptor.create1(41\n        /* PlusPlusToken */\n        , 35\n        /* PlusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterAddWhenFollowedByUnaryPlus = new formatting.Rule(formatting.RuleDescriptor.create1(35\n        /* PlusToken */\n        , 35\n        /* PlusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterAddWhenFollowedByPreincrement = new formatting.Rule(formatting.RuleDescriptor.create1(35\n        /* PlusToken */\n        , 41\n        /* PlusPlusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterPostdecrementWhenFollowedBySubtract = new formatting.Rule(formatting.RuleDescriptor.create1(42\n        /* MinusMinusToken */\n        , 36\n        /* MinusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterSubtractWhenFollowedByUnaryMinus = new formatting.Rule(formatting.RuleDescriptor.create1(36\n        /* MinusToken */\n        , 36\n        /* MinusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterSubtractWhenFollowedByPredecrement = new formatting.Rule(formatting.RuleDescriptor.create1(36\n        /* MinusToken */\n        , 42\n        /* MinusMinusToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBeforeComma = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 24\n        /* CommaToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.SpaceAfterCertainKeywords = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.FromTokens([102\n        /* VarKeyword */\n        , 98\n        /* ThrowKeyword */\n        , 92\n        /* NewKeyword */\n        , 78\n        /* DeleteKeyword */\n        , 94\n        /* ReturnKeyword */\n        , 101\n        /* TypeOfKeyword */\n        , 119\n        /* AwaitKeyword */\n        ]), formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterLetConstInVariableDeclaration = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.FromTokens([108\n        /* LetKeyword */\n        , 74\n        /* ConstKeyword */\n        ]), formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsStartOfVariableDeclarationList), 2\n        /* Space */\n        ));\n        this.NoSpaceBeforeOpenParenInFuncCall = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsFunctionCallOrNewContext, Rules.IsPreviousTokenNotComma), 8\n        /* Delete */\n        ));\n        this.SpaceAfterFunctionInFuncDecl = new formatting.Rule(formatting.RuleDescriptor.create3(87\n        /* FunctionKeyword */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBeforeOpenParenInFuncDecl = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsFunctionDeclContext), 8\n        /* Delete */\n        ));\n        this.SpaceAfterVoidOperator = new formatting.Rule(formatting.RuleDescriptor.create3(103\n        /* VoidKeyword */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsVoidOpContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBetweenReturnAndSemicolon = new formatting.Rule(formatting.RuleDescriptor.create1(94\n        /* ReturnKeyword */\n        , 23\n        /* SemicolonToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // Add a space between statements. All keywords except (do,else,case) has open/close parens after them.\n        // So, we have a rule to add a space for [),Any], [do,Any], [else,Any], and [case,Any]\n\n        this.SpaceBetweenStatements = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.FromTokens([18\n        /* CloseParenToken */\n        , 79\n        /* DoKeyword */\n        , 80\n        /* ElseKeyword */\n        , 71\n        /* CaseKeyword */\n        ]), formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNotForContext), 2\n        /* Space */\n        )); // This low-pri rule takes care of \"try {\" and \"finally {\" in case the rule SpaceBeforeOpenBraceInControl didn't execute on FormatOnEnter.\n\n        this.SpaceAfterTryFinally = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.FromTokens([100\n        /* TryKeyword */\n        , 85\n        /* FinallyKeyword */\n        ]), 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        )); //      get x() {}\n        //      set x(val) {}\n\n        this.SpaceAfterGetSetInMember = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.FromTokens([123\n        /* GetKeyword */\n        , 129\n        /* SetKeyword */\n        ]), 69\n        /* Identifier */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclContext), 2\n        /* Space */\n        )); // Special case for binary operators (that are keywords). For these we have to add a space and shouldn't follow any user options.\n\n        this.SpaceBeforeBinaryKeywordOperator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.BinaryKeywordOperators), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterBinaryKeywordOperator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.BinaryKeywordOperators, formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        )); // TypeScript-specific higher priority rules\n        // Treat constructor as an identifier in a function declaration, and remove spaces between constructor and following left parentheses\n\n        this.NoSpaceAfterConstructor = new formatting.Rule(formatting.RuleDescriptor.create1(121\n        /* ConstructorKeyword */\n        , 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // Use of module as a function call. e.g.: import m2 = module(\"m2\");\n\n        this.NoSpaceAfterModuleImport = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.FromTokens([125\n        /* ModuleKeyword */\n        , 127\n        /* RequireKeyword */\n        ]), 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // Add a space around certain TypeScript keywords\n\n        this.SpaceAfterCertainTypeScriptKeywords = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.FromTokens([115\n        /* AbstractKeyword */\n        , 73\n        /* ClassKeyword */\n        , 122\n        /* DeclareKeyword */\n        , 77\n        /* DefaultKeyword */\n        , 81\n        /* EnumKeyword */\n        , 82\n        /* ExportKeyword */\n        , 83\n        /* ExtendsKeyword */\n        , 123\n        /* GetKeyword */\n        , 106\n        /* ImplementsKeyword */\n        , 89\n        /* ImportKeyword */\n        , 107\n        /* InterfaceKeyword */\n        , 125\n        /* ModuleKeyword */\n        , 126\n        /* NamespaceKeyword */\n        , 110\n        /* PrivateKeyword */\n        , 112\n        /* PublicKeyword */\n        , 111\n        /* ProtectedKeyword */\n        , 129\n        /* SetKeyword */\n        , 113\n        /* StaticKeyword */\n        , 132\n        /* TypeKeyword */\n        ]), formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.SpaceBeforeCertainTypeScriptKeywords = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.FromTokens([83\n        /* ExtendsKeyword */\n        , 106\n        /* ImplementsKeyword */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        )); // Treat string literals in module names as identifiers, and add a space between the literal and the opening Brace braces, e.g.: module \"m2\" {\n\n        this.SpaceAfterModuleName = new formatting.Rule(formatting.RuleDescriptor.create1(9\n        /* StringLiteral */\n        , 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsModuleDeclContext), 2\n        /* Space */\n        )); // Lambda expressions\n\n        this.SpaceBeforeArrow = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 34\n        /* EqualsGreaterThanToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterArrow = new formatting.Rule(formatting.RuleDescriptor.create3(34\n        /* EqualsGreaterThanToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        )); // Optional parameters and let args\n\n        this.NoSpaceAfterEllipsis = new formatting.Rule(formatting.RuleDescriptor.create1(22\n        /* DotDotDotToken */\n        , 69\n        /* Identifier */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterOptionalParameters = new formatting.Rule(formatting.RuleDescriptor.create3(53\n        /* QuestionToken */\n        , formatting.Shared.TokenRange.FromTokens([18\n        /* CloseParenToken */\n        , 24\n        /* CommaToken */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNotBinaryOpContext), 8\n        /* Delete */\n        )); // generics and type assertions\n\n        this.NoSpaceBeforeOpenAngularBracket = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.TypeNames, 25\n        /* LessThanToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsTypeArgumentOrParameterOrAssertionContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBetweenCloseParenAndAngularBracket = new formatting.Rule(formatting.RuleDescriptor.create1(18\n        /* CloseParenToken */\n        , 25\n        /* LessThanToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsTypeArgumentOrParameterOrAssertionContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterOpenAngularBracket = new formatting.Rule(formatting.RuleDescriptor.create3(25\n        /* LessThanToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsTypeArgumentOrParameterOrAssertionContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBeforeCloseAngularBracket = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 27\n        /* GreaterThanToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsTypeArgumentOrParameterOrAssertionContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterCloseAngularBracket = new formatting.Rule(formatting.RuleDescriptor.create3(27\n        /* GreaterThanToken */\n        , formatting.Shared.TokenRange.FromTokens([17\n        /* OpenParenToken */\n        , 19\n        /* OpenBracketToken */\n        , 27\n        /* GreaterThanToken */\n        , 24\n        /* CommaToken */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsTypeArgumentOrParameterOrAssertionContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterTypeAssertion = new formatting.Rule(formatting.RuleDescriptor.create3(27\n        /* GreaterThanToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsTypeAssertionContext), 8\n        /* Delete */\n        )); // Remove spaces in empty interface literals. e.g.: x: {}\n\n        this.NoSpaceBetweenEmptyInterfaceBraceBrackets = new formatting.Rule(formatting.RuleDescriptor.create1(15\n        /* OpenBraceToken */\n        , 16\n        /* CloseBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsObjectTypeContext), 8\n        /* Delete */\n        )); // decorators\n\n        this.SpaceBeforeAt = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 55\n        /* AtToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.NoSpaceAfterAt = new formatting.Rule(formatting.RuleDescriptor.create3(55\n        /* AtToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.SpaceAfterDecorator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.FromTokens([115\n        /* AbstractKeyword */\n        , 69\n        /* Identifier */\n        , 82\n        /* ExportKeyword */\n        , 77\n        /* DefaultKeyword */\n        , 73\n        /* ClassKeyword */\n        , 113\n        /* StaticKeyword */\n        , 112\n        /* PublicKeyword */\n        , 110\n        /* PrivateKeyword */\n        , 111\n        /* ProtectedKeyword */\n        , 123\n        /* GetKeyword */\n        , 129\n        /* SetKeyword */\n        , 19\n        /* OpenBracketToken */\n        , 37\n        /* AsteriskToken */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsEndOfDecoratorContextOnSameLine), 2\n        /* Space */\n        ));\n        this.NoSpaceBetweenFunctionKeywordAndStar = new formatting.Rule(formatting.RuleDescriptor.create1(87\n        /* FunctionKeyword */\n        , 37\n        /* AsteriskToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclarationOrFunctionExpressionContext), 8\n        /* Delete */\n        ));\n        this.SpaceAfterStarInGeneratorDeclaration = new formatting.Rule(formatting.RuleDescriptor.create3(37\n        /* AsteriskToken */\n        , formatting.Shared.TokenRange.FromTokens([69\n        /* Identifier */\n        , 17\n        /* OpenParenToken */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclarationOrFunctionExpressionContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBetweenYieldKeywordAndStar = new formatting.Rule(formatting.RuleDescriptor.create1(114\n        /* YieldKeyword */\n        , 37\n        /* AsteriskToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsYieldOrYieldStarWithOperand), 8\n        /* Delete */\n        ));\n        this.SpaceBetweenYieldOrYieldStarAndOperand = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.FromTokens([114\n        /* YieldKeyword */\n        , 37\n        /* AsteriskToken */\n        ]), formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsYieldOrYieldStarWithOperand), 2\n        /* Space */\n        )); // Async-await\n\n        this.SpaceBetweenAsyncAndOpenParen = new formatting.Rule(formatting.RuleDescriptor.create1(118\n        /* AsyncKeyword */\n        , 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsArrowFunctionContext, Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.SpaceBetweenAsyncAndFunctionKeyword = new formatting.Rule(formatting.RuleDescriptor.create1(118\n        /* AsyncKeyword */\n        , 87\n        /* FunctionKeyword */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        )); // template string\n\n        this.NoSpaceBetweenTagAndTemplateString = new formatting.Rule(formatting.RuleDescriptor.create3(69\n        /* Identifier */\n        , formatting.Shared.TokenRange.FromTokens([11\n        /* NoSubstitutionTemplateLiteral */\n        , 12\n        /* TemplateHead */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // These rules are higher in priority than user-configurable rules.\n\n        this.HighPriorityCommonRules = [this.IgnoreBeforeComment, this.IgnoreAfterLineComment, this.NoSpaceBeforeColon, this.SpaceAfterColon, this.NoSpaceBeforeQuestionMark, this.SpaceAfterQuestionMarkInConditionalOperator, this.NoSpaceAfterQuestionMark, this.NoSpaceBeforeDot, this.NoSpaceAfterDot, this.NoSpaceAfterUnaryPrefixOperator, this.NoSpaceAfterUnaryPreincrementOperator, this.NoSpaceAfterUnaryPredecrementOperator, this.NoSpaceBeforeUnaryPostincrementOperator, this.NoSpaceBeforeUnaryPostdecrementOperator, this.SpaceAfterPostincrementWhenFollowedByAdd, this.SpaceAfterAddWhenFollowedByUnaryPlus, this.SpaceAfterAddWhenFollowedByPreincrement, this.SpaceAfterPostdecrementWhenFollowedBySubtract, this.SpaceAfterSubtractWhenFollowedByUnaryMinus, this.SpaceAfterSubtractWhenFollowedByPredecrement, this.NoSpaceAfterCloseBrace, this.SpaceAfterOpenBrace, this.SpaceBeforeCloseBrace, this.NewLineBeforeCloseBraceInBlockContext, this.SpaceAfterCloseBrace, this.SpaceBetweenCloseBraceAndElse, this.SpaceBetweenCloseBraceAndWhile, this.NoSpaceBetweenEmptyBraceBrackets, this.NoSpaceBetweenFunctionKeywordAndStar, this.SpaceAfterStarInGeneratorDeclaration, this.SpaceAfterFunctionInFuncDecl, this.NewLineAfterOpenBraceInBlockContext, this.SpaceAfterGetSetInMember, this.NoSpaceBetweenYieldKeywordAndStar, this.SpaceBetweenYieldOrYieldStarAndOperand, this.NoSpaceBetweenReturnAndSemicolon, this.SpaceAfterCertainKeywords, this.SpaceAfterLetConstInVariableDeclaration, this.NoSpaceBeforeOpenParenInFuncCall, this.SpaceBeforeBinaryKeywordOperator, this.SpaceAfterBinaryKeywordOperator, this.SpaceAfterVoidOperator, this.SpaceBetweenAsyncAndOpenParen, this.SpaceBetweenAsyncAndFunctionKeyword, this.NoSpaceBetweenTagAndTemplateString, // TypeScript-specific rules\n        this.NoSpaceAfterConstructor, this.NoSpaceAfterModuleImport, this.SpaceAfterCertainTypeScriptKeywords, this.SpaceBeforeCertainTypeScriptKeywords, this.SpaceAfterModuleName, this.SpaceBeforeArrow, this.SpaceAfterArrow, this.NoSpaceAfterEllipsis, this.NoSpaceAfterOptionalParameters, this.NoSpaceBetweenEmptyInterfaceBraceBrackets, this.NoSpaceBeforeOpenAngularBracket, this.NoSpaceBetweenCloseParenAndAngularBracket, this.NoSpaceAfterOpenAngularBracket, this.NoSpaceBeforeCloseAngularBracket, this.NoSpaceAfterCloseAngularBracket, this.NoSpaceAfterTypeAssertion, this.SpaceBeforeAt, this.NoSpaceAfterAt, this.SpaceAfterDecorator]; // These rules are lower in priority than user-configurable rules.\n\n        this.LowPriorityCommonRules = [this.NoSpaceBeforeSemicolon, this.SpaceBeforeOpenBraceInControl, this.SpaceBeforeOpenBraceInFunction, this.SpaceBeforeOpenBraceInTypeScriptDeclWithBlock, this.NoSpaceBeforeComma, this.NoSpaceBeforeOpenBracket, this.NoSpaceAfterCloseBracket, this.SpaceAfterSemicolon, this.NoSpaceBeforeOpenParenInFuncDecl, this.SpaceBetweenStatements, this.SpaceAfterTryFinally]; ///\n        /// Rules controlled by user options\n        ///\n        // Insert space after comma delimiter\n\n        this.SpaceAfterComma = new formatting.Rule(formatting.RuleDescriptor.create3(24\n        /* CommaToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsNextTokenNotCloseBracket), 2\n        /* Space */\n        ));\n        this.NoSpaceAfterComma = new formatting.Rule(formatting.RuleDescriptor.create3(24\n        /* CommaToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // Insert space before and after binary operators\n\n        this.SpaceBeforeBinaryOperator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.BinaryOperators), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.SpaceAfterBinaryOperator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.BinaryOperators, formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBeforeBinaryOperator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.BinaryOperators), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterBinaryOperator = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.BinaryOperators, formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsBinaryOpContext), 8\n        /* Delete */\n        )); // Insert space after keywords in control flow statements\n\n        this.SpaceAfterKeywordInControl = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Keywords, 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsControlDeclContext), 2\n        /* Space */\n        ));\n        this.NoSpaceAfterKeywordInControl = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Keywords, 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsControlDeclContext), 8\n        /* Delete */\n        )); // Open Brace braces after function\n        //TypeScript: Function can have return types, which can be made of tons of different token kinds\n\n        this.NewLineBeforeOpenBraceInFunction = new formatting.Rule(formatting.RuleDescriptor.create2(this.FunctionOpenBraceLeftTokenRange, 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclContext, Rules.IsBeforeMultilineBlockContext), 4\n        /* NewLine */\n        ), 1\n        /* CanDeleteNewLines */\n        ); // Open Brace braces after TypeScript module/class/interface\n\n        this.NewLineBeforeOpenBraceInTypeScriptDeclWithBlock = new formatting.Rule(formatting.RuleDescriptor.create2(this.TypeScriptOpenBraceLeftTokenRange, 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsTypeScriptDeclWithBlockContext, Rules.IsBeforeMultilineBlockContext), 4\n        /* NewLine */\n        ), 1\n        /* CanDeleteNewLines */\n        ); // Open Brace braces after control block\n\n        this.NewLineBeforeOpenBraceInControl = new formatting.Rule(formatting.RuleDescriptor.create2(this.ControlOpenBraceLeftTokenRange, 15\n        /* OpenBraceToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsControlDeclContext, Rules.IsBeforeMultilineBlockContext), 4\n        /* NewLine */\n        ), 1\n        /* CanDeleteNewLines */\n        ); // Insert space after semicolon in for statement\n\n        this.SpaceAfterSemicolonInFor = new formatting.Rule(formatting.RuleDescriptor.create3(23\n        /* SemicolonToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsForContext), 2\n        /* Space */\n        ));\n        this.NoSpaceAfterSemicolonInFor = new formatting.Rule(formatting.RuleDescriptor.create3(23\n        /* SemicolonToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext, Rules.IsForContext), 8\n        /* Delete */\n        )); // Insert space after opening and before closing nonempty parenthesis\n\n        this.SpaceAfterOpenParen = new formatting.Rule(formatting.RuleDescriptor.create3(17\n        /* OpenParenToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.SpaceBeforeCloseParen = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 18\n        /* CloseParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBetweenParens = new formatting.Rule(formatting.RuleDescriptor.create1(17\n        /* OpenParenToken */\n        , 18\n        /* CloseParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterOpenParen = new formatting.Rule(formatting.RuleDescriptor.create3(17\n        /* OpenParenToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBeforeCloseParen = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 18\n        /* CloseParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // Insert space after opening and before closing nonempty brackets\n\n        this.SpaceAfterOpenBracket = new formatting.Rule(formatting.RuleDescriptor.create3(19\n        /* OpenBracketToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.SpaceBeforeCloseBracket = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 20\n        /* CloseBracketToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBetweenBrackets = new formatting.Rule(formatting.RuleDescriptor.create1(19\n        /* OpenBracketToken */\n        , 20\n        /* CloseBracketToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceAfterOpenBracket = new formatting.Rule(formatting.RuleDescriptor.create3(19\n        /* OpenBracketToken */\n        , formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.NoSpaceBeforeCloseBracket = new formatting.Rule(formatting.RuleDescriptor.create2(formatting.Shared.TokenRange.Any, 20\n        /* CloseBracketToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        )); // Insert space after opening and before closing template string braces\n\n        this.NoSpaceAfterTemplateHeadAndMiddle = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.FromTokens([12\n        /* TemplateHead */\n        , 13\n        /* TemplateMiddle */\n        ]), formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.SpaceAfterTemplateHeadAndMiddle = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.FromTokens([12\n        /* TemplateHead */\n        , 13\n        /* TemplateMiddle */\n        ]), formatting.Shared.TokenRange.Any), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        ));\n        this.NoSpaceBeforeTemplateMiddleAndTail = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.FromTokens([13\n        /* TemplateMiddle */\n        , 14\n        /* TemplateTail */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 8\n        /* Delete */\n        ));\n        this.SpaceBeforeTemplateMiddleAndTail = new formatting.Rule(formatting.RuleDescriptor.create4(formatting.Shared.TokenRange.Any, formatting.Shared.TokenRange.FromTokens([13\n        /* TemplateMiddle */\n        , 14\n        /* TemplateTail */\n        ])), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsSameLineTokenContext), 2\n        /* Space */\n        )); // Insert space after function keyword for anonymous functions\n\n        this.SpaceAfterAnonymousFunctionKeyword = new formatting.Rule(formatting.RuleDescriptor.create1(87\n        /* FunctionKeyword */\n        , 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclContext), 2\n        /* Space */\n        ));\n        this.NoSpaceAfterAnonymousFunctionKeyword = new formatting.Rule(formatting.RuleDescriptor.create1(87\n        /* FunctionKeyword */\n        , 17\n        /* OpenParenToken */\n        ), formatting.RuleOperation.create2(new formatting.RuleOperationContext(Rules.IsFunctionDeclContext), 8\n        /* Delete */\n        ));\n      }\n\n      Rules.prototype.getRuleName = function (rule) {\n        var o = this;\n\n        for (var name_36 in o) {\n          if (o[name_36] === rule) {\n            return name_36;\n          }\n        }\n\n        throw new Error(\"Unknown rule\");\n      }; ///\n      /// Contexts\n      ///\n\n\n      Rules.IsForContext = function (context) {\n        return context.contextNode.kind === 202\n        /* ForStatement */\n        ;\n      };\n\n      Rules.IsNotForContext = function (context) {\n        return !Rules.IsForContext(context);\n      };\n\n      Rules.IsBinaryOpContext = function (context) {\n        switch (context.contextNode.kind) {\n          case 184\n          /* BinaryExpression */\n          :\n          case 185\n          /* ConditionalExpression */\n          :\n          case 192\n          /* AsExpression */\n          :\n          case 151\n          /* TypePredicate */\n          :\n          case 159\n          /* UnionType */\n          :\n          case 160\n          /* IntersectionType */\n          :\n            return true;\n          // equals in binding elements: function foo([[x, y] = [1, 2]])\n\n          case 166\n          /* BindingElement */\n          : // equals in type X = ...\n\n          case 219\n          /* TypeAliasDeclaration */\n          : // equal in import a = module('a');\n\n          case 224\n          /* ImportEqualsDeclaration */\n          : // equal in let a = 0;\n\n          case 214\n          /* VariableDeclaration */\n          : // equal in p = 0;\n\n          case 139\n          /* Parameter */\n          :\n          case 250\n          /* EnumMember */\n          :\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n            return context.currentTokenSpan.kind === 56\n            /* EqualsToken */\n            || context.nextTokenSpan.kind === 56\n            /* EqualsToken */\n            ;\n          // \"in\" keyword in for (let x in []) { }\n\n          case 203\n          /* ForInStatement */\n          :\n            return context.currentTokenSpan.kind === 90\n            /* InKeyword */\n            || context.nextTokenSpan.kind === 90\n            /* InKeyword */\n            ;\n          // Technically, \"of\" is not a binary operator, but format it the same way as \"in\"\n\n          case 204\n          /* ForOfStatement */\n          :\n            return context.currentTokenSpan.kind === 135\n            /* OfKeyword */\n            || context.nextTokenSpan.kind === 135\n            /* OfKeyword */\n            ;\n        }\n\n        return false;\n      };\n\n      Rules.IsNotBinaryOpContext = function (context) {\n        return !Rules.IsBinaryOpContext(context);\n      };\n\n      Rules.IsConditionalOperatorContext = function (context) {\n        return context.contextNode.kind === 185\n        /* ConditionalExpression */\n        ;\n      };\n\n      Rules.IsSameLineTokenOrBeforeMultilineBlockContext = function (context) {\n        //// This check is mainly used inside SpaceBeforeOpenBraceInControl and SpaceBeforeOpenBraceInFunction.\n        ////\n        //// Ex: \n        //// if (1)     { ....\n        ////      * ) and { are on the same line so apply the rule. Here we don't care whether it's same or multi block context\n        ////\n        //// Ex: \n        //// if (1)\n        //// { ... }\n        ////      * ) and { are on differnet lines. We only need to format if the block is multiline context. So in this case we don't format.\n        ////\n        //// Ex:\n        //// if (1) \n        //// { ...\n        //// }\n        ////      * ) and { are on differnet lines. We only need to format if the block is multiline context. So in this case we format.\n        return context.TokensAreOnSameLine() || Rules.IsBeforeMultilineBlockContext(context);\n      }; // This check is done before an open brace in a control construct, a function, or a typescript block declaration\n\n\n      Rules.IsBeforeMultilineBlockContext = function (context) {\n        return Rules.IsBeforeBlockContext(context) && !(context.NextNodeAllOnSameLine() || context.NextNodeBlockIsOnOneLine());\n      };\n\n      Rules.IsMultilineBlockContext = function (context) {\n        return Rules.IsBlockContext(context) && !(context.ContextNodeAllOnSameLine() || context.ContextNodeBlockIsOnOneLine());\n      };\n\n      Rules.IsSingleLineBlockContext = function (context) {\n        return Rules.IsBlockContext(context) && (context.ContextNodeAllOnSameLine() || context.ContextNodeBlockIsOnOneLine());\n      };\n\n      Rules.IsBlockContext = function (context) {\n        return Rules.NodeIsBlockContext(context.contextNode);\n      };\n\n      Rules.IsBeforeBlockContext = function (context) {\n        return Rules.NodeIsBlockContext(context.nextTokenParent);\n      }; // IMPORTANT!!! This method must return true ONLY for nodes with open and close braces as immediate children\n\n\n      Rules.NodeIsBlockContext = function (node) {\n        if (Rules.NodeIsTypeScriptDeclWithBlockContext(node)) {\n          // This means we are in a context that looks like a block to the user, but in the grammar is actually not a node (it's a class, module, enum, object type literal, etc).\n          return true;\n        }\n\n        switch (node.kind) {\n          case 195\n          /* Block */\n          :\n          case 223\n          /* CaseBlock */\n          :\n          case 168\n          /* ObjectLiteralExpression */\n          :\n          case 222\n          /* ModuleBlock */\n          :\n            return true;\n        }\n\n        return false;\n      };\n\n      Rules.IsFunctionDeclContext = function (context) {\n        switch (context.contextNode.kind) {\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          : //case SyntaxKind.MemberFunctionDeclaration:\n\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          : ///case SyntaxKind.MethodSignature:\n\n          case 148\n          /* CallSignature */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 177\n          /* ArrowFunction */\n          : //case SyntaxKind.ConstructorDeclaration:\n          //case SyntaxKind.SimpleArrowFunctionExpression:\n          //case SyntaxKind.ParenthesizedArrowFunctionExpression:\n\n          case 218\n          /* InterfaceDeclaration */\n          :\n            return true;\n        }\n\n        return false;\n      };\n\n      Rules.IsFunctionDeclarationOrFunctionExpressionContext = function (context) {\n        return context.contextNode.kind === 216\n        /* FunctionDeclaration */\n        || context.contextNode.kind === 176\n        /* FunctionExpression */\n        ;\n      };\n\n      Rules.IsTypeScriptDeclWithBlockContext = function (context) {\n        return Rules.NodeIsTypeScriptDeclWithBlockContext(context.contextNode);\n      };\n\n      Rules.NodeIsTypeScriptDeclWithBlockContext = function (node) {\n        switch (node.kind) {\n          case 217\n          /* ClassDeclaration */\n          :\n          case 189\n          /* ClassExpression */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n          case 156\n          /* TypeLiteral */\n          :\n          case 221\n          /* ModuleDeclaration */\n          :\n            return true;\n        }\n\n        return false;\n      };\n\n      Rules.IsAfterCodeBlockContext = function (context) {\n        switch (context.currentTokenParent.kind) {\n          case 217\n          /* ClassDeclaration */\n          :\n          case 221\n          /* ModuleDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n          case 195\n          /* Block */\n          :\n          case 247\n          /* CatchClause */\n          :\n          case 222\n          /* ModuleBlock */\n          :\n          case 209\n          /* SwitchStatement */\n          :\n            return true;\n        }\n\n        return false;\n      };\n\n      Rules.IsControlDeclContext = function (context) {\n        switch (context.contextNode.kind) {\n          case 199\n          /* IfStatement */\n          :\n          case 209\n          /* SwitchStatement */\n          :\n          case 202\n          /* ForStatement */\n          :\n          case 203\n          /* ForInStatement */\n          :\n          case 204\n          /* ForOfStatement */\n          :\n          case 201\n          /* WhileStatement */\n          :\n          case 212\n          /* TryStatement */\n          :\n          case 200\n          /* DoStatement */\n          :\n          case 208\n          /* WithStatement */\n          : // TODO\n          // case SyntaxKind.ElseClause:\n\n          case 247\n          /* CatchClause */\n          :\n            return true;\n\n          default:\n            return false;\n        }\n      };\n\n      Rules.IsObjectContext = function (context) {\n        return context.contextNode.kind === 168\n        /* ObjectLiteralExpression */\n        ;\n      };\n\n      Rules.IsFunctionCallContext = function (context) {\n        return context.contextNode.kind === 171\n        /* CallExpression */\n        ;\n      };\n\n      Rules.IsNewContext = function (context) {\n        return context.contextNode.kind === 172\n        /* NewExpression */\n        ;\n      };\n\n      Rules.IsFunctionCallOrNewContext = function (context) {\n        return Rules.IsFunctionCallContext(context) || Rules.IsNewContext(context);\n      };\n\n      Rules.IsPreviousTokenNotComma = function (context) {\n        return context.currentTokenSpan.kind !== 24\n        /* CommaToken */\n        ;\n      };\n\n      Rules.IsNextTokenNotCloseBracket = function (context) {\n        return context.nextTokenSpan.kind !== 20\n        /* CloseBracketToken */\n        ;\n      };\n\n      Rules.IsArrowFunctionContext = function (context) {\n        return context.contextNode.kind === 177\n        /* ArrowFunction */\n        ;\n      };\n\n      Rules.IsSameLineTokenContext = function (context) {\n        return context.TokensAreOnSameLine();\n      };\n\n      Rules.IsNotBeforeBlockInFunctionDeclarationContext = function (context) {\n        return !Rules.IsFunctionDeclContext(context) && !Rules.IsBeforeBlockContext(context);\n      };\n\n      Rules.IsEndOfDecoratorContextOnSameLine = function (context) {\n        return context.TokensAreOnSameLine() && context.contextNode.decorators && Rules.NodeIsInDecoratorContext(context.currentTokenParent) && !Rules.NodeIsInDecoratorContext(context.nextTokenParent);\n      };\n\n      Rules.NodeIsInDecoratorContext = function (node) {\n        while (ts.isExpression(node)) {\n          node = node.parent;\n        }\n\n        return node.kind === 140\n        /* Decorator */\n        ;\n      };\n\n      Rules.IsStartOfVariableDeclarationList = function (context) {\n        return context.currentTokenParent.kind === 215\n        /* VariableDeclarationList */\n        && context.currentTokenParent.getStart(context.sourceFile) === context.currentTokenSpan.pos;\n      };\n\n      Rules.IsNotFormatOnEnter = function (context) {\n        return context.formattingRequestKind !== 2\n        /* FormatOnEnter */\n        ;\n      };\n\n      Rules.IsModuleDeclContext = function (context) {\n        return context.contextNode.kind === 221\n        /* ModuleDeclaration */\n        ;\n      };\n\n      Rules.IsObjectTypeContext = function (context) {\n        return context.contextNode.kind === 156\n        /* TypeLiteral */\n        ; // && context.contextNode.parent.kind !== SyntaxKind.InterfaceDeclaration;\n      };\n\n      Rules.IsTypeArgumentOrParameterOrAssertion = function (token, parent) {\n        if (token.kind !== 25\n        /* LessThanToken */\n        && token.kind !== 27\n        /* GreaterThanToken */\n        ) {\n            return false;\n          }\n\n        switch (parent.kind) {\n          case 152\n          /* TypeReference */\n          :\n          case 174\n          /* TypeAssertionExpression */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 189\n          /* ClassExpression */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 148\n          /* CallSignature */\n          :\n          case 149\n          /* ConstructSignature */\n          :\n          case 171\n          /* CallExpression */\n          :\n          case 172\n          /* NewExpression */\n          :\n          case 191\n          /* ExpressionWithTypeArguments */\n          :\n            return true;\n\n          default:\n            return false;\n        }\n      };\n\n      Rules.IsTypeArgumentOrParameterOrAssertionContext = function (context) {\n        return Rules.IsTypeArgumentOrParameterOrAssertion(context.currentTokenSpan, context.currentTokenParent) || Rules.IsTypeArgumentOrParameterOrAssertion(context.nextTokenSpan, context.nextTokenParent);\n      };\n\n      Rules.IsTypeAssertionContext = function (context) {\n        return context.contextNode.kind === 174\n        /* TypeAssertionExpression */\n        ;\n      };\n\n      Rules.IsVoidOpContext = function (context) {\n        return context.currentTokenSpan.kind === 103\n        /* VoidKeyword */\n        && context.currentTokenParent.kind === 180\n        /* VoidExpression */\n        ;\n      };\n\n      Rules.IsYieldOrYieldStarWithOperand = function (context) {\n        return context.contextNode.kind === 187\n        /* YieldExpression */\n        && context.contextNode.expression !== undefined;\n      };\n\n      return Rules;\n    }();\n\n    formatting.Rules = Rules;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var RulesMap = function () {\n      function RulesMap() {\n        this.map = [];\n        this.mapRowLength = 0;\n      }\n\n      RulesMap.create = function (rules) {\n        var result = new RulesMap();\n        result.Initialize(rules);\n        return result;\n      };\n\n      RulesMap.prototype.Initialize = function (rules) {\n        this.mapRowLength = 135\n        /* LastToken */\n        + 1;\n        this.map = new Array(this.mapRowLength * this.mapRowLength); //new Array<RulesBucket>(this.mapRowLength * this.mapRowLength);\n        // This array is used only during construction of the rulesbucket in the map\n\n        var rulesBucketConstructionStateList = new Array(this.map.length); //new Array<RulesBucketConstructionState>(this.map.length);\n\n        this.FillRules(rules, rulesBucketConstructionStateList);\n        return this.map;\n      };\n\n      RulesMap.prototype.FillRules = function (rules, rulesBucketConstructionStateList) {\n        var _this = this;\n\n        rules.forEach(function (rule) {\n          _this.FillRule(rule, rulesBucketConstructionStateList);\n        });\n      };\n\n      RulesMap.prototype.GetRuleBucketIndex = function (row, column) {\n        var rulesBucketIndex = row * this.mapRowLength + column; //Debug.Assert(rulesBucketIndex < this.map.Length, \"Trying to access an index outside the array.\");\n\n        return rulesBucketIndex;\n      };\n\n      RulesMap.prototype.FillRule = function (rule, rulesBucketConstructionStateList) {\n        var _this = this;\n\n        var specificRule = rule.Descriptor.LeftTokenRange !== formatting.Shared.TokenRange.Any && rule.Descriptor.RightTokenRange !== formatting.Shared.TokenRange.Any;\n        rule.Descriptor.LeftTokenRange.GetTokens().forEach(function (left) {\n          rule.Descriptor.RightTokenRange.GetTokens().forEach(function (right) {\n            var rulesBucketIndex = _this.GetRuleBucketIndex(left, right);\n\n            var rulesBucket = _this.map[rulesBucketIndex];\n\n            if (rulesBucket === undefined) {\n              rulesBucket = _this.map[rulesBucketIndex] = new RulesBucket();\n            }\n\n            rulesBucket.AddRule(rule, specificRule, rulesBucketConstructionStateList, rulesBucketIndex);\n          });\n        });\n      };\n\n      RulesMap.prototype.GetRule = function (context) {\n        var bucketIndex = this.GetRuleBucketIndex(context.currentTokenSpan.kind, context.nextTokenSpan.kind);\n        var bucket = this.map[bucketIndex];\n\n        if (bucket != null) {\n          for (var _i = 0, _a = bucket.Rules(); _i < _a.length; _i++) {\n            var rule = _a[_i];\n\n            if (rule.Operation.Context.InContext(context)) {\n              return rule;\n            }\n          }\n        }\n\n        return null;\n      };\n\n      return RulesMap;\n    }();\n\n    formatting.RulesMap = RulesMap;\n    var MaskBitSize = 5;\n    var Mask = 0x1f;\n\n    (function (RulesPosition) {\n      RulesPosition[RulesPosition[\"IgnoreRulesSpecific\"] = 0] = \"IgnoreRulesSpecific\";\n      RulesPosition[RulesPosition[\"IgnoreRulesAny\"] = MaskBitSize * 1] = \"IgnoreRulesAny\";\n      RulesPosition[RulesPosition[\"ContextRulesSpecific\"] = MaskBitSize * 2] = \"ContextRulesSpecific\";\n      RulesPosition[RulesPosition[\"ContextRulesAny\"] = MaskBitSize * 3] = \"ContextRulesAny\";\n      RulesPosition[RulesPosition[\"NoContextRulesSpecific\"] = MaskBitSize * 4] = \"NoContextRulesSpecific\";\n      RulesPosition[RulesPosition[\"NoContextRulesAny\"] = MaskBitSize * 5] = \"NoContextRulesAny\";\n    })(formatting.RulesPosition || (formatting.RulesPosition = {}));\n\n    var RulesPosition = formatting.RulesPosition;\n\n    var RulesBucketConstructionState = function () {\n      function RulesBucketConstructionState() {\n        //// The Rules list contains all the inserted rules into a rulebucket in the following order:\n        ////    1- Ignore rules with specific token combination\n        ////    2- Ignore rules with any token combination\n        ////    3- Context rules with specific token combination\n        ////    4- Context rules with any token combination\n        ////    5- Non-context rules with specific token combination\n        ////    6- Non-context rules with any token combination\n        //// \n        //// The member rulesInsertionIndexBitmap is used to describe the number of rules\n        //// in each sub-bucket (above) hence can be used to know the index of where to insert \n        //// the next rule. It's a bitmap which contains 6 different sections each is given 5 bits.\n        ////\n        //// Example:\n        //// In order to insert a rule to the end of sub-bucket (3), we get the index by adding\n        //// the values in the bitmap segments 3rd, 2nd, and 1st.\n        this.rulesInsertionIndexBitmap = 0;\n      }\n\n      RulesBucketConstructionState.prototype.GetInsertionIndex = function (maskPosition) {\n        var index = 0;\n        var pos = 0;\n        var indexBitmap = this.rulesInsertionIndexBitmap;\n\n        while (pos <= maskPosition) {\n          index += indexBitmap & Mask;\n          indexBitmap >>= MaskBitSize;\n          pos += MaskBitSize;\n        }\n\n        return index;\n      };\n\n      RulesBucketConstructionState.prototype.IncreaseInsertionIndex = function (maskPosition) {\n        var value = this.rulesInsertionIndexBitmap >> maskPosition & Mask;\n        value++;\n        ts.Debug.assert((value & Mask) === value, \"Adding more rules into the sub-bucket than allowed. Maximum allowed is 32 rules.\");\n        var temp = this.rulesInsertionIndexBitmap & ~(Mask << maskPosition);\n        temp |= value << maskPosition;\n        this.rulesInsertionIndexBitmap = temp;\n      };\n\n      return RulesBucketConstructionState;\n    }();\n\n    formatting.RulesBucketConstructionState = RulesBucketConstructionState;\n\n    var RulesBucket = function () {\n      function RulesBucket() {\n        this.rules = [];\n      }\n\n      RulesBucket.prototype.Rules = function () {\n        return this.rules;\n      };\n\n      RulesBucket.prototype.AddRule = function (rule, specificTokens, constructionState, rulesBucketIndex) {\n        var position;\n\n        if (rule.Operation.Action === 1\n        /* Ignore */\n        ) {\n            position = specificTokens ? RulesPosition.IgnoreRulesSpecific : RulesPosition.IgnoreRulesAny;\n          } else if (!rule.Operation.Context.IsAny()) {\n          position = specificTokens ? RulesPosition.ContextRulesSpecific : RulesPosition.ContextRulesAny;\n        } else {\n          position = specificTokens ? RulesPosition.NoContextRulesSpecific : RulesPosition.NoContextRulesAny;\n        }\n\n        var state = constructionState[rulesBucketIndex];\n\n        if (state === undefined) {\n          state = constructionState[rulesBucketIndex] = new RulesBucketConstructionState();\n        }\n\n        var index = state.GetInsertionIndex(position);\n        this.rules.splice(index, 0, rule);\n        state.IncreaseInsertionIndex(position);\n      };\n\n      return RulesBucket;\n    }();\n\n    formatting.RulesBucket = RulesBucket;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var Shared;\n\n    (function (Shared) {\n      var TokenRangeAccess = function () {\n        function TokenRangeAccess(from, to, except) {\n          this.tokens = [];\n\n          for (var token = from; token <= to; token++) {\n            if (ts.indexOf(except, token) < 0) {\n              this.tokens.push(token);\n            }\n          }\n        }\n\n        TokenRangeAccess.prototype.GetTokens = function () {\n          return this.tokens;\n        };\n\n        TokenRangeAccess.prototype.Contains = function (token) {\n          return this.tokens.indexOf(token) >= 0;\n        };\n\n        return TokenRangeAccess;\n      }();\n\n      Shared.TokenRangeAccess = TokenRangeAccess;\n\n      var TokenValuesAccess = function () {\n        function TokenValuesAccess(tks) {\n          this.tokens = tks && tks.length ? tks : [];\n        }\n\n        TokenValuesAccess.prototype.GetTokens = function () {\n          return this.tokens;\n        };\n\n        TokenValuesAccess.prototype.Contains = function (token) {\n          return this.tokens.indexOf(token) >= 0;\n        };\n\n        return TokenValuesAccess;\n      }();\n\n      Shared.TokenValuesAccess = TokenValuesAccess;\n\n      var TokenSingleValueAccess = function () {\n        function TokenSingleValueAccess(token) {\n          this.token = token;\n        }\n\n        TokenSingleValueAccess.prototype.GetTokens = function () {\n          return [this.token];\n        };\n\n        TokenSingleValueAccess.prototype.Contains = function (tokenValue) {\n          return tokenValue === this.token;\n        };\n\n        return TokenSingleValueAccess;\n      }();\n\n      Shared.TokenSingleValueAccess = TokenSingleValueAccess;\n\n      var TokenAllAccess = function () {\n        function TokenAllAccess() {}\n\n        TokenAllAccess.prototype.GetTokens = function () {\n          var result = [];\n\n          for (var token = 0\n          /* FirstToken */\n          ; token <= 135\n          /* LastToken */\n          ; token++) {\n            result.push(token);\n          }\n\n          return result;\n        };\n\n        TokenAllAccess.prototype.Contains = function (tokenValue) {\n          return true;\n        };\n\n        TokenAllAccess.prototype.toString = function () {\n          return \"[allTokens]\";\n        };\n\n        return TokenAllAccess;\n      }();\n\n      Shared.TokenAllAccess = TokenAllAccess;\n\n      var TokenRange = function () {\n        function TokenRange(tokenAccess) {\n          this.tokenAccess = tokenAccess;\n        }\n\n        TokenRange.FromToken = function (token) {\n          return new TokenRange(new TokenSingleValueAccess(token));\n        };\n\n        TokenRange.FromTokens = function (tokens) {\n          return new TokenRange(new TokenValuesAccess(tokens));\n        };\n\n        TokenRange.FromRange = function (f, to, except) {\n          if (except === void 0) {\n            except = [];\n          }\n\n          return new TokenRange(new TokenRangeAccess(f, to, except));\n        };\n\n        TokenRange.AllTokens = function () {\n          return new TokenRange(new TokenAllAccess());\n        };\n\n        TokenRange.prototype.GetTokens = function () {\n          return this.tokenAccess.GetTokens();\n        };\n\n        TokenRange.prototype.Contains = function (token) {\n          return this.tokenAccess.Contains(token);\n        };\n\n        TokenRange.prototype.toString = function () {\n          return this.tokenAccess.toString();\n        };\n\n        TokenRange.Any = TokenRange.AllTokens();\n        TokenRange.AnyIncludingMultilineComments = TokenRange.FromTokens(TokenRange.Any.GetTokens().concat([3\n        /* MultiLineCommentTrivia */\n        ]));\n        TokenRange.Keywords = TokenRange.FromRange(70\n        /* FirstKeyword */\n        , 135\n        /* LastKeyword */\n        );\n        TokenRange.BinaryOperators = TokenRange.FromRange(25\n        /* FirstBinaryOperator */\n        , 68\n        /* LastBinaryOperator */\n        );\n        TokenRange.BinaryKeywordOperators = TokenRange.FromTokens([90\n        /* InKeyword */\n        , 91\n        /* InstanceOfKeyword */\n        , 135\n        /* OfKeyword */\n        , 116\n        /* AsKeyword */\n        , 124\n        /* IsKeyword */\n        ]);\n        TokenRange.UnaryPrefixOperators = TokenRange.FromTokens([41\n        /* PlusPlusToken */\n        , 42\n        /* MinusMinusToken */\n        , 50\n        /* TildeToken */\n        , 49\n        /* ExclamationToken */\n        ]);\n        TokenRange.UnaryPrefixExpressions = TokenRange.FromTokens([8\n        /* NumericLiteral */\n        , 69\n        /* Identifier */\n        , 17\n        /* OpenParenToken */\n        , 19\n        /* OpenBracketToken */\n        , 15\n        /* OpenBraceToken */\n        , 97\n        /* ThisKeyword */\n        , 92\n        /* NewKeyword */\n        ]);\n        TokenRange.UnaryPreincrementExpressions = TokenRange.FromTokens([69\n        /* Identifier */\n        , 17\n        /* OpenParenToken */\n        , 97\n        /* ThisKeyword */\n        , 92\n        /* NewKeyword */\n        ]);\n        TokenRange.UnaryPostincrementExpressions = TokenRange.FromTokens([69\n        /* Identifier */\n        , 18\n        /* CloseParenToken */\n        , 20\n        /* CloseBracketToken */\n        , 92\n        /* NewKeyword */\n        ]);\n        TokenRange.UnaryPredecrementExpressions = TokenRange.FromTokens([69\n        /* Identifier */\n        , 17\n        /* OpenParenToken */\n        , 97\n        /* ThisKeyword */\n        , 92\n        /* NewKeyword */\n        ]);\n        TokenRange.UnaryPostdecrementExpressions = TokenRange.FromTokens([69\n        /* Identifier */\n        , 18\n        /* CloseParenToken */\n        , 20\n        /* CloseBracketToken */\n        , 92\n        /* NewKeyword */\n        ]);\n        TokenRange.Comments = TokenRange.FromTokens([2\n        /* SingleLineCommentTrivia */\n        , 3\n        /* MultiLineCommentTrivia */\n        ]);\n        TokenRange.TypeNames = TokenRange.FromTokens([69\n        /* Identifier */\n        , 128\n        /* NumberKeyword */\n        , 130\n        /* StringKeyword */\n        , 120\n        /* BooleanKeyword */\n        , 131\n        /* SymbolKeyword */\n        , 103\n        /* VoidKeyword */\n        , 117\n        /* AnyKeyword */\n        ]);\n        return TokenRange;\n      }();\n\n      Shared.TokenRange = TokenRange;\n    })(Shared = formatting.Shared || (formatting.Shared = {}));\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='..\\services.ts' />\n///<reference path='formattingContext.ts' />\n///<reference path='formattingRequestKind.ts' />\n///<reference path='rule.ts' />\n///<reference path='ruleAction.ts' />\n///<reference path='ruleDescriptor.ts' />\n///<reference path='ruleFlag.ts' />\n///<reference path='ruleOperation.ts' />\n///<reference path='ruleOperationContext.ts' />\n///<reference path='rules.ts' />\n///<reference path='rulesMap.ts' />\n///<reference path='tokenRange.ts' /> \n/// <reference path=\"references.ts\"/>\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var RulesProvider = function () {\n      function RulesProvider() {\n        this.globalRules = new formatting.Rules();\n      }\n\n      RulesProvider.prototype.getRuleName = function (rule) {\n        return this.globalRules.getRuleName(rule);\n      };\n\n      RulesProvider.prototype.getRuleByName = function (name) {\n        return this.globalRules[name];\n      };\n\n      RulesProvider.prototype.getRulesMap = function () {\n        return this.rulesMap;\n      };\n\n      RulesProvider.prototype.ensureUpToDate = function (options) {\n        // TODO: Should this be '==='?\n        if (this.options == null || !ts.compareDataObjects(this.options, options)) {\n          var activeRules = this.createActiveRules(options);\n          var rulesMap = formatting.RulesMap.create(activeRules);\n          this.activeRules = activeRules;\n          this.rulesMap = rulesMap;\n          this.options = ts.clone(options);\n        }\n      };\n\n      RulesProvider.prototype.createActiveRules = function (options) {\n        var rules = this.globalRules.HighPriorityCommonRules.slice(0);\n\n        if (options.InsertSpaceAfterCommaDelimiter) {\n          rules.push(this.globalRules.SpaceAfterComma);\n        } else {\n          rules.push(this.globalRules.NoSpaceAfterComma);\n        }\n\n        if (options.InsertSpaceAfterFunctionKeywordForAnonymousFunctions) {\n          rules.push(this.globalRules.SpaceAfterAnonymousFunctionKeyword);\n        } else {\n          rules.push(this.globalRules.NoSpaceAfterAnonymousFunctionKeyword);\n        }\n\n        if (options.InsertSpaceAfterKeywordsInControlFlowStatements) {\n          rules.push(this.globalRules.SpaceAfterKeywordInControl);\n        } else {\n          rules.push(this.globalRules.NoSpaceAfterKeywordInControl);\n        }\n\n        if (options.InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis) {\n          rules.push(this.globalRules.SpaceAfterOpenParen);\n          rules.push(this.globalRules.SpaceBeforeCloseParen);\n          rules.push(this.globalRules.NoSpaceBetweenParens);\n        } else {\n          rules.push(this.globalRules.NoSpaceAfterOpenParen);\n          rules.push(this.globalRules.NoSpaceBeforeCloseParen);\n          rules.push(this.globalRules.NoSpaceBetweenParens);\n        }\n\n        if (options.InsertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets) {\n          rules.push(this.globalRules.SpaceAfterOpenBracket);\n          rules.push(this.globalRules.SpaceBeforeCloseBracket);\n          rules.push(this.globalRules.NoSpaceBetweenBrackets);\n        } else {\n          rules.push(this.globalRules.NoSpaceAfterOpenBracket);\n          rules.push(this.globalRules.NoSpaceBeforeCloseBracket);\n          rules.push(this.globalRules.NoSpaceBetweenBrackets);\n        }\n\n        if (options.InsertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces) {\n          rules.push(this.globalRules.SpaceAfterTemplateHeadAndMiddle);\n          rules.push(this.globalRules.SpaceBeforeTemplateMiddleAndTail);\n        } else {\n          rules.push(this.globalRules.NoSpaceAfterTemplateHeadAndMiddle);\n          rules.push(this.globalRules.NoSpaceBeforeTemplateMiddleAndTail);\n        }\n\n        if (options.InsertSpaceAfterSemicolonInForStatements) {\n          rules.push(this.globalRules.SpaceAfterSemicolonInFor);\n        } else {\n          rules.push(this.globalRules.NoSpaceAfterSemicolonInFor);\n        }\n\n        if (options.InsertSpaceBeforeAndAfterBinaryOperators) {\n          rules.push(this.globalRules.SpaceBeforeBinaryOperator);\n          rules.push(this.globalRules.SpaceAfterBinaryOperator);\n        } else {\n          rules.push(this.globalRules.NoSpaceBeforeBinaryOperator);\n          rules.push(this.globalRules.NoSpaceAfterBinaryOperator);\n        }\n\n        if (options.PlaceOpenBraceOnNewLineForControlBlocks) {\n          rules.push(this.globalRules.NewLineBeforeOpenBraceInControl);\n        }\n\n        if (options.PlaceOpenBraceOnNewLineForFunctions) {\n          rules.push(this.globalRules.NewLineBeforeOpenBraceInFunction);\n          rules.push(this.globalRules.NewLineBeforeOpenBraceInTypeScriptDeclWithBlock);\n        }\n\n        rules = rules.concat(this.globalRules.LowPriorityCommonRules);\n        return rules;\n      };\n\n      return RulesProvider;\n    }();\n\n    formatting.RulesProvider = RulesProvider;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='..\\services.ts' />\n///<reference path='formattingScanner.ts' />\n///<reference path='rulesProvider.ts' />\n///<reference path='references.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var Constants;\n\n    (function (Constants) {\n      Constants[Constants[\"Unknown\"] = -1] = \"Unknown\";\n    })(Constants || (Constants = {}));\n\n    function formatOnEnter(position, sourceFile, rulesProvider, options) {\n      var line = sourceFile.getLineAndCharacterOfPosition(position).line;\n\n      if (line === 0) {\n        return [];\n      } // After the enter key, the cursor is now at a new line. The new line may or may not contain non-whitespace characters.\n      // If the new line has only whitespaces, we won't want to format this line, because that would remove the indentation as\n      // trailing whitespaces. So the end of the formatting span should be the later one between:\n      //  1. the end of the previous line\n      //  2. the last non-whitespace character in the current line\n\n\n      var endOfFormatSpan = ts.getEndLinePosition(line, sourceFile);\n\n      while (ts.isWhiteSpace(sourceFile.text.charCodeAt(endOfFormatSpan)) && !ts.isLineBreak(sourceFile.text.charCodeAt(endOfFormatSpan))) {\n        endOfFormatSpan--;\n      }\n\n      var span = {\n        // get start position for the previous line\n        pos: ts.getStartPositionOfLine(line - 1, sourceFile),\n        // end value is exclusive so add 1 to the result\n        end: endOfFormatSpan + 1\n      };\n      return formatSpan(span, sourceFile, options, rulesProvider, 2\n      /* FormatOnEnter */\n      );\n    }\n\n    formatting.formatOnEnter = formatOnEnter;\n\n    function formatOnSemicolon(position, sourceFile, rulesProvider, options) {\n      return formatOutermostParent(position, 23\n      /* SemicolonToken */\n      , sourceFile, options, rulesProvider, 3\n      /* FormatOnSemicolon */\n      );\n    }\n\n    formatting.formatOnSemicolon = formatOnSemicolon;\n\n    function formatOnClosingCurly(position, sourceFile, rulesProvider, options) {\n      return formatOutermostParent(position, 16\n      /* CloseBraceToken */\n      , sourceFile, options, rulesProvider, 4\n      /* FormatOnClosingCurlyBrace */\n      );\n    }\n\n    formatting.formatOnClosingCurly = formatOnClosingCurly;\n\n    function formatDocument(sourceFile, rulesProvider, options) {\n      var span = {\n        pos: 0,\n        end: sourceFile.text.length\n      };\n      return formatSpan(span, sourceFile, options, rulesProvider, 0\n      /* FormatDocument */\n      );\n    }\n\n    formatting.formatDocument = formatDocument;\n\n    function formatSelection(start, end, sourceFile, rulesProvider, options) {\n      // format from the beginning of the line\n      var span = {\n        pos: ts.getLineStartPositionForPosition(start, sourceFile),\n        end: end\n      };\n      return formatSpan(span, sourceFile, options, rulesProvider, 1\n      /* FormatSelection */\n      );\n    }\n\n    formatting.formatSelection = formatSelection;\n\n    function formatOutermostParent(position, expectedLastToken, sourceFile, options, rulesProvider, requestKind) {\n      var parent = findOutermostParent(position, expectedLastToken, sourceFile);\n\n      if (!parent) {\n        return [];\n      }\n\n      var span = {\n        pos: ts.getLineStartPositionForPosition(parent.getStart(sourceFile), sourceFile),\n        end: parent.end\n      };\n      return formatSpan(span, sourceFile, options, rulesProvider, requestKind);\n    }\n\n    function findOutermostParent(position, expectedTokenKind, sourceFile) {\n      var precedingToken = ts.findPrecedingToken(position, sourceFile); // when it is claimed that trigger character was typed at given position \n      // we verify that there is a token with a matching kind whose end is equal to position (because the character was just typed).\n      // If this condition is not hold - then trigger character was typed in some other context, \n      // i.e.in comment and thus should not trigger autoformatting\n\n      if (!precedingToken || precedingToken.kind !== expectedTokenKind || position !== precedingToken.getEnd()) {\n        return undefined;\n      } // walk up and search for the parent node that ends at the same position with precedingToken.\n      // for cases like this\n      // \n      // let x = 1;\n      // while (true) {\n      // } \n      // after typing close curly in while statement we want to reformat just the while statement.\n      // However if we just walk upwards searching for the parent that has the same end value - \n      // we'll end up with the whole source file. isListElement allows to stop on the list element level\n\n\n      var current = precedingToken;\n\n      while (current && current.parent && current.parent.end === precedingToken.end && !isListElement(current.parent, current)) {\n        current = current.parent;\n      }\n\n      return current;\n    } // Returns true if node is a element in some list in parent\n    // i.e. parent is class declaration with the list of members and node is one of members.\n\n\n    function isListElement(parent, node) {\n      switch (parent.kind) {\n        case 217\n        /* ClassDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n          return ts.rangeContainsRange(parent.members, node);\n\n        case 221\n        /* ModuleDeclaration */\n        :\n          var body = parent.body;\n          return body && body.kind === 195\n          /* Block */\n          && ts.rangeContainsRange(body.statements, node);\n\n        case 251\n        /* SourceFile */\n        :\n        case 195\n        /* Block */\n        :\n        case 222\n        /* ModuleBlock */\n        :\n          return ts.rangeContainsRange(parent.statements, node);\n\n        case 247\n        /* CatchClause */\n        :\n          return ts.rangeContainsRange(parent.block.statements, node);\n      }\n\n      return false;\n    }\n    /** find node that fully contains given text range */\n\n\n    function findEnclosingNode(range, sourceFile) {\n      return find(sourceFile);\n\n      function find(n) {\n        var candidate = ts.forEachChild(n, function (c) {\n          return ts.startEndContainsRange(c.getStart(sourceFile), c.end, range) && c;\n        });\n\n        if (candidate) {\n          var result = find(candidate);\n\n          if (result) {\n            return result;\n          }\n        }\n\n        return n;\n      }\n    }\n    /** formatting is not applied to ranges that contain parse errors.\n      * This function will return a predicate that for a given text range will tell\n      * if there are any parse errors that overlap with the range.\n      */\n\n\n    function prepareRangeContainsErrorFunction(errors, originalRange) {\n      if (!errors.length) {\n        return rangeHasNoErrors;\n      } // pick only errors that fall in range\n\n\n      var sorted = errors.filter(function (d) {\n        return ts.rangeOverlapsWithStartEnd(originalRange, d.start, d.start + d.length);\n      }).sort(function (e1, e2) {\n        return e1.start - e2.start;\n      });\n\n      if (!sorted.length) {\n        return rangeHasNoErrors;\n      }\n\n      var index = 0;\n      return function (r) {\n        // in current implementation sequence of arguments [r1, r2...] is monotonically increasing.\n        // 'index' tracks the index of the most recent error that was checked.\n        while (true) {\n          if (index >= sorted.length) {\n            // all errors in the range were already checked -> no error in specified range \n            return false;\n          }\n\n          var error = sorted[index];\n\n          if (r.end <= error.start) {\n            // specified range ends before the error refered by 'index' - no error in range\n            return false;\n          }\n\n          if (ts.startEndOverlapsWithStartEnd(r.pos, r.end, error.start, error.start + error.length)) {\n            // specified range overlaps with error range\n            return true;\n          }\n\n          index++;\n        }\n      };\n\n      function rangeHasNoErrors(r) {\n        return false;\n      }\n    }\n    /**\n      * Start of the original range might fall inside the comment - scanner will not yield appropriate results\n      * This function will look for token that is located before the start of target range\n      * and return its end as start position for the scanner.\n      */\n\n\n    function getScanStartPosition(enclosingNode, originalRange, sourceFile) {\n      var start = enclosingNode.getStart(sourceFile);\n\n      if (start === originalRange.pos && enclosingNode.end === originalRange.end) {\n        return start;\n      }\n\n      var precedingToken = ts.findPrecedingToken(originalRange.pos, sourceFile);\n\n      if (!precedingToken) {\n        // no preceding token found - start from the beginning of enclosing node\n        return enclosingNode.pos;\n      } // preceding token ends after the start of original range (i.e when originaRange.pos falls in the middle of literal)\n      // start from the beginning of enclosingNode to handle the entire 'originalRange'\n\n\n      if (precedingToken.end >= originalRange.pos) {\n        return enclosingNode.pos;\n      }\n\n      return precedingToken.end;\n    }\n    /*\n     * For cases like\n     * if (a ||\n     *     b ||$\n     *     c) {...}\n     * If we hit Enter at $ we want line '    b ||' to be indented.\n     * Formatting will be applied to the last two lines.\n     * Node that fully encloses these lines is binary expression 'a ||...'.\n     * Initial indentation for this node will be 0.\n     * Binary expressions don't introduce new indentation scopes, however it is possible\n     * that some parent node on the same line does - like if statement in this case.\n     * Note that we are considering parents only from the same line with initial node -\n     * if parent is on the different line - its delta was already contributed\n     * to the initial indentation.\n     */\n\n\n    function getOwnOrInheritedDelta(n, options, sourceFile) {\n      var previousLine = -1\n      /* Unknown */\n      ;\n      var child;\n\n      while (n) {\n        var line = sourceFile.getLineAndCharacterOfPosition(n.getStart(sourceFile)).line;\n\n        if (previousLine !== -1\n        /* Unknown */\n        && line !== previousLine) {\n          break;\n        }\n\n        if (formatting.SmartIndenter.shouldIndentChildNode(n, child)) {\n          return options.IndentSize;\n        }\n\n        previousLine = line;\n        child = n;\n        n = n.parent;\n      }\n\n      return 0;\n    }\n\n    function formatSpan(originalRange, sourceFile, options, rulesProvider, requestKind) {\n      var rangeContainsError = prepareRangeContainsErrorFunction(sourceFile.parseDiagnostics, originalRange); // formatting context is used by rules provider\n\n      var formattingContext = new formatting.FormattingContext(sourceFile, requestKind); // find the smallest node that fully wraps the range and compute the initial indentation for the node\n\n      var enclosingNode = findEnclosingNode(originalRange, sourceFile);\n      var formattingScanner = formatting.getFormattingScanner(sourceFile, getScanStartPosition(enclosingNode, originalRange, sourceFile), originalRange.end);\n      var initialIndentation = formatting.SmartIndenter.getIndentationForNode(enclosingNode, originalRange, sourceFile, options);\n      var previousRangeHasError;\n      var previousRange;\n      var previousParent;\n      var previousRangeStartLine;\n      var lastIndentedLine;\n      var indentationOnLastIndentedLine;\n      var edits = [];\n      formattingScanner.advance();\n\n      if (formattingScanner.isOnToken()) {\n        var startLine = sourceFile.getLineAndCharacterOfPosition(enclosingNode.getStart(sourceFile)).line;\n        var undecoratedStartLine = startLine;\n\n        if (enclosingNode.decorators) {\n          undecoratedStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(enclosingNode, sourceFile)).line;\n        }\n\n        var delta = getOwnOrInheritedDelta(enclosingNode, options, sourceFile);\n        processNode(enclosingNode, enclosingNode, startLine, undecoratedStartLine, initialIndentation, delta);\n      }\n\n      if (!formattingScanner.isOnToken()) {\n        var leadingTrivia = formattingScanner.getCurrentLeadingTrivia();\n\n        if (leadingTrivia) {\n          processTrivia(leadingTrivia, enclosingNode, enclosingNode, undefined);\n          trimTrailingWhitespacesForRemainingRange();\n        }\n      }\n\n      formattingScanner.close();\n      return edits; // local functions\n\n      /** Tries to compute the indentation for a list element.\n        * If list element is not in range then\n        * function will pick its actual indentation\n        * so it can be pushed downstream as inherited indentation.\n        * If list element is in the range - its indentation will be equal\n        * to inherited indentation from its predecessors.\n        */\n\n      function tryComputeIndentationForListItem(startPos, endPos, parentStartLine, range, inheritedIndentation) {\n        if (ts.rangeOverlapsWithStartEnd(range, startPos, endPos) || ts.rangeContainsStartEnd(range, startPos, endPos)\n        /* Not to miss zero-range nodes e.g. JsxText */\n        ) {\n            if (inheritedIndentation !== -1\n            /* Unknown */\n            ) {\n                return inheritedIndentation;\n              }\n          } else {\n          var startLine = sourceFile.getLineAndCharacterOfPosition(startPos).line;\n          var startLinePosition = ts.getLineStartPositionForPosition(startPos, sourceFile);\n          var column = formatting.SmartIndenter.findFirstNonWhitespaceColumn(startLinePosition, startPos, sourceFile, options);\n\n          if (startLine !== parentStartLine || startPos === column) {\n            return column;\n          }\n        }\n\n        return -1\n        /* Unknown */\n        ;\n      }\n\n      function computeIndentation(node, startLine, inheritedIndentation, parent, parentDynamicIndentation, effectiveParentStartLine) {\n        var indentation = inheritedIndentation;\n        var delta = formatting.SmartIndenter.shouldIndentChildNode(node) ? options.IndentSize : 0;\n\n        if (effectiveParentStartLine === startLine) {\n          // if node is located on the same line with the parent\n          // - inherit indentation from the parent\n          // - push children if either parent of node itself has non-zero delta\n          indentation = startLine === lastIndentedLine ? indentationOnLastIndentedLine : parentDynamicIndentation.getIndentation();\n          delta = Math.min(options.IndentSize, parentDynamicIndentation.getDelta(node) + delta);\n        } else if (indentation === -1\n        /* Unknown */\n        ) {\n            if (formatting.SmartIndenter.childStartsOnTheSameLineWithElseInIfStatement(parent, node, startLine, sourceFile)) {\n              indentation = parentDynamicIndentation.getIndentation();\n            } else {\n              indentation = parentDynamicIndentation.getIndentation() + parentDynamicIndentation.getDelta(node);\n            }\n          }\n\n        return {\n          indentation: indentation,\n          delta: delta\n        };\n      }\n\n      function getFirstNonDecoratorTokenOfNode(node) {\n        if (node.modifiers && node.modifiers.length) {\n          return node.modifiers[0].kind;\n        }\n\n        switch (node.kind) {\n          case 217\n          /* ClassDeclaration */\n          :\n            return 73\n            /* ClassKeyword */\n            ;\n\n          case 218\n          /* InterfaceDeclaration */\n          :\n            return 107\n            /* InterfaceKeyword */\n            ;\n\n          case 216\n          /* FunctionDeclaration */\n          :\n            return 87\n            /* FunctionKeyword */\n            ;\n\n          case 220\n          /* EnumDeclaration */\n          :\n            return 220\n            /* EnumDeclaration */\n            ;\n\n          case 146\n          /* GetAccessor */\n          :\n            return 123\n            /* GetKeyword */\n            ;\n\n          case 147\n          /* SetAccessor */\n          :\n            return 129\n            /* SetKeyword */\n            ;\n\n          case 144\n          /* MethodDeclaration */\n          :\n            if (node.asteriskToken) {\n              return 37\n              /* AsteriskToken */\n              ;\n            }\n\n          // fall-through\n\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 139\n          /* Parameter */\n          :\n            return node.name.kind;\n        }\n      }\n\n      function getDynamicIndentation(node, nodeStartLine, indentation, delta) {\n        return {\n          getIndentationForComment: function getIndentationForComment(kind, tokenIndentation, container) {\n            switch (kind) {\n              // preceding comment to the token that closes the indentation scope inherits the indentation from the scope\n              // ..  {\n              //     // comment\n              // }\n              case 16\n              /* CloseBraceToken */\n              :\n              case 20\n              /* CloseBracketToken */\n              :\n              case 18\n              /* CloseParenToken */\n              :\n                return indentation + getEffectiveDelta(delta, container);\n            }\n\n            return tokenIndentation !== -1\n            /* Unknown */\n            ? tokenIndentation : indentation;\n          },\n          getIndentationForToken: function getIndentationForToken(line, kind, container) {\n            if (nodeStartLine !== line && node.decorators) {\n              if (kind === getFirstNonDecoratorTokenOfNode(node)) {\n                // if this token is the first token following the list of decorators, we do not need to indent\n                return indentation;\n              }\n            }\n\n            switch (kind) {\n              // open and close brace, 'else' and 'while' (in do statement) tokens has indentation of the parent\n              case 15\n              /* OpenBraceToken */\n              :\n              case 16\n              /* CloseBraceToken */\n              :\n              case 19\n              /* OpenBracketToken */\n              :\n              case 20\n              /* CloseBracketToken */\n              :\n              case 17\n              /* OpenParenToken */\n              :\n              case 18\n              /* CloseParenToken */\n              :\n              case 80\n              /* ElseKeyword */\n              :\n              case 104\n              /* WhileKeyword */\n              :\n              case 55\n              /* AtToken */\n              :\n                return indentation;\n\n              default:\n                // if token line equals to the line of containing node (this is a first token in the node) - use node indentation\n                return nodeStartLine !== line ? indentation + getEffectiveDelta(delta, container) : indentation;\n            }\n          },\n          getIndentation: function getIndentation() {\n            return indentation;\n          },\n          getDelta: function getDelta(child) {\n            return getEffectiveDelta(delta, child);\n          },\n          recomputeIndentation: function recomputeIndentation(lineAdded) {\n            if (node.parent && formatting.SmartIndenter.shouldIndentChildNode(node.parent, node)) {\n              if (lineAdded) {\n                indentation += options.IndentSize;\n              } else {\n                indentation -= options.IndentSize;\n              }\n\n              if (formatting.SmartIndenter.shouldIndentChildNode(node)) {\n                delta = options.IndentSize;\n              } else {\n                delta = 0;\n              }\n            }\n          }\n        };\n\n        function getEffectiveDelta(delta, child) {\n          // Delta value should be zero when the node explicitly prevents indentation of the child node\n          return formatting.SmartIndenter.nodeWillIndentChild(node, child, true) ? delta : 0;\n        }\n      }\n\n      function processNode(node, contextNode, nodeStartLine, undecoratedNodeStartLine, indentation, delta) {\n        if (!ts.rangeOverlapsWithStartEnd(originalRange, node.getStart(sourceFile), node.getEnd())) {\n          return;\n        }\n\n        var nodeDynamicIndentation = getDynamicIndentation(node, nodeStartLine, indentation, delta); // a useful observations when tracking context node\n        //        /\n        //      [a]\n        //   /   |   \\ \n        //  [b] [c] [d]\n        // node 'a' is a context node for nodes 'b', 'c', 'd' \n        // except for the leftmost leaf token in [b] - in this case context node ('e') is located somewhere above 'a'\n        // this rule can be applied recursively to child nodes of 'a'.\n        // \n        // context node is set to parent node value after processing every child node\n        // context node is set to parent of the token after processing every token\n\n        var childContextNode = contextNode; // if there are any tokens that logically belong to node and interleave child nodes\n        // such tokens will be consumed in processChildNode for for the child that follows them\n\n        ts.forEachChild(node, function (child) {\n          processChildNode(child,\n          /*inheritedIndentation*/\n          -1\n          /* Unknown */\n          , node, nodeDynamicIndentation, nodeStartLine, undecoratedNodeStartLine,\n          /*isListElement*/\n          false);\n        }, function (nodes) {\n          processChildNodes(nodes, node, nodeStartLine, nodeDynamicIndentation);\n        }); // proceed any tokens in the node that are located after child nodes\n\n        while (formattingScanner.isOnToken()) {\n          var tokenInfo = formattingScanner.readTokenInfo(node);\n\n          if (tokenInfo.token.end > node.end) {\n            break;\n          }\n\n          consumeTokenAndAdvanceScanner(tokenInfo, node, nodeDynamicIndentation);\n        }\n\n        function processChildNode(child, inheritedIndentation, parent, parentDynamicIndentation, parentStartLine, undecoratedParentStartLine, isListItem) {\n          var childStartPos = child.getStart(sourceFile);\n          var childStartLine = sourceFile.getLineAndCharacterOfPosition(childStartPos).line;\n          var undecoratedChildStartLine = childStartLine;\n\n          if (child.decorators) {\n            undecoratedChildStartLine = sourceFile.getLineAndCharacterOfPosition(ts.getNonDecoratorTokenPosOfNode(child, sourceFile)).line;\n          } // if child is a list item - try to get its indentation\n\n\n          var childIndentationAmount = -1\n          /* Unknown */\n          ;\n\n          if (isListItem) {\n            childIndentationAmount = tryComputeIndentationForListItem(childStartPos, child.end, parentStartLine, originalRange, inheritedIndentation);\n\n            if (childIndentationAmount !== -1\n            /* Unknown */\n            ) {\n                inheritedIndentation = childIndentationAmount;\n              }\n          } // child node is outside the target range - do not dive inside\n\n\n          if (!ts.rangeOverlapsWithStartEnd(originalRange, child.pos, child.end)) {\n            return inheritedIndentation;\n          }\n\n          if (child.getFullWidth() === 0) {\n            return inheritedIndentation;\n          }\n\n          while (formattingScanner.isOnToken()) {\n            // proceed any parent tokens that are located prior to child.getStart()\n            var tokenInfo = formattingScanner.readTokenInfo(node);\n\n            if (tokenInfo.token.end > childStartPos) {\n              // stop when formatting scanner advances past the beginning of the child\n              break;\n            }\n\n            consumeTokenAndAdvanceScanner(tokenInfo, node, parentDynamicIndentation);\n          }\n\n          if (!formattingScanner.isOnToken()) {\n            return inheritedIndentation;\n          }\n\n          if (ts.isToken(child)) {\n            // if child node is a token, it does not impact indentation, proceed it using parent indentation scope rules\n            var tokenInfo = formattingScanner.readTokenInfo(child);\n            ts.Debug.assert(tokenInfo.token.end === child.end);\n            consumeTokenAndAdvanceScanner(tokenInfo, node, parentDynamicIndentation, child);\n            return inheritedIndentation;\n          }\n\n          var effectiveParentStartLine = child.kind === 140\n          /* Decorator */\n          ? childStartLine : undecoratedParentStartLine;\n          var childIndentation = computeIndentation(child, childStartLine, childIndentationAmount, node, parentDynamicIndentation, effectiveParentStartLine);\n          processNode(child, childContextNode, childStartLine, undecoratedChildStartLine, childIndentation.indentation, childIndentation.delta);\n          childContextNode = node;\n          return inheritedIndentation;\n        }\n\n        function processChildNodes(nodes, parent, parentStartLine, parentDynamicIndentation) {\n          var listStartToken = getOpenTokenForList(parent, nodes);\n          var listEndToken = getCloseTokenForOpenToken(listStartToken);\n          var listDynamicIndentation = parentDynamicIndentation;\n          var startLine = parentStartLine;\n\n          if (listStartToken !== 0\n          /* Unknown */\n          ) {\n              // introduce a new indentation scope for lists (including list start and end tokens)\n              while (formattingScanner.isOnToken()) {\n                var tokenInfo = formattingScanner.readTokenInfo(parent);\n\n                if (tokenInfo.token.end > nodes.pos) {\n                  // stop when formatting scanner moves past the beginning of node list\n                  break;\n                } else if (tokenInfo.token.kind === listStartToken) {\n                  // consume list start token\n                  startLine = sourceFile.getLineAndCharacterOfPosition(tokenInfo.token.pos).line;\n                  var indentation_1 = computeIndentation(tokenInfo.token, startLine, -1\n                  /* Unknown */\n                  , parent, parentDynamicIndentation, parentStartLine);\n                  listDynamicIndentation = getDynamicIndentation(parent, parentStartLine, indentation_1.indentation, indentation_1.delta);\n                  consumeTokenAndAdvanceScanner(tokenInfo, parent, listDynamicIndentation);\n                } else {\n                  // consume any tokens that precede the list as child elements of 'node' using its indentation scope\n                  consumeTokenAndAdvanceScanner(tokenInfo, parent, parentDynamicIndentation);\n                }\n              }\n            }\n\n          var inheritedIndentation = -1\n          /* Unknown */\n          ;\n\n          for (var _i = 0, nodes_6 = nodes; _i < nodes_6.length; _i++) {\n            var child = nodes_6[_i];\n            inheritedIndentation = processChildNode(child, inheritedIndentation, node, listDynamicIndentation, startLine, startLine,\n            /*isListElement*/\n            true);\n          }\n\n          if (listEndToken !== 0\n          /* Unknown */\n          ) {\n              if (formattingScanner.isOnToken()) {\n                var tokenInfo = formattingScanner.readTokenInfo(parent); // consume the list end token only if it is still belong to the parent\n                // there might be the case when current token matches end token but does not considered as one\n                // function (x: function) <-- \n                // without this check close paren will be interpreted as list end token for function expression which is wrong\n\n                if (tokenInfo.token.kind === listEndToken && ts.rangeContainsRange(parent, tokenInfo.token)) {\n                  // consume list end token\n                  consumeTokenAndAdvanceScanner(tokenInfo, parent, listDynamicIndentation);\n                }\n              }\n            }\n        }\n\n        function consumeTokenAndAdvanceScanner(currentTokenInfo, parent, dynamicIndentation, container) {\n          ts.Debug.assert(ts.rangeContainsRange(parent, currentTokenInfo.token));\n          var lastTriviaWasNewLine = formattingScanner.lastTrailingTriviaWasNewLine();\n          var indentToken = false;\n\n          if (currentTokenInfo.leadingTrivia) {\n            processTrivia(currentTokenInfo.leadingTrivia, parent, childContextNode, dynamicIndentation);\n          }\n\n          var lineAdded;\n          var isTokenInRange = ts.rangeContainsRange(originalRange, currentTokenInfo.token);\n          var tokenStart = sourceFile.getLineAndCharacterOfPosition(currentTokenInfo.token.pos);\n\n          if (isTokenInRange) {\n            var rangeHasError = rangeContainsError(currentTokenInfo.token); // save previousRange since processRange will overwrite this value with current one\n\n            var savePreviousRange = previousRange;\n            lineAdded = processRange(currentTokenInfo.token, tokenStart, parent, childContextNode, dynamicIndentation);\n\n            if (rangeHasError) {\n              // do not indent comments\\token if token range overlaps with some error\n              indentToken = false;\n            } else {\n              if (lineAdded !== undefined) {\n                indentToken = lineAdded;\n              } else {\n                // indent token only if end line of previous range does not match start line of the token\n                var prevEndLine = savePreviousRange && sourceFile.getLineAndCharacterOfPosition(savePreviousRange.end).line;\n                indentToken = lastTriviaWasNewLine && tokenStart.line !== prevEndLine;\n              }\n            }\n          }\n\n          if (currentTokenInfo.trailingTrivia) {\n            processTrivia(currentTokenInfo.trailingTrivia, parent, childContextNode, dynamicIndentation);\n          }\n\n          if (indentToken) {\n            var tokenIndentation = isTokenInRange && !rangeContainsError(currentTokenInfo.token) ? dynamicIndentation.getIndentationForToken(tokenStart.line, currentTokenInfo.token.kind, container) : -1\n            /* Unknown */\n            ;\n\n            if (currentTokenInfo.leadingTrivia) {\n              var commentIndentation = dynamicIndentation.getIndentationForComment(currentTokenInfo.token.kind, tokenIndentation, container);\n              var indentNextTokenOrTrivia = true;\n\n              for (var _i = 0, _a = currentTokenInfo.leadingTrivia; _i < _a.length; _i++) {\n                var triviaItem = _a[_i];\n\n                if (!ts.rangeContainsRange(originalRange, triviaItem)) {\n                  continue;\n                }\n\n                switch (triviaItem.kind) {\n                  case 3\n                  /* MultiLineCommentTrivia */\n                  :\n                    indentMultilineComment(triviaItem, commentIndentation,\n                    /*firstLineIsIndented*/\n                    !indentNextTokenOrTrivia);\n                    indentNextTokenOrTrivia = false;\n                    break;\n\n                  case 2\n                  /* SingleLineCommentTrivia */\n                  :\n                    if (indentNextTokenOrTrivia) {\n                      insertIndentation(triviaItem.pos, commentIndentation,\n                      /*lineAdded*/\n                      false);\n                      indentNextTokenOrTrivia = false;\n                    }\n\n                    break;\n\n                  case 4\n                  /* NewLineTrivia */\n                  :\n                    indentNextTokenOrTrivia = true;\n                    break;\n                }\n              }\n            } // indent token only if is it is in target range and does not overlap with any error ranges\n\n\n            if (tokenIndentation !== -1\n            /* Unknown */\n            ) {\n                insertIndentation(currentTokenInfo.token.pos, tokenIndentation, lineAdded);\n                lastIndentedLine = tokenStart.line;\n                indentationOnLastIndentedLine = tokenIndentation;\n              }\n          }\n\n          formattingScanner.advance();\n          childContextNode = parent;\n        }\n      }\n\n      function processTrivia(trivia, parent, contextNode, dynamicIndentation) {\n        for (var _i = 0, trivia_1 = trivia; _i < trivia_1.length; _i++) {\n          var triviaItem = trivia_1[_i];\n\n          if (ts.isComment(triviaItem.kind) && ts.rangeContainsRange(originalRange, triviaItem)) {\n            var triviaItemStart = sourceFile.getLineAndCharacterOfPosition(triviaItem.pos);\n            processRange(triviaItem, triviaItemStart, parent, contextNode, dynamicIndentation);\n          }\n        }\n      }\n\n      function processRange(range, rangeStart, parent, contextNode, dynamicIndentation) {\n        var rangeHasError = rangeContainsError(range);\n        var lineAdded;\n\n        if (!rangeHasError && !previousRangeHasError) {\n          if (!previousRange) {\n            // trim whitespaces starting from the beginning of the span up to the current line\n            var originalStart = sourceFile.getLineAndCharacterOfPosition(originalRange.pos);\n            trimTrailingWhitespacesForLines(originalStart.line, rangeStart.line);\n          } else {\n            lineAdded = processPair(range, rangeStart.line, parent, previousRange, previousRangeStartLine, previousParent, contextNode, dynamicIndentation);\n          }\n        }\n\n        previousRange = range;\n        previousParent = parent;\n        previousRangeStartLine = rangeStart.line;\n        previousRangeHasError = rangeHasError;\n        return lineAdded;\n      }\n\n      function processPair(currentItem, currentStartLine, currentParent, previousItem, previousStartLine, previousParent, contextNode, dynamicIndentation) {\n        formattingContext.updateContext(previousItem, previousParent, currentItem, currentParent, contextNode);\n        var rule = rulesProvider.getRulesMap().GetRule(formattingContext);\n        var trimTrailingWhitespaces;\n        var lineAdded;\n\n        if (rule) {\n          applyRuleEdits(rule, previousItem, previousStartLine, currentItem, currentStartLine);\n\n          if (rule.Operation.Action & (2\n          /* Space */\n          | 8\n          /* Delete */\n          ) && currentStartLine !== previousStartLine) {\n            lineAdded = false; // Handle the case where the next line is moved to be the end of this line. \n            // In this case we don't indent the next line in the next pass.\n\n            if (currentParent.getStart(sourceFile) === currentItem.pos) {\n              dynamicIndentation.recomputeIndentation(\n              /*lineAdded*/\n              false);\n            }\n          } else if (rule.Operation.Action & 4\n          /* NewLine */\n          && currentStartLine === previousStartLine) {\n            lineAdded = true; // Handle the case where token2 is moved to the new line. \n            // In this case we indent token2 in the next pass but we set\n            // sameLineIndent flag to notify the indenter that the indentation is within the line.\n\n            if (currentParent.getStart(sourceFile) === currentItem.pos) {\n              dynamicIndentation.recomputeIndentation(\n              /*lineAdded*/\n              true);\n            }\n          } // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line\n\n\n          trimTrailingWhitespaces = !(rule.Operation.Action & 8\n          /* Delete */\n          ) && rule.Flag !== 1\n          /* CanDeleteNewLines */\n          ;\n        } else {\n          trimTrailingWhitespaces = true;\n        }\n\n        if (currentStartLine !== previousStartLine && trimTrailingWhitespaces) {\n          // We need to trim trailing whitespace between the tokens if they were on different lines, and no rule was applied to put them on the same line\n          trimTrailingWhitespacesForLines(previousStartLine, currentStartLine, previousItem);\n        }\n\n        return lineAdded;\n      }\n\n      function insertIndentation(pos, indentation, lineAdded) {\n        var indentationString = getIndentationString(indentation, options);\n\n        if (lineAdded) {\n          // new line is added before the token by the formatting rules\n          // insert indentation string at the very beginning of the token\n          recordReplace(pos, 0, indentationString);\n        } else {\n          var tokenStart = sourceFile.getLineAndCharacterOfPosition(pos);\n\n          if (indentation !== tokenStart.character) {\n            var startLinePosition = ts.getStartPositionOfLine(tokenStart.line, sourceFile);\n            recordReplace(startLinePosition, tokenStart.character, indentationString);\n          }\n        }\n      }\n\n      function indentMultilineComment(commentRange, indentation, firstLineIsIndented) {\n        // split comment in lines\n        var startLine = sourceFile.getLineAndCharacterOfPosition(commentRange.pos).line;\n        var endLine = sourceFile.getLineAndCharacterOfPosition(commentRange.end).line;\n        var parts;\n\n        if (startLine === endLine) {\n          if (!firstLineIsIndented) {\n            // treat as single line comment\n            insertIndentation(commentRange.pos, indentation,\n            /*lineAdded*/\n            false);\n          }\n\n          return;\n        } else {\n          parts = [];\n          var startPos = commentRange.pos;\n\n          for (var line = startLine; line < endLine; ++line) {\n            var endOfLine = ts.getEndLinePosition(line, sourceFile);\n            parts.push({\n              pos: startPos,\n              end: endOfLine\n            });\n            startPos = ts.getStartPositionOfLine(line + 1, sourceFile);\n          }\n\n          parts.push({\n            pos: startPos,\n            end: commentRange.end\n          });\n        }\n\n        var startLinePos = ts.getStartPositionOfLine(startLine, sourceFile);\n        var nonWhitespaceColumnInFirstPart = formatting.SmartIndenter.findFirstNonWhitespaceCharacterAndColumn(startLinePos, parts[0].pos, sourceFile, options);\n\n        if (indentation === nonWhitespaceColumnInFirstPart.column) {\n          return;\n        }\n\n        var startIndex = 0;\n\n        if (firstLineIsIndented) {\n          startIndex = 1;\n          startLine++;\n        } // shift all parts on the delta size\n\n\n        var delta = indentation - nonWhitespaceColumnInFirstPart.column;\n\n        for (var i = startIndex, len = parts.length; i < len; ++i, ++startLine) {\n          var startLinePos_1 = ts.getStartPositionOfLine(startLine, sourceFile);\n          var nonWhitespaceCharacterAndColumn = i === 0 ? nonWhitespaceColumnInFirstPart : formatting.SmartIndenter.findFirstNonWhitespaceCharacterAndColumn(parts[i].pos, parts[i].end, sourceFile, options);\n          var newIndentation = nonWhitespaceCharacterAndColumn.column + delta;\n\n          if (newIndentation > 0) {\n            var indentationString = getIndentationString(newIndentation, options);\n            recordReplace(startLinePos_1, nonWhitespaceCharacterAndColumn.character, indentationString);\n          } else {\n            recordDelete(startLinePos_1, nonWhitespaceCharacterAndColumn.character);\n          }\n        }\n      }\n\n      function trimTrailingWhitespacesForLines(line1, line2, range) {\n        for (var line = line1; line < line2; ++line) {\n          var lineStartPosition = ts.getStartPositionOfLine(line, sourceFile);\n          var lineEndPosition = ts.getEndLinePosition(line, sourceFile); // do not trim whitespaces in comments or template expression\n\n          if (range && (ts.isComment(range.kind) || ts.isStringOrRegularExpressionOrTemplateLiteral(range.kind)) && range.pos <= lineEndPosition && range.end > lineEndPosition) {\n            continue;\n          }\n\n          var whitespaceStart = getTrailingWhitespaceStartPosition(lineStartPosition, lineEndPosition);\n\n          if (whitespaceStart !== -1) {\n            ts.Debug.assert(whitespaceStart === lineStartPosition || !ts.isWhiteSpace(sourceFile.text.charCodeAt(whitespaceStart - 1)));\n            recordDelete(whitespaceStart, lineEndPosition + 1 - whitespaceStart);\n          }\n        }\n      }\n      /**\n       * @param start The position of the first character in range\n       * @param end The position of the last character in range\n       */\n\n\n      function getTrailingWhitespaceStartPosition(start, end) {\n        var pos = end;\n\n        while (pos >= start && ts.isWhiteSpace(sourceFile.text.charCodeAt(pos))) {\n          pos--;\n        }\n\n        if (pos !== end) {\n          return pos + 1;\n        }\n\n        return -1;\n      }\n      /**\n       * Trimming will be done for lines after the previous range\n       */\n\n\n      function trimTrailingWhitespacesForRemainingRange() {\n        var startPosition = previousRange ? previousRange.end : originalRange.pos;\n        var startLine = sourceFile.getLineAndCharacterOfPosition(startPosition).line;\n        var endLine = sourceFile.getLineAndCharacterOfPosition(originalRange.end).line;\n        trimTrailingWhitespacesForLines(startLine, endLine + 1, previousRange);\n      }\n\n      function newTextChange(start, len, newText) {\n        return {\n          span: ts.createTextSpan(start, len),\n          newText: newText\n        };\n      }\n\n      function recordDelete(start, len) {\n        if (len) {\n          edits.push(newTextChange(start, len, \"\"));\n        }\n      }\n\n      function recordReplace(start, len, newText) {\n        if (len || newText) {\n          edits.push(newTextChange(start, len, newText));\n        }\n      }\n\n      function applyRuleEdits(rule, previousRange, previousStartLine, currentRange, currentStartLine) {\n        var between;\n\n        switch (rule.Operation.Action) {\n          case 1\n          /* Ignore */\n          :\n            // no action required\n            return;\n\n          case 8\n          /* Delete */\n          :\n            if (previousRange.end !== currentRange.pos) {\n              // delete characters starting from t1.end up to t2.pos exclusive\n              recordDelete(previousRange.end, currentRange.pos - previousRange.end);\n            }\n\n            break;\n\n          case 4\n          /* NewLine */\n          :\n            // exit early if we on different lines and rule cannot change number of newlines\n            // if line1 and line2 are on subsequent lines then no edits are required - ok to exit\n            // if line1 and line2 are separated with more than one newline - ok to exit since we cannot delete extra new lines\n            if (rule.Flag !== 1\n            /* CanDeleteNewLines */\n            && previousStartLine !== currentStartLine) {\n              return;\n            } // edit should not be applied only if we have one line feed between elements\n\n\n            var lineDelta = currentStartLine - previousStartLine;\n\n            if (lineDelta !== 1) {\n              recordReplace(previousRange.end, currentRange.pos - previousRange.end, options.NewLineCharacter);\n            }\n\n            break;\n\n          case 2\n          /* Space */\n          :\n            // exit early if we on different lines and rule cannot change number of newlines\n            if (rule.Flag !== 1\n            /* CanDeleteNewLines */\n            && previousStartLine !== currentStartLine) {\n              return;\n            }\n\n            var posDelta = currentRange.pos - previousRange.end;\n\n            if (posDelta !== 1 || sourceFile.text.charCodeAt(previousRange.end) !== 32\n            /* space */\n            ) {\n                recordReplace(previousRange.end, currentRange.pos - previousRange.end, \" \");\n              }\n\n            break;\n        }\n      }\n    }\n\n    function isSomeBlock(kind) {\n      switch (kind) {\n        case 195\n        /* Block */\n        :\n        case 222\n        /* ModuleBlock */\n        :\n          return true;\n      }\n\n      return false;\n    }\n\n    function getOpenTokenForList(node, list) {\n      switch (node.kind) {\n        case 145\n        /* Constructor */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          if (node.typeParameters === list) {\n            return 25\n            /* LessThanToken */\n            ;\n          } else if (node.parameters === list) {\n            return 17\n            /* OpenParenToken */\n            ;\n          }\n\n          break;\n\n        case 171\n        /* CallExpression */\n        :\n        case 172\n        /* NewExpression */\n        :\n          if (node.typeArguments === list) {\n            return 25\n            /* LessThanToken */\n            ;\n          } else if (node.arguments === list) {\n            return 17\n            /* OpenParenToken */\n            ;\n          }\n\n          break;\n\n        case 152\n        /* TypeReference */\n        :\n          if (node.typeArguments === list) {\n            return 25\n            /* LessThanToken */\n            ;\n          }\n\n      }\n\n      return 0\n      /* Unknown */\n      ;\n    }\n\n    function getCloseTokenForOpenToken(kind) {\n      switch (kind) {\n        case 17\n        /* OpenParenToken */\n        :\n          return 18\n          /* CloseParenToken */\n          ;\n\n        case 25\n        /* LessThanToken */\n        :\n          return 27\n          /* GreaterThanToken */\n          ;\n      }\n\n      return 0\n      /* Unknown */\n      ;\n    }\n\n    var internedSizes;\n    var internedTabsIndentation;\n    var internedSpacesIndentation;\n\n    function getIndentationString(indentation, options) {\n      // reset interned strings if FormatCodeOptions were changed\n      var resetInternedStrings = !internedSizes || internedSizes.tabSize !== options.TabSize || internedSizes.indentSize !== options.IndentSize;\n\n      if (resetInternedStrings) {\n        internedSizes = {\n          tabSize: options.TabSize,\n          indentSize: options.IndentSize\n        };\n        internedTabsIndentation = internedSpacesIndentation = undefined;\n      }\n\n      if (!options.ConvertTabsToSpaces) {\n        var tabs = Math.floor(indentation / options.TabSize);\n        var spaces = indentation - tabs * options.TabSize;\n        var tabString = void 0;\n\n        if (!internedTabsIndentation) {\n          internedTabsIndentation = [];\n        }\n\n        if (internedTabsIndentation[tabs] === undefined) {\n          internedTabsIndentation[tabs] = tabString = repeat('\\t', tabs);\n        } else {\n          tabString = internedTabsIndentation[tabs];\n        }\n\n        return spaces ? tabString + repeat(\" \", spaces) : tabString;\n      } else {\n        var spacesString = void 0;\n        var quotient = Math.floor(indentation / options.IndentSize);\n        var remainder = indentation % options.IndentSize;\n\n        if (!internedSpacesIndentation) {\n          internedSpacesIndentation = [];\n        }\n\n        if (internedSpacesIndentation[quotient] === undefined) {\n          spacesString = repeat(\" \", options.IndentSize * quotient);\n          internedSpacesIndentation[quotient] = spacesString;\n        } else {\n          spacesString = internedSpacesIndentation[quotient];\n        }\n\n        return remainder ? spacesString + repeat(\" \", remainder) : spacesString;\n      }\n\n      function repeat(value, count) {\n        var s = \"\";\n\n        for (var i = 0; i < count; ++i) {\n          s += value;\n        }\n\n        return s;\n      }\n    }\n\n    formatting.getIndentationString = getIndentationString;\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); ///<reference path='..\\services.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var formatting;\n\n  (function (formatting) {\n    var SmartIndenter;\n\n    (function (SmartIndenter) {\n      var Value;\n\n      (function (Value) {\n        Value[Value[\"Unknown\"] = -1] = \"Unknown\";\n      })(Value || (Value = {}));\n\n      function getIndentation(position, sourceFile, options) {\n        if (position > sourceFile.text.length) {\n          return 0; // past EOF\n        } // no indentation when the indent style is set to none,\n        // so we can return fast\n\n\n        if (options.IndentStyle === ts.IndentStyle.None) {\n          return 0;\n        }\n\n        var precedingToken = ts.findPrecedingToken(position, sourceFile);\n\n        if (!precedingToken) {\n          return 0;\n        } // no indentation in string \\regex\\template literals\n\n\n        var precedingTokenIsLiteral = ts.isStringOrRegularExpressionOrTemplateLiteral(precedingToken.kind);\n\n        if (precedingTokenIsLiteral && precedingToken.getStart(sourceFile) <= position && precedingToken.end > position) {\n          return 0;\n        }\n\n        var lineAtPosition = sourceFile.getLineAndCharacterOfPosition(position).line; // indentation is first non-whitespace character in a previous line\n        // for block indentation, we should look for a line which contains something that's not\n        // whitespace.\n\n        if (options.IndentStyle === ts.IndentStyle.Block) {\n          // move backwards until we find a line with a non-whitespace character,\n          // then find the first non-whitespace character for that line.\n          var current_1 = position;\n\n          while (current_1 > 0) {\n            var char = sourceFile.text.charCodeAt(current_1);\n\n            if (!ts.isWhiteSpace(char) && !ts.isLineBreak(char)) {\n              break;\n            }\n\n            current_1--;\n          }\n\n          var lineStart = ts.getLineStartPositionForPosition(current_1, sourceFile);\n          return SmartIndenter.findFirstNonWhitespaceColumn(lineStart, current_1, sourceFile, options);\n        }\n\n        if (precedingToken.kind === 24\n        /* CommaToken */\n        && precedingToken.parent.kind !== 184\n        /* BinaryExpression */\n        ) {\n            // previous token is comma that separates items in list - find the previous item and try to derive indentation from it\n            var actualIndentation = getActualIndentationForListItemBeforeComma(precedingToken, sourceFile, options);\n\n            if (actualIndentation !== -1\n            /* Unknown */\n            ) {\n                return actualIndentation;\n              }\n          } // try to find node that can contribute to indentation and includes 'position' starting from 'precedingToken'\n        // if such node is found - compute initial indentation for 'position' inside this node\n\n\n        var previous;\n        var current = precedingToken;\n        var currentStart;\n        var indentationDelta;\n\n        while (current) {\n          if (ts.positionBelongsToNode(current, position, sourceFile) && shouldIndentChildNode(current, previous)) {\n            currentStart = getStartLineAndCharacterForNode(current, sourceFile);\n\n            if (nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile)) {\n              indentationDelta = 0;\n            } else {\n              indentationDelta = lineAtPosition !== currentStart.line ? options.IndentSize : 0;\n            }\n\n            break;\n          } // check if current node is a list item - if yes, take indentation from it\n\n\n          var actualIndentation = getActualIndentationForListItem(current, sourceFile, options);\n\n          if (actualIndentation !== -1\n          /* Unknown */\n          ) {\n              return actualIndentation;\n            }\n\n          actualIndentation = getLineIndentationWhenExpressionIsInMultiLine(current, sourceFile, options);\n\n          if (actualIndentation !== -1\n          /* Unknown */\n          ) {\n              return actualIndentation + options.IndentSize;\n            }\n\n          previous = current;\n          current = current.parent;\n        }\n\n        if (!current) {\n          // no parent was found - return 0 to be indented on the level of SourceFile\n          return 0;\n        }\n\n        return getIndentationForNodeWorker(current, currentStart,\n        /*ignoreActualIndentationRange*/\n        undefined, indentationDelta, sourceFile, options);\n      }\n\n      SmartIndenter.getIndentation = getIndentation;\n\n      function getIndentationForNode(n, ignoreActualIndentationRange, sourceFile, options) {\n        var start = sourceFile.getLineAndCharacterOfPosition(n.getStart(sourceFile));\n        return getIndentationForNodeWorker(n, start, ignoreActualIndentationRange,\n        /*indentationDelta*/\n        0, sourceFile, options);\n      }\n\n      SmartIndenter.getIndentationForNode = getIndentationForNode;\n\n      function getIndentationForNodeWorker(current, currentStart, ignoreActualIndentationRange, indentationDelta, sourceFile, options) {\n        var parent = current.parent;\n        var parentStart; // walk upwards and collect indentations for pairs of parent-child nodes\n        // indentation is not added if parent and child nodes start on the same line or if parent is IfStatement and child starts on the same line with 'else clause'\n\n        while (parent) {\n          var useActualIndentation = true;\n\n          if (ignoreActualIndentationRange) {\n            var start = current.getStart(sourceFile);\n            useActualIndentation = start < ignoreActualIndentationRange.pos || start > ignoreActualIndentationRange.end;\n          }\n\n          if (useActualIndentation) {\n            // check if current node is a list item - if yes, take indentation from it\n            var actualIndentation = getActualIndentationForListItem(current, sourceFile, options);\n\n            if (actualIndentation !== -1\n            /* Unknown */\n            ) {\n                return actualIndentation + indentationDelta;\n              }\n          }\n\n          parentStart = getParentStart(parent, current, sourceFile);\n          var parentAndChildShareLine = parentStart.line === currentStart.line || childStartsOnTheSameLineWithElseInIfStatement(parent, current, currentStart.line, sourceFile);\n\n          if (useActualIndentation) {\n            // try to fetch actual indentation for current node from source text\n            var actualIndentation = getActualIndentationForNode(current, parent, currentStart, parentAndChildShareLine, sourceFile, options);\n\n            if (actualIndentation !== -1\n            /* Unknown */\n            ) {\n                return actualIndentation + indentationDelta;\n              }\n\n            actualIndentation = getLineIndentationWhenExpressionIsInMultiLine(current, sourceFile, options);\n\n            if (actualIndentation !== -1\n            /* Unknown */\n            ) {\n                return actualIndentation + indentationDelta;\n              }\n          } // increase indentation if parent node wants its content to be indented and parent and child nodes don't start on the same line\n\n\n          if (shouldIndentChildNode(parent, current) && !parentAndChildShareLine) {\n            indentationDelta += options.IndentSize;\n          }\n\n          current = parent;\n          currentStart = parentStart;\n          parent = current.parent;\n        }\n\n        return indentationDelta;\n      }\n\n      function getParentStart(parent, child, sourceFile) {\n        var containingList = getContainingList(child, sourceFile);\n\n        if (containingList) {\n          return sourceFile.getLineAndCharacterOfPosition(containingList.pos);\n        }\n\n        return sourceFile.getLineAndCharacterOfPosition(parent.getStart(sourceFile));\n      }\n      /*\n       * Function returns Value.Unknown if indentation cannot be determined\n       */\n\n\n      function getActualIndentationForListItemBeforeComma(commaToken, sourceFile, options) {\n        // previous token is comma that separates items in list - find the previous item and try to derive indentation from it\n        var commaItemInfo = ts.findListItemInfo(commaToken);\n\n        if (commaItemInfo && commaItemInfo.listItemIndex > 0) {\n          return deriveActualIndentationFromList(commaItemInfo.list.getChildren(), commaItemInfo.listItemIndex - 1, sourceFile, options);\n        } else {\n          // handle broken code gracefully\n          return -1\n          /* Unknown */\n          ;\n        }\n      }\n      /*\n       * Function returns Value.Unknown if actual indentation for node should not be used (i.e because node is nested expression)\n       */\n\n\n      function getActualIndentationForNode(current, parent, currentLineAndChar, parentAndChildShareLine, sourceFile, options) {\n        // actual indentation is used for statements\\declarations if one of cases below is true:\n        // - parent is SourceFile - by default immediate children of SourceFile are not indented except when user indents them manually\n        // - parent and child are not on the same line\n        var useActualIndentation = (ts.isDeclaration(current) || ts.isStatement(current)) && (parent.kind === 251\n        /* SourceFile */\n        || !parentAndChildShareLine);\n\n        if (!useActualIndentation) {\n          return -1\n          /* Unknown */\n          ;\n        }\n\n        return findColumnForFirstNonWhitespaceCharacterInLine(currentLineAndChar, sourceFile, options);\n      }\n\n      function nextTokenIsCurlyBraceOnSameLineAsCursor(precedingToken, current, lineAtPosition, sourceFile) {\n        var nextToken = ts.findNextToken(precedingToken, current);\n\n        if (!nextToken) {\n          return false;\n        }\n\n        if (nextToken.kind === 15\n        /* OpenBraceToken */\n        ) {\n            // open braces are always indented at the parent level\n            return true;\n          } else if (nextToken.kind === 16\n        /* CloseBraceToken */\n        ) {\n            // close braces are indented at the parent level if they are located on the same line with cursor\n            // this means that if new line will be added at $ position, this case will be indented\n            // class A {\n            //    $\n            // }\n            /// and this one - not\n            // class A {\n            // $}\n            var nextTokenStartLine = getStartLineAndCharacterForNode(nextToken, sourceFile).line;\n            return lineAtPosition === nextTokenStartLine;\n          }\n\n        return false;\n      }\n\n      function getStartLineAndCharacterForNode(n, sourceFile) {\n        return sourceFile.getLineAndCharacterOfPosition(n.getStart(sourceFile));\n      }\n\n      function childStartsOnTheSameLineWithElseInIfStatement(parent, child, childStartLine, sourceFile) {\n        if (parent.kind === 199\n        /* IfStatement */\n        && parent.elseStatement === child) {\n          var elseKeyword = ts.findChildOfKind(parent, 80\n          /* ElseKeyword */\n          , sourceFile);\n          ts.Debug.assert(elseKeyword !== undefined);\n          var elseKeywordStartLine = getStartLineAndCharacterForNode(elseKeyword, sourceFile).line;\n          return elseKeywordStartLine === childStartLine;\n        }\n\n        return false;\n      }\n\n      SmartIndenter.childStartsOnTheSameLineWithElseInIfStatement = childStartsOnTheSameLineWithElseInIfStatement;\n\n      function getContainingList(node, sourceFile) {\n        if (node.parent) {\n          switch (node.parent.kind) {\n            case 152\n            /* TypeReference */\n            :\n              if (node.parent.typeArguments && ts.rangeContainsStartEnd(node.parent.typeArguments, node.getStart(sourceFile), node.getEnd())) {\n                return node.parent.typeArguments;\n              }\n\n              break;\n\n            case 168\n            /* ObjectLiteralExpression */\n            :\n              return node.parent.properties;\n\n            case 167\n            /* ArrayLiteralExpression */\n            :\n              return node.parent.elements;\n\n            case 216\n            /* FunctionDeclaration */\n            :\n            case 176\n            /* FunctionExpression */\n            :\n            case 177\n            /* ArrowFunction */\n            :\n            case 144\n            /* MethodDeclaration */\n            :\n            case 143\n            /* MethodSignature */\n            :\n            case 148\n            /* CallSignature */\n            :\n            case 149\n            /* ConstructSignature */\n            :\n              {\n                var start = node.getStart(sourceFile);\n\n                if (node.parent.typeParameters && ts.rangeContainsStartEnd(node.parent.typeParameters, start, node.getEnd())) {\n                  return node.parent.typeParameters;\n                }\n\n                if (ts.rangeContainsStartEnd(node.parent.parameters, start, node.getEnd())) {\n                  return node.parent.parameters;\n                }\n\n                break;\n              }\n\n            case 172\n            /* NewExpression */\n            :\n            case 171\n            /* CallExpression */\n            :\n              {\n                var start = node.getStart(sourceFile);\n\n                if (node.parent.typeArguments && ts.rangeContainsStartEnd(node.parent.typeArguments, start, node.getEnd())) {\n                  return node.parent.typeArguments;\n                }\n\n                if (node.parent.arguments && ts.rangeContainsStartEnd(node.parent.arguments, start, node.getEnd())) {\n                  return node.parent.arguments;\n                }\n\n                break;\n              }\n          }\n        }\n\n        return undefined;\n      }\n\n      function getActualIndentationForListItem(node, sourceFile, options) {\n        var containingList = getContainingList(node, sourceFile);\n        return containingList ? getActualIndentationFromList(containingList) : -1\n        /* Unknown */\n        ;\n\n        function getActualIndentationFromList(list) {\n          var index = ts.indexOf(list, node);\n          return index !== -1 ? deriveActualIndentationFromList(list, index, sourceFile, options) : -1\n          /* Unknown */\n          ;\n        }\n      }\n\n      function getLineIndentationWhenExpressionIsInMultiLine(node, sourceFile, options) {\n        // actual indentation should not be used when:\n        // - node is close parenthesis - this is the end of the expression\n        if (node.kind === 18\n        /* CloseParenToken */\n        ) {\n            return -1\n            /* Unknown */\n            ;\n          }\n\n        if (node.parent && (node.parent.kind === 171\n        /* CallExpression */\n        || node.parent.kind === 172\n        /* NewExpression */\n        ) && node.parent.expression !== node) {\n          var fullCallOrNewExpression = node.parent.expression;\n          var startingExpression = getStartingExpression(fullCallOrNewExpression);\n\n          if (fullCallOrNewExpression === startingExpression) {\n            return -1\n            /* Unknown */\n            ;\n          }\n\n          var fullCallOrNewExpressionEnd = sourceFile.getLineAndCharacterOfPosition(fullCallOrNewExpression.end);\n          var startingExpressionEnd = sourceFile.getLineAndCharacterOfPosition(startingExpression.end);\n\n          if (fullCallOrNewExpressionEnd.line === startingExpressionEnd.line) {\n            return -1\n            /* Unknown */\n            ;\n          }\n\n          return findColumnForFirstNonWhitespaceCharacterInLine(fullCallOrNewExpressionEnd, sourceFile, options);\n        }\n\n        return -1\n        /* Unknown */\n        ;\n\n        function getStartingExpression(node) {\n          while (true) {\n            switch (node.kind) {\n              case 171\n              /* CallExpression */\n              :\n              case 172\n              /* NewExpression */\n              :\n              case 169\n              /* PropertyAccessExpression */\n              :\n              case 170\n              /* ElementAccessExpression */\n              :\n                node = node.expression;\n                break;\n\n              default:\n                return node;\n            }\n          }\n        }\n      }\n\n      function deriveActualIndentationFromList(list, index, sourceFile, options) {\n        ts.Debug.assert(index >= 0 && index < list.length);\n        var node = list[index]; // walk toward the start of the list starting from current node and check if the line is the same for all items.\n        // if end line for item [i - 1] differs from the start line for item [i] - find column of the first non-whitespace character on the line of item [i]\n\n        var lineAndCharacter = getStartLineAndCharacterForNode(node, sourceFile);\n\n        for (var i = index - 1; i >= 0; --i) {\n          if (list[i].kind === 24\n          /* CommaToken */\n          ) {\n              continue;\n            } // skip list items that ends on the same line with the current list element\n\n\n          var prevEndLine = sourceFile.getLineAndCharacterOfPosition(list[i].end).line;\n\n          if (prevEndLine !== lineAndCharacter.line) {\n            return findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options);\n          }\n\n          lineAndCharacter = getStartLineAndCharacterForNode(list[i], sourceFile);\n        }\n\n        return -1\n        /* Unknown */\n        ;\n      }\n\n      function findColumnForFirstNonWhitespaceCharacterInLine(lineAndCharacter, sourceFile, options) {\n        var lineStart = sourceFile.getPositionOfLineAndCharacter(lineAndCharacter.line, 0);\n        return findFirstNonWhitespaceColumn(lineStart, lineStart + lineAndCharacter.character, sourceFile, options);\n      }\n      /*\n          Character is the actual index of the character since the beginning of the line.\n          Column - position of the character after expanding tabs to spaces\n          \"0\\t2$\"\n          value of 'character' for '$' is 3\n          value of 'column' for '$' is 6 (assuming that tab size is 4)\n      */\n\n\n      function findFirstNonWhitespaceCharacterAndColumn(startPos, endPos, sourceFile, options) {\n        var character = 0;\n        var column = 0;\n\n        for (var pos = startPos; pos < endPos; ++pos) {\n          var ch = sourceFile.text.charCodeAt(pos);\n\n          if (!ts.isWhiteSpace(ch)) {\n            break;\n          }\n\n          if (ch === 9\n          /* tab */\n          ) {\n              column += options.TabSize + column % options.TabSize;\n            } else {\n            column++;\n          }\n\n          character++;\n        }\n\n        return {\n          column: column,\n          character: character\n        };\n      }\n\n      SmartIndenter.findFirstNonWhitespaceCharacterAndColumn = findFirstNonWhitespaceCharacterAndColumn;\n\n      function findFirstNonWhitespaceColumn(startPos, endPos, sourceFile, options) {\n        return findFirstNonWhitespaceCharacterAndColumn(startPos, endPos, sourceFile, options).column;\n      }\n\n      SmartIndenter.findFirstNonWhitespaceColumn = findFirstNonWhitespaceColumn;\n\n      function nodeContentIsAlwaysIndented(kind) {\n        switch (kind) {\n          case 198\n          /* ExpressionStatement */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 189\n          /* ClassExpression */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n          case 219\n          /* TypeAliasDeclaration */\n          :\n          case 167\n          /* ArrayLiteralExpression */\n          :\n          case 195\n          /* Block */\n          :\n          case 222\n          /* ModuleBlock */\n          :\n          case 168\n          /* ObjectLiteralExpression */\n          :\n          case 156\n          /* TypeLiteral */\n          :\n          case 158\n          /* TupleType */\n          :\n          case 223\n          /* CaseBlock */\n          :\n          case 245\n          /* DefaultClause */\n          :\n          case 244\n          /* CaseClause */\n          :\n          case 175\n          /* ParenthesizedExpression */\n          :\n          case 169\n          /* PropertyAccessExpression */\n          :\n          case 171\n          /* CallExpression */\n          :\n          case 172\n          /* NewExpression */\n          :\n          case 196\n          /* VariableStatement */\n          :\n          case 214\n          /* VariableDeclaration */\n          :\n          case 230\n          /* ExportAssignment */\n          :\n          case 207\n          /* ReturnStatement */\n          :\n          case 185\n          /* ConditionalExpression */\n          :\n          case 165\n          /* ArrayBindingPattern */\n          :\n          case 164\n          /* ObjectBindingPattern */\n          :\n          case 238\n          /* JsxOpeningElement */\n          :\n          case 237\n          /* JsxSelfClosingElement */\n          :\n          case 243\n          /* JsxExpression */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 148\n          /* CallSignature */\n          :\n          case 149\n          /* ConstructSignature */\n          :\n          case 139\n          /* Parameter */\n          :\n          case 153\n          /* FunctionType */\n          :\n          case 154\n          /* ConstructorType */\n          :\n          case 161\n          /* ParenthesizedType */\n          :\n          case 173\n          /* TaggedTemplateExpression */\n          :\n          case 181\n          /* AwaitExpression */\n          :\n          case 228\n          /* NamedImports */\n          :\n            return true;\n        }\n\n        return false;\n      }\n      /* @internal */\n\n\n      function nodeWillIndentChild(parent, child, indentByDefault) {\n        var childKind = child ? child.kind : 0\n        /* Unknown */\n        ;\n\n        switch (parent.kind) {\n          case 200\n          /* DoStatement */\n          :\n          case 201\n          /* WhileStatement */\n          :\n          case 203\n          /* ForInStatement */\n          :\n          case 204\n          /* ForOfStatement */\n          :\n          case 202\n          /* ForStatement */\n          :\n          case 199\n          /* IfStatement */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            return childKind !== 195\n            /* Block */\n            ;\n\n          case 236\n          /* JsxElement */\n          :\n            return childKind !== 240\n            /* JsxClosingElement */\n            ;\n        } // No explicit rule for given nodes so the result will follow the default value argument\n\n\n        return indentByDefault;\n      }\n\n      SmartIndenter.nodeWillIndentChild = nodeWillIndentChild;\n      /*\n      Function returns true when the parent node should indent the given child by an explicit rule\n      */\n\n      function shouldIndentChildNode(parent, child) {\n        return nodeContentIsAlwaysIndented(parent.kind) || nodeWillIndentChild(parent, child, false);\n      }\n\n      SmartIndenter.shouldIndentChildNode = shouldIndentChildNode;\n    })(SmartIndenter = formatting.SmartIndenter || (formatting.SmartIndenter = {}));\n  })(formatting = ts.formatting || (ts.formatting = {}));\n})(ts || (ts = {})); /// <reference path=\"..\\compiler\\program.ts\"/>\n/// <reference path='breakpoints.ts' />\n/// <reference path='outliningElementsCollector.ts' />\n/// <reference path='navigateTo.ts' />\n/// <reference path='navigationBar.ts' />\n/// <reference path='patternMatcher.ts' />\n/// <reference path='signatureHelp.ts' />\n/// <reference path='utilities.ts' />\n/// <reference path='jsTyping.ts' />\n/// <reference path='formatting\\formatting.ts' />\n/// <reference path='formatting\\smartIndenter.ts' />\n\n\nvar ts;\n\n(function (ts) {\n  /** The version of the language service API */\n  ts.servicesVersion = \"0.5\";\n  var ScriptSnapshot;\n\n  (function (ScriptSnapshot) {\n    var StringScriptSnapshot = function () {\n      function StringScriptSnapshot(text) {\n        this.text = text;\n      }\n\n      StringScriptSnapshot.prototype.getText = function (start, end) {\n        return this.text.substring(start, end);\n      };\n\n      StringScriptSnapshot.prototype.getLength = function () {\n        return this.text.length;\n      };\n\n      StringScriptSnapshot.prototype.getChangeRange = function (oldSnapshot) {\n        // Text-based snapshots do not support incremental parsing. Return undefined\n        // to signal that to the caller.\n        return undefined;\n      };\n\n      return StringScriptSnapshot;\n    }();\n\n    function fromString(text) {\n      return new StringScriptSnapshot(text);\n    }\n\n    ScriptSnapshot.fromString = fromString;\n  })(ScriptSnapshot = ts.ScriptSnapshot || (ts.ScriptSnapshot = {}));\n\n  var scanner = ts.createScanner(2\n  /* Latest */\n  ,\n  /*skipTrivia*/\n  true);\n  var emptyArray = [];\n  var jsDocTagNames = [\"augments\", \"author\", \"argument\", \"borrows\", \"class\", \"constant\", \"constructor\", \"constructs\", \"default\", \"deprecated\", \"description\", \"event\", \"example\", \"extends\", \"field\", \"fileOverview\", \"function\", \"ignore\", \"inner\", \"lends\", \"link\", \"memberOf\", \"name\", \"namespace\", \"param\", \"private\", \"property\", \"public\", \"requires\", \"returns\", \"see\", \"since\", \"static\", \"throws\", \"type\", \"version\"];\n  var jsDocCompletionEntries;\n\n  function createNode(kind, pos, end, flags, parent) {\n    var node = new NodeObject(kind, pos, end);\n    node.flags = flags;\n    node.parent = parent;\n    return node;\n  }\n\n  var NodeObject = function () {\n    function NodeObject(kind, pos, end) {\n      this.kind = kind;\n      this.pos = pos;\n      this.end = end;\n      this.flags = 0\n      /* None */\n      ;\n      this.parent = undefined;\n    }\n\n    NodeObject.prototype.getSourceFile = function () {\n      return ts.getSourceFileOfNode(this);\n    };\n\n    NodeObject.prototype.getStart = function (sourceFile) {\n      return ts.getTokenPosOfNode(this, sourceFile);\n    };\n\n    NodeObject.prototype.getFullStart = function () {\n      return this.pos;\n    };\n\n    NodeObject.prototype.getEnd = function () {\n      return this.end;\n    };\n\n    NodeObject.prototype.getWidth = function (sourceFile) {\n      return this.getEnd() - this.getStart(sourceFile);\n    };\n\n    NodeObject.prototype.getFullWidth = function () {\n      return this.end - this.pos;\n    };\n\n    NodeObject.prototype.getLeadingTriviaWidth = function (sourceFile) {\n      return this.getStart(sourceFile) - this.pos;\n    };\n\n    NodeObject.prototype.getFullText = function (sourceFile) {\n      return (sourceFile || this.getSourceFile()).text.substring(this.pos, this.end);\n    };\n\n    NodeObject.prototype.getText = function (sourceFile) {\n      return (sourceFile || this.getSourceFile()).text.substring(this.getStart(), this.getEnd());\n    };\n\n    NodeObject.prototype.addSyntheticNodes = function (nodes, pos, end) {\n      scanner.setTextPos(pos);\n\n      while (pos < end) {\n        var token = scanner.scan();\n        var textPos = scanner.getTextPos();\n        nodes.push(createNode(token, pos, textPos, 2048\n        /* Synthetic */\n        , this));\n        pos = textPos;\n      }\n\n      return pos;\n    };\n\n    NodeObject.prototype.createSyntaxList = function (nodes) {\n      var list = createNode(274\n      /* SyntaxList */\n      , nodes.pos, nodes.end, 2048\n      /* Synthetic */\n      , this);\n      list._children = [];\n      var pos = nodes.pos;\n\n      for (var _i = 0, nodes_7 = nodes; _i < nodes_7.length; _i++) {\n        var node = nodes_7[_i];\n\n        if (pos < node.pos) {\n          pos = this.addSyntheticNodes(list._children, pos, node.pos);\n        }\n\n        list._children.push(node);\n\n        pos = node.end;\n      }\n\n      if (pos < nodes.end) {\n        this.addSyntheticNodes(list._children, pos, nodes.end);\n      }\n\n      return list;\n    };\n\n    NodeObject.prototype.createChildren = function (sourceFile) {\n      var _this = this;\n\n      var children;\n\n      if (this.kind >= 136\n      /* FirstNode */\n      ) {\n          scanner.setText((sourceFile || this.getSourceFile()).text);\n          children = [];\n          var pos_3 = this.pos;\n\n          var processNode = function processNode(node) {\n            if (pos_3 < node.pos) {\n              pos_3 = _this.addSyntheticNodes(children, pos_3, node.pos);\n            }\n\n            children.push(node);\n            pos_3 = node.end;\n          };\n\n          var processNodes = function processNodes(nodes) {\n            if (pos_3 < nodes.pos) {\n              pos_3 = _this.addSyntheticNodes(children, pos_3, nodes.pos);\n            }\n\n            children.push(_this.createSyntaxList(nodes));\n            pos_3 = nodes.end;\n          };\n\n          ts.forEachChild(this, processNode, processNodes);\n\n          if (pos_3 < this.end) {\n            this.addSyntheticNodes(children, pos_3, this.end);\n          }\n\n          scanner.setText(undefined);\n        }\n\n      this._children = children || emptyArray;\n    };\n\n    NodeObject.prototype.getChildCount = function (sourceFile) {\n      if (!this._children) this.createChildren(sourceFile);\n      return this._children.length;\n    };\n\n    NodeObject.prototype.getChildAt = function (index, sourceFile) {\n      if (!this._children) this.createChildren(sourceFile);\n      return this._children[index];\n    };\n\n    NodeObject.prototype.getChildren = function (sourceFile) {\n      if (!this._children) this.createChildren(sourceFile);\n      return this._children;\n    };\n\n    NodeObject.prototype.getFirstToken = function (sourceFile) {\n      var children = this.getChildren(sourceFile);\n\n      if (!children.length) {\n        return undefined;\n      }\n\n      var child = children[0];\n      return child.kind < 136\n      /* FirstNode */\n      ? child : child.getFirstToken(sourceFile);\n    };\n\n    NodeObject.prototype.getLastToken = function (sourceFile) {\n      var children = this.getChildren(sourceFile);\n      var child = ts.lastOrUndefined(children);\n\n      if (!child) {\n        return undefined;\n      }\n\n      return child.kind < 136\n      /* FirstNode */\n      ? child : child.getLastToken(sourceFile);\n    };\n\n    return NodeObject;\n  }();\n\n  var SymbolObject = function () {\n    function SymbolObject(flags, name) {\n      this.flags = flags;\n      this.name = name;\n    }\n\n    SymbolObject.prototype.getFlags = function () {\n      return this.flags;\n    };\n\n    SymbolObject.prototype.getName = function () {\n      return this.name;\n    };\n\n    SymbolObject.prototype.getDeclarations = function () {\n      return this.declarations;\n    };\n\n    SymbolObject.prototype.getDocumentationComment = function () {\n      if (this.documentationComment === undefined) {\n        this.documentationComment = getJsDocCommentsFromDeclarations(this.declarations, this.name, !(this.flags & 4\n        /* Property */\n        ));\n      }\n\n      return this.documentationComment;\n    };\n\n    return SymbolObject;\n  }();\n\n  function getJsDocCommentsFromDeclarations(declarations, name, canUseParsedParamTagComments) {\n    var documentationComment = [];\n    var docComments = getJsDocCommentsSeparatedByNewLines();\n    ts.forEach(docComments, function (docComment) {\n      if (documentationComment.length) {\n        documentationComment.push(ts.lineBreakPart());\n      }\n\n      documentationComment.push(docComment);\n    });\n    return documentationComment;\n\n    function getJsDocCommentsSeparatedByNewLines() {\n      var paramTag = \"@param\";\n      var jsDocCommentParts = [];\n      ts.forEach(declarations, function (declaration, indexOfDeclaration) {\n        // Make sure we are collecting doc comment from declaration once,\n        // In case of union property there might be same declaration multiple times\n        // which only varies in type parameter\n        // Eg. const a: Array<string> | Array<number>; a.length\n        // The property length will have two declarations of property length coming\n        // from Array<T> - Array<string> and Array<number>\n        if (ts.indexOf(declarations, declaration) === indexOfDeclaration) {\n          var sourceFileOfDeclaration_1 = ts.getSourceFileOfNode(declaration); // If it is parameter - try and get the jsDoc comment with @param tag from function declaration's jsDoc comments\n\n          if (canUseParsedParamTagComments && declaration.kind === 139\n          /* Parameter */\n          ) {\n              ts.forEach(getJsDocCommentTextRange(declaration.parent, sourceFileOfDeclaration_1), function (jsDocCommentTextRange) {\n                var cleanedParamJsDocComment = getCleanedParamJsDocComment(jsDocCommentTextRange.pos, jsDocCommentTextRange.end, sourceFileOfDeclaration_1);\n\n                if (cleanedParamJsDocComment) {\n                  ts.addRange(jsDocCommentParts, cleanedParamJsDocComment);\n                }\n              });\n            } // If this is left side of dotted module declaration, there is no doc comments associated with this node\n\n\n          if (declaration.kind === 221\n          /* ModuleDeclaration */\n          && declaration.body.kind === 221\n          /* ModuleDeclaration */\n          ) {\n              return;\n            } // If this is dotted module name, get the doc comments from the parent\n\n\n          while (declaration.kind === 221\n          /* ModuleDeclaration */\n          && declaration.parent.kind === 221\n          /* ModuleDeclaration */\n          ) {\n            declaration = declaration.parent;\n          } // Get the cleaned js doc comment text from the declaration\n\n\n          ts.forEach(getJsDocCommentTextRange(declaration.kind === 214\n          /* VariableDeclaration */\n          ? declaration.parent.parent : declaration, sourceFileOfDeclaration_1), function (jsDocCommentTextRange) {\n            var cleanedJsDocComment = getCleanedJsDocComment(jsDocCommentTextRange.pos, jsDocCommentTextRange.end, sourceFileOfDeclaration_1);\n\n            if (cleanedJsDocComment) {\n              ts.addRange(jsDocCommentParts, cleanedJsDocComment);\n            }\n          });\n        }\n      });\n      return jsDocCommentParts;\n\n      function getJsDocCommentTextRange(node, sourceFile) {\n        return ts.map(ts.getJsDocComments(node, sourceFile), function (jsDocComment) {\n          return {\n            pos: jsDocComment.pos + \"/*\".length,\n            end: jsDocComment.end - \"*/\".length // Trim off comment end indicator\n\n          };\n        });\n      }\n\n      function consumeWhiteSpacesOnTheLine(pos, end, sourceFile, maxSpacesToRemove) {\n        if (maxSpacesToRemove !== undefined) {\n          end = Math.min(end, pos + maxSpacesToRemove);\n        }\n\n        for (; pos < end; pos++) {\n          var ch = sourceFile.text.charCodeAt(pos);\n\n          if (!ts.isWhiteSpace(ch) || ts.isLineBreak(ch)) {\n            // Either found lineBreak or non whiteSpace\n            return pos;\n          }\n        }\n\n        return end;\n      }\n\n      function consumeLineBreaks(pos, end, sourceFile) {\n        while (pos < end && ts.isLineBreak(sourceFile.text.charCodeAt(pos))) {\n          pos++;\n        }\n\n        return pos;\n      }\n\n      function isName(pos, end, sourceFile, name) {\n        return pos + name.length < end && sourceFile.text.substr(pos, name.length) === name && (ts.isWhiteSpace(sourceFile.text.charCodeAt(pos + name.length)) || ts.isLineBreak(sourceFile.text.charCodeAt(pos + name.length)));\n      }\n\n      function isParamTag(pos, end, sourceFile) {\n        // If it is @param tag\n        return isName(pos, end, sourceFile, paramTag);\n      }\n\n      function pushDocCommentLineText(docComments, text, blankLineCount) {\n        // Add the empty lines in between texts\n        while (blankLineCount) {\n          blankLineCount--;\n          docComments.push(ts.textPart(\"\"));\n        }\n\n        docComments.push(ts.textPart(text));\n      }\n\n      function getCleanedJsDocComment(pos, end, sourceFile) {\n        var spacesToRemoveAfterAsterisk;\n        var docComments = [];\n        var blankLineCount = 0;\n        var isInParamTag = false;\n\n        while (pos < end) {\n          var docCommentTextOfLine = \"\"; // First consume leading white space\n\n          pos = consumeWhiteSpacesOnTheLine(pos, end, sourceFile); // If the comment starts with '*' consume the spaces on this line\n\n          if (pos < end && sourceFile.text.charCodeAt(pos) === 42\n          /* asterisk */\n          ) {\n              var lineStartPos = pos + 1;\n              pos = consumeWhiteSpacesOnTheLine(pos + 1, end, sourceFile, spacesToRemoveAfterAsterisk); // Set the spaces to remove after asterisk as margin if not already set\n\n              if (spacesToRemoveAfterAsterisk === undefined && pos < end && !ts.isLineBreak(sourceFile.text.charCodeAt(pos))) {\n                spacesToRemoveAfterAsterisk = pos - lineStartPos;\n              }\n            } else if (spacesToRemoveAfterAsterisk === undefined) {\n            spacesToRemoveAfterAsterisk = 0;\n          } // Analyse text on this line\n\n\n          while (pos < end && !ts.isLineBreak(sourceFile.text.charCodeAt(pos))) {\n            var ch = sourceFile.text.charAt(pos);\n\n            if (ch === \"@\") {\n              // If it is @param tag\n              if (isParamTag(pos, end, sourceFile)) {\n                isInParamTag = true;\n                pos += paramTag.length;\n                continue;\n              } else {\n                isInParamTag = false;\n              }\n            } // Add the ch to doc text if we arent in param tag\n\n\n            if (!isInParamTag) {\n              docCommentTextOfLine += ch;\n            } // Scan next character\n\n\n            pos++;\n          } // Continue with next line\n\n\n          pos = consumeLineBreaks(pos, end, sourceFile);\n\n          if (docCommentTextOfLine) {\n            pushDocCommentLineText(docComments, docCommentTextOfLine, blankLineCount);\n            blankLineCount = 0;\n          } else if (!isInParamTag && docComments.length) {\n            // This is blank line when there is text already parsed\n            blankLineCount++;\n          }\n        }\n\n        return docComments;\n      }\n\n      function getCleanedParamJsDocComment(pos, end, sourceFile) {\n        var paramHelpStringMargin;\n        var paramDocComments = [];\n\n        while (pos < end) {\n          if (isParamTag(pos, end, sourceFile)) {\n            var blankLineCount = 0;\n            var recordedParamTag = false; // Consume leading spaces\n\n            pos = consumeWhiteSpaces(pos + paramTag.length);\n\n            if (pos >= end) {\n              break;\n            } // Ignore type expression\n\n\n            if (sourceFile.text.charCodeAt(pos) === 123\n            /* openBrace */\n            ) {\n                pos++;\n\n                for (var curlies = 1; pos < end; pos++) {\n                  var charCode = sourceFile.text.charCodeAt(pos); // { character means we need to find another } to match the found one\n\n                  if (charCode === 123\n                  /* openBrace */\n                  ) {\n                      curlies++;\n                      continue;\n                    } // } char\n\n\n                  if (charCode === 125\n                  /* closeBrace */\n                  ) {\n                      curlies--;\n\n                      if (curlies === 0) {\n                        // We do not have any more } to match the type expression is ignored completely\n                        pos++;\n                        break;\n                      } else {\n                        // there are more { to be matched with }\n                        continue;\n                      }\n                    } // Found start of another tag\n\n\n                  if (charCode === 64\n                  /* at */\n                  ) {\n                      break;\n                    }\n                } // Consume white spaces\n\n\n                pos = consumeWhiteSpaces(pos);\n\n                if (pos >= end) {\n                  break;\n                }\n              } // Parameter name\n\n\n            if (isName(pos, end, sourceFile, name)) {\n              // Found the parameter we are looking for consume white spaces\n              pos = consumeWhiteSpaces(pos + name.length);\n\n              if (pos >= end) {\n                break;\n              }\n\n              var paramHelpString = \"\";\n              var firstLineParamHelpStringPos = pos;\n\n              while (pos < end) {\n                var ch = sourceFile.text.charCodeAt(pos); // at line break, set this comment line text and go to next line\n\n                if (ts.isLineBreak(ch)) {\n                  if (paramHelpString) {\n                    pushDocCommentLineText(paramDocComments, paramHelpString, blankLineCount);\n                    paramHelpString = \"\";\n                    blankLineCount = 0;\n                    recordedParamTag = true;\n                  } else if (recordedParamTag) {\n                    blankLineCount++;\n                  } // Get the pos after cleaning start of the line\n\n\n                  setPosForParamHelpStringOnNextLine(firstLineParamHelpStringPos);\n                  continue;\n                } // Done scanning param help string - next tag found\n\n\n                if (ch === 64\n                /* at */\n                ) {\n                    break;\n                  }\n\n                paramHelpString += sourceFile.text.charAt(pos); // Go to next character\n\n                pos++;\n              } // If there is param help text, add it top the doc comments\n\n\n              if (paramHelpString) {\n                pushDocCommentLineText(paramDocComments, paramHelpString, blankLineCount);\n              }\n\n              paramHelpStringMargin = undefined;\n            } // If this is the start of another tag, continue with the loop in seach of param tag with symbol name\n\n\n            if (sourceFile.text.charCodeAt(pos) === 64\n            /* at */\n            ) {\n                continue;\n              }\n          } // Next character\n\n\n          pos++;\n        }\n\n        return paramDocComments;\n\n        function consumeWhiteSpaces(pos) {\n          while (pos < end && ts.isWhiteSpace(sourceFile.text.charCodeAt(pos))) {\n            pos++;\n          }\n\n          return pos;\n        }\n\n        function setPosForParamHelpStringOnNextLine(firstLineParamHelpStringPos) {\n          // Get the pos after consuming line breaks\n          pos = consumeLineBreaks(pos, end, sourceFile);\n\n          if (pos >= end) {\n            return;\n          }\n\n          if (paramHelpStringMargin === undefined) {\n            paramHelpStringMargin = sourceFile.getLineAndCharacterOfPosition(firstLineParamHelpStringPos).character;\n          } // Now consume white spaces max\n\n\n          var startOfLinePos = pos;\n          pos = consumeWhiteSpacesOnTheLine(pos, end, sourceFile, paramHelpStringMargin);\n\n          if (pos >= end) {\n            return;\n          }\n\n          var consumedSpaces = pos - startOfLinePos;\n\n          if (consumedSpaces < paramHelpStringMargin) {\n            var ch = sourceFile.text.charCodeAt(pos);\n\n            if (ch === 42\n            /* asterisk */\n            ) {\n                // Consume more spaces after asterisk\n                pos = consumeWhiteSpacesOnTheLine(pos + 1, end, sourceFile, paramHelpStringMargin - consumedSpaces - 1);\n              }\n          }\n        }\n      }\n    }\n  }\n\n  var TypeObject = function () {\n    function TypeObject(checker, flags) {\n      this.checker = checker;\n      this.flags = flags;\n    }\n\n    TypeObject.prototype.getFlags = function () {\n      return this.flags;\n    };\n\n    TypeObject.prototype.getSymbol = function () {\n      return this.symbol;\n    };\n\n    TypeObject.prototype.getProperties = function () {\n      return this.checker.getPropertiesOfType(this);\n    };\n\n    TypeObject.prototype.getProperty = function (propertyName) {\n      return this.checker.getPropertyOfType(this, propertyName);\n    };\n\n    TypeObject.prototype.getApparentProperties = function () {\n      return this.checker.getAugmentedPropertiesOfType(this);\n    };\n\n    TypeObject.prototype.getCallSignatures = function () {\n      return this.checker.getSignaturesOfType(this, 0\n      /* Call */\n      );\n    };\n\n    TypeObject.prototype.getConstructSignatures = function () {\n      return this.checker.getSignaturesOfType(this, 1\n      /* Construct */\n      );\n    };\n\n    TypeObject.prototype.getStringIndexType = function () {\n      return this.checker.getIndexTypeOfType(this, 0\n      /* String */\n      );\n    };\n\n    TypeObject.prototype.getNumberIndexType = function () {\n      return this.checker.getIndexTypeOfType(this, 1\n      /* Number */\n      );\n    };\n\n    TypeObject.prototype.getBaseTypes = function () {\n      return this.flags & (1024\n      /* Class */\n      | 2048\n      /* Interface */\n      ) ? this.checker.getBaseTypes(this) : undefined;\n    };\n\n    return TypeObject;\n  }();\n\n  var SignatureObject = function () {\n    function SignatureObject(checker) {\n      this.checker = checker;\n    }\n\n    SignatureObject.prototype.getDeclaration = function () {\n      return this.declaration;\n    };\n\n    SignatureObject.prototype.getTypeParameters = function () {\n      return this.typeParameters;\n    };\n\n    SignatureObject.prototype.getParameters = function () {\n      return this.parameters;\n    };\n\n    SignatureObject.prototype.getReturnType = function () {\n      return this.checker.getReturnTypeOfSignature(this);\n    };\n\n    SignatureObject.prototype.getDocumentationComment = function () {\n      if (this.documentationComment === undefined) {\n        this.documentationComment = this.declaration ? getJsDocCommentsFromDeclarations([this.declaration],\n        /*name*/\n        undefined,\n        /*canUseParsedParamTagComments*/\n        false) : [];\n      }\n\n      return this.documentationComment;\n    };\n\n    return SignatureObject;\n  }();\n\n  var SourceFileObject = function (_super) {\n    __extends(SourceFileObject, _super);\n\n    function SourceFileObject(kind, pos, end) {\n      _super.call(this, kind, pos, end);\n    }\n\n    SourceFileObject.prototype.update = function (newText, textChangeRange) {\n      return ts.updateSourceFile(this, newText, textChangeRange);\n    };\n\n    SourceFileObject.prototype.getLineAndCharacterOfPosition = function (position) {\n      return ts.getLineAndCharacterOfPosition(this, position);\n    };\n\n    SourceFileObject.prototype.getLineStarts = function () {\n      return ts.getLineStarts(this);\n    };\n\n    SourceFileObject.prototype.getPositionOfLineAndCharacter = function (line, character) {\n      return ts.getPositionOfLineAndCharacter(this, line, character);\n    };\n\n    SourceFileObject.prototype.getNamedDeclarations = function () {\n      if (!this.namedDeclarations) {\n        this.namedDeclarations = this.computeNamedDeclarations();\n      }\n\n      return this.namedDeclarations;\n    };\n\n    SourceFileObject.prototype.computeNamedDeclarations = function () {\n      var result = {};\n      ts.forEachChild(this, visit);\n      return result;\n\n      function addDeclaration(declaration) {\n        var name = getDeclarationName(declaration);\n\n        if (name) {\n          var declarations = getDeclarations(name);\n          declarations.push(declaration);\n        }\n      }\n\n      function getDeclarations(name) {\n        return ts.getProperty(result, name) || (result[name] = []);\n      }\n\n      function getDeclarationName(declaration) {\n        if (declaration.name) {\n          var result_3 = getTextOfIdentifierOrLiteral(declaration.name);\n\n          if (result_3 !== undefined) {\n            return result_3;\n          }\n\n          if (declaration.name.kind === 137\n          /* ComputedPropertyName */\n          ) {\n              var expr = declaration.name.expression;\n\n              if (expr.kind === 169\n              /* PropertyAccessExpression */\n              ) {\n                  return expr.name.text;\n                }\n\n              return getTextOfIdentifierOrLiteral(expr);\n            }\n        }\n\n        return undefined;\n      }\n\n      function getTextOfIdentifierOrLiteral(node) {\n        if (node) {\n          if (node.kind === 69\n          /* Identifier */\n          || node.kind === 9\n          /* StringLiteral */\n          || node.kind === 8\n          /* NumericLiteral */\n          ) {\n              return node.text;\n            }\n        }\n\n        return undefined;\n      }\n\n      function visit(node) {\n        switch (node.kind) {\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            var functionDeclaration = node;\n            var declarationName = getDeclarationName(functionDeclaration);\n\n            if (declarationName) {\n              var declarations = getDeclarations(declarationName);\n              var lastDeclaration = ts.lastOrUndefined(declarations); // Check whether this declaration belongs to an \"overload group\".\n\n              if (lastDeclaration && functionDeclaration.parent === lastDeclaration.parent && functionDeclaration.symbol === lastDeclaration.symbol) {\n                // Overwrite the last declaration if it was an overload\n                // and this one is an implementation.\n                if (functionDeclaration.body && !lastDeclaration.body) {\n                  declarations[declarations.length - 1] = functionDeclaration;\n                }\n              } else {\n                declarations.push(functionDeclaration);\n              }\n\n              ts.forEachChild(node, visit);\n            }\n\n            break;\n\n          case 217\n          /* ClassDeclaration */\n          :\n          case 218\n          /* InterfaceDeclaration */\n          :\n          case 219\n          /* TypeAliasDeclaration */\n          :\n          case 220\n          /* EnumDeclaration */\n          :\n          case 221\n          /* ModuleDeclaration */\n          :\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n          case 233\n          /* ExportSpecifier */\n          :\n          case 229\n          /* ImportSpecifier */\n          :\n          case 224\n          /* ImportEqualsDeclaration */\n          :\n          case 226\n          /* ImportClause */\n          :\n          case 227\n          /* NamespaceImport */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 156\n          /* TypeLiteral */\n          :\n            addDeclaration(node);\n          // fall through\n\n          case 145\n          /* Constructor */\n          :\n          case 196\n          /* VariableStatement */\n          :\n          case 215\n          /* VariableDeclarationList */\n          :\n          case 164\n          /* ObjectBindingPattern */\n          :\n          case 165\n          /* ArrayBindingPattern */\n          :\n          case 222\n          /* ModuleBlock */\n          :\n            ts.forEachChild(node, visit);\n            break;\n\n          case 195\n          /* Block */\n          :\n            if (ts.isFunctionBlock(node)) {\n              ts.forEachChild(node, visit);\n            }\n\n            break;\n\n          case 139\n          /* Parameter */\n          :\n            // Only consider properties defined as constructor parameters\n            if (!(node.flags & 56\n            /* AccessibilityModifier */\n            )) {\n              break;\n            }\n\n          // fall through\n\n          case 214\n          /* VariableDeclaration */\n          :\n          case 166\n          /* BindingElement */\n          :\n            if (ts.isBindingPattern(node.name)) {\n              ts.forEachChild(node.name, visit);\n              break;\n            }\n\n          case 250\n          /* EnumMember */\n          :\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n            addDeclaration(node);\n            break;\n\n          case 231\n          /* ExportDeclaration */\n          :\n            // Handle named exports case e.g.:\n            //    export {a, b as B} from \"mod\";\n            if (node.exportClause) {\n              ts.forEach(node.exportClause.elements, visit);\n            }\n\n            break;\n\n          case 225\n          /* ImportDeclaration */\n          :\n            var importClause = node.importClause;\n\n            if (importClause) {\n              // Handle default import case e.g.:\n              //    import d from \"mod\";\n              if (importClause.name) {\n                addDeclaration(importClause);\n              } // Handle named bindings in imports e.g.:\n              //    import * as NS from \"mod\";\n              //    import {a, b as B} from \"mod\";\n\n\n              if (importClause.namedBindings) {\n                if (importClause.namedBindings.kind === 227\n                /* NamespaceImport */\n                ) {\n                    addDeclaration(importClause.namedBindings);\n                  } else {\n                  ts.forEach(importClause.namedBindings.elements, visit);\n                }\n              }\n            }\n\n            break;\n        }\n      }\n    };\n\n    return SourceFileObject;\n  }(NodeObject);\n\n  var TextChange = function () {\n    function TextChange() {}\n\n    return TextChange;\n  }();\n\n  ts.TextChange = TextChange;\n  var HighlightSpanKind;\n\n  (function (HighlightSpanKind) {\n    HighlightSpanKind.none = \"none\";\n    HighlightSpanKind.definition = \"definition\";\n    HighlightSpanKind.reference = \"reference\";\n    HighlightSpanKind.writtenReference = \"writtenReference\";\n  })(HighlightSpanKind = ts.HighlightSpanKind || (ts.HighlightSpanKind = {}));\n\n  (function (IndentStyle) {\n    IndentStyle[IndentStyle[\"None\"] = 0] = \"None\";\n    IndentStyle[IndentStyle[\"Block\"] = 1] = \"Block\";\n    IndentStyle[IndentStyle[\"Smart\"] = 2] = \"Smart\";\n  })(ts.IndentStyle || (ts.IndentStyle = {}));\n\n  var IndentStyle = ts.IndentStyle;\n\n  (function (SymbolDisplayPartKind) {\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"aliasName\"] = 0] = \"aliasName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"className\"] = 1] = \"className\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"enumName\"] = 2] = \"enumName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"fieldName\"] = 3] = \"fieldName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"interfaceName\"] = 4] = \"interfaceName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"keyword\"] = 5] = \"keyword\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"lineBreak\"] = 6] = \"lineBreak\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"numericLiteral\"] = 7] = \"numericLiteral\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"stringLiteral\"] = 8] = \"stringLiteral\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"localName\"] = 9] = \"localName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"methodName\"] = 10] = \"methodName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"moduleName\"] = 11] = \"moduleName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"operator\"] = 12] = \"operator\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"parameterName\"] = 13] = \"parameterName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"propertyName\"] = 14] = \"propertyName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"punctuation\"] = 15] = \"punctuation\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"space\"] = 16] = \"space\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"text\"] = 17] = \"text\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"typeParameterName\"] = 18] = \"typeParameterName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"enumMemberName\"] = 19] = \"enumMemberName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"functionName\"] = 20] = \"functionName\";\n    SymbolDisplayPartKind[SymbolDisplayPartKind[\"regularExpressionLiteral\"] = 21] = \"regularExpressionLiteral\";\n  })(ts.SymbolDisplayPartKind || (ts.SymbolDisplayPartKind = {}));\n\n  var SymbolDisplayPartKind = ts.SymbolDisplayPartKind;\n\n  (function (OutputFileType) {\n    OutputFileType[OutputFileType[\"JavaScript\"] = 0] = \"JavaScript\";\n    OutputFileType[OutputFileType[\"SourceMap\"] = 1] = \"SourceMap\";\n    OutputFileType[OutputFileType[\"Declaration\"] = 2] = \"Declaration\";\n  })(ts.OutputFileType || (ts.OutputFileType = {}));\n\n  var OutputFileType = ts.OutputFileType;\n\n  (function (EndOfLineState) {\n    EndOfLineState[EndOfLineState[\"None\"] = 0] = \"None\";\n    EndOfLineState[EndOfLineState[\"InMultiLineCommentTrivia\"] = 1] = \"InMultiLineCommentTrivia\";\n    EndOfLineState[EndOfLineState[\"InSingleQuoteStringLiteral\"] = 2] = \"InSingleQuoteStringLiteral\";\n    EndOfLineState[EndOfLineState[\"InDoubleQuoteStringLiteral\"] = 3] = \"InDoubleQuoteStringLiteral\";\n    EndOfLineState[EndOfLineState[\"InTemplateHeadOrNoSubstitutionTemplate\"] = 4] = \"InTemplateHeadOrNoSubstitutionTemplate\";\n    EndOfLineState[EndOfLineState[\"InTemplateMiddleOrTail\"] = 5] = \"InTemplateMiddleOrTail\";\n    EndOfLineState[EndOfLineState[\"InTemplateSubstitutionPosition\"] = 6] = \"InTemplateSubstitutionPosition\";\n  })(ts.EndOfLineState || (ts.EndOfLineState = {}));\n\n  var EndOfLineState = ts.EndOfLineState;\n\n  (function (TokenClass) {\n    TokenClass[TokenClass[\"Punctuation\"] = 0] = \"Punctuation\";\n    TokenClass[TokenClass[\"Keyword\"] = 1] = \"Keyword\";\n    TokenClass[TokenClass[\"Operator\"] = 2] = \"Operator\";\n    TokenClass[TokenClass[\"Comment\"] = 3] = \"Comment\";\n    TokenClass[TokenClass[\"Whitespace\"] = 4] = \"Whitespace\";\n    TokenClass[TokenClass[\"Identifier\"] = 5] = \"Identifier\";\n    TokenClass[TokenClass[\"NumberLiteral\"] = 6] = \"NumberLiteral\";\n    TokenClass[TokenClass[\"StringLiteral\"] = 7] = \"StringLiteral\";\n    TokenClass[TokenClass[\"RegExpLiteral\"] = 8] = \"RegExpLiteral\";\n  })(ts.TokenClass || (ts.TokenClass = {}));\n\n  var TokenClass = ts.TokenClass; // TODO: move these to enums\n\n  var ScriptElementKind;\n\n  (function (ScriptElementKind) {\n    ScriptElementKind.unknown = \"\";\n    ScriptElementKind.warning = \"warning\"; // predefined type (void) or keyword (class)\n\n    ScriptElementKind.keyword = \"keyword\"; // top level script node\n\n    ScriptElementKind.scriptElement = \"script\"; // module foo {}\n\n    ScriptElementKind.moduleElement = \"module\"; // class X {}\n\n    ScriptElementKind.classElement = \"class\"; // var x = class X {}\n\n    ScriptElementKind.localClassElement = \"local class\"; // interface Y {}\n\n    ScriptElementKind.interfaceElement = \"interface\"; // type T = ...\n\n    ScriptElementKind.typeElement = \"type\"; // enum E\n\n    ScriptElementKind.enumElement = \"enum\"; // Inside module and script only\n    // const v = ..\n\n    ScriptElementKind.variableElement = \"var\"; // Inside function\n\n    ScriptElementKind.localVariableElement = \"local var\"; // Inside module and script only\n    // function f() { }\n\n    ScriptElementKind.functionElement = \"function\"; // Inside function\n\n    ScriptElementKind.localFunctionElement = \"local function\"; // class X { [public|private]* foo() {} }\n\n    ScriptElementKind.memberFunctionElement = \"method\"; // class X { [public|private]* [get|set] foo:number; }\n\n    ScriptElementKind.memberGetAccessorElement = \"getter\";\n    ScriptElementKind.memberSetAccessorElement = \"setter\"; // class X { [public|private]* foo:number; }\n    // interface Y { foo:number; }\n\n    ScriptElementKind.memberVariableElement = \"property\"; // class X { constructor() { } }\n\n    ScriptElementKind.constructorImplementationElement = \"constructor\"; // interface Y { ():number; }\n\n    ScriptElementKind.callSignatureElement = \"call\"; // interface Y { []:number; }\n\n    ScriptElementKind.indexSignatureElement = \"index\"; // interface Y { new():Y; }\n\n    ScriptElementKind.constructSignatureElement = \"construct\"; // function foo(*Y*: string)\n\n    ScriptElementKind.parameterElement = \"parameter\";\n    ScriptElementKind.typeParameterElement = \"type parameter\";\n    ScriptElementKind.primitiveType = \"primitive type\";\n    ScriptElementKind.label = \"label\";\n    ScriptElementKind.alias = \"alias\";\n    ScriptElementKind.constElement = \"const\";\n    ScriptElementKind.letElement = \"let\";\n  })(ScriptElementKind = ts.ScriptElementKind || (ts.ScriptElementKind = {}));\n\n  var ScriptElementKindModifier;\n\n  (function (ScriptElementKindModifier) {\n    ScriptElementKindModifier.none = \"\";\n    ScriptElementKindModifier.publicMemberModifier = \"public\";\n    ScriptElementKindModifier.privateMemberModifier = \"private\";\n    ScriptElementKindModifier.protectedMemberModifier = \"protected\";\n    ScriptElementKindModifier.exportedModifier = \"export\";\n    ScriptElementKindModifier.ambientModifier = \"declare\";\n    ScriptElementKindModifier.staticModifier = \"static\";\n    ScriptElementKindModifier.abstractModifier = \"abstract\";\n  })(ScriptElementKindModifier = ts.ScriptElementKindModifier || (ts.ScriptElementKindModifier = {}));\n\n  var ClassificationTypeNames = function () {\n    function ClassificationTypeNames() {}\n\n    ClassificationTypeNames.comment = \"comment\";\n    ClassificationTypeNames.identifier = \"identifier\";\n    ClassificationTypeNames.keyword = \"keyword\";\n    ClassificationTypeNames.numericLiteral = \"number\";\n    ClassificationTypeNames.operator = \"operator\";\n    ClassificationTypeNames.stringLiteral = \"string\";\n    ClassificationTypeNames.whiteSpace = \"whitespace\";\n    ClassificationTypeNames.text = \"text\";\n    ClassificationTypeNames.punctuation = \"punctuation\";\n    ClassificationTypeNames.className = \"class name\";\n    ClassificationTypeNames.enumName = \"enum name\";\n    ClassificationTypeNames.interfaceName = \"interface name\";\n    ClassificationTypeNames.moduleName = \"module name\";\n    ClassificationTypeNames.typeParameterName = \"type parameter name\";\n    ClassificationTypeNames.typeAliasName = \"type alias name\";\n    ClassificationTypeNames.parameterName = \"parameter name\";\n    ClassificationTypeNames.docCommentTagName = \"doc comment tag name\";\n    ClassificationTypeNames.jsxOpenTagName = \"jsx open tag name\";\n    ClassificationTypeNames.jsxCloseTagName = \"jsx close tag name\";\n    ClassificationTypeNames.jsxSelfClosingTagName = \"jsx self closing tag name\";\n    ClassificationTypeNames.jsxAttribute = \"jsx attribute\";\n    ClassificationTypeNames.jsxText = \"jsx text\";\n    ClassificationTypeNames.jsxAttributeStringLiteralValue = \"jsx attribute string literal value\";\n    return ClassificationTypeNames;\n  }();\n\n  ts.ClassificationTypeNames = ClassificationTypeNames;\n\n  (function (ClassificationType) {\n    ClassificationType[ClassificationType[\"comment\"] = 1] = \"comment\";\n    ClassificationType[ClassificationType[\"identifier\"] = 2] = \"identifier\";\n    ClassificationType[ClassificationType[\"keyword\"] = 3] = \"keyword\";\n    ClassificationType[ClassificationType[\"numericLiteral\"] = 4] = \"numericLiteral\";\n    ClassificationType[ClassificationType[\"operator\"] = 5] = \"operator\";\n    ClassificationType[ClassificationType[\"stringLiteral\"] = 6] = \"stringLiteral\";\n    ClassificationType[ClassificationType[\"regularExpressionLiteral\"] = 7] = \"regularExpressionLiteral\";\n    ClassificationType[ClassificationType[\"whiteSpace\"] = 8] = \"whiteSpace\";\n    ClassificationType[ClassificationType[\"text\"] = 9] = \"text\";\n    ClassificationType[ClassificationType[\"punctuation\"] = 10] = \"punctuation\";\n    ClassificationType[ClassificationType[\"className\"] = 11] = \"className\";\n    ClassificationType[ClassificationType[\"enumName\"] = 12] = \"enumName\";\n    ClassificationType[ClassificationType[\"interfaceName\"] = 13] = \"interfaceName\";\n    ClassificationType[ClassificationType[\"moduleName\"] = 14] = \"moduleName\";\n    ClassificationType[ClassificationType[\"typeParameterName\"] = 15] = \"typeParameterName\";\n    ClassificationType[ClassificationType[\"typeAliasName\"] = 16] = \"typeAliasName\";\n    ClassificationType[ClassificationType[\"parameterName\"] = 17] = \"parameterName\";\n    ClassificationType[ClassificationType[\"docCommentTagName\"] = 18] = \"docCommentTagName\";\n    ClassificationType[ClassificationType[\"jsxOpenTagName\"] = 19] = \"jsxOpenTagName\";\n    ClassificationType[ClassificationType[\"jsxCloseTagName\"] = 20] = \"jsxCloseTagName\";\n    ClassificationType[ClassificationType[\"jsxSelfClosingTagName\"] = 21] = \"jsxSelfClosingTagName\";\n    ClassificationType[ClassificationType[\"jsxAttribute\"] = 22] = \"jsxAttribute\";\n    ClassificationType[ClassificationType[\"jsxText\"] = 23] = \"jsxText\";\n    ClassificationType[ClassificationType[\"jsxAttributeStringLiteralValue\"] = 24] = \"jsxAttributeStringLiteralValue\";\n  })(ts.ClassificationType || (ts.ClassificationType = {}));\n\n  var ClassificationType = ts.ClassificationType;\n\n  function displayPartsToString(displayParts) {\n    if (displayParts) {\n      return ts.map(displayParts, function (displayPart) {\n        return displayPart.text;\n      }).join(\"\");\n    }\n\n    return \"\";\n  }\n\n  ts.displayPartsToString = displayPartsToString;\n\n  function isLocalVariableOrFunction(symbol) {\n    if (symbol.parent) {\n      return false; // This is exported symbol\n    }\n\n    return ts.forEach(symbol.declarations, function (declaration) {\n      // Function expressions are local\n      if (declaration.kind === 176\n      /* FunctionExpression */\n      ) {\n          return true;\n        }\n\n      if (declaration.kind !== 214\n      /* VariableDeclaration */\n      && declaration.kind !== 216\n      /* FunctionDeclaration */\n      ) {\n          return false;\n        } // If the parent is not sourceFile or module block it is local variable\n\n\n      for (var parent_10 = declaration.parent; !ts.isFunctionBlock(parent_10); parent_10 = parent_10.parent) {\n        // Reached source file or module block\n        if (parent_10.kind === 251\n        /* SourceFile */\n        || parent_10.kind === 222\n        /* ModuleBlock */\n        ) {\n            return false;\n          }\n      } // parent is in function block\n\n\n      return true;\n    });\n  }\n\n  function getDefaultCompilerOptions() {\n    // Always default to \"ScriptTarget.ES5\" for the language service\n    return {\n      target: 1\n      /* ES5 */\n      ,\n      jsx: 1\n      /* Preserve */\n\n    };\n  }\n\n  ts.getDefaultCompilerOptions = getDefaultCompilerOptions; // Cache host information about scrip Should be refreshed\n  // at each language service public entry point, since we don't know when\n  // set of scripts handled by the host changes.\n\n  var HostCache = function () {\n    function HostCache(host, getCanonicalFileName) {\n      this.host = host;\n      this.getCanonicalFileName = getCanonicalFileName; // script id => script index\n\n      this.currentDirectory = host.getCurrentDirectory();\n      this.fileNameToEntry = ts.createFileMap(); // Initialize the list with the root file names\n\n      var rootFileNames = host.getScriptFileNames();\n\n      for (var _i = 0, rootFileNames_1 = rootFileNames; _i < rootFileNames_1.length; _i++) {\n        var fileName = rootFileNames_1[_i];\n        this.createEntry(fileName, ts.toPath(fileName, this.currentDirectory, getCanonicalFileName));\n      } // store the compilation settings\n\n\n      this._compilationSettings = host.getCompilationSettings() || getDefaultCompilerOptions();\n    }\n\n    HostCache.prototype.compilationSettings = function () {\n      return this._compilationSettings;\n    };\n\n    HostCache.prototype.createEntry = function (fileName, path) {\n      var entry;\n      var scriptSnapshot = this.host.getScriptSnapshot(fileName);\n\n      if (scriptSnapshot) {\n        entry = {\n          hostFileName: fileName,\n          version: this.host.getScriptVersion(fileName),\n          scriptSnapshot: scriptSnapshot,\n          scriptKind: ts.getScriptKind(fileName, this.host)\n        };\n      }\n\n      this.fileNameToEntry.set(path, entry);\n      return entry;\n    };\n\n    HostCache.prototype.getEntry = function (path) {\n      return this.fileNameToEntry.get(path);\n    };\n\n    HostCache.prototype.contains = function (path) {\n      return this.fileNameToEntry.contains(path);\n    };\n\n    HostCache.prototype.getOrCreateEntry = function (fileName) {\n      var path = ts.toPath(fileName, this.currentDirectory, this.getCanonicalFileName);\n\n      if (this.contains(path)) {\n        return this.getEntry(path);\n      }\n\n      return this.createEntry(fileName, path);\n    };\n\n    HostCache.prototype.getRootFileNames = function () {\n      var fileNames = [];\n      this.fileNameToEntry.forEachValue(function (path, value) {\n        if (value) {\n          fileNames.push(value.hostFileName);\n        }\n      });\n      return fileNames;\n    };\n\n    HostCache.prototype.getVersion = function (path) {\n      var file = this.getEntry(path);\n      return file && file.version;\n    };\n\n    HostCache.prototype.getScriptSnapshot = function (path) {\n      var file = this.getEntry(path);\n      return file && file.scriptSnapshot;\n    };\n\n    return HostCache;\n  }();\n\n  var SyntaxTreeCache = function () {\n    function SyntaxTreeCache(host) {\n      this.host = host;\n    }\n\n    SyntaxTreeCache.prototype.getCurrentSourceFile = function (fileName) {\n      var scriptSnapshot = this.host.getScriptSnapshot(fileName);\n\n      if (!scriptSnapshot) {\n        // The host does not know about this file.\n        throw new Error(\"Could not find file: '\" + fileName + \"'.\");\n      }\n\n      var scriptKind = ts.getScriptKind(fileName, this.host);\n      var version = this.host.getScriptVersion(fileName);\n      var sourceFile;\n\n      if (this.currentFileName !== fileName) {\n        // This is a new file, just parse it\n        sourceFile = createLanguageServiceSourceFile(fileName, scriptSnapshot, 2\n        /* Latest */\n        , version,\n        /*setNodeParents*/\n        true, scriptKind);\n      } else if (this.currentFileVersion !== version) {\n        // This is the same file, just a newer version. Incrementally parse the file.\n        var editRange = scriptSnapshot.getChangeRange(this.currentFileScriptSnapshot);\n        sourceFile = updateLanguageServiceSourceFile(this.currentSourceFile, scriptSnapshot, version, editRange);\n      }\n\n      if (sourceFile) {\n        // All done, ensure state is up to date\n        this.currentFileVersion = version;\n        this.currentFileName = fileName;\n        this.currentFileScriptSnapshot = scriptSnapshot;\n        this.currentSourceFile = sourceFile;\n      }\n\n      return this.currentSourceFile;\n    };\n\n    return SyntaxTreeCache;\n  }();\n\n  function setSourceFileFields(sourceFile, scriptSnapshot, version) {\n    sourceFile.version = version;\n    sourceFile.scriptSnapshot = scriptSnapshot;\n  }\n  /*\n   * This function will compile source text from 'input' argument using specified compiler options.\n   * If not options are provided - it will use a set of default compiler options.\n   * Extra compiler options that will unconditionally be used by this function are:\n   * - isolatedModules = true\n   * - allowNonTsExtensions = true\n   * - noLib = true\n   * - noResolve = true\n   */\n\n\n  function transpileModule(input, transpileOptions) {\n    var options = transpileOptions.compilerOptions ? ts.clone(transpileOptions.compilerOptions) : getDefaultCompilerOptions();\n    options.isolatedModules = true; // transpileModule does not write anything to disk so there is no need to verify that there are no conflicts between input and output paths. \n\n    options.suppressOutputPathCheck = true; // Filename can be non-ts file.\n\n    options.allowNonTsExtensions = true; // We are not returning a sourceFile for lib file when asked by the program,\n    // so pass --noLib to avoid reporting a file not found error.\n\n    options.noLib = true; // We are not doing a full typecheck, we are not resolving the whole context,\n    // so pass --noResolve to avoid reporting missing file errors.\n\n    options.noResolve = true; // if jsx is specified then treat file as .tsx\n\n    var inputFileName = transpileOptions.fileName || (options.jsx ? \"module.tsx\" : \"module.ts\");\n    var sourceFile = ts.createSourceFile(inputFileName, input, options.target);\n\n    if (transpileOptions.moduleName) {\n      sourceFile.moduleName = transpileOptions.moduleName;\n    }\n\n    sourceFile.renamedDependencies = transpileOptions.renamedDependencies;\n    var newLine = ts.getNewLineCharacter(options); // Output\n\n    var outputText;\n    var sourceMapText; // Create a compilerHost object to allow the compiler to read and write files\n\n    var compilerHost = {\n      getSourceFile: function getSourceFile(fileName, target) {\n        return fileName === ts.normalizeSlashes(inputFileName) ? sourceFile : undefined;\n      },\n      writeFile: function writeFile(name, text, writeByteOrderMark) {\n        if (ts.fileExtensionIs(name, \".map\")) {\n          ts.Debug.assert(sourceMapText === undefined, \"Unexpected multiple source map outputs for the file '\" + name + \"'\");\n          sourceMapText = text;\n        } else {\n          ts.Debug.assert(outputText === undefined, \"Unexpected multiple outputs for the file: '\" + name + \"'\");\n          outputText = text;\n        }\n      },\n      getDefaultLibFileName: function getDefaultLibFileName() {\n        return \"lib.d.ts\";\n      },\n      useCaseSensitiveFileNames: function useCaseSensitiveFileNames() {\n        return false;\n      },\n      getCanonicalFileName: function getCanonicalFileName(fileName) {\n        return fileName;\n      },\n      getCurrentDirectory: function getCurrentDirectory() {\n        return \"\";\n      },\n      getNewLine: function getNewLine() {\n        return newLine;\n      },\n      fileExists: function fileExists(fileName) {\n        return fileName === inputFileName;\n      },\n      readFile: function readFile(fileName) {\n        return \"\";\n      },\n      directoryExists: function directoryExists(_directoryExists) {\n        return true;\n      }\n    };\n    var program = ts.createProgram([inputFileName], options, compilerHost);\n    var diagnostics;\n\n    if (transpileOptions.reportDiagnostics) {\n      diagnostics = [];\n      ts.addRange(\n      /*to*/\n      diagnostics,\n      /*from*/\n      program.getSyntacticDiagnostics(sourceFile));\n      ts.addRange(\n      /*to*/\n      diagnostics,\n      /*from*/\n      program.getOptionsDiagnostics());\n    } // Emit\n\n\n    program.emit();\n    ts.Debug.assert(outputText !== undefined, \"Output generation failed\");\n    return {\n      outputText: outputText,\n      diagnostics: diagnostics,\n      sourceMapText: sourceMapText\n    };\n  }\n\n  ts.transpileModule = transpileModule;\n  /*\n   * This is a shortcut function for transpileModule - it accepts transpileOptions as parameters and returns only outputText part of the result.\n   */\n\n  function transpile(input, compilerOptions, fileName, diagnostics, moduleName) {\n    var output = transpileModule(input, {\n      compilerOptions: compilerOptions,\n      fileName: fileName,\n      reportDiagnostics: !!diagnostics,\n      moduleName: moduleName\n    }); // addRange correctly handles cases when wither 'from' or 'to' argument is missing\n\n    ts.addRange(diagnostics, output.diagnostics);\n    return output.outputText;\n  }\n\n  ts.transpile = transpile;\n\n  function createLanguageServiceSourceFile(fileName, scriptSnapshot, scriptTarget, version, setNodeParents, scriptKind) {\n    var text = scriptSnapshot.getText(0, scriptSnapshot.getLength());\n    var sourceFile = ts.createSourceFile(fileName, text, scriptTarget, setNodeParents, scriptKind);\n    setSourceFileFields(sourceFile, scriptSnapshot, version);\n    return sourceFile;\n  }\n\n  ts.createLanguageServiceSourceFile = createLanguageServiceSourceFile;\n  ts.disableIncrementalParsing = false;\n\n  function updateLanguageServiceSourceFile(sourceFile, scriptSnapshot, version, textChangeRange, aggressiveChecks) {\n    // If we were given a text change range, and our version or open-ness changed, then\n    // incrementally parse this file.\n    if (textChangeRange) {\n      if (version !== sourceFile.version) {\n        // Once incremental parsing is ready, then just call into this function.\n        if (!ts.disableIncrementalParsing) {\n          var newText = void 0; // grab the fragment from the beginning of the original text to the beginning of the span\n\n          var prefix = textChangeRange.span.start !== 0 ? sourceFile.text.substr(0, textChangeRange.span.start) : \"\"; // grab the fragment from the end of the span till the end of the original text\n\n          var suffix = ts.textSpanEnd(textChangeRange.span) !== sourceFile.text.length ? sourceFile.text.substr(ts.textSpanEnd(textChangeRange.span)) : \"\";\n\n          if (textChangeRange.newLength === 0) {\n            // edit was a deletion - just combine prefix and suffix\n            newText = prefix && suffix ? prefix + suffix : prefix || suffix;\n          } else {\n            // it was actual edit, fetch the fragment of new text that correspond to new span\n            var changedText = scriptSnapshot.getText(textChangeRange.span.start, textChangeRange.span.start + textChangeRange.newLength); // combine prefix, changed text and suffix\n\n            newText = prefix && suffix ? prefix + changedText + suffix : prefix ? prefix + changedText : changedText + suffix;\n          }\n\n          var newSourceFile = ts.updateSourceFile(sourceFile, newText, textChangeRange, aggressiveChecks);\n          setSourceFileFields(newSourceFile, scriptSnapshot, version); // after incremental parsing nameTable might not be up-to-date\n          // drop it so it can be lazily recreated later\n\n          newSourceFile.nameTable = undefined; // dispose all resources held by old script snapshot\n\n          if (sourceFile !== newSourceFile && sourceFile.scriptSnapshot) {\n            if (sourceFile.scriptSnapshot.dispose) {\n              sourceFile.scriptSnapshot.dispose();\n            }\n\n            sourceFile.scriptSnapshot = undefined;\n          }\n\n          return newSourceFile;\n        }\n      }\n    } // Otherwise, just create a new source file.\n\n\n    return createLanguageServiceSourceFile(sourceFile.fileName, scriptSnapshot, sourceFile.languageVersion, version,\n    /*setNodeParents*/\n    true, sourceFile.scriptKind);\n  }\n\n  ts.updateLanguageServiceSourceFile = updateLanguageServiceSourceFile;\n\n  function createDocumentRegistry(useCaseSensitiveFileNames, currentDirectory) {\n    if (currentDirectory === void 0) {\n      currentDirectory = \"\";\n    } // Maps from compiler setting target (ES3, ES5, etc.) to all the cached documents we have\n    // for those settings.\n\n\n    var buckets = {};\n    var getCanonicalFileName = ts.createGetCanonicalFileName(!!useCaseSensitiveFileNames);\n\n    function getKeyFromCompilationSettings(settings) {\n      return \"_\" + settings.target + \"|\" + settings.module + \"|\" + settings.noResolve + \"|\" + settings.jsx + +\"|\" + settings.allowJs;\n    }\n\n    function getBucketForCompilationSettings(settings, createIfMissing) {\n      var key = getKeyFromCompilationSettings(settings);\n      var bucket = ts.lookUp(buckets, key);\n\n      if (!bucket && createIfMissing) {\n        buckets[key] = bucket = ts.createFileMap();\n      }\n\n      return bucket;\n    }\n\n    function reportStats() {\n      var bucketInfoArray = Object.keys(buckets).filter(function (name) {\n        return name && name.charAt(0) === \"_\";\n      }).map(function (name) {\n        var entries = ts.lookUp(buckets, name);\n        var sourceFiles = [];\n        entries.forEachValue(function (key, entry) {\n          sourceFiles.push({\n            name: key,\n            refCount: entry.languageServiceRefCount,\n            references: entry.owners.slice(0)\n          });\n        });\n        sourceFiles.sort(function (x, y) {\n          return y.refCount - x.refCount;\n        });\n        return {\n          bucket: name,\n          sourceFiles: sourceFiles\n        };\n      });\n      return JSON.stringify(bucketInfoArray, undefined, 2);\n    }\n\n    function acquireDocument(fileName, compilationSettings, scriptSnapshot, version, scriptKind) {\n      return acquireOrUpdateDocument(fileName, compilationSettings, scriptSnapshot, version,\n      /*acquiring*/\n      true, scriptKind);\n    }\n\n    function updateDocument(fileName, compilationSettings, scriptSnapshot, version, scriptKind) {\n      return acquireOrUpdateDocument(fileName, compilationSettings, scriptSnapshot, version,\n      /*acquiring*/\n      false, scriptKind);\n    }\n\n    function acquireOrUpdateDocument(fileName, compilationSettings, scriptSnapshot, version, acquiring, scriptKind) {\n      var bucket = getBucketForCompilationSettings(compilationSettings,\n      /*createIfMissing*/\n      true);\n      var path = ts.toPath(fileName, currentDirectory, getCanonicalFileName);\n      var entry = bucket.get(path);\n\n      if (!entry) {\n        ts.Debug.assert(acquiring, \"How could we be trying to update a document that the registry doesn't have?\"); // Have never seen this file with these settings.  Create a new source file for it.\n\n        var sourceFile = createLanguageServiceSourceFile(fileName, scriptSnapshot, compilationSettings.target, version,\n        /*setNodeParents*/\n        false, scriptKind);\n        entry = {\n          sourceFile: sourceFile,\n          languageServiceRefCount: 0,\n          owners: []\n        };\n        bucket.set(path, entry);\n      } else {\n        // We have an entry for this file.  However, it may be for a different version of\n        // the script snapshot.  If so, update it appropriately.  Otherwise, we can just\n        // return it as is.\n        if (entry.sourceFile.version !== version) {\n          entry.sourceFile = updateLanguageServiceSourceFile(entry.sourceFile, scriptSnapshot, version, scriptSnapshot.getChangeRange(entry.sourceFile.scriptSnapshot));\n        }\n      } // If we're acquiring, then this is the first time this LS is asking for this document.\n      // Increase our ref count so we know there's another LS using the document.  If we're\n      // not acquiring, then that means the LS is 'updating' the file instead, and that means\n      // it has already acquired the document previously.  As such, we do not need to increase\n      // the ref count.\n\n\n      if (acquiring) {\n        entry.languageServiceRefCount++;\n      }\n\n      return entry.sourceFile;\n    }\n\n    function releaseDocument(fileName, compilationSettings) {\n      var bucket = getBucketForCompilationSettings(compilationSettings,\n      /*createIfMissing*/\n      false);\n      ts.Debug.assert(bucket !== undefined);\n      var path = ts.toPath(fileName, currentDirectory, getCanonicalFileName);\n      var entry = bucket.get(path);\n      entry.languageServiceRefCount--;\n      ts.Debug.assert(entry.languageServiceRefCount >= 0);\n\n      if (entry.languageServiceRefCount === 0) {\n        bucket.remove(path);\n      }\n    }\n\n    return {\n      acquireDocument: acquireDocument,\n      updateDocument: updateDocument,\n      releaseDocument: releaseDocument,\n      reportStats: reportStats\n    };\n  }\n\n  ts.createDocumentRegistry = createDocumentRegistry;\n\n  function preProcessFile(sourceText, readImportFiles, detectJavaScriptImports) {\n    if (readImportFiles === void 0) {\n      readImportFiles = true;\n    }\n\n    if (detectJavaScriptImports === void 0) {\n      detectJavaScriptImports = false;\n    }\n\n    var referencedFiles = [];\n    var importedFiles = [];\n    var ambientExternalModules;\n    var isNoDefaultLib = false;\n\n    function processTripleSlashDirectives() {\n      var commentRanges = ts.getLeadingCommentRanges(sourceText, 0);\n      ts.forEach(commentRanges, function (commentRange) {\n        var comment = sourceText.substring(commentRange.pos, commentRange.end);\n        var referencePathMatchResult = ts.getFileReferenceFromReferencePath(comment, commentRange);\n\n        if (referencePathMatchResult) {\n          isNoDefaultLib = referencePathMatchResult.isNoDefaultLib;\n          var fileReference = referencePathMatchResult.fileReference;\n\n          if (fileReference) {\n            referencedFiles.push(fileReference);\n          }\n        }\n      });\n    }\n\n    function recordAmbientExternalModule() {\n      if (!ambientExternalModules) {\n        ambientExternalModules = [];\n      }\n\n      ambientExternalModules.push(scanner.getTokenValue());\n    }\n\n    function recordModuleName() {\n      var importPath = scanner.getTokenValue();\n      var pos = scanner.getTokenPos();\n      importedFiles.push({\n        fileName: importPath,\n        pos: pos,\n        end: pos + importPath.length\n      });\n    }\n    /**\n     * Returns true if at least one token was consumed from the stream\n     */\n\n\n    function tryConsumeDeclare() {\n      var token = scanner.getToken();\n\n      if (token === 122\n      /* DeclareKeyword */\n      ) {\n          // declare module \"mod\"\n          token = scanner.scan();\n\n          if (token === 125\n          /* ModuleKeyword */\n          ) {\n              token = scanner.scan();\n\n              if (token === 9\n              /* StringLiteral */\n              ) {\n                  recordAmbientExternalModule();\n                }\n            }\n\n          return true;\n        }\n\n      return false;\n    }\n    /**\n     * Returns true if at least one token was consumed from the stream\n     */\n\n\n    function tryConsumeImport() {\n      var token = scanner.getToken();\n\n      if (token === 89\n      /* ImportKeyword */\n      ) {\n          token = scanner.scan();\n\n          if (token === 9\n          /* StringLiteral */\n          ) {\n              // import \"mod\";\n              recordModuleName();\n              return true;\n            } else {\n            if (token === 69\n            /* Identifier */\n            || ts.isKeyword(token)) {\n              token = scanner.scan();\n\n              if (token === 133\n              /* FromKeyword */\n              ) {\n                  token = scanner.scan();\n\n                  if (token === 9\n                  /* StringLiteral */\n                  ) {\n                      // import d from \"mod\";\n                      recordModuleName();\n                      return true;\n                    }\n                } else if (token === 56\n              /* EqualsToken */\n              ) {\n                  if (tryConsumeRequireCall(\n                  /*skipCurrentToken*/\n                  true)) {\n                    return true;\n                  }\n                } else if (token === 24\n              /* CommaToken */\n              ) {\n                  // consume comma and keep going\n                  token = scanner.scan();\n                } else {\n                // unknown syntax\n                return true;\n              }\n            }\n\n            if (token === 15\n            /* OpenBraceToken */\n            ) {\n                token = scanner.scan(); // consume \"{ a as B, c, d as D}\" clauses\n                // make sure that it stops on EOF\n\n                while (token !== 16\n                /* CloseBraceToken */\n                && token !== 1\n                /* EndOfFileToken */\n                ) {\n                  token = scanner.scan();\n                }\n\n                if (token === 16\n                /* CloseBraceToken */\n                ) {\n                    token = scanner.scan();\n\n                    if (token === 133\n                    /* FromKeyword */\n                    ) {\n                        token = scanner.scan();\n\n                        if (token === 9\n                        /* StringLiteral */\n                        ) {\n                            // import {a as A} from \"mod\";\n                            // import d, {a, b as B} from \"mod\"\n                            recordModuleName();\n                          }\n                      }\n                  }\n              } else if (token === 37\n            /* AsteriskToken */\n            ) {\n                token = scanner.scan();\n\n                if (token === 116\n                /* AsKeyword */\n                ) {\n                    token = scanner.scan();\n\n                    if (token === 69\n                    /* Identifier */\n                    || ts.isKeyword(token)) {\n                      token = scanner.scan();\n\n                      if (token === 133\n                      /* FromKeyword */\n                      ) {\n                          token = scanner.scan();\n\n                          if (token === 9\n                          /* StringLiteral */\n                          ) {\n                              // import * as NS from \"mod\"\n                              // import d, * as NS from \"mod\"\n                              recordModuleName();\n                            }\n                        }\n                    }\n                  }\n              }\n          }\n\n          return true;\n        }\n\n      return false;\n    }\n\n    function tryConsumeExport() {\n      var token = scanner.getToken();\n\n      if (token === 82\n      /* ExportKeyword */\n      ) {\n          token = scanner.scan();\n\n          if (token === 15\n          /* OpenBraceToken */\n          ) {\n              token = scanner.scan(); // consume \"{ a as B, c, d as D}\" clauses\n              // make sure it stops on EOF\n\n              while (token !== 16\n              /* CloseBraceToken */\n              && token !== 1\n              /* EndOfFileToken */\n              ) {\n                token = scanner.scan();\n              }\n\n              if (token === 16\n              /* CloseBraceToken */\n              ) {\n                  token = scanner.scan();\n\n                  if (token === 133\n                  /* FromKeyword */\n                  ) {\n                      token = scanner.scan();\n\n                      if (token === 9\n                      /* StringLiteral */\n                      ) {\n                          // export {a as A} from \"mod\";\n                          // export {a, b as B} from \"mod\"\n                          recordModuleName();\n                        }\n                    }\n                }\n            } else if (token === 37\n          /* AsteriskToken */\n          ) {\n              token = scanner.scan();\n\n              if (token === 133\n              /* FromKeyword */\n              ) {\n                  token = scanner.scan();\n\n                  if (token === 9\n                  /* StringLiteral */\n                  ) {\n                      // export * from \"mod\"\n                      recordModuleName();\n                    }\n                }\n            } else if (token === 89\n          /* ImportKeyword */\n          ) {\n              token = scanner.scan();\n\n              if (token === 69\n              /* Identifier */\n              || ts.isKeyword(token)) {\n                token = scanner.scan();\n\n                if (token === 56\n                /* EqualsToken */\n                ) {\n                    if (tryConsumeRequireCall(\n                    /*skipCurrentToken*/\n                    true)) {\n                      return true;\n                    }\n                  }\n              }\n            }\n\n          return true;\n        }\n\n      return false;\n    }\n\n    function tryConsumeRequireCall(skipCurrentToken) {\n      var token = skipCurrentToken ? scanner.scan() : scanner.getToken();\n\n      if (token === 127\n      /* RequireKeyword */\n      ) {\n          token = scanner.scan();\n\n          if (token === 17\n          /* OpenParenToken */\n          ) {\n              token = scanner.scan();\n\n              if (token === 9\n              /* StringLiteral */\n              ) {\n                  //  require(\"mod\");\n                  recordModuleName();\n                }\n            }\n\n          return true;\n        }\n\n      return false;\n    }\n\n    function tryConsumeDefine() {\n      var token = scanner.getToken();\n\n      if (token === 69\n      /* Identifier */\n      && scanner.getTokenValue() === \"define\") {\n        token = scanner.scan();\n\n        if (token !== 17\n        /* OpenParenToken */\n        ) {\n            return true;\n          }\n\n        token = scanner.scan();\n\n        if (token === 9\n        /* StringLiteral */\n        ) {\n            // looks like define (\"modname\", ... - skip string literal and comma\n            token = scanner.scan();\n\n            if (token === 24\n            /* CommaToken */\n            ) {\n                token = scanner.scan();\n              } else {\n              // unexpected token\n              return true;\n            }\n          } // should be start of dependency list\n\n\n        if (token !== 19\n        /* OpenBracketToken */\n        ) {\n            return true;\n          } // skip open bracket\n\n\n        token = scanner.scan();\n        var i = 0; // scan until ']' or EOF\n\n        while (token !== 20\n        /* CloseBracketToken */\n        && token !== 1\n        /* EndOfFileToken */\n        ) {\n          // record string literals as module names\n          if (token === 9\n          /* StringLiteral */\n          ) {\n              recordModuleName();\n              i++;\n            }\n\n          token = scanner.scan();\n        }\n\n        return true;\n      }\n\n      return false;\n    }\n\n    function processImports() {\n      scanner.setText(sourceText);\n      scanner.scan(); // Look for:\n      //    import \"mod\";\n      //    import d from \"mod\"\n      //    import {a as A } from \"mod\";\n      //    import * as NS  from \"mod\"\n      //    import d, {a, b as B} from \"mod\"\n      //    import i = require(\"mod\");\n      //\n      //    export * from \"mod\"\n      //    export {a as b} from \"mod\"\n      //    export import i = require(\"mod\")\n      //    (for JavaScript files) require(\"mod\")\n\n      while (true) {\n        if (scanner.getToken() === 1\n        /* EndOfFileToken */\n        ) {\n            break;\n          } // check if at least one of alternative have moved scanner forward\n\n\n        if (tryConsumeDeclare() || tryConsumeImport() || tryConsumeExport() || detectJavaScriptImports && (tryConsumeRequireCall(\n        /*skipCurrentToken*/\n        false) || tryConsumeDefine())) {\n          continue;\n        } else {\n          scanner.scan();\n        }\n      }\n\n      scanner.setText(undefined);\n    }\n\n    if (readImportFiles) {\n      processImports();\n    }\n\n    processTripleSlashDirectives();\n    return {\n      referencedFiles: referencedFiles,\n      importedFiles: importedFiles,\n      isLibFile: isNoDefaultLib,\n      ambientExternalModules: ambientExternalModules\n    };\n  }\n\n  ts.preProcessFile = preProcessFile; /// Helpers\n\n  function getTargetLabel(referenceNode, labelName) {\n    while (referenceNode) {\n      if (referenceNode.kind === 210\n      /* LabeledStatement */\n      && referenceNode.label.text === labelName) {\n        return referenceNode.label;\n      }\n\n      referenceNode = referenceNode.parent;\n    }\n\n    return undefined;\n  }\n\n  function isJumpStatementTarget(node) {\n    return node.kind === 69\n    /* Identifier */\n    && (node.parent.kind === 206\n    /* BreakStatement */\n    || node.parent.kind === 205\n    /* ContinueStatement */\n    ) && node.parent.label === node;\n  }\n\n  function isLabelOfLabeledStatement(node) {\n    return node.kind === 69\n    /* Identifier */\n    && node.parent.kind === 210\n    /* LabeledStatement */\n    && node.parent.label === node;\n  }\n  /**\n   * Whether or not a 'node' is preceded by a label of the given string.\n   * Note: 'node' cannot be a SourceFile.\n   */\n\n\n  function isLabeledBy(node, labelName) {\n    for (var owner = node.parent; owner.kind === 210\n    /* LabeledStatement */\n    ; owner = owner.parent) {\n      if (owner.label.text === labelName) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  function isLabelName(node) {\n    return isLabelOfLabeledStatement(node) || isJumpStatementTarget(node);\n  }\n\n  function isRightSideOfQualifiedName(node) {\n    return node.parent.kind === 136\n    /* QualifiedName */\n    && node.parent.right === node;\n  }\n\n  function isRightSideOfPropertyAccess(node) {\n    return node && node.parent && node.parent.kind === 169\n    /* PropertyAccessExpression */\n    && node.parent.name === node;\n  }\n\n  function isCallExpressionTarget(node) {\n    if (isRightSideOfPropertyAccess(node)) {\n      node = node.parent;\n    }\n\n    return node && node.parent && node.parent.kind === 171\n    /* CallExpression */\n    && node.parent.expression === node;\n  }\n\n  function isNewExpressionTarget(node) {\n    if (isRightSideOfPropertyAccess(node)) {\n      node = node.parent;\n    }\n\n    return node && node.parent && node.parent.kind === 172\n    /* NewExpression */\n    && node.parent.expression === node;\n  }\n\n  function isNameOfModuleDeclaration(node) {\n    return node.parent.kind === 221\n    /* ModuleDeclaration */\n    && node.parent.name === node;\n  }\n\n  function isNameOfFunctionDeclaration(node) {\n    return node.kind === 69\n    /* Identifier */\n    && ts.isFunctionLike(node.parent) && node.parent.name === node;\n  }\n  /** Returns true if node is a name of an object literal property, e.g. \"a\" in x = { \"a\": 1 } */\n\n\n  function isNameOfPropertyAssignment(node) {\n    return (node.kind === 69\n    /* Identifier */\n    || node.kind === 9\n    /* StringLiteral */\n    || node.kind === 8\n    /* NumericLiteral */\n    ) && (node.parent.kind === 248\n    /* PropertyAssignment */\n    || node.parent.kind === 249\n    /* ShorthandPropertyAssignment */\n    ) && node.parent.name === node;\n  }\n\n  function isLiteralNameOfPropertyDeclarationOrIndexAccess(node) {\n    if (node.kind === 9\n    /* StringLiteral */\n    || node.kind === 8\n    /* NumericLiteral */\n    ) {\n        switch (node.parent.kind) {\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n          case 248\n          /* PropertyAssignment */\n          :\n          case 250\n          /* EnumMember */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 221\n          /* ModuleDeclaration */\n          :\n            return node.parent.name === node;\n\n          case 170\n          /* ElementAccessExpression */\n          :\n            return node.parent.argumentExpression === node;\n        }\n      }\n\n    return false;\n  }\n\n  function isNameOfExternalModuleImportOrDeclaration(node) {\n    if (node.kind === 9\n    /* StringLiteral */\n    ) {\n        return isNameOfModuleDeclaration(node) || ts.isExternalModuleImportEqualsDeclaration(node.parent.parent) && ts.getExternalModuleImportEqualsDeclarationExpression(node.parent.parent) === node;\n      }\n\n    return false;\n  }\n  /** Returns true if the position is within a comment */\n\n\n  function isInsideComment(sourceFile, token, position) {\n    // The position has to be: 1. in the leading trivia (before token.getStart()), and 2. within a comment\n    return position <= token.getStart(sourceFile) && (isInsideCommentRange(ts.getTrailingCommentRanges(sourceFile.text, token.getFullStart())) || isInsideCommentRange(ts.getLeadingCommentRanges(sourceFile.text, token.getFullStart())));\n\n    function isInsideCommentRange(comments) {\n      return ts.forEach(comments, function (comment) {\n        // either we are 1. completely inside the comment, or 2. at the end of the comment\n        if (comment.pos < position && position < comment.end) {\n          return true;\n        } else if (position === comment.end) {\n          var text = sourceFile.text;\n          var width = comment.end - comment.pos; // is single line comment or just /*\n\n          if (width <= 2 || text.charCodeAt(comment.pos + 1) === 47\n          /* slash */\n          ) {\n              return true;\n            } else {\n            // is unterminated multi-line comment\n            return !(text.charCodeAt(comment.end - 1) === 47\n            /* slash */\n            && text.charCodeAt(comment.end - 2) === 42\n            /* asterisk */\n            );\n          }\n        }\n\n        return false;\n      });\n    }\n  }\n\n  var SemanticMeaning;\n\n  (function (SemanticMeaning) {\n    SemanticMeaning[SemanticMeaning[\"None\"] = 0] = \"None\";\n    SemanticMeaning[SemanticMeaning[\"Value\"] = 1] = \"Value\";\n    SemanticMeaning[SemanticMeaning[\"Type\"] = 2] = \"Type\";\n    SemanticMeaning[SemanticMeaning[\"Namespace\"] = 4] = \"Namespace\";\n    SemanticMeaning[SemanticMeaning[\"All\"] = 7] = \"All\";\n  })(SemanticMeaning || (SemanticMeaning = {}));\n\n  var BreakContinueSearchType;\n\n  (function (BreakContinueSearchType) {\n    BreakContinueSearchType[BreakContinueSearchType[\"None\"] = 0] = \"None\";\n    BreakContinueSearchType[BreakContinueSearchType[\"Unlabeled\"] = 1] = \"Unlabeled\";\n    BreakContinueSearchType[BreakContinueSearchType[\"Labeled\"] = 2] = \"Labeled\";\n    BreakContinueSearchType[BreakContinueSearchType[\"All\"] = 3] = \"All\";\n  })(BreakContinueSearchType || (BreakContinueSearchType = {})); // A cache of completion entries for keywords, these do not change between sessions\n\n\n  var keywordCompletions = [];\n\n  for (var i = 70\n  /* FirstKeyword */\n  ; i <= 135\n  /* LastKeyword */\n  ; i++) {\n    keywordCompletions.push({\n      name: ts.tokenToString(i),\n      kind: ScriptElementKind.keyword,\n      kindModifiers: ScriptElementKindModifier.none,\n      sortText: \"0\"\n    });\n  }\n  /* @internal */\n\n\n  function getContainerNode(node) {\n    while (true) {\n      node = node.parent;\n\n      if (!node) {\n        return undefined;\n      }\n\n      switch (node.kind) {\n        case 251\n        /* SourceFile */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 220\n        /* EnumDeclaration */\n        :\n        case 221\n        /* ModuleDeclaration */\n        :\n          return node;\n      }\n    }\n  }\n\n  ts.getContainerNode = getContainerNode;\n  /* @internal */\n\n  function getNodeKind(node) {\n    switch (node.kind) {\n      case 221\n      /* ModuleDeclaration */\n      :\n        return ScriptElementKind.moduleElement;\n\n      case 217\n      /* ClassDeclaration */\n      :\n        return ScriptElementKind.classElement;\n\n      case 218\n      /* InterfaceDeclaration */\n      :\n        return ScriptElementKind.interfaceElement;\n\n      case 219\n      /* TypeAliasDeclaration */\n      :\n        return ScriptElementKind.typeElement;\n\n      case 220\n      /* EnumDeclaration */\n      :\n        return ScriptElementKind.enumElement;\n\n      case 214\n      /* VariableDeclaration */\n      :\n        return ts.isConst(node) ? ScriptElementKind.constElement : ts.isLet(node) ? ScriptElementKind.letElement : ScriptElementKind.variableElement;\n\n      case 216\n      /* FunctionDeclaration */\n      :\n        return ScriptElementKind.functionElement;\n\n      case 146\n      /* GetAccessor */\n      :\n        return ScriptElementKind.memberGetAccessorElement;\n\n      case 147\n      /* SetAccessor */\n      :\n        return ScriptElementKind.memberSetAccessorElement;\n\n      case 144\n      /* MethodDeclaration */\n      :\n      case 143\n      /* MethodSignature */\n      :\n        return ScriptElementKind.memberFunctionElement;\n\n      case 142\n      /* PropertyDeclaration */\n      :\n      case 141\n      /* PropertySignature */\n      :\n        return ScriptElementKind.memberVariableElement;\n\n      case 150\n      /* IndexSignature */\n      :\n        return ScriptElementKind.indexSignatureElement;\n\n      case 149\n      /* ConstructSignature */\n      :\n        return ScriptElementKind.constructSignatureElement;\n\n      case 148\n      /* CallSignature */\n      :\n        return ScriptElementKind.callSignatureElement;\n\n      case 145\n      /* Constructor */\n      :\n        return ScriptElementKind.constructorImplementationElement;\n\n      case 138\n      /* TypeParameter */\n      :\n        return ScriptElementKind.typeParameterElement;\n\n      case 250\n      /* EnumMember */\n      :\n        return ScriptElementKind.variableElement;\n\n      case 139\n      /* Parameter */\n      :\n        return node.flags & 56\n        /* AccessibilityModifier */\n        ? ScriptElementKind.memberVariableElement : ScriptElementKind.parameterElement;\n\n      case 224\n      /* ImportEqualsDeclaration */\n      :\n      case 229\n      /* ImportSpecifier */\n      :\n      case 226\n      /* ImportClause */\n      :\n      case 233\n      /* ExportSpecifier */\n      :\n      case 227\n      /* NamespaceImport */\n      :\n        return ScriptElementKind.alias;\n    }\n\n    return ScriptElementKind.unknown;\n  }\n\n  ts.getNodeKind = getNodeKind;\n\n  var CancellationTokenObject = function () {\n    function CancellationTokenObject(cancellationToken) {\n      this.cancellationToken = cancellationToken;\n    }\n\n    CancellationTokenObject.prototype.isCancellationRequested = function () {\n      return this.cancellationToken && this.cancellationToken.isCancellationRequested();\n    };\n\n    CancellationTokenObject.prototype.throwIfCancellationRequested = function () {\n      if (this.isCancellationRequested()) {\n        throw new ts.OperationCanceledException();\n      }\n    };\n\n    return CancellationTokenObject;\n  }();\n\n  function createLanguageService(host, documentRegistry) {\n    if (documentRegistry === void 0) {\n      documentRegistry = createDocumentRegistry(host.useCaseSensitiveFileNames && host.useCaseSensitiveFileNames(), host.getCurrentDirectory());\n    }\n\n    var syntaxTreeCache = new SyntaxTreeCache(host);\n    var ruleProvider;\n    var program;\n    var lastProjectVersion;\n    var useCaseSensitivefileNames = false;\n    var cancellationToken = new CancellationTokenObject(host.getCancellationToken && host.getCancellationToken());\n    var currentDirectory = host.getCurrentDirectory(); // Check if the localized messages json is set, otherwise query the host for it\n\n    if (!ts.localizedDiagnosticMessages && host.getLocalizedDiagnosticMessages) {\n      ts.localizedDiagnosticMessages = host.getLocalizedDiagnosticMessages();\n    }\n\n    function log(message) {\n      if (host.log) {\n        host.log(message);\n      }\n    }\n\n    var getCanonicalFileName = ts.createGetCanonicalFileName(useCaseSensitivefileNames);\n\n    function getValidSourceFile(fileName) {\n      var sourceFile = program.getSourceFile(fileName);\n\n      if (!sourceFile) {\n        throw new Error(\"Could not find file: '\" + fileName + \"'.\");\n      }\n\n      return sourceFile;\n    }\n\n    function getRuleProvider(options) {\n      // Ensure rules are initialized and up to date wrt to formatting options\n      if (!ruleProvider) {\n        ruleProvider = new ts.formatting.RulesProvider();\n      }\n\n      ruleProvider.ensureUpToDate(options);\n      return ruleProvider;\n    }\n\n    function synchronizeHostData() {\n      // perform fast check if host supports it\n      if (host.getProjectVersion) {\n        var hostProjectVersion = host.getProjectVersion();\n\n        if (hostProjectVersion) {\n          if (lastProjectVersion === hostProjectVersion) {\n            return;\n          }\n\n          lastProjectVersion = hostProjectVersion;\n        }\n      } // Get a fresh cache of the host information\n\n\n      var hostCache = new HostCache(host, getCanonicalFileName); // If the program is already up-to-date, we can reuse it\n\n      if (programUpToDate()) {\n        return;\n      } // IMPORTANT - It is critical from this moment onward that we do not check\n      // cancellation tokens.  We are about to mutate source files from a previous program\n      // instance.  If we cancel midway through, we may end up in an inconsistent state where\n      // the program points to old source files that have been invalidated because of\n      // incremental parsing.\n\n\n      var oldSettings = program && program.getCompilerOptions();\n      var newSettings = hostCache.compilationSettings();\n      var changesInCompilationSettingsAffectSyntax = oldSettings && (oldSettings.target !== newSettings.target || oldSettings.module !== newSettings.module || oldSettings.noResolve !== newSettings.noResolve || oldSettings.jsx !== newSettings.jsx || oldSettings.allowJs !== newSettings.allowJs || oldSettings.disableSizeLimit !== oldSettings.disableSizeLimit); // Now create a new compiler\n\n      var compilerHost = {\n        getSourceFile: getOrCreateSourceFile,\n        getCancellationToken: function getCancellationToken() {\n          return cancellationToken;\n        },\n        getCanonicalFileName: getCanonicalFileName,\n        useCaseSensitiveFileNames: function useCaseSensitiveFileNames() {\n          return useCaseSensitivefileNames;\n        },\n        getNewLine: function getNewLine() {\n          return ts.getNewLineOrDefaultFromHost(host);\n        },\n        getDefaultLibFileName: function getDefaultLibFileName(options) {\n          return host.getDefaultLibFileName(options);\n        },\n        writeFile: function writeFile(fileName, data, writeByteOrderMark) {},\n        getCurrentDirectory: function getCurrentDirectory() {\n          return currentDirectory;\n        },\n        fileExists: function fileExists(fileName) {\n          // stub missing host functionality\n          ts.Debug.assert(!host.resolveModuleNames);\n          return hostCache.getOrCreateEntry(fileName) !== undefined;\n        },\n        readFile: function readFile(fileName) {\n          // stub missing host functionality\n          var entry = hostCache.getOrCreateEntry(fileName);\n          return entry && entry.scriptSnapshot.getText(0, entry.scriptSnapshot.getLength());\n        },\n        directoryExists: function directoryExists(directoryName) {\n          ts.Debug.assert(!host.resolveModuleNames);\n          return ts.directoryProbablyExists(directoryName, host);\n        }\n      };\n\n      if (host.resolveModuleNames) {\n        compilerHost.resolveModuleNames = function (moduleNames, containingFile) {\n          return host.resolveModuleNames(moduleNames, containingFile);\n        };\n      }\n\n      var newProgram = ts.createProgram(hostCache.getRootFileNames(), newSettings, compilerHost, program); // Release any files we have acquired in the old program but are\n      // not part of the new program.\n\n      if (program) {\n        var oldSourceFiles = program.getSourceFiles();\n\n        for (var _i = 0, oldSourceFiles_1 = oldSourceFiles; _i < oldSourceFiles_1.length; _i++) {\n          var oldSourceFile = oldSourceFiles_1[_i];\n\n          if (!newProgram.getSourceFile(oldSourceFile.fileName) || changesInCompilationSettingsAffectSyntax) {\n            documentRegistry.releaseDocument(oldSourceFile.fileName, oldSettings);\n          }\n        }\n      } // hostCache is captured in the closure for 'getOrCreateSourceFile' but it should not be used past this point.\n      // It needs to be cleared to allow all collected snapshots to be released\n\n\n      hostCache = undefined;\n      program = newProgram; // Make sure all the nodes in the program are both bound, and have their parent\n      // pointers set property.\n\n      program.getTypeChecker();\n      return;\n\n      function getOrCreateSourceFile(fileName) {\n        ts.Debug.assert(hostCache !== undefined); // The program is asking for this file, check first if the host can locate it.\n        // If the host can not locate the file, then it does not exist. return undefined\n        // to the program to allow reporting of errors for missing files.\n\n        var hostFileInformation = hostCache.getOrCreateEntry(fileName);\n\n        if (!hostFileInformation) {\n          return undefined;\n        } // Check if the language version has changed since we last created a program; if they are the same,\n        // it is safe to reuse the souceFiles; if not, then the shape of the AST can change, and the oldSourceFile\n        // can not be reused. we have to dump all syntax trees and create new ones.\n\n\n        if (!changesInCompilationSettingsAffectSyntax) {\n          // Check if the old program had this file already\n          var oldSourceFile = program && program.getSourceFile(fileName);\n\n          if (oldSourceFile) {\n            // We already had a source file for this file name.  Go to the registry to\n            // ensure that we get the right up to date version of it.  We need this to\n            // address the following 'race'.  Specifically, say we have the following:\n            //\n            //      LS1\n            //          \\\n            //           DocumentRegistry\n            //          /\n            //      LS2\n            //\n            // Each LS has a reference to file 'foo.ts' at version 1.  LS2 then updates\n            // it's version of 'foo.ts' to version 2.  This will cause LS2 and the\n            // DocumentRegistry to have version 2 of the document.  HOwever, LS1 will\n            // have version 1.  And *importantly* this source file will be *corrupt*.\n            // The act of creating version 2 of the file irrevocably damages the version\n            // 1 file.\n            //\n            // So, later when we call into LS1, we need to make sure that it doesn't use\n            // it's source file any more, and instead defers to DocumentRegistry to get\n            // either version 1, version 2 (or some other version) depending on what the\n            // host says should be used.\n            // We do not support the scenario where a host can modify a registered\n            // file's script kind, i.e. in one project some file is treated as \".ts\"\n            // and in another as \".js\"\n            ts.Debug.assert(hostFileInformation.scriptKind === oldSourceFile.scriptKind, \"Registered script kind (\" + oldSourceFile.scriptKind + \") should match new script kind (\" + hostFileInformation.scriptKind + \") for file: \" + fileName);\n            return documentRegistry.updateDocument(fileName, newSettings, hostFileInformation.scriptSnapshot, hostFileInformation.version, hostFileInformation.scriptKind);\n          }\n        } // Could not find this file in the old program, create a new SourceFile for it.\n\n\n        return documentRegistry.acquireDocument(fileName, newSettings, hostFileInformation.scriptSnapshot, hostFileInformation.version, hostFileInformation.scriptKind);\n      }\n\n      function sourceFileUpToDate(sourceFile) {\n        if (!sourceFile) {\n          return false;\n        }\n\n        var path = sourceFile.path || ts.toPath(sourceFile.fileName, currentDirectory, getCanonicalFileName);\n        return sourceFile.version === hostCache.getVersion(path);\n      }\n\n      function programUpToDate() {\n        // If we haven't create a program yet, then it is not up-to-date\n        if (!program) {\n          return false;\n        } // If number of files in the program do not match, it is not up-to-date\n\n\n        var rootFileNames = hostCache.getRootFileNames();\n\n        if (program.getSourceFiles().length !== rootFileNames.length) {\n          return false;\n        } // If any file is not up-to-date, then the whole program is not up-to-date\n\n\n        for (var _i = 0, rootFileNames_2 = rootFileNames; _i < rootFileNames_2.length; _i++) {\n          var fileName = rootFileNames_2[_i];\n\n          if (!sourceFileUpToDate(program.getSourceFile(fileName))) {\n            return false;\n          }\n        } // If the compilation settings do no match, then the program is not up-to-date\n\n\n        return ts.compareDataObjects(program.getCompilerOptions(), hostCache.compilationSettings());\n      }\n    }\n\n    function getProgram() {\n      synchronizeHostData();\n      return program;\n    }\n\n    function cleanupSemanticCache() {// TODO: Should we jettison the program (or it's type checker) here?\n    }\n\n    function dispose() {\n      if (program) {\n        ts.forEach(program.getSourceFiles(), function (f) {\n          return documentRegistry.releaseDocument(f.fileName, program.getCompilerOptions());\n        });\n      }\n    } /// Diagnostics\n\n\n    function getSyntacticDiagnostics(fileName) {\n      synchronizeHostData();\n      return program.getSyntacticDiagnostics(getValidSourceFile(fileName), cancellationToken);\n    }\n    /**\n     * getSemanticDiagnostiscs return array of Diagnostics. If '-d' is not enabled, only report semantic errors\n     * If '-d' enabled, report both semantic and emitter errors\n     */\n\n\n    function getSemanticDiagnostics(fileName) {\n      synchronizeHostData();\n      var targetSourceFile = getValidSourceFile(fileName); // Only perform the action per file regardless of '-out' flag as LanguageServiceHost is expected to call this function per file.\n      // Therefore only get diagnostics for given file.\n\n      var semanticDiagnostics = program.getSemanticDiagnostics(targetSourceFile, cancellationToken);\n\n      if (!program.getCompilerOptions().declaration) {\n        return semanticDiagnostics;\n      } // If '-d' is enabled, check for emitter error. One example of emitter error is export class implements non-export interface\n\n\n      var declarationDiagnostics = program.getDeclarationDiagnostics(targetSourceFile, cancellationToken);\n      return ts.concatenate(semanticDiagnostics, declarationDiagnostics);\n    }\n\n    function getCompilerOptionsDiagnostics() {\n      synchronizeHostData();\n      return program.getOptionsDiagnostics(cancellationToken).concat(program.getGlobalDiagnostics(cancellationToken));\n    }\n    /**\n     * Get the name to be display in completion from a given symbol.\n     *\n     * @return undefined if the name is of external module otherwise a name with striped of any quote\n     */\n\n\n    function getCompletionEntryDisplayNameForSymbol(symbol, target, performCharacterChecks, location) {\n      var displayName = ts.getDeclaredName(program.getTypeChecker(), symbol, location);\n\n      if (displayName) {\n        var firstCharCode = displayName.charCodeAt(0); // First check of the displayName is not external module; if it is an external module, it is not valid entry\n\n        if (symbol.flags & 1536\n        /* Namespace */\n        && (firstCharCode === 39\n        /* singleQuote */\n        || firstCharCode === 34\n        /* doubleQuote */\n        )) {\n          // If the symbol is external module, don't show it in the completion list\n          // (i.e declare module \"http\" { const x; } | // <= request completion here, \"http\" should not be there)\n          return undefined;\n        }\n      }\n\n      return getCompletionEntryDisplayName(displayName, target, performCharacterChecks);\n    }\n    /**\n     * Get a displayName from a given for completion list, performing any necessary quotes stripping\n     * and checking whether the name is valid identifier name.\n     */\n\n\n    function getCompletionEntryDisplayName(name, target, performCharacterChecks) {\n      if (!name) {\n        return undefined;\n      }\n\n      name = ts.stripQuotes(name);\n\n      if (!name) {\n        return undefined;\n      } // If the user entered name for the symbol was quoted, removing the quotes is not enough, as the name could be an\n      // invalid identifier name. We need to check if whatever was inside the quotes is actually a valid identifier name.\n      // e.g \"b a\" is valid quoted name but when we strip off the quotes, it is invalid.\n      // We, thus, need to check if whatever was inside the quotes is actually a valid identifier name.\n\n\n      if (performCharacterChecks) {\n        if (!ts.isIdentifier(name, target)) {\n          return undefined;\n        }\n      }\n\n      return name;\n    }\n\n    function getCompletionData(fileName, position) {\n      var typeChecker = program.getTypeChecker();\n      var sourceFile = getValidSourceFile(fileName);\n      var isJavaScriptFile = ts.isSourceFileJavaScript(sourceFile);\n      var isJsDocTagName = false;\n      var start = new Date().getTime();\n      var currentToken = ts.getTokenAtPosition(sourceFile, position);\n      log(\"getCompletionData: Get current token: \" + (new Date().getTime() - start));\n      start = new Date().getTime(); // Completion not allowed inside comments, bail out if this is the case\n\n      var insideComment = isInsideComment(sourceFile, currentToken, position);\n      log(\"getCompletionData: Is inside comment: \" + (new Date().getTime() - start));\n\n      if (insideComment) {\n        // The current position is next to the '@' sign, when no tag name being provided yet.\n        // Provide a full list of tag names\n        if (ts.hasDocComment(sourceFile, position) && sourceFile.text.charCodeAt(position - 1) === 64\n        /* at */\n        ) {\n            isJsDocTagName = true;\n          } // Completion should work inside certain JsDoc tags. For example:\n        //     /** @type {number | string} */\n        // Completion should work in the brackets\n\n\n        var insideJsDocTagExpression = false;\n        var tag = ts.getJsDocTagAtPosition(sourceFile, position);\n\n        if (tag) {\n          if (tag.tagName.pos <= position && position <= tag.tagName.end) {\n            isJsDocTagName = true;\n          }\n\n          switch (tag.kind) {\n            case 272\n            /* JSDocTypeTag */\n            :\n            case 270\n            /* JSDocParameterTag */\n            :\n            case 271\n            /* JSDocReturnTag */\n            :\n              var tagWithExpression = tag;\n\n              if (tagWithExpression.typeExpression) {\n                insideJsDocTagExpression = tagWithExpression.typeExpression.pos < position && position < tagWithExpression.typeExpression.end;\n              }\n\n              break;\n          }\n        }\n\n        if (isJsDocTagName) {\n          return {\n            symbols: undefined,\n            isMemberCompletion: false,\n            isNewIdentifierLocation: false,\n            location: undefined,\n            isRightOfDot: false,\n            isJsDocTagName: isJsDocTagName\n          };\n        }\n\n        if (!insideJsDocTagExpression) {\n          // Proceed if the current position is in jsDoc tag expression; otherwise it is a normal\n          // comment or the plain text part of a jsDoc comment, so no completion should be available\n          log(\"Returning an empty list because completion was inside a regular comment or plain text part of a JsDoc comment.\");\n          return undefined;\n        }\n      }\n\n      start = new Date().getTime();\n      var previousToken = ts.findPrecedingToken(position, sourceFile);\n      log(\"getCompletionData: Get previous token 1: \" + (new Date().getTime() - start)); // The decision to provide completion depends on the contextToken, which is determined through the previousToken.\n      // Note: 'previousToken' (and thus 'contextToken') can be undefined if we are the beginning of the file\n\n      var contextToken = previousToken; // Check if the caret is at the end of an identifier; this is a partial identifier that we want to complete: e.g. a.toS|\n      // Skip this partial identifier and adjust the contextToken to the token that precedes it.\n\n      if (contextToken && position <= contextToken.end && ts.isWord(contextToken.kind)) {\n        var start_6 = new Date().getTime();\n        contextToken = ts.findPrecedingToken(contextToken.getFullStart(), sourceFile);\n        log(\"getCompletionData: Get previous token 2: \" + (new Date().getTime() - start_6));\n      } // Find the node where completion is requested on.\n      // Also determine whether we are trying to complete with members of that node\n      // or attributes of a JSX tag.\n\n\n      var node = currentToken;\n      var isRightOfDot = false;\n      var isRightOfOpenTag = false;\n      var isStartingCloseTag = false;\n      var location = ts.getTouchingPropertyName(sourceFile, position);\n\n      if (contextToken) {\n        // Bail out if this is a known invalid completion location\n        if (isCompletionListBlocker(contextToken)) {\n          log(\"Returning an empty list because completion was requested in an invalid position.\");\n          return undefined;\n        }\n\n        var parent_11 = contextToken.parent,\n            kind = contextToken.kind;\n\n        if (kind === 21\n        /* DotToken */\n        ) {\n            if (parent_11.kind === 169\n            /* PropertyAccessExpression */\n            ) {\n                node = contextToken.parent.expression;\n                isRightOfDot = true;\n              } else if (parent_11.kind === 136\n            /* QualifiedName */\n            ) {\n                node = contextToken.parent.left;\n                isRightOfDot = true;\n              } else {\n              // There is nothing that precedes the dot, so this likely just a stray character\n              // or leading into a '...' token. Just bail out instead.\n              return undefined;\n            }\n          } else if (sourceFile.languageVariant === 1\n        /* JSX */\n        ) {\n            if (kind === 25\n            /* LessThanToken */\n            ) {\n                isRightOfOpenTag = true;\n                location = contextToken;\n              } else if (kind === 39\n            /* SlashToken */\n            && contextToken.parent.kind === 240\n            /* JsxClosingElement */\n            ) {\n                isStartingCloseTag = true;\n                location = contextToken;\n              }\n          }\n      }\n\n      var semanticStart = new Date().getTime();\n      var isMemberCompletion;\n      var isNewIdentifierLocation;\n      var symbols = [];\n\n      if (isRightOfDot) {\n        getTypeScriptMemberSymbols();\n      } else if (isRightOfOpenTag) {\n        var tagSymbols = typeChecker.getJsxIntrinsicTagNames();\n\n        if (tryGetGlobalSymbols()) {\n          symbols = tagSymbols.concat(symbols.filter(function (s) {\n            return !!(s.flags & 107455\n            /* Value */\n            );\n          }));\n        } else {\n          symbols = tagSymbols;\n        }\n\n        isMemberCompletion = true;\n        isNewIdentifierLocation = false;\n      } else if (isStartingCloseTag) {\n        var tagName = contextToken.parent.parent.openingElement.tagName;\n        var tagSymbol = typeChecker.getSymbolAtLocation(tagName);\n\n        if (!typeChecker.isUnknownSymbol(tagSymbol)) {\n          symbols = [tagSymbol];\n        }\n\n        isMemberCompletion = true;\n        isNewIdentifierLocation = false;\n      } else {\n        // For JavaScript or TypeScript, if we're not after a dot, then just try to get the\n        // global symbols in scope.  These results should be valid for either language as\n        // the set of symbols that can be referenced from this location.\n        if (!tryGetGlobalSymbols()) {\n          return undefined;\n        }\n      }\n\n      log(\"getCompletionData: Semantic work: \" + (new Date().getTime() - semanticStart));\n      return {\n        symbols: symbols,\n        isMemberCompletion: isMemberCompletion,\n        isNewIdentifierLocation: isNewIdentifierLocation,\n        location: location,\n        isRightOfDot: isRightOfDot || isRightOfOpenTag,\n        isJsDocTagName: isJsDocTagName\n      };\n\n      function getTypeScriptMemberSymbols() {\n        // Right of dot member completion list\n        isMemberCompletion = true;\n        isNewIdentifierLocation = false;\n\n        if (node.kind === 69\n        /* Identifier */\n        || node.kind === 136\n        /* QualifiedName */\n        || node.kind === 169\n        /* PropertyAccessExpression */\n        ) {\n            var symbol = typeChecker.getSymbolAtLocation(node); // This is an alias, follow what it aliases\n\n            if (symbol && symbol.flags & 8388608\n            /* Alias */\n            ) {\n                symbol = typeChecker.getAliasedSymbol(symbol);\n              }\n\n            if (symbol && symbol.flags & 1952\n            /* HasExports */\n            ) {\n                // Extract module or enum members\n                var exportedSymbols = typeChecker.getExportsOfModule(symbol);\n                ts.forEach(exportedSymbols, function (symbol) {\n                  if (typeChecker.isValidPropertyAccess(node.parent, symbol.name)) {\n                    symbols.push(symbol);\n                  }\n                });\n              }\n          }\n\n        var type = typeChecker.getTypeAtLocation(node);\n        addTypeProperties(type);\n      }\n\n      function addTypeProperties(type) {\n        if (type) {\n          // Filter private properties\n          for (var _i = 0, _a = type.getApparentProperties(); _i < _a.length; _i++) {\n            var symbol = _a[_i];\n\n            if (typeChecker.isValidPropertyAccess(node.parent, symbol.name)) {\n              symbols.push(symbol);\n            }\n          }\n\n          if (isJavaScriptFile && type.flags & 16384\n          /* Union */\n          ) {\n              // In javascript files, for union types, we don't just get the members that\n              // the individual types have in common, we also include all the members that\n              // each individual type has.  This is because we're going to add all identifiers\n              // anyways.  So we might as well elevate the members that were at least part\n              // of the individual types to a higher status since we know what they are.\n              var unionType = type;\n\n              for (var _b = 0, _c = unionType.types; _b < _c.length; _b++) {\n                var elementType = _c[_b];\n                addTypeProperties(elementType);\n              }\n            }\n        }\n      }\n\n      function tryGetGlobalSymbols() {\n        var objectLikeContainer;\n        var namedImportsOrExports;\n        var jsxContainer;\n\n        if (objectLikeContainer = tryGetObjectLikeCompletionContainer(contextToken)) {\n          return tryGetObjectLikeCompletionSymbols(objectLikeContainer);\n        }\n\n        if (namedImportsOrExports = tryGetNamedImportsOrExportsForCompletion(contextToken)) {\n          // cursor is in an import clause\n          // try to show exported member for imported module\n          return tryGetImportOrExportClauseCompletionSymbols(namedImportsOrExports);\n        }\n\n        if (jsxContainer = tryGetContainingJsxElement(contextToken)) {\n          var attrsType = void 0;\n\n          if (jsxContainer.kind === 237\n          /* JsxSelfClosingElement */\n          || jsxContainer.kind === 238\n          /* JsxOpeningElement */\n          ) {\n            // Cursor is inside a JSX self-closing element or opening element\n            attrsType = typeChecker.getJsxElementAttributesType(jsxContainer);\n\n            if (attrsType) {\n              symbols = filterJsxAttributes(typeChecker.getPropertiesOfType(attrsType), jsxContainer.attributes);\n              isMemberCompletion = true;\n              isNewIdentifierLocation = false;\n              return true;\n            }\n          }\n        } // Get all entities in the current scope.\n\n\n        isMemberCompletion = false;\n        isNewIdentifierLocation = isNewIdentifierDefinitionLocation(contextToken);\n\n        if (previousToken !== contextToken) {\n          ts.Debug.assert(!!previousToken, \"Expected 'contextToken' to be defined when different from 'previousToken'.\");\n        } // We need to find the node that will give us an appropriate scope to begin\n        // aggregating completion candidates. This is achieved in 'getScopeNode'\n        // by finding the first node that encompasses a position, accounting for whether a node\n        // is \"complete\" to decide whether a position belongs to the node.\n        //\n        // However, at the end of an identifier, we are interested in the scope of the identifier\n        // itself, but fall outside of the identifier. For instance:\n        //\n        //      xyz => x$\n        //\n        // the cursor is outside of both the 'x' and the arrow function 'xyz => x',\n        // so 'xyz' is not returned in our results.\n        //\n        // We define 'adjustedPosition' so that we may appropriately account for\n        // being at the end of an identifier. The intention is that if requesting completion\n        // at the end of an identifier, it should be effectively equivalent to requesting completion\n        // anywhere inside/at the beginning of the identifier. So in the previous case, the\n        // 'adjustedPosition' will work as if requesting completion in the following:\n        //\n        //      xyz => $x\n        //\n        // If previousToken !== contextToken, then\n        //   - 'contextToken' was adjusted to the token prior to 'previousToken'\n        //      because we were at the end of an identifier.\n        //   - 'previousToken' is defined.\n\n\n        var adjustedPosition = previousToken !== contextToken ? previousToken.getStart() : position;\n        var scopeNode = getScopeNode(contextToken, adjustedPosition, sourceFile) || sourceFile; /// TODO filter meaning based on the current context\n\n        var symbolMeanings = 793056\n        /* Type */\n        | 107455\n        /* Value */\n        | 1536\n        /* Namespace */\n        | 8388608\n        /* Alias */\n        ;\n        symbols = typeChecker.getSymbolsInScope(scopeNode, symbolMeanings);\n        return true;\n      }\n      /**\n       * Finds the first node that \"embraces\" the position, so that one may\n       * accurately aggregate locals from the closest containing scope.\n       */\n\n\n      function getScopeNode(initialToken, position, sourceFile) {\n        var scope = initialToken;\n\n        while (scope && !ts.positionBelongsToNode(scope, position, sourceFile)) {\n          scope = scope.parent;\n        }\n\n        return scope;\n      }\n\n      function isCompletionListBlocker(contextToken) {\n        var start = new Date().getTime();\n        var result = isInStringOrRegularExpressionOrTemplateLiteral(contextToken) || isSolelyIdentifierDefinitionLocation(contextToken) || isDotOfNumericLiteral(contextToken) || isInJsxText(contextToken);\n        log(\"getCompletionsAtPosition: isCompletionListBlocker: \" + (new Date().getTime() - start));\n        return result;\n      }\n\n      function isInJsxText(contextToken) {\n        if (contextToken.kind === 239\n        /* JsxText */\n        ) {\n            return true;\n          }\n\n        if (contextToken.kind === 27\n        /* GreaterThanToken */\n        && contextToken.parent) {\n          if (contextToken.parent.kind === 238\n          /* JsxOpeningElement */\n          ) {\n              return true;\n            }\n\n          if (contextToken.parent.kind === 240\n          /* JsxClosingElement */\n          || contextToken.parent.kind === 237\n          /* JsxSelfClosingElement */\n          ) {\n              return contextToken.parent.parent && contextToken.parent.parent.kind === 236\n              /* JsxElement */\n              ;\n            }\n        }\n\n        return false;\n      }\n\n      function isNewIdentifierDefinitionLocation(previousToken) {\n        if (previousToken) {\n          var containingNodeKind = previousToken.parent.kind;\n\n          switch (previousToken.kind) {\n            case 24\n            /* CommaToken */\n            :\n              return containingNodeKind === 171\n              /* CallExpression */\n              // func( a, |\n              || containingNodeKind === 145\n              /* Constructor */\n              // constructor( a, |   /* public, protected, private keywords are allowed here, so show completion */\n              || containingNodeKind === 172\n              /* NewExpression */\n              // new C(a, |\n              || containingNodeKind === 167\n              /* ArrayLiteralExpression */\n              // [a, |\n              || containingNodeKind === 184\n              /* BinaryExpression */\n              // const x = (a, |\n              || containingNodeKind === 153\n              /* FunctionType */\n              ;\n            // var x: (s: string, list|\n\n            case 17\n            /* OpenParenToken */\n            :\n              return containingNodeKind === 171\n              /* CallExpression */\n              // func( |\n              || containingNodeKind === 145\n              /* Constructor */\n              // constructor( |\n              || containingNodeKind === 172\n              /* NewExpression */\n              // new C(a|\n              || containingNodeKind === 175\n              /* ParenthesizedExpression */\n              // const x = (a|\n              || containingNodeKind === 161\n              /* ParenthesizedType */\n              ;\n            // function F(pred: (a| /* this can become an arrow function, where 'a' is the argument */\n\n            case 19\n            /* OpenBracketToken */\n            :\n              return containingNodeKind === 167\n              /* ArrayLiteralExpression */\n              // [ |\n              || containingNodeKind === 150\n              /* IndexSignature */\n              // [ | : string ]\n              || containingNodeKind === 137\n              /* ComputedPropertyName */\n              ;\n            // [ |    /* this can become an index signature */\n\n            case 125\n            /* ModuleKeyword */\n            : // module |\n\n            case 126\n            /* NamespaceKeyword */\n            :\n              return true;\n\n            case 21\n            /* DotToken */\n            :\n              return containingNodeKind === 221\n              /* ModuleDeclaration */\n              ;\n            // module A.|\n\n            case 15\n            /* OpenBraceToken */\n            :\n              return containingNodeKind === 217\n              /* ClassDeclaration */\n              ;\n            // class A{ |\n\n            case 56\n            /* EqualsToken */\n            :\n              return containingNodeKind === 214\n              /* VariableDeclaration */\n              // const x = a|\n              || containingNodeKind === 184\n              /* BinaryExpression */\n              ;\n            // x = a|\n\n            case 12\n            /* TemplateHead */\n            :\n              return containingNodeKind === 186\n              /* TemplateExpression */\n              ;\n            // `aa ${|\n\n            case 13\n            /* TemplateMiddle */\n            :\n              return containingNodeKind === 193\n              /* TemplateSpan */\n              ;\n            // `aa ${10} dd ${|\n\n            case 112\n            /* PublicKeyword */\n            :\n            case 110\n            /* PrivateKeyword */\n            :\n            case 111\n            /* ProtectedKeyword */\n            :\n              return containingNodeKind === 142\n              /* PropertyDeclaration */\n              ;\n            // class A{ public |\n          } // Previous token may have been a keyword that was converted to an identifier.\n\n\n          switch (previousToken.getText()) {\n            case \"public\":\n            case \"protected\":\n            case \"private\":\n              return true;\n          }\n        }\n\n        return false;\n      }\n\n      function isInStringOrRegularExpressionOrTemplateLiteral(contextToken) {\n        if (contextToken.kind === 9\n        /* StringLiteral */\n        || contextToken.kind === 163\n        /* StringLiteralType */\n        || contextToken.kind === 10\n        /* RegularExpressionLiteral */\n        || ts.isTemplateLiteralKind(contextToken.kind)) {\n          var start_7 = contextToken.getStart();\n          var end = contextToken.getEnd(); // To be \"in\" one of these literals, the position has to be:\n          //   1. entirely within the token text.\n          //   2. at the end position of an unterminated token.\n          //   3. at the end of a regular expression (due to trailing flags like '/foo/g').\n\n          if (start_7 < position && position < end) {\n            return true;\n          }\n\n          if (position === end) {\n            return !!contextToken.isUnterminated || contextToken.kind === 10\n            /* RegularExpressionLiteral */\n            ;\n          }\n        }\n\n        return false;\n      }\n      /**\n       * Aggregates relevant symbols for completion in object literals and object binding patterns.\n       * Relevant symbols are stored in the captured 'symbols' variable.\n       *\n       * @returns true if 'symbols' was successfully populated; false otherwise.\n       */\n\n\n      function tryGetObjectLikeCompletionSymbols(objectLikeContainer) {\n        // We're looking up possible property names from contextual/inferred/declared type.\n        isMemberCompletion = true;\n        var typeForObject;\n        var existingMembers;\n\n        if (objectLikeContainer.kind === 168\n        /* ObjectLiteralExpression */\n        ) {\n            // We are completing on contextual types, but may also include properties\n            // other than those within the declared type.\n            isNewIdentifierLocation = true;\n            typeForObject = typeChecker.getContextualType(objectLikeContainer);\n            existingMembers = objectLikeContainer.properties;\n          } else if (objectLikeContainer.kind === 164\n        /* ObjectBindingPattern */\n        ) {\n            // We are *only* completing on properties from the type being destructured.\n            isNewIdentifierLocation = false;\n            var rootDeclaration = ts.getRootDeclaration(objectLikeContainer.parent);\n\n            if (ts.isVariableLike(rootDeclaration)) {\n              // We don't want to complete using the type acquired by the shape\n              // of the binding pattern; we are only interested in types acquired\n              // through type declaration or inference.\n              if (rootDeclaration.initializer || rootDeclaration.type) {\n                typeForObject = typeChecker.getTypeAtLocation(objectLikeContainer);\n                existingMembers = objectLikeContainer.elements;\n              }\n            } else {\n              ts.Debug.fail(\"Root declaration is not variable-like.\");\n            }\n          } else {\n          ts.Debug.fail(\"Expected object literal or binding pattern, got \" + objectLikeContainer.kind);\n        }\n\n        if (!typeForObject) {\n          return false;\n        }\n\n        var typeMembers = typeChecker.getPropertiesOfType(typeForObject);\n\n        if (typeMembers && typeMembers.length > 0) {\n          // Add filtered items to the completion list\n          symbols = filterObjectMembersList(typeMembers, existingMembers);\n        }\n\n        return true;\n      }\n      /**\n       * Aggregates relevant symbols for completion in import clauses and export clauses\n       * whose declarations have a module specifier; for instance, symbols will be aggregated for\n       *\n       *      import { | } from \"moduleName\";\n       *      export { a as foo, | } from \"moduleName\";\n       *\n       * but not for\n       *\n       *      export { | };\n       *\n       * Relevant symbols are stored in the captured 'symbols' variable.\n       *\n       * @returns true if 'symbols' was successfully populated; false otherwise.\n       */\n\n\n      function tryGetImportOrExportClauseCompletionSymbols(namedImportsOrExports) {\n        var declarationKind = namedImportsOrExports.kind === 228\n        /* NamedImports */\n        ? 225\n        /* ImportDeclaration */\n        : 231\n        /* ExportDeclaration */\n        ;\n        var importOrExportDeclaration = ts.getAncestor(namedImportsOrExports, declarationKind);\n        var moduleSpecifier = importOrExportDeclaration.moduleSpecifier;\n\n        if (!moduleSpecifier) {\n          return false;\n        }\n\n        isMemberCompletion = true;\n        isNewIdentifierLocation = false;\n        var exports;\n        var moduleSpecifierSymbol = typeChecker.getSymbolAtLocation(importOrExportDeclaration.moduleSpecifier);\n\n        if (moduleSpecifierSymbol) {\n          exports = typeChecker.getExportsOfModule(moduleSpecifierSymbol);\n        }\n\n        symbols = exports ? filterNamedImportOrExportCompletionItems(exports, namedImportsOrExports.elements) : emptyArray;\n        return true;\n      }\n      /**\n       * Returns the immediate owning object literal or binding pattern of a context token,\n       * on the condition that one exists and that the context implies completion should be given.\n       */\n\n\n      function tryGetObjectLikeCompletionContainer(contextToken) {\n        if (contextToken) {\n          switch (contextToken.kind) {\n            case 15\n            /* OpenBraceToken */\n            : // const x = { |\n\n            case 24\n            /* CommaToken */\n            :\n              var parent_12 = contextToken.parent;\n\n              if (parent_12 && (parent_12.kind === 168\n              /* ObjectLiteralExpression */\n              || parent_12.kind === 164\n              /* ObjectBindingPattern */\n              )) {\n                return parent_12;\n              }\n\n              break;\n          }\n        }\n\n        return undefined;\n      }\n      /**\n       * Returns the containing list of named imports or exports of a context token,\n       * on the condition that one exists and that the context implies completion should be given.\n       */\n\n\n      function tryGetNamedImportsOrExportsForCompletion(contextToken) {\n        if (contextToken) {\n          switch (contextToken.kind) {\n            case 15\n            /* OpenBraceToken */\n            : // import { |\n\n            case 24\n            /* CommaToken */\n            :\n              switch (contextToken.parent.kind) {\n                case 228\n                /* NamedImports */\n                :\n                case 232\n                /* NamedExports */\n                :\n                  return contextToken.parent;\n              }\n\n          }\n        }\n\n        return undefined;\n      }\n\n      function tryGetContainingJsxElement(contextToken) {\n        if (contextToken) {\n          var parent_13 = contextToken.parent;\n\n          switch (contextToken.kind) {\n            case 26\n            /* LessThanSlashToken */\n            :\n            case 39\n            /* SlashToken */\n            :\n            case 69\n            /* Identifier */\n            :\n            case 241\n            /* JsxAttribute */\n            :\n            case 242\n            /* JsxSpreadAttribute */\n            :\n              if (parent_13 && (parent_13.kind === 237\n              /* JsxSelfClosingElement */\n              || parent_13.kind === 238\n              /* JsxOpeningElement */\n              )) {\n                return parent_13;\n              } else if (parent_13.kind === 241\n              /* JsxAttribute */\n              ) {\n                  return parent_13.parent;\n                }\n\n              break;\n            // The context token is the closing } or \" of an attribute, which means\n            // its parent is a JsxExpression, whose parent is a JsxAttribute,\n            // whose parent is a JsxOpeningLikeElement\n\n            case 9\n            /* StringLiteral */\n            :\n              if (parent_13 && (parent_13.kind === 241\n              /* JsxAttribute */\n              || parent_13.kind === 242\n              /* JsxSpreadAttribute */\n              )) {\n                return parent_13.parent;\n              }\n\n              break;\n\n            case 16\n            /* CloseBraceToken */\n            :\n              if (parent_13 && parent_13.kind === 243\n              /* JsxExpression */\n              && parent_13.parent && parent_13.parent.kind === 241\n              /* JsxAttribute */\n              ) {\n                return parent_13.parent.parent;\n              }\n\n              if (parent_13 && parent_13.kind === 242\n              /* JsxSpreadAttribute */\n              ) {\n                  return parent_13.parent;\n                }\n\n              break;\n          }\n        }\n\n        return undefined;\n      }\n\n      function isFunction(kind) {\n        switch (kind) {\n          case 176\n          /* FunctionExpression */\n          :\n          case 177\n          /* ArrowFunction */\n          :\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n          case 148\n          /* CallSignature */\n          :\n          case 149\n          /* ConstructSignature */\n          :\n          case 150\n          /* IndexSignature */\n          :\n            return true;\n        }\n\n        return false;\n      }\n      /**\n       * @returns true if we are certain that the currently edited location must define a new location; false otherwise.\n       */\n\n\n      function isSolelyIdentifierDefinitionLocation(contextToken) {\n        var containingNodeKind = contextToken.parent.kind;\n\n        switch (contextToken.kind) {\n          case 24\n          /* CommaToken */\n          :\n            return containingNodeKind === 214\n            /* VariableDeclaration */\n            || containingNodeKind === 215\n            /* VariableDeclarationList */\n            || containingNodeKind === 196\n            /* VariableStatement */\n            || containingNodeKind === 220\n            /* EnumDeclaration */\n            || isFunction(containingNodeKind) || containingNodeKind === 217\n            /* ClassDeclaration */\n            || containingNodeKind === 189\n            /* ClassExpression */\n            || containingNodeKind === 218\n            /* InterfaceDeclaration */\n            || containingNodeKind === 165\n            /* ArrayBindingPattern */\n            || containingNodeKind === 219\n            /* TypeAliasDeclaration */\n            ;\n          // type Map, K, |\n\n          case 21\n          /* DotToken */\n          :\n            return containingNodeKind === 165\n            /* ArrayBindingPattern */\n            ;\n          // var [.|\n\n          case 54\n          /* ColonToken */\n          :\n            return containingNodeKind === 166\n            /* BindingElement */\n            ;\n          // var {x :html|\n\n          case 19\n          /* OpenBracketToken */\n          :\n            return containingNodeKind === 165\n            /* ArrayBindingPattern */\n            ;\n          // var [x|\n\n          case 17\n          /* OpenParenToken */\n          :\n            return containingNodeKind === 247\n            /* CatchClause */\n            || isFunction(containingNodeKind);\n\n          case 15\n          /* OpenBraceToken */\n          :\n            return containingNodeKind === 220\n            /* EnumDeclaration */\n            || containingNodeKind === 218\n            /* InterfaceDeclaration */\n            || containingNodeKind === 156\n            /* TypeLiteral */\n            ;\n          // const x : { |\n\n          case 23\n          /* SemicolonToken */\n          :\n            return containingNodeKind === 141\n            /* PropertySignature */\n            && contextToken.parent && contextToken.parent.parent && (contextToken.parent.parent.kind === 218\n            /* InterfaceDeclaration */\n            || contextToken.parent.parent.kind === 156\n            /* TypeLiteral */\n            );\n          // const x : { a; |\n\n          case 25\n          /* LessThanToken */\n          :\n            return containingNodeKind === 217\n            /* ClassDeclaration */\n            || containingNodeKind === 189\n            /* ClassExpression */\n            || containingNodeKind === 218\n            /* InterfaceDeclaration */\n            || containingNodeKind === 219\n            /* TypeAliasDeclaration */\n            || isFunction(containingNodeKind);\n\n          case 113\n          /* StaticKeyword */\n          :\n            return containingNodeKind === 142\n            /* PropertyDeclaration */\n            ;\n\n          case 22\n          /* DotDotDotToken */\n          :\n            return containingNodeKind === 139\n            /* Parameter */\n            || contextToken.parent && contextToken.parent.parent && contextToken.parent.parent.kind === 165\n            /* ArrayBindingPattern */\n            ;\n          // var [...z|\n\n          case 112\n          /* PublicKeyword */\n          :\n          case 110\n          /* PrivateKeyword */\n          :\n          case 111\n          /* ProtectedKeyword */\n          :\n            return containingNodeKind === 139\n            /* Parameter */\n            ;\n\n          case 116\n          /* AsKeyword */\n          :\n            return containingNodeKind === 229\n            /* ImportSpecifier */\n            || containingNodeKind === 233\n            /* ExportSpecifier */\n            || containingNodeKind === 227\n            /* NamespaceImport */\n            ;\n\n          case 73\n          /* ClassKeyword */\n          :\n          case 81\n          /* EnumKeyword */\n          :\n          case 107\n          /* InterfaceKeyword */\n          :\n          case 87\n          /* FunctionKeyword */\n          :\n          case 102\n          /* VarKeyword */\n          :\n          case 123\n          /* GetKeyword */\n          :\n          case 129\n          /* SetKeyword */\n          :\n          case 89\n          /* ImportKeyword */\n          :\n          case 108\n          /* LetKeyword */\n          :\n          case 74\n          /* ConstKeyword */\n          :\n          case 114\n          /* YieldKeyword */\n          :\n          case 132\n          /* TypeKeyword */\n          :\n            return true;\n        } // Previous token may have been a keyword that was converted to an identifier.\n\n\n        switch (contextToken.getText()) {\n          case \"abstract\":\n          case \"async\":\n          case \"class\":\n          case \"const\":\n          case \"declare\":\n          case \"enum\":\n          case \"function\":\n          case \"interface\":\n          case \"let\":\n          case \"private\":\n          case \"protected\":\n          case \"public\":\n          case \"static\":\n          case \"var\":\n          case \"yield\":\n            return true;\n        }\n\n        return false;\n      }\n\n      function isDotOfNumericLiteral(contextToken) {\n        if (contextToken.kind === 8\n        /* NumericLiteral */\n        ) {\n            var text = contextToken.getFullText();\n            return text.charAt(text.length - 1) === \".\";\n          }\n\n        return false;\n      }\n      /**\n       * Filters out completion suggestions for named imports or exports.\n       *\n       * @param exportsOfModule          The list of symbols which a module exposes.\n       * @param namedImportsOrExports    The list of existing import/export specifiers in the import/export clause.\n       *\n       * @returns Symbols to be suggested at an import/export clause, barring those whose named imports/exports\n       *          do not occur at the current position and have not otherwise been typed.\n       */\n\n\n      function filterNamedImportOrExportCompletionItems(exportsOfModule, namedImportsOrExports) {\n        var exisingImportsOrExports = {};\n\n        for (var _i = 0, namedImportsOrExports_1 = namedImportsOrExports; _i < namedImportsOrExports_1.length; _i++) {\n          var element = namedImportsOrExports_1[_i]; // If this is the current item we are editing right now, do not filter it out\n\n          if (element.getStart() <= position && position <= element.getEnd()) {\n            continue;\n          }\n\n          var name_37 = element.propertyName || element.name;\n          exisingImportsOrExports[name_37.text] = true;\n        }\n\n        if (ts.isEmpty(exisingImportsOrExports)) {\n          return exportsOfModule;\n        }\n\n        return ts.filter(exportsOfModule, function (e) {\n          return !ts.lookUp(exisingImportsOrExports, e.name);\n        });\n      }\n      /**\n       * Filters out completion suggestions for named imports or exports.\n       *\n       * @returns Symbols to be suggested in an object binding pattern or object literal expression, barring those whose declarations\n       *          do not occur at the current position and have not otherwise been typed.\n       */\n\n\n      function filterObjectMembersList(contextualMemberSymbols, existingMembers) {\n        if (!existingMembers || existingMembers.length === 0) {\n          return contextualMemberSymbols;\n        }\n\n        var existingMemberNames = {};\n\n        for (var _i = 0, existingMembers_1 = existingMembers; _i < existingMembers_1.length; _i++) {\n          var m = existingMembers_1[_i]; // Ignore omitted expressions for missing members\n\n          if (m.kind !== 248\n          /* PropertyAssignment */\n          && m.kind !== 249\n          /* ShorthandPropertyAssignment */\n          && m.kind !== 166\n          /* BindingElement */\n          && m.kind !== 144\n          /* MethodDeclaration */\n          ) {\n              continue;\n            } // If this is the current item we are editing right now, do not filter it out\n\n\n          if (m.getStart() <= position && position <= m.getEnd()) {\n            continue;\n          }\n\n          var existingName = void 0;\n\n          if (m.kind === 166\n          /* BindingElement */\n          && m.propertyName) {\n            // include only identifiers in completion list\n            if (m.propertyName.kind === 69\n            /* Identifier */\n            ) {\n                existingName = m.propertyName.text;\n              }\n          } else {\n            // TODO(jfreeman): Account for computed property name\n            // NOTE: if one only performs this step when m.name is an identifier,\n            // things like '__proto__' are not filtered out.\n            existingName = m.name.text;\n          }\n\n          existingMemberNames[existingName] = true;\n        }\n\n        return ts.filter(contextualMemberSymbols, function (m) {\n          return !ts.lookUp(existingMemberNames, m.name);\n        });\n      }\n      /**\n       * Filters out completion suggestions from 'symbols' according to existing JSX attributes.\n       *\n       * @returns Symbols to be suggested in a JSX element, barring those whose attributes\n       *          do not occur at the current position and have not otherwise been typed.\n       */\n\n\n      function filterJsxAttributes(symbols, attributes) {\n        var seenNames = {};\n\n        for (var _i = 0, attributes_1 = attributes; _i < attributes_1.length; _i++) {\n          var attr = attributes_1[_i]; // If this is the current item we are editing right now, do not filter it out\n\n          if (attr.getStart() <= position && position <= attr.getEnd()) {\n            continue;\n          }\n\n          if (attr.kind === 241\n          /* JsxAttribute */\n          ) {\n              seenNames[attr.name.text] = true;\n            }\n        }\n\n        return ts.filter(symbols, function (a) {\n          return !ts.lookUp(seenNames, a.name);\n        });\n      }\n    }\n\n    function getCompletionsAtPosition(fileName, position) {\n      synchronizeHostData();\n      var completionData = getCompletionData(fileName, position);\n\n      if (!completionData) {\n        return undefined;\n      }\n\n      var symbols = completionData.symbols,\n          isMemberCompletion = completionData.isMemberCompletion,\n          isNewIdentifierLocation = completionData.isNewIdentifierLocation,\n          location = completionData.location,\n          isJsDocTagName = completionData.isJsDocTagName;\n\n      if (isJsDocTagName) {\n        // If the current position is a jsDoc tag name, only tag names should be provided for completion\n        return {\n          isMemberCompletion: false,\n          isNewIdentifierLocation: false,\n          entries: getAllJsDocCompletionEntries()\n        };\n      }\n\n      var sourceFile = getValidSourceFile(fileName);\n      var entries = [];\n\n      if (ts.isSourceFileJavaScript(sourceFile)) {\n        var uniqueNames = getCompletionEntriesFromSymbols(symbols, entries);\n        ts.addRange(entries, getJavaScriptCompletionEntries(sourceFile, location.pos, uniqueNames));\n      } else {\n        if (!symbols || symbols.length === 0) {\n          if (sourceFile.languageVariant === 1\n          /* JSX */\n          && location.parent && location.parent.kind === 240\n          /* JsxClosingElement */\n          ) {\n              // In the TypeScript JSX element, if such element is not defined. When users query for completion at closing tag,\n              // instead of simply giving unknown value, the completion will return the tag-name of an associated opening-element.\n              // For example:\n              //     var x = <div> </ /*1*/>  completion list at \"1\" will contain \"div\" with type any\n              var tagName = location.parent.parent.openingElement.tagName;\n              entries.push({\n                name: tagName.text,\n                kind: undefined,\n                kindModifiers: undefined,\n                sortText: \"0\"\n              });\n            } else {\n            return undefined;\n          }\n        }\n\n        getCompletionEntriesFromSymbols(symbols, entries);\n      } // Add keywords if this is not a member completion list\n\n\n      if (!isMemberCompletion && !isJsDocTagName) {\n        ts.addRange(entries, keywordCompletions);\n      }\n\n      return {\n        isMemberCompletion: isMemberCompletion,\n        isNewIdentifierLocation: isNewIdentifierLocation,\n        entries: entries\n      };\n\n      function getJavaScriptCompletionEntries(sourceFile, position, uniqueNames) {\n        var entries = [];\n        var target = program.getCompilerOptions().target;\n        var nameTable = getNameTable(sourceFile);\n\n        for (var name_38 in nameTable) {\n          // Skip identifiers produced only from the current location\n          if (nameTable[name_38] === position) {\n            continue;\n          }\n\n          if (!uniqueNames[name_38]) {\n            uniqueNames[name_38] = name_38;\n            var displayName = getCompletionEntryDisplayName(name_38, target,\n            /*performCharacterChecks*/\n            true);\n\n            if (displayName) {\n              var entry = {\n                name: displayName,\n                kind: ScriptElementKind.warning,\n                kindModifiers: \"\",\n                sortText: \"1\"\n              };\n              entries.push(entry);\n            }\n          }\n        }\n\n        return entries;\n      }\n\n      function getAllJsDocCompletionEntries() {\n        return jsDocCompletionEntries || (jsDocCompletionEntries = ts.map(jsDocTagNames, function (tagName) {\n          return {\n            name: tagName,\n            kind: ScriptElementKind.keyword,\n            kindModifiers: \"\",\n            sortText: \"0\"\n          };\n        }));\n      }\n\n      function createCompletionEntry(symbol, location) {\n        // Try to get a valid display name for this symbol, if we could not find one, then ignore it.\n        // We would like to only show things that can be added after a dot, so for instance numeric properties can\n        // not be accessed with a dot (a.1 <- invalid)\n        var displayName = getCompletionEntryDisplayNameForSymbol(symbol, program.getCompilerOptions().target,\n        /*performCharacterChecks*/\n        true, location);\n\n        if (!displayName) {\n          return undefined;\n        } // TODO(drosen): Right now we just permit *all* semantic meanings when calling\n        // 'getSymbolKind' which is permissible given that it is backwards compatible; but\n        // really we should consider passing the meaning for the node so that we don't report\n        // that a suggestion for a value is an interface.  We COULD also just do what\n        // 'getSymbolModifiers' does, which is to use the first declaration.\n        // Use a 'sortText' of 0' so that all symbol completion entries come before any other\n        // entries (like JavaScript identifier entries).\n\n\n        return {\n          name: displayName,\n          kind: getSymbolKind(symbol, location),\n          kindModifiers: getSymbolModifiers(symbol),\n          sortText: \"0\"\n        };\n      }\n\n      function getCompletionEntriesFromSymbols(symbols, entries) {\n        var start = new Date().getTime();\n        var uniqueNames = {};\n\n        if (symbols) {\n          for (var _i = 0, symbols_4 = symbols; _i < symbols_4.length; _i++) {\n            var symbol = symbols_4[_i];\n            var entry = createCompletionEntry(symbol, location);\n\n            if (entry) {\n              var id = ts.escapeIdentifier(entry.name);\n\n              if (!ts.lookUp(uniqueNames, id)) {\n                entries.push(entry);\n                uniqueNames[id] = id;\n              }\n            }\n          }\n        }\n\n        log(\"getCompletionsAtPosition: getCompletionEntriesFromSymbols: \" + (new Date().getTime() - start));\n        return uniqueNames;\n      }\n    }\n\n    function getCompletionEntryDetails(fileName, position, entryName) {\n      synchronizeHostData(); // Compute all the completion symbols again.\n\n      var completionData = getCompletionData(fileName, position);\n\n      if (completionData) {\n        var symbols = completionData.symbols,\n            location_2 = completionData.location; // Find the symbol with the matching entry name.\n\n        var target_2 = program.getCompilerOptions().target; // We don't need to perform character checks here because we're only comparing the\n        // name against 'entryName' (which is known to be good), not building a new\n        // completion entry.\n\n        var symbol = ts.forEach(symbols, function (s) {\n          return getCompletionEntryDisplayNameForSymbol(s, target_2,\n          /*performCharacterChecks*/\n          false, location_2) === entryName ? s : undefined;\n        });\n\n        if (symbol) {\n          var _a = getSymbolDisplayPartsDocumentationAndSymbolKind(symbol, getValidSourceFile(fileName), location_2, location_2, 7\n          /* All */\n          ),\n              displayParts = _a.displayParts,\n              documentation = _a.documentation,\n              symbolKind = _a.symbolKind;\n\n          return {\n            name: entryName,\n            kindModifiers: getSymbolModifiers(symbol),\n            kind: symbolKind,\n            displayParts: displayParts,\n            documentation: documentation\n          };\n        }\n      } // Didn't find a symbol with this name.  See if we can find a keyword instead.\n\n\n      var keywordCompletion = ts.forEach(keywordCompletions, function (c) {\n        return c.name === entryName;\n      });\n\n      if (keywordCompletion) {\n        return {\n          name: entryName,\n          kind: ScriptElementKind.keyword,\n          kindModifiers: ScriptElementKindModifier.none,\n          displayParts: [ts.displayPart(entryName, SymbolDisplayPartKind.keyword)],\n          documentation: undefined\n        };\n      }\n\n      return undefined;\n    } // TODO(drosen): use contextual SemanticMeaning.\n\n\n    function getSymbolKind(symbol, location) {\n      var flags = symbol.getFlags();\n      if (flags & 32\n      /* Class */\n      ) return ts.getDeclarationOfKind(symbol, 189\n        /* ClassExpression */\n        ) ? ScriptElementKind.localClassElement : ScriptElementKind.classElement;\n      if (flags & 384\n      /* Enum */\n      ) return ScriptElementKind.enumElement;\n      if (flags & 524288\n      /* TypeAlias */\n      ) return ScriptElementKind.typeElement;\n      if (flags & 64\n      /* Interface */\n      ) return ScriptElementKind.interfaceElement;\n      if (flags & 262144\n      /* TypeParameter */\n      ) return ScriptElementKind.typeParameterElement;\n      var result = getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar(symbol, flags, location);\n\n      if (result === ScriptElementKind.unknown) {\n        if (flags & 262144\n        /* TypeParameter */\n        ) return ScriptElementKind.typeParameterElement;\n        if (flags & 8\n        /* EnumMember */\n        ) return ScriptElementKind.variableElement;\n        if (flags & 8388608\n        /* Alias */\n        ) return ScriptElementKind.alias;\n        if (flags & 1536\n        /* Module */\n        ) return ScriptElementKind.moduleElement;\n      }\n\n      return result;\n    }\n\n    function getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar(symbol, flags, location) {\n      var typeChecker = program.getTypeChecker();\n\n      if (typeChecker.isUndefinedSymbol(symbol)) {\n        return ScriptElementKind.variableElement;\n      }\n\n      if (typeChecker.isArgumentsSymbol(symbol)) {\n        return ScriptElementKind.localVariableElement;\n      }\n\n      if (flags & 3\n      /* Variable */\n      ) {\n          if (ts.isFirstDeclarationOfSymbolParameter(symbol)) {\n            return ScriptElementKind.parameterElement;\n          } else if (symbol.valueDeclaration && ts.isConst(symbol.valueDeclaration)) {\n            return ScriptElementKind.constElement;\n          } else if (ts.forEach(symbol.declarations, ts.isLet)) {\n            return ScriptElementKind.letElement;\n          }\n\n          return isLocalVariableOrFunction(symbol) ? ScriptElementKind.localVariableElement : ScriptElementKind.variableElement;\n        }\n\n      if (flags & 16\n      /* Function */\n      ) return isLocalVariableOrFunction(symbol) ? ScriptElementKind.localFunctionElement : ScriptElementKind.functionElement;\n      if (flags & 32768\n      /* GetAccessor */\n      ) return ScriptElementKind.memberGetAccessorElement;\n      if (flags & 65536\n      /* SetAccessor */\n      ) return ScriptElementKind.memberSetAccessorElement;\n      if (flags & 8192\n      /* Method */\n      ) return ScriptElementKind.memberFunctionElement;\n      if (flags & 16384\n      /* Constructor */\n      ) return ScriptElementKind.constructorImplementationElement;\n\n      if (flags & 4\n      /* Property */\n      ) {\n          if (flags & 268435456\n          /* SyntheticProperty */\n          ) {\n              // If union property is result of union of non method (property/accessors/variables), it is labeled as property\n              var unionPropertyKind = ts.forEach(typeChecker.getRootSymbols(symbol), function (rootSymbol) {\n                var rootSymbolFlags = rootSymbol.getFlags();\n\n                if (rootSymbolFlags & (98308\n                /* PropertyOrAccessor */\n                | 3\n                /* Variable */\n                )) {\n                  return ScriptElementKind.memberVariableElement;\n                }\n\n                ts.Debug.assert(!!(rootSymbolFlags & 8192\n                /* Method */\n                ));\n              });\n\n              if (!unionPropertyKind) {\n                // If this was union of all methods,\n                // make sure it has call signatures before we can label it as method\n                var typeOfUnionProperty = typeChecker.getTypeOfSymbolAtLocation(symbol, location);\n\n                if (typeOfUnionProperty.getCallSignatures().length) {\n                  return ScriptElementKind.memberFunctionElement;\n                }\n\n                return ScriptElementKind.memberVariableElement;\n              }\n\n              return unionPropertyKind;\n            }\n\n          return ScriptElementKind.memberVariableElement;\n        }\n\n      return ScriptElementKind.unknown;\n    }\n\n    function getSymbolModifiers(symbol) {\n      return symbol && symbol.declarations && symbol.declarations.length > 0 ? ts.getNodeModifiers(symbol.declarations[0]) : ScriptElementKindModifier.none;\n    } // TODO(drosen): Currently completion entry details passes the SemanticMeaning.All instead of using semanticMeaning of location\n\n\n    function getSymbolDisplayPartsDocumentationAndSymbolKind(symbol, sourceFile, enclosingDeclaration, location, semanticMeaning) {\n      if (semanticMeaning === void 0) {\n        semanticMeaning = getMeaningFromLocation(location);\n      }\n\n      var typeChecker = program.getTypeChecker();\n      var displayParts = [];\n      var documentation;\n      var symbolFlags = symbol.flags;\n      var symbolKind = getSymbolKindOfConstructorPropertyMethodAccessorFunctionOrVar(symbol, symbolFlags, location);\n      var hasAddedSymbolInfo;\n      var type; // Class at constructor site need to be shown as constructor apart from property,method, vars\n\n      if (symbolKind !== ScriptElementKind.unknown || symbolFlags & 32\n      /* Class */\n      || symbolFlags & 8388608\n      /* Alias */\n      ) {\n          // If it is accessor they are allowed only if location is at name of the accessor\n          if (symbolKind === ScriptElementKind.memberGetAccessorElement || symbolKind === ScriptElementKind.memberSetAccessorElement) {\n            symbolKind = ScriptElementKind.memberVariableElement;\n          }\n\n          var signature = void 0;\n          type = typeChecker.getTypeOfSymbolAtLocation(symbol, location);\n\n          if (type) {\n            if (location.parent && location.parent.kind === 169\n            /* PropertyAccessExpression */\n            ) {\n                var right = location.parent.name; // Either the location is on the right of a property access, or on the left and the right is missing\n\n                if (right === location || right && right.getFullWidth() === 0) {\n                  location = location.parent;\n                }\n              } // try get the call/construct signature from the type if it matches\n\n\n            var callExpression = void 0;\n\n            if (location.kind === 171\n            /* CallExpression */\n            || location.kind === 172\n            /* NewExpression */\n            ) {\n                callExpression = location;\n              } else if (isCallExpressionTarget(location) || isNewExpressionTarget(location)) {\n              callExpression = location.parent;\n            }\n\n            if (callExpression) {\n              var candidateSignatures = [];\n              signature = typeChecker.getResolvedSignature(callExpression, candidateSignatures);\n\n              if (!signature && candidateSignatures.length) {\n                // Use the first candidate:\n                signature = candidateSignatures[0];\n              }\n\n              var useConstructSignatures = callExpression.kind === 172\n              /* NewExpression */\n              || callExpression.expression.kind === 95\n              /* SuperKeyword */\n              ;\n              var allSignatures = useConstructSignatures ? type.getConstructSignatures() : type.getCallSignatures();\n\n              if (!ts.contains(allSignatures, signature.target) && !ts.contains(allSignatures, signature)) {\n                // Get the first signature if there is one -- allSignatures may contain\n                // either the original signature or its target, so check for either\n                signature = allSignatures.length ? allSignatures[0] : undefined;\n              }\n\n              if (signature) {\n                if (useConstructSignatures && symbolFlags & 32\n                /* Class */\n                ) {\n                  // Constructor\n                  symbolKind = ScriptElementKind.constructorImplementationElement;\n                  addPrefixForAnyFunctionOrVar(type.symbol, symbolKind);\n                } else if (symbolFlags & 8388608\n                /* Alias */\n                ) {\n                    symbolKind = ScriptElementKind.alias;\n                    pushTypePart(symbolKind);\n                    displayParts.push(ts.spacePart());\n\n                    if (useConstructSignatures) {\n                      displayParts.push(ts.keywordPart(92\n                      /* NewKeyword */\n                      ));\n                      displayParts.push(ts.spacePart());\n                    }\n\n                    addFullSymbolName(symbol);\n                  } else {\n                  addPrefixForAnyFunctionOrVar(symbol, symbolKind);\n                }\n\n                switch (symbolKind) {\n                  case ScriptElementKind.memberVariableElement:\n                  case ScriptElementKind.variableElement:\n                  case ScriptElementKind.constElement:\n                  case ScriptElementKind.letElement:\n                  case ScriptElementKind.parameterElement:\n                  case ScriptElementKind.localVariableElement:\n                    // If it is call or construct signature of lambda's write type name\n                    displayParts.push(ts.punctuationPart(54\n                    /* ColonToken */\n                    ));\n                    displayParts.push(ts.spacePart());\n\n                    if (useConstructSignatures) {\n                      displayParts.push(ts.keywordPart(92\n                      /* NewKeyword */\n                      ));\n                      displayParts.push(ts.spacePart());\n                    }\n\n                    if (!(type.flags & 65536\n                    /* Anonymous */\n                    )) {\n                      ts.addRange(displayParts, ts.symbolToDisplayParts(typeChecker, type.symbol, enclosingDeclaration,\n                      /*meaning*/\n                      undefined, 1\n                      /* WriteTypeParametersOrArguments */\n                      ));\n                    }\n\n                    addSignatureDisplayParts(signature, allSignatures, 8\n                    /* WriteArrowStyleSignature */\n                    );\n                    break;\n\n                  default:\n                    // Just signature\n                    addSignatureDisplayParts(signature, allSignatures);\n                }\n\n                hasAddedSymbolInfo = true;\n              }\n            } else if (isNameOfFunctionDeclaration(location) && !(symbol.flags & 98304\n            /* Accessor */\n            ) || location.kind === 121\n            /* ConstructorKeyword */\n            && location.parent.kind === 145\n            /* Constructor */\n            ) {\n              // get the signature from the declaration and write it\n              var functionDeclaration = location.parent;\n              var allSignatures = functionDeclaration.kind === 145\n              /* Constructor */\n              ? type.getConstructSignatures() : type.getCallSignatures();\n\n              if (!typeChecker.isImplementationOfOverload(functionDeclaration)) {\n                signature = typeChecker.getSignatureFromDeclaration(functionDeclaration);\n              } else {\n                signature = allSignatures[0];\n              }\n\n              if (functionDeclaration.kind === 145\n              /* Constructor */\n              ) {\n                  // show (constructor) Type(...) signature\n                  symbolKind = ScriptElementKind.constructorImplementationElement;\n                  addPrefixForAnyFunctionOrVar(type.symbol, symbolKind);\n                } else {\n                // (function/method) symbol(..signature)\n                addPrefixForAnyFunctionOrVar(functionDeclaration.kind === 148\n                /* CallSignature */\n                && !(type.symbol.flags & 2048\n                /* TypeLiteral */\n                || type.symbol.flags & 4096\n                /* ObjectLiteral */\n                ) ? type.symbol : symbol, symbolKind);\n              }\n\n              addSignatureDisplayParts(signature, allSignatures);\n              hasAddedSymbolInfo = true;\n            }\n          }\n        }\n\n      if (symbolFlags & 32\n      /* Class */\n      && !hasAddedSymbolInfo) {\n        if (ts.getDeclarationOfKind(symbol, 189\n        /* ClassExpression */\n        )) {\n          // Special case for class expressions because we would like to indicate that\n          // the class name is local to the class body (similar to function expression)\n          //      (local class) class <className>\n          pushTypePart(ScriptElementKind.localClassElement);\n        } else {\n          // Class declaration has name which is not local.\n          displayParts.push(ts.keywordPart(73\n          /* ClassKeyword */\n          ));\n        }\n\n        displayParts.push(ts.spacePart());\n        addFullSymbolName(symbol);\n        writeTypeParametersOfSymbol(symbol, sourceFile);\n      }\n\n      if (symbolFlags & 64\n      /* Interface */\n      && semanticMeaning & 2\n      /* Type */\n      ) {\n        addNewLineIfDisplayPartsExist();\n        displayParts.push(ts.keywordPart(107\n        /* InterfaceKeyword */\n        ));\n        displayParts.push(ts.spacePart());\n        addFullSymbolName(symbol);\n        writeTypeParametersOfSymbol(symbol, sourceFile);\n      }\n\n      if (symbolFlags & 524288\n      /* TypeAlias */\n      ) {\n          addNewLineIfDisplayPartsExist();\n          displayParts.push(ts.keywordPart(132\n          /* TypeKeyword */\n          ));\n          displayParts.push(ts.spacePart());\n          addFullSymbolName(symbol);\n          writeTypeParametersOfSymbol(symbol, sourceFile);\n          displayParts.push(ts.spacePart());\n          displayParts.push(ts.operatorPart(56\n          /* EqualsToken */\n          ));\n          displayParts.push(ts.spacePart());\n          ts.addRange(displayParts, ts.typeToDisplayParts(typeChecker, typeChecker.getDeclaredTypeOfSymbol(symbol), enclosingDeclaration));\n        }\n\n      if (symbolFlags & 384\n      /* Enum */\n      ) {\n          addNewLineIfDisplayPartsExist();\n\n          if (ts.forEach(symbol.declarations, ts.isConstEnumDeclaration)) {\n            displayParts.push(ts.keywordPart(74\n            /* ConstKeyword */\n            ));\n            displayParts.push(ts.spacePart());\n          }\n\n          displayParts.push(ts.keywordPart(81\n          /* EnumKeyword */\n          ));\n          displayParts.push(ts.spacePart());\n          addFullSymbolName(symbol);\n        }\n\n      if (symbolFlags & 1536\n      /* Module */\n      ) {\n          addNewLineIfDisplayPartsExist();\n          var declaration = ts.getDeclarationOfKind(symbol, 221\n          /* ModuleDeclaration */\n          );\n          var isNamespace = declaration && declaration.name && declaration.name.kind === 69\n          /* Identifier */\n          ;\n          displayParts.push(ts.keywordPart(isNamespace ? 126\n          /* NamespaceKeyword */\n          : 125\n          /* ModuleKeyword */\n          ));\n          displayParts.push(ts.spacePart());\n          addFullSymbolName(symbol);\n        }\n\n      if (symbolFlags & 262144\n      /* TypeParameter */\n      && semanticMeaning & 2\n      /* Type */\n      ) {\n        addNewLineIfDisplayPartsExist();\n        displayParts.push(ts.punctuationPart(17\n        /* OpenParenToken */\n        ));\n        displayParts.push(ts.textPart(\"type parameter\"));\n        displayParts.push(ts.punctuationPart(18\n        /* CloseParenToken */\n        ));\n        displayParts.push(ts.spacePart());\n        addFullSymbolName(symbol);\n        displayParts.push(ts.spacePart());\n        displayParts.push(ts.keywordPart(90\n        /* InKeyword */\n        ));\n        displayParts.push(ts.spacePart());\n\n        if (symbol.parent) {\n          // Class/Interface type parameter\n          addFullSymbolName(symbol.parent, enclosingDeclaration);\n          writeTypeParametersOfSymbol(symbol.parent, enclosingDeclaration);\n        } else {\n          // Method/function type parameter\n          var declaration = ts.getDeclarationOfKind(symbol, 138\n          /* TypeParameter */\n          );\n          ts.Debug.assert(declaration !== undefined);\n          declaration = declaration.parent;\n\n          if (declaration) {\n            if (ts.isFunctionLikeKind(declaration.kind)) {\n              var signature = typeChecker.getSignatureFromDeclaration(declaration);\n\n              if (declaration.kind === 149\n              /* ConstructSignature */\n              ) {\n                  displayParts.push(ts.keywordPart(92\n                  /* NewKeyword */\n                  ));\n                  displayParts.push(ts.spacePart());\n                } else if (declaration.kind !== 148\n              /* CallSignature */\n              && declaration.name) {\n                addFullSymbolName(declaration.symbol);\n              }\n\n              ts.addRange(displayParts, ts.signatureToDisplayParts(typeChecker, signature, sourceFile, 32\n              /* WriteTypeArgumentsOfSignature */\n              ));\n            } else {\n              // Type alias type parameter\n              // For example\n              //      type list<T> = T[];  // Both T will go through same code path\n              displayParts.push(ts.keywordPart(132\n              /* TypeKeyword */\n              ));\n              displayParts.push(ts.spacePart());\n              addFullSymbolName(declaration.symbol);\n              writeTypeParametersOfSymbol(declaration.symbol, sourceFile);\n            }\n          }\n        }\n      }\n\n      if (symbolFlags & 8\n      /* EnumMember */\n      ) {\n          addPrefixForAnyFunctionOrVar(symbol, \"enum member\");\n          var declaration = symbol.declarations[0];\n\n          if (declaration.kind === 250\n          /* EnumMember */\n          ) {\n              var constantValue = typeChecker.getConstantValue(declaration);\n\n              if (constantValue !== undefined) {\n                displayParts.push(ts.spacePart());\n                displayParts.push(ts.operatorPart(56\n                /* EqualsToken */\n                ));\n                displayParts.push(ts.spacePart());\n                displayParts.push(ts.displayPart(constantValue.toString(), SymbolDisplayPartKind.numericLiteral));\n              }\n            }\n        }\n\n      if (symbolFlags & 8388608\n      /* Alias */\n      ) {\n          addNewLineIfDisplayPartsExist();\n          displayParts.push(ts.keywordPart(89\n          /* ImportKeyword */\n          ));\n          displayParts.push(ts.spacePart());\n          addFullSymbolName(symbol);\n          ts.forEach(symbol.declarations, function (declaration) {\n            if (declaration.kind === 224\n            /* ImportEqualsDeclaration */\n            ) {\n                var importEqualsDeclaration = declaration;\n\n                if (ts.isExternalModuleImportEqualsDeclaration(importEqualsDeclaration)) {\n                  displayParts.push(ts.spacePart());\n                  displayParts.push(ts.operatorPart(56\n                  /* EqualsToken */\n                  ));\n                  displayParts.push(ts.spacePart());\n                  displayParts.push(ts.keywordPart(127\n                  /* RequireKeyword */\n                  ));\n                  displayParts.push(ts.punctuationPart(17\n                  /* OpenParenToken */\n                  ));\n                  displayParts.push(ts.displayPart(ts.getTextOfNode(ts.getExternalModuleImportEqualsDeclarationExpression(importEqualsDeclaration)), SymbolDisplayPartKind.stringLiteral));\n                  displayParts.push(ts.punctuationPart(18\n                  /* CloseParenToken */\n                  ));\n                } else {\n                  var internalAliasSymbol = typeChecker.getSymbolAtLocation(importEqualsDeclaration.moduleReference);\n\n                  if (internalAliasSymbol) {\n                    displayParts.push(ts.spacePart());\n                    displayParts.push(ts.operatorPart(56\n                    /* EqualsToken */\n                    ));\n                    displayParts.push(ts.spacePart());\n                    addFullSymbolName(internalAliasSymbol, enclosingDeclaration);\n                  }\n                }\n\n                return true;\n              }\n          });\n        }\n\n      if (!hasAddedSymbolInfo) {\n        if (symbolKind !== ScriptElementKind.unknown) {\n          if (type) {\n            addPrefixForAnyFunctionOrVar(symbol, symbolKind); // For properties, variables and local vars: show the type\n\n            if (symbolKind === ScriptElementKind.memberVariableElement || symbolFlags & 3\n            /* Variable */\n            || symbolKind === ScriptElementKind.localVariableElement) {\n              displayParts.push(ts.punctuationPart(54\n              /* ColonToken */\n              ));\n              displayParts.push(ts.spacePart()); // If the type is type parameter, format it specially\n\n              if (type.symbol && type.symbol.flags & 262144\n              /* TypeParameter */\n              ) {\n                  var typeParameterParts = ts.mapToDisplayParts(function (writer) {\n                    typeChecker.getSymbolDisplayBuilder().buildTypeParameterDisplay(type, writer, enclosingDeclaration);\n                  });\n                  ts.addRange(displayParts, typeParameterParts);\n                } else {\n                ts.addRange(displayParts, ts.typeToDisplayParts(typeChecker, type, enclosingDeclaration));\n              }\n            } else if (symbolFlags & 16\n            /* Function */\n            || symbolFlags & 8192\n            /* Method */\n            || symbolFlags & 16384\n            /* Constructor */\n            || symbolFlags & 131072\n            /* Signature */\n            || symbolFlags & 98304\n            /* Accessor */\n            || symbolKind === ScriptElementKind.memberFunctionElement) {\n              var allSignatures = type.getCallSignatures();\n              addSignatureDisplayParts(allSignatures[0], allSignatures);\n            }\n          }\n        } else {\n          symbolKind = getSymbolKind(symbol, location);\n        }\n      }\n\n      if (!documentation) {\n        documentation = symbol.getDocumentationComment();\n      }\n\n      return {\n        displayParts: displayParts,\n        documentation: documentation,\n        symbolKind: symbolKind\n      };\n\n      function addNewLineIfDisplayPartsExist() {\n        if (displayParts.length) {\n          displayParts.push(ts.lineBreakPart());\n        }\n      }\n\n      function addFullSymbolName(symbol, enclosingDeclaration) {\n        var fullSymbolDisplayParts = ts.symbolToDisplayParts(typeChecker, symbol, enclosingDeclaration || sourceFile,\n        /*meaning*/\n        undefined, 1\n        /* WriteTypeParametersOrArguments */\n        | 2\n        /* UseOnlyExternalAliasing */\n        );\n        ts.addRange(displayParts, fullSymbolDisplayParts);\n      }\n\n      function addPrefixForAnyFunctionOrVar(symbol, symbolKind) {\n        addNewLineIfDisplayPartsExist();\n\n        if (symbolKind) {\n          pushTypePart(symbolKind);\n          displayParts.push(ts.spacePart());\n          addFullSymbolName(symbol);\n        }\n      }\n\n      function pushTypePart(symbolKind) {\n        switch (symbolKind) {\n          case ScriptElementKind.variableElement:\n          case ScriptElementKind.functionElement:\n          case ScriptElementKind.letElement:\n          case ScriptElementKind.constElement:\n          case ScriptElementKind.constructorImplementationElement:\n            displayParts.push(ts.textOrKeywordPart(symbolKind));\n            return;\n\n          default:\n            displayParts.push(ts.punctuationPart(17\n            /* OpenParenToken */\n            ));\n            displayParts.push(ts.textOrKeywordPart(symbolKind));\n            displayParts.push(ts.punctuationPart(18\n            /* CloseParenToken */\n            ));\n            return;\n        }\n      }\n\n      function addSignatureDisplayParts(signature, allSignatures, flags) {\n        ts.addRange(displayParts, ts.signatureToDisplayParts(typeChecker, signature, enclosingDeclaration, flags | 32\n        /* WriteTypeArgumentsOfSignature */\n        ));\n\n        if (allSignatures.length > 1) {\n          displayParts.push(ts.spacePart());\n          displayParts.push(ts.punctuationPart(17\n          /* OpenParenToken */\n          ));\n          displayParts.push(ts.operatorPart(35\n          /* PlusToken */\n          ));\n          displayParts.push(ts.displayPart((allSignatures.length - 1).toString(), SymbolDisplayPartKind.numericLiteral));\n          displayParts.push(ts.spacePart());\n          displayParts.push(ts.textPart(allSignatures.length === 2 ? \"overload\" : \"overloads\"));\n          displayParts.push(ts.punctuationPart(18\n          /* CloseParenToken */\n          ));\n        }\n\n        documentation = signature.getDocumentationComment();\n      }\n\n      function writeTypeParametersOfSymbol(symbol, enclosingDeclaration) {\n        var typeParameterParts = ts.mapToDisplayParts(function (writer) {\n          typeChecker.getSymbolDisplayBuilder().buildTypeParameterDisplayFromSymbol(symbol, writer, enclosingDeclaration);\n        });\n        ts.addRange(displayParts, typeParameterParts);\n      }\n    }\n\n    function getQuickInfoAtPosition(fileName, position) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      var node = ts.getTouchingPropertyName(sourceFile, position);\n\n      if (!node) {\n        return undefined;\n      }\n\n      if (isLabelName(node)) {\n        return undefined;\n      }\n\n      var typeChecker = program.getTypeChecker();\n      var symbol = typeChecker.getSymbolAtLocation(node);\n\n      if (!symbol || typeChecker.isUnknownSymbol(symbol)) {\n        // Try getting just type at this position and show\n        switch (node.kind) {\n          case 69\n          /* Identifier */\n          :\n          case 169\n          /* PropertyAccessExpression */\n          :\n          case 136\n          /* QualifiedName */\n          :\n          case 97\n          /* ThisKeyword */\n          :\n          case 162\n          /* ThisType */\n          :\n          case 95\n          /* SuperKeyword */\n          :\n            // For the identifiers/this/super etc get the type at position\n            var type = typeChecker.getTypeAtLocation(node);\n\n            if (type) {\n              return {\n                kind: ScriptElementKind.unknown,\n                kindModifiers: ScriptElementKindModifier.none,\n                textSpan: ts.createTextSpan(node.getStart(), node.getWidth()),\n                displayParts: ts.typeToDisplayParts(typeChecker, type, getContainerNode(node)),\n                documentation: type.symbol ? type.symbol.getDocumentationComment() : undefined\n              };\n            }\n\n        }\n\n        return undefined;\n      }\n\n      var displayPartsDocumentationsAndKind = getSymbolDisplayPartsDocumentationAndSymbolKind(symbol, sourceFile, getContainerNode(node), node);\n      return {\n        kind: displayPartsDocumentationsAndKind.symbolKind,\n        kindModifiers: getSymbolModifiers(symbol),\n        textSpan: ts.createTextSpan(node.getStart(), node.getWidth()),\n        displayParts: displayPartsDocumentationsAndKind.displayParts,\n        documentation: displayPartsDocumentationsAndKind.documentation\n      };\n    }\n\n    function createDefinitionInfo(node, symbolKind, symbolName, containerName) {\n      return {\n        fileName: node.getSourceFile().fileName,\n        textSpan: ts.createTextSpanFromBounds(node.getStart(), node.getEnd()),\n        kind: symbolKind,\n        name: symbolName,\n        containerKind: undefined,\n        containerName: containerName\n      };\n    }\n\n    function getDefinitionFromSymbol(symbol, node) {\n      var typeChecker = program.getTypeChecker();\n      var result = [];\n      var declarations = symbol.getDeclarations();\n      var symbolName = typeChecker.symbolToString(symbol); // Do not get scoped name, just the name of the symbol\n\n      var symbolKind = getSymbolKind(symbol, node);\n      var containerSymbol = symbol.parent;\n      var containerName = containerSymbol ? typeChecker.symbolToString(containerSymbol, node) : \"\";\n\n      if (!tryAddConstructSignature(symbol, node, symbolKind, symbolName, containerName, result) && !tryAddCallSignature(symbol, node, symbolKind, symbolName, containerName, result)) {\n        // Just add all the declarations.\n        ts.forEach(declarations, function (declaration) {\n          result.push(createDefinitionInfo(declaration, symbolKind, symbolName, containerName));\n        });\n      }\n\n      return result;\n\n      function tryAddConstructSignature(symbol, location, symbolKind, symbolName, containerName, result) {\n        // Applicable only if we are in a new expression, or we are on a constructor declaration\n        // and in either case the symbol has a construct signature definition, i.e. class\n        if (isNewExpressionTarget(location) || location.kind === 121\n        /* ConstructorKeyword */\n        ) {\n            if (symbol.flags & 32\n            /* Class */\n            ) {\n                // Find the first class-like declaration and try to get the construct signature.\n                for (var _i = 0, _a = symbol.getDeclarations(); _i < _a.length; _i++) {\n                  var declaration = _a[_i];\n\n                  if (ts.isClassLike(declaration)) {\n                    return tryAddSignature(declaration.members,\n                    /*selectConstructors*/\n                    true, symbolKind, symbolName, containerName, result);\n                  }\n                }\n\n                ts.Debug.fail(\"Expected declaration to have at least one class-like declaration\");\n              }\n          }\n\n        return false;\n      }\n\n      function tryAddCallSignature(symbol, location, symbolKind, symbolName, containerName, result) {\n        if (isCallExpressionTarget(location) || isNewExpressionTarget(location) || isNameOfFunctionDeclaration(location)) {\n          return tryAddSignature(symbol.declarations,\n          /*selectConstructors*/\n          false, symbolKind, symbolName, containerName, result);\n        }\n\n        return false;\n      }\n\n      function tryAddSignature(signatureDeclarations, selectConstructors, symbolKind, symbolName, containerName, result) {\n        var declarations = [];\n        var definition;\n        ts.forEach(signatureDeclarations, function (d) {\n          if (selectConstructors && d.kind === 145\n          /* Constructor */\n          || !selectConstructors && (d.kind === 216\n          /* FunctionDeclaration */\n          || d.kind === 144\n          /* MethodDeclaration */\n          || d.kind === 143\n          /* MethodSignature */\n          )) {\n            declarations.push(d);\n            if (d.body) definition = d;\n          }\n        });\n\n        if (definition) {\n          result.push(createDefinitionInfo(definition, symbolKind, symbolName, containerName));\n          return true;\n        } else if (declarations.length) {\n          result.push(createDefinitionInfo(ts.lastOrUndefined(declarations), symbolKind, symbolName, containerName));\n          return true;\n        }\n\n        return false;\n      }\n    } /// Goto definition\n\n\n    function getDefinitionAtPosition(fileName, position) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      var node = ts.getTouchingPropertyName(sourceFile, position);\n\n      if (!node) {\n        return undefined;\n      } // Labels\n\n\n      if (isJumpStatementTarget(node)) {\n        var labelName = node.text;\n        var label = getTargetLabel(node.parent, node.text);\n        return label ? [createDefinitionInfo(label, ScriptElementKind.label, labelName,\n        /*containerName*/\n        undefined)] : undefined;\n      } /// Triple slash reference comments\n\n\n      var comment = ts.forEach(sourceFile.referencedFiles, function (r) {\n        return r.pos <= position && position < r.end ? r : undefined;\n      });\n\n      if (comment) {\n        var referenceFile = ts.tryResolveScriptReference(program, sourceFile, comment);\n\n        if (referenceFile) {\n          return [{\n            fileName: referenceFile.fileName,\n            textSpan: ts.createTextSpanFromBounds(0, 0),\n            kind: ScriptElementKind.scriptElement,\n            name: comment.fileName,\n            containerName: undefined,\n            containerKind: undefined\n          }];\n        }\n\n        return undefined;\n      }\n\n      var typeChecker = program.getTypeChecker();\n      var symbol = typeChecker.getSymbolAtLocation(node); // Could not find a symbol e.g. node is string or number keyword,\n      // or the symbol was an internal symbol and does not have a declaration e.g. undefined symbol\n\n      if (!symbol) {\n        return undefined;\n      } // If this is an alias, and the request came at the declaration location\n      // get the aliased symbol instead. This allows for goto def on an import e.g.\n      //   import {A, B} from \"mod\";\n      // to jump to the implementation directly.\n\n\n      if (symbol.flags & 8388608\n      /* Alias */\n      ) {\n          var declaration = symbol.declarations[0];\n\n          if (node.kind === 69\n          /* Identifier */\n          && node.parent === declaration) {\n            symbol = typeChecker.getAliasedSymbol(symbol);\n          }\n        } // Because name in short-hand property assignment has two different meanings: property name and property value,\n      // using go-to-definition at such position should go to the variable declaration of the property value rather than\n      // go to the declaration of the property name (in this case stay at the same position). However, if go-to-definition\n      // is performed at the location of property access, we would like to go to definition of the property in the short-hand\n      // assignment. This case and others are handled by the following code.\n\n\n      if (node.parent.kind === 249\n      /* ShorthandPropertyAssignment */\n      ) {\n          var shorthandSymbol = typeChecker.getShorthandAssignmentValueSymbol(symbol.valueDeclaration);\n\n          if (!shorthandSymbol) {\n            return [];\n          }\n\n          var shorthandDeclarations = shorthandSymbol.getDeclarations();\n          var shorthandSymbolKind_1 = getSymbolKind(shorthandSymbol, node);\n          var shorthandSymbolName_1 = typeChecker.symbolToString(shorthandSymbol);\n          var shorthandContainerName_1 = typeChecker.symbolToString(symbol.parent, node);\n          return ts.map(shorthandDeclarations, function (declaration) {\n            return createDefinitionInfo(declaration, shorthandSymbolKind_1, shorthandSymbolName_1, shorthandContainerName_1);\n          });\n        }\n\n      return getDefinitionFromSymbol(symbol, node);\n    } /// Goto type\n\n\n    function getTypeDefinitionAtPosition(fileName, position) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      var node = ts.getTouchingPropertyName(sourceFile, position);\n\n      if (!node) {\n        return undefined;\n      }\n\n      var typeChecker = program.getTypeChecker();\n      var symbol = typeChecker.getSymbolAtLocation(node);\n\n      if (!symbol) {\n        return undefined;\n      }\n\n      var type = typeChecker.getTypeOfSymbolAtLocation(symbol, node);\n\n      if (!type) {\n        return undefined;\n      }\n\n      if (type.flags & 16384\n      /* Union */\n      ) {\n          var result_4 = [];\n          ts.forEach(type.types, function (t) {\n            if (t.symbol) {\n              ts.addRange(\n              /*to*/\n              result_4,\n              /*from*/\n              getDefinitionFromSymbol(t.symbol, node));\n            }\n          });\n          return result_4;\n        }\n\n      if (!type.symbol) {\n        return undefined;\n      }\n\n      return getDefinitionFromSymbol(type.symbol, node);\n    }\n\n    function getOccurrencesAtPosition(fileName, position) {\n      var results = getOccurrencesAtPositionCore(fileName, position);\n\n      if (results) {\n        var sourceFile_2 = getCanonicalFileName(ts.normalizeSlashes(fileName)); // Get occurrences only supports reporting occurrences for the file queried.  So\n        // filter down to that list.\n\n        results = ts.filter(results, function (r) {\n          return getCanonicalFileName(ts.normalizeSlashes(r.fileName)) === sourceFile_2;\n        });\n      }\n\n      return results;\n    }\n\n    function getDocumentHighlights(fileName, position, filesToSearch) {\n      synchronizeHostData();\n      filesToSearch = ts.map(filesToSearch, ts.normalizeSlashes);\n      var sourceFilesToSearch = ts.filter(program.getSourceFiles(), function (f) {\n        return ts.contains(filesToSearch, f.fileName);\n      });\n      var sourceFile = getValidSourceFile(fileName);\n      var node = ts.getTouchingWord(sourceFile, position);\n\n      if (!node) {\n        return undefined;\n      }\n\n      return getSemanticDocumentHighlights(node) || getSyntacticDocumentHighlights(node);\n\n      function getHighlightSpanForNode(node) {\n        var start = node.getStart();\n        var end = node.getEnd();\n        return {\n          fileName: sourceFile.fileName,\n          textSpan: ts.createTextSpanFromBounds(start, end),\n          kind: HighlightSpanKind.none\n        };\n      }\n\n      function getSemanticDocumentHighlights(node) {\n        if (node.kind === 69\n        /* Identifier */\n        || node.kind === 97\n        /* ThisKeyword */\n        || node.kind === 162\n        /* ThisType */\n        || node.kind === 95\n        /* SuperKeyword */\n        || isLiteralNameOfPropertyDeclarationOrIndexAccess(node) || isNameOfExternalModuleImportOrDeclaration(node)) {\n          var referencedSymbols = getReferencedSymbolsForNode(node, sourceFilesToSearch,\n          /*findInStrings*/\n          false,\n          /*findInComments*/\n          false);\n          return convertReferencedSymbols(referencedSymbols);\n        }\n\n        return undefined;\n\n        function convertReferencedSymbols(referencedSymbols) {\n          if (!referencedSymbols) {\n            return undefined;\n          }\n\n          var fileNameToDocumentHighlights = {};\n          var result = [];\n\n          for (var _i = 0, referencedSymbols_1 = referencedSymbols; _i < referencedSymbols_1.length; _i++) {\n            var referencedSymbol = referencedSymbols_1[_i];\n\n            for (var _a = 0, _b = referencedSymbol.references; _a < _b.length; _a++) {\n              var referenceEntry = _b[_a];\n              var fileName_1 = referenceEntry.fileName;\n              var documentHighlights = ts.getProperty(fileNameToDocumentHighlights, fileName_1);\n\n              if (!documentHighlights) {\n                documentHighlights = {\n                  fileName: fileName_1,\n                  highlightSpans: []\n                };\n                fileNameToDocumentHighlights[fileName_1] = documentHighlights;\n                result.push(documentHighlights);\n              }\n\n              documentHighlights.highlightSpans.push({\n                textSpan: referenceEntry.textSpan,\n                kind: referenceEntry.isWriteAccess ? HighlightSpanKind.writtenReference : HighlightSpanKind.reference\n              });\n            }\n          }\n\n          return result;\n        }\n      }\n\n      function getSyntacticDocumentHighlights(node) {\n        var fileName = sourceFile.fileName;\n        var highlightSpans = getHighlightSpans(node);\n\n        if (!highlightSpans || highlightSpans.length === 0) {\n          return undefined;\n        }\n\n        return [{\n          fileName: fileName,\n          highlightSpans: highlightSpans\n        }]; // returns true if 'node' is defined and has a matching 'kind'.\n\n        function hasKind(node, kind) {\n          return node !== undefined && node.kind === kind;\n        } // Null-propagating 'parent' function.\n\n\n        function parent(node) {\n          return node && node.parent;\n        }\n\n        function getHighlightSpans(node) {\n          if (node) {\n            switch (node.kind) {\n              case 88\n              /* IfKeyword */\n              :\n              case 80\n              /* ElseKeyword */\n              :\n                if (hasKind(node.parent, 199\n                /* IfStatement */\n                )) {\n                  return getIfElseOccurrences(node.parent);\n                }\n\n                break;\n\n              case 94\n              /* ReturnKeyword */\n              :\n                if (hasKind(node.parent, 207\n                /* ReturnStatement */\n                )) {\n                  return getReturnOccurrences(node.parent);\n                }\n\n                break;\n\n              case 98\n              /* ThrowKeyword */\n              :\n                if (hasKind(node.parent, 211\n                /* ThrowStatement */\n                )) {\n                  return getThrowOccurrences(node.parent);\n                }\n\n                break;\n\n              case 72\n              /* CatchKeyword */\n              :\n                if (hasKind(parent(parent(node)), 212\n                /* TryStatement */\n                )) {\n                  return getTryCatchFinallyOccurrences(node.parent.parent);\n                }\n\n                break;\n\n              case 100\n              /* TryKeyword */\n              :\n              case 85\n              /* FinallyKeyword */\n              :\n                if (hasKind(parent(node), 212\n                /* TryStatement */\n                )) {\n                  return getTryCatchFinallyOccurrences(node.parent);\n                }\n\n                break;\n\n              case 96\n              /* SwitchKeyword */\n              :\n                if (hasKind(node.parent, 209\n                /* SwitchStatement */\n                )) {\n                  return getSwitchCaseDefaultOccurrences(node.parent);\n                }\n\n                break;\n\n              case 71\n              /* CaseKeyword */\n              :\n              case 77\n              /* DefaultKeyword */\n              :\n                if (hasKind(parent(parent(parent(node))), 209\n                /* SwitchStatement */\n                )) {\n                  return getSwitchCaseDefaultOccurrences(node.parent.parent.parent);\n                }\n\n                break;\n\n              case 70\n              /* BreakKeyword */\n              :\n              case 75\n              /* ContinueKeyword */\n              :\n                if (hasKind(node.parent, 206\n                /* BreakStatement */\n                ) || hasKind(node.parent, 205\n                /* ContinueStatement */\n                )) {\n                  return getBreakOrContinueStatementOccurrences(node.parent);\n                }\n\n                break;\n\n              case 86\n              /* ForKeyword */\n              :\n                if (hasKind(node.parent, 202\n                /* ForStatement */\n                ) || hasKind(node.parent, 203\n                /* ForInStatement */\n                ) || hasKind(node.parent, 204\n                /* ForOfStatement */\n                )) {\n                  return getLoopBreakContinueOccurrences(node.parent);\n                }\n\n                break;\n\n              case 104\n              /* WhileKeyword */\n              :\n              case 79\n              /* DoKeyword */\n              :\n                if (hasKind(node.parent, 201\n                /* WhileStatement */\n                ) || hasKind(node.parent, 200\n                /* DoStatement */\n                )) {\n                  return getLoopBreakContinueOccurrences(node.parent);\n                }\n\n                break;\n\n              case 121\n              /* ConstructorKeyword */\n              :\n                if (hasKind(node.parent, 145\n                /* Constructor */\n                )) {\n                  return getConstructorOccurrences(node.parent);\n                }\n\n                break;\n\n              case 123\n              /* GetKeyword */\n              :\n              case 129\n              /* SetKeyword */\n              :\n                if (hasKind(node.parent, 146\n                /* GetAccessor */\n                ) || hasKind(node.parent, 147\n                /* SetAccessor */\n                )) {\n                  return getGetAndSetOccurrences(node.parent);\n                }\n\n                break;\n\n              default:\n                if (ts.isModifierKind(node.kind) && node.parent && (ts.isDeclaration(node.parent) || node.parent.kind === 196\n                /* VariableStatement */\n                )) {\n                  return getModifierOccurrences(node.kind, node.parent);\n                }\n\n            }\n          }\n\n          return undefined;\n        }\n        /**\n         * Aggregates all throw-statements within this node *without* crossing\n         * into function boundaries and try-blocks with catch-clauses.\n         */\n\n\n        function aggregateOwnedThrowStatements(node) {\n          var statementAccumulator = [];\n          aggregate(node);\n          return statementAccumulator;\n\n          function aggregate(node) {\n            if (node.kind === 211\n            /* ThrowStatement */\n            ) {\n                statementAccumulator.push(node);\n              } else if (node.kind === 212\n            /* TryStatement */\n            ) {\n                var tryStatement = node;\n\n                if (tryStatement.catchClause) {\n                  aggregate(tryStatement.catchClause);\n                } else {\n                  // Exceptions thrown within a try block lacking a catch clause\n                  // are \"owned\" in the current context.\n                  aggregate(tryStatement.tryBlock);\n                }\n\n                if (tryStatement.finallyBlock) {\n                  aggregate(tryStatement.finallyBlock);\n                }\n              } else if (!ts.isFunctionLike(node)) {\n              ts.forEachChild(node, aggregate);\n            }\n          }\n        }\n        /**\n         * For lack of a better name, this function takes a throw statement and returns the\n         * nearest ancestor that is a try-block (whose try statement has a catch clause),\n         * function-block, or source file.\n         */\n\n\n        function getThrowStatementOwner(throwStatement) {\n          var child = throwStatement;\n\n          while (child.parent) {\n            var parent_14 = child.parent;\n\n            if (ts.isFunctionBlock(parent_14) || parent_14.kind === 251\n            /* SourceFile */\n            ) {\n                return parent_14;\n              } // A throw-statement is only owned by a try-statement if the try-statement has\n            // a catch clause, and if the throw-statement occurs within the try block.\n\n\n            if (parent_14.kind === 212\n            /* TryStatement */\n            ) {\n                var tryStatement = parent_14;\n\n                if (tryStatement.tryBlock === child && tryStatement.catchClause) {\n                  return child;\n                }\n              }\n\n            child = parent_14;\n          }\n\n          return undefined;\n        }\n\n        function aggregateAllBreakAndContinueStatements(node) {\n          var statementAccumulator = [];\n          aggregate(node);\n          return statementAccumulator;\n\n          function aggregate(node) {\n            if (node.kind === 206\n            /* BreakStatement */\n            || node.kind === 205\n            /* ContinueStatement */\n            ) {\n                statementAccumulator.push(node);\n              } else if (!ts.isFunctionLike(node)) {\n              ts.forEachChild(node, aggregate);\n            }\n          }\n        }\n\n        function ownsBreakOrContinueStatement(owner, statement) {\n          var actualOwner = getBreakOrContinueOwner(statement);\n          return actualOwner && actualOwner === owner;\n        }\n\n        function getBreakOrContinueOwner(statement) {\n          for (var node_2 = statement.parent; node_2; node_2 = node_2.parent) {\n            switch (node_2.kind) {\n              case 209\n              /* SwitchStatement */\n              :\n                if (statement.kind === 205\n                /* ContinueStatement */\n                ) {\n                    continue;\n                  }\n\n              // Fall through.\n\n              case 202\n              /* ForStatement */\n              :\n              case 203\n              /* ForInStatement */\n              :\n              case 204\n              /* ForOfStatement */\n              :\n              case 201\n              /* WhileStatement */\n              :\n              case 200\n              /* DoStatement */\n              :\n                if (!statement.label || isLabeledBy(node_2, statement.label.text)) {\n                  return node_2;\n                }\n\n                break;\n\n              default:\n                // Don't cross function boundaries.\n                if (ts.isFunctionLike(node_2)) {\n                  return undefined;\n                }\n\n                break;\n            }\n          }\n\n          return undefined;\n        }\n\n        function getModifierOccurrences(modifier, declaration) {\n          var container = declaration.parent; // Make sure we only highlight the keyword when it makes sense to do so.\n\n          if (ts.isAccessibilityModifier(modifier)) {\n            if (!(container.kind === 217\n            /* ClassDeclaration */\n            || container.kind === 189\n            /* ClassExpression */\n            || declaration.kind === 139\n            /* Parameter */\n            && hasKind(container, 145\n            /* Constructor */\n            ))) {\n              return undefined;\n            }\n          } else if (modifier === 113\n          /* StaticKeyword */\n          ) {\n              if (!(container.kind === 217\n              /* ClassDeclaration */\n              || container.kind === 189\n              /* ClassExpression */\n              )) {\n                return undefined;\n              }\n            } else if (modifier === 82\n          /* ExportKeyword */\n          || modifier === 122\n          /* DeclareKeyword */\n          ) {\n              if (!(container.kind === 222\n              /* ModuleBlock */\n              || container.kind === 251\n              /* SourceFile */\n              )) {\n                return undefined;\n              }\n            } else if (modifier === 115\n          /* AbstractKeyword */\n          ) {\n              if (!(container.kind === 217\n              /* ClassDeclaration */\n              || declaration.kind === 217\n              /* ClassDeclaration */\n              )) {\n                return undefined;\n              }\n            } else {\n            // unsupported modifier\n            return undefined;\n          }\n\n          var keywords = [];\n          var modifierFlag = getFlagFromModifier(modifier);\n          var nodes;\n\n          switch (container.kind) {\n            case 222\n            /* ModuleBlock */\n            :\n            case 251\n            /* SourceFile */\n            :\n              // Container is either a class declaration or the declaration is a classDeclaration\n              if (modifierFlag & 128\n              /* Abstract */\n              ) {\n                  nodes = declaration.members.concat(declaration);\n                } else {\n                nodes = container.statements;\n              }\n\n              break;\n\n            case 145\n            /* Constructor */\n            :\n              nodes = container.parameters.concat(container.parent.members);\n              break;\n\n            case 217\n            /* ClassDeclaration */\n            :\n            case 189\n            /* ClassExpression */\n            :\n              nodes = container.members; // If we're an accessibility modifier, we're in an instance member and should search\n              // the constructor's parameter list for instance members as well.\n\n              if (modifierFlag & 56\n              /* AccessibilityModifier */\n              ) {\n                  var constructor = ts.forEach(container.members, function (member) {\n                    return member.kind === 145\n                    /* Constructor */\n                    && member;\n                  });\n\n                  if (constructor) {\n                    nodes = nodes.concat(constructor.parameters);\n                  }\n                } else if (modifierFlag & 128\n              /* Abstract */\n              ) {\n                  nodes = nodes.concat(container);\n                }\n\n              break;\n\n            default:\n              ts.Debug.fail(\"Invalid container kind.\");\n          }\n\n          ts.forEach(nodes, function (node) {\n            if (node.modifiers && node.flags & modifierFlag) {\n              ts.forEach(node.modifiers, function (child) {\n                return pushKeywordIf(keywords, child, modifier);\n              });\n            }\n          });\n          return ts.map(keywords, getHighlightSpanForNode);\n\n          function getFlagFromModifier(modifier) {\n            switch (modifier) {\n              case 112\n              /* PublicKeyword */\n              :\n                return 8\n                /* Public */\n                ;\n\n              case 110\n              /* PrivateKeyword */\n              :\n                return 16\n                /* Private */\n                ;\n\n              case 111\n              /* ProtectedKeyword */\n              :\n                return 32\n                /* Protected */\n                ;\n\n              case 113\n              /* StaticKeyword */\n              :\n                return 64\n                /* Static */\n                ;\n\n              case 82\n              /* ExportKeyword */\n              :\n                return 2\n                /* Export */\n                ;\n\n              case 122\n              /* DeclareKeyword */\n              :\n                return 4\n                /* Ambient */\n                ;\n\n              case 115\n              /* AbstractKeyword */\n              :\n                return 128\n                /* Abstract */\n                ;\n\n              default:\n                ts.Debug.fail();\n            }\n          }\n        }\n\n        function pushKeywordIf(keywordList, token) {\n          var expected = [];\n\n          for (var _i = 2; _i < arguments.length; _i++) {\n            expected[_i - 2] = arguments[_i];\n          }\n\n          if (token && ts.contains(expected, token.kind)) {\n            keywordList.push(token);\n            return true;\n          }\n\n          return false;\n        }\n\n        function getGetAndSetOccurrences(accessorDeclaration) {\n          var keywords = [];\n          tryPushAccessorKeyword(accessorDeclaration.symbol, 146\n          /* GetAccessor */\n          );\n          tryPushAccessorKeyword(accessorDeclaration.symbol, 147\n          /* SetAccessor */\n          );\n          return ts.map(keywords, getHighlightSpanForNode);\n\n          function tryPushAccessorKeyword(accessorSymbol, accessorKind) {\n            var accessor = ts.getDeclarationOfKind(accessorSymbol, accessorKind);\n\n            if (accessor) {\n              ts.forEach(accessor.getChildren(), function (child) {\n                return pushKeywordIf(keywords, child, 123\n                /* GetKeyword */\n                , 129\n                /* SetKeyword */\n                );\n              });\n            }\n          }\n        }\n\n        function getConstructorOccurrences(constructorDeclaration) {\n          var declarations = constructorDeclaration.symbol.getDeclarations();\n          var keywords = [];\n          ts.forEach(declarations, function (declaration) {\n            ts.forEach(declaration.getChildren(), function (token) {\n              return pushKeywordIf(keywords, token, 121\n              /* ConstructorKeyword */\n              );\n            });\n          });\n          return ts.map(keywords, getHighlightSpanForNode);\n        }\n\n        function getLoopBreakContinueOccurrences(loopNode) {\n          var keywords = [];\n\n          if (pushKeywordIf(keywords, loopNode.getFirstToken(), 86\n          /* ForKeyword */\n          , 104\n          /* WhileKeyword */\n          , 79\n          /* DoKeyword */\n          )) {\n            // If we succeeded and got a do-while loop, then start looking for a 'while' keyword.\n            if (loopNode.kind === 200\n            /* DoStatement */\n            ) {\n                var loopTokens = loopNode.getChildren();\n\n                for (var i = loopTokens.length - 1; i >= 0; i--) {\n                  if (pushKeywordIf(keywords, loopTokens[i], 104\n                  /* WhileKeyword */\n                  )) {\n                    break;\n                  }\n                }\n              }\n          }\n\n          var breaksAndContinues = aggregateAllBreakAndContinueStatements(loopNode.statement);\n          ts.forEach(breaksAndContinues, function (statement) {\n            if (ownsBreakOrContinueStatement(loopNode, statement)) {\n              pushKeywordIf(keywords, statement.getFirstToken(), 70\n              /* BreakKeyword */\n              , 75\n              /* ContinueKeyword */\n              );\n            }\n          });\n          return ts.map(keywords, getHighlightSpanForNode);\n        }\n\n        function getBreakOrContinueStatementOccurrences(breakOrContinueStatement) {\n          var owner = getBreakOrContinueOwner(breakOrContinueStatement);\n\n          if (owner) {\n            switch (owner.kind) {\n              case 202\n              /* ForStatement */\n              :\n              case 203\n              /* ForInStatement */\n              :\n              case 204\n              /* ForOfStatement */\n              :\n              case 200\n              /* DoStatement */\n              :\n              case 201\n              /* WhileStatement */\n              :\n                return getLoopBreakContinueOccurrences(owner);\n\n              case 209\n              /* SwitchStatement */\n              :\n                return getSwitchCaseDefaultOccurrences(owner);\n            }\n          }\n\n          return undefined;\n        }\n\n        function getSwitchCaseDefaultOccurrences(switchStatement) {\n          var keywords = [];\n          pushKeywordIf(keywords, switchStatement.getFirstToken(), 96\n          /* SwitchKeyword */\n          ); // Go through each clause in the switch statement, collecting the 'case'/'default' keywords.\n\n          ts.forEach(switchStatement.caseBlock.clauses, function (clause) {\n            pushKeywordIf(keywords, clause.getFirstToken(), 71\n            /* CaseKeyword */\n            , 77\n            /* DefaultKeyword */\n            );\n            var breaksAndContinues = aggregateAllBreakAndContinueStatements(clause);\n            ts.forEach(breaksAndContinues, function (statement) {\n              if (ownsBreakOrContinueStatement(switchStatement, statement)) {\n                pushKeywordIf(keywords, statement.getFirstToken(), 70\n                /* BreakKeyword */\n                );\n              }\n            });\n          });\n          return ts.map(keywords, getHighlightSpanForNode);\n        }\n\n        function getTryCatchFinallyOccurrences(tryStatement) {\n          var keywords = [];\n          pushKeywordIf(keywords, tryStatement.getFirstToken(), 100\n          /* TryKeyword */\n          );\n\n          if (tryStatement.catchClause) {\n            pushKeywordIf(keywords, tryStatement.catchClause.getFirstToken(), 72\n            /* CatchKeyword */\n            );\n          }\n\n          if (tryStatement.finallyBlock) {\n            var finallyKeyword = ts.findChildOfKind(tryStatement, 85\n            /* FinallyKeyword */\n            , sourceFile);\n            pushKeywordIf(keywords, finallyKeyword, 85\n            /* FinallyKeyword */\n            );\n          }\n\n          return ts.map(keywords, getHighlightSpanForNode);\n        }\n\n        function getThrowOccurrences(throwStatement) {\n          var owner = getThrowStatementOwner(throwStatement);\n\n          if (!owner) {\n            return undefined;\n          }\n\n          var keywords = [];\n          ts.forEach(aggregateOwnedThrowStatements(owner), function (throwStatement) {\n            pushKeywordIf(keywords, throwStatement.getFirstToken(), 98\n            /* ThrowKeyword */\n            );\n          }); // If the \"owner\" is a function, then we equate 'return' and 'throw' statements in their\n          // ability to \"jump out\" of the function, and include occurrences for both.\n\n          if (ts.isFunctionBlock(owner)) {\n            ts.forEachReturnStatement(owner, function (returnStatement) {\n              pushKeywordIf(keywords, returnStatement.getFirstToken(), 94\n              /* ReturnKeyword */\n              );\n            });\n          }\n\n          return ts.map(keywords, getHighlightSpanForNode);\n        }\n\n        function getReturnOccurrences(returnStatement) {\n          var func = ts.getContainingFunction(returnStatement); // If we didn't find a containing function with a block body, bail out.\n\n          if (!(func && hasKind(func.body, 195\n          /* Block */\n          ))) {\n            return undefined;\n          }\n\n          var keywords = [];\n          ts.forEachReturnStatement(func.body, function (returnStatement) {\n            pushKeywordIf(keywords, returnStatement.getFirstToken(), 94\n            /* ReturnKeyword */\n            );\n          }); // Include 'throw' statements that do not occur within a try block.\n\n          ts.forEach(aggregateOwnedThrowStatements(func.body), function (throwStatement) {\n            pushKeywordIf(keywords, throwStatement.getFirstToken(), 98\n            /* ThrowKeyword */\n            );\n          });\n          return ts.map(keywords, getHighlightSpanForNode);\n        }\n\n        function getIfElseOccurrences(ifStatement) {\n          var keywords = []; // Traverse upwards through all parent if-statements linked by their else-branches.\n\n          while (hasKind(ifStatement.parent, 199\n          /* IfStatement */\n          ) && ifStatement.parent.elseStatement === ifStatement) {\n            ifStatement = ifStatement.parent;\n          } // Now traverse back down through the else branches, aggregating if/else keywords of if-statements.\n\n\n          while (ifStatement) {\n            var children = ifStatement.getChildren();\n            pushKeywordIf(keywords, children[0], 88\n            /* IfKeyword */\n            ); // Generally the 'else' keyword is second-to-last, so we traverse backwards.\n\n            for (var i = children.length - 1; i >= 0; i--) {\n              if (pushKeywordIf(keywords, children[i], 80\n              /* ElseKeyword */\n              )) {\n                break;\n              }\n            }\n\n            if (!hasKind(ifStatement.elseStatement, 199\n            /* IfStatement */\n            )) {\n              break;\n            }\n\n            ifStatement = ifStatement.elseStatement;\n          }\n\n          var result = []; // We'd like to highlight else/ifs together if they are only separated by whitespace\n          // (i.e. the keywords are separated by no comments, no newlines).\n\n          for (var i = 0; i < keywords.length; i++) {\n            if (keywords[i].kind === 80\n            /* ElseKeyword */\n            && i < keywords.length - 1) {\n              var elseKeyword = keywords[i];\n              var ifKeyword = keywords[i + 1]; // this *should* always be an 'if' keyword.\n\n              var shouldCombindElseAndIf = true; // Avoid recalculating getStart() by iterating backwards.\n\n              for (var j = ifKeyword.getStart() - 1; j >= elseKeyword.end; j--) {\n                if (!ts.isWhiteSpace(sourceFile.text.charCodeAt(j))) {\n                  shouldCombindElseAndIf = false;\n                  break;\n                }\n              }\n\n              if (shouldCombindElseAndIf) {\n                result.push({\n                  fileName: fileName,\n                  textSpan: ts.createTextSpanFromBounds(elseKeyword.getStart(), ifKeyword.end),\n                  kind: HighlightSpanKind.reference\n                });\n                i++; // skip the next keyword\n\n                continue;\n              }\n            } // Ordinary case: just highlight the keyword.\n\n\n            result.push(getHighlightSpanForNode(keywords[i]));\n          }\n\n          return result;\n        }\n      }\n    } /// References and Occurrences\n\n\n    function getOccurrencesAtPositionCore(fileName, position) {\n      synchronizeHostData();\n      return convertDocumentHighlights(getDocumentHighlights(fileName, position, [fileName]));\n\n      function convertDocumentHighlights(documentHighlights) {\n        if (!documentHighlights) {\n          return undefined;\n        }\n\n        var result = [];\n\n        for (var _i = 0, documentHighlights_1 = documentHighlights; _i < documentHighlights_1.length; _i++) {\n          var entry = documentHighlights_1[_i];\n\n          for (var _a = 0, _b = entry.highlightSpans; _a < _b.length; _a++) {\n            var highlightSpan = _b[_a];\n            result.push({\n              fileName: entry.fileName,\n              textSpan: highlightSpan.textSpan,\n              isWriteAccess: highlightSpan.kind === HighlightSpanKind.writtenReference\n            });\n          }\n        }\n\n        return result;\n      }\n    }\n\n    function convertReferences(referenceSymbols) {\n      if (!referenceSymbols) {\n        return undefined;\n      }\n\n      var referenceEntries = [];\n\n      for (var _i = 0, referenceSymbols_1 = referenceSymbols; _i < referenceSymbols_1.length; _i++) {\n        var referenceSymbol = referenceSymbols_1[_i];\n        ts.addRange(referenceEntries, referenceSymbol.references);\n      }\n\n      return referenceEntries;\n    }\n\n    function findRenameLocations(fileName, position, findInStrings, findInComments) {\n      var referencedSymbols = findReferencedSymbols(fileName, position, findInStrings, findInComments);\n      return convertReferences(referencedSymbols);\n    }\n\n    function getReferencesAtPosition(fileName, position) {\n      var referencedSymbols = findReferencedSymbols(fileName, position,\n      /*findInStrings*/\n      false,\n      /*findInComments*/\n      false);\n      return convertReferences(referencedSymbols);\n    }\n\n    function findReferences(fileName, position) {\n      var referencedSymbols = findReferencedSymbols(fileName, position,\n      /*findInStrings*/\n      false,\n      /*findInComments*/\n      false); // Only include referenced symbols that have a valid definition.\n\n      return ts.filter(referencedSymbols, function (rs) {\n        return !!rs.definition;\n      });\n    }\n\n    function findReferencedSymbols(fileName, position, findInStrings, findInComments) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      var node = ts.getTouchingPropertyName(sourceFile, position);\n\n      if (!node) {\n        return undefined;\n      }\n\n      if (node.kind !== 69\n      /* Identifier */\n      && // TODO (drosen): This should be enabled in a later release - currently breaks rename.\n      // node.kind !== SyntaxKind.ThisKeyword &&\n      // node.kind !== SyntaxKind.SuperKeyword &&\n      !isLiteralNameOfPropertyDeclarationOrIndexAccess(node) && !isNameOfExternalModuleImportOrDeclaration(node)) {\n        return undefined;\n      }\n\n      ts.Debug.assert(node.kind === 69\n      /* Identifier */\n      || node.kind === 8\n      /* NumericLiteral */\n      || node.kind === 9\n      /* StringLiteral */\n      );\n      return getReferencedSymbolsForNode(node, program.getSourceFiles(), findInStrings, findInComments);\n    }\n\n    function getReferencedSymbolsForNode(node, sourceFiles, findInStrings, findInComments) {\n      var typeChecker = program.getTypeChecker(); // Labels\n\n      if (isLabelName(node)) {\n        if (isJumpStatementTarget(node)) {\n          var labelDefinition = getTargetLabel(node.parent, node.text); // if we have a label definition, look within its statement for references, if not, then\n          // the label is undefined and we have no results..\n\n          return labelDefinition ? getLabelReferencesInNode(labelDefinition.parent, labelDefinition) : undefined;\n        } else {\n          // it is a label definition and not a target, search within the parent labeledStatement\n          return getLabelReferencesInNode(node.parent, node);\n        }\n      }\n\n      if (node.kind === 97\n      /* ThisKeyword */\n      || node.kind === 162\n      /* ThisType */\n      ) {\n          return getReferencesForThisKeyword(node, sourceFiles);\n        }\n\n      if (node.kind === 95\n      /* SuperKeyword */\n      ) {\n          return getReferencesForSuperKeyword(node);\n        }\n\n      var symbol = typeChecker.getSymbolAtLocation(node); // Could not find a symbol e.g. unknown identifier\n\n      if (!symbol) {\n        // Can't have references to something that we have no symbol for.\n        return undefined;\n      }\n\n      var declarations = symbol.declarations; // The symbol was an internal symbol and does not have a declaration e.g. undefined symbol\n\n      if (!declarations || !declarations.length) {\n        return undefined;\n      }\n\n      var result; // Compute the meaning from the location and the symbol it references\n\n      var searchMeaning = getIntersectingMeaningFromDeclarations(getMeaningFromLocation(node), declarations); // Get the text to search for.\n      // Note: if this is an external module symbol, the name doesn't include quotes.\n\n      var declaredName = ts.stripQuotes(ts.getDeclaredName(typeChecker, symbol, node)); // Try to get the smallest valid scope that we can limit our search to;\n      // otherwise we'll need to search globally (i.e. include each file).\n\n      var scope = getSymbolScope(symbol); // Maps from a symbol ID to the ReferencedSymbol entry in 'result'.\n\n      var symbolToIndex = [];\n\n      if (scope) {\n        result = [];\n        getReferencesInNode(scope, symbol, declaredName, node, searchMeaning, findInStrings, findInComments, result, symbolToIndex);\n      } else {\n        var internedName = getInternedName(symbol, node, declarations);\n\n        for (var _i = 0, sourceFiles_3 = sourceFiles; _i < sourceFiles_3.length; _i++) {\n          var sourceFile = sourceFiles_3[_i];\n          cancellationToken.throwIfCancellationRequested();\n          var nameTable = getNameTable(sourceFile);\n\n          if (ts.lookUp(nameTable, internedName) !== undefined) {\n            result = result || [];\n            getReferencesInNode(sourceFile, symbol, declaredName, node, searchMeaning, findInStrings, findInComments, result, symbolToIndex);\n          }\n        }\n      }\n\n      return result;\n\n      function getDefinition(symbol) {\n        var info = getSymbolDisplayPartsDocumentationAndSymbolKind(symbol, node.getSourceFile(), getContainerNode(node), node);\n        var name = ts.map(info.displayParts, function (p) {\n          return p.text;\n        }).join(\"\");\n        var declarations = symbol.declarations;\n\n        if (!declarations || declarations.length === 0) {\n          return undefined;\n        }\n\n        return {\n          containerKind: \"\",\n          containerName: \"\",\n          name: name,\n          kind: info.symbolKind,\n          fileName: declarations[0].getSourceFile().fileName,\n          textSpan: ts.createTextSpan(declarations[0].getStart(), 0)\n        };\n      }\n\n      function isImportSpecifierSymbol(symbol) {\n        return symbol.flags & 8388608\n        /* Alias */\n        && !!ts.getDeclarationOfKind(symbol, 229\n        /* ImportSpecifier */\n        );\n      }\n\n      function getInternedName(symbol, location, declarations) {\n        // If this is an export or import specifier it could have been renamed using the 'as' syntax.\n        // If so we want to search for whatever under the cursor.\n        if (ts.isImportOrExportSpecifierName(location)) {\n          return location.getText();\n        } // Try to get the local symbol if we're dealing with an 'export default'\n        // since that symbol has the \"true\" name.\n\n\n        var localExportDefaultSymbol = ts.getLocalSymbolForExportDefault(symbol);\n        symbol = localExportDefaultSymbol || symbol;\n        return ts.stripQuotes(symbol.name);\n      }\n      /**\n       * Determines the smallest scope in which a symbol may have named references.\n       * Note that not every construct has been accounted for. This function can\n       * probably be improved.\n       *\n       * @returns undefined if the scope cannot be determined, implying that\n       * a reference to a symbol can occur anywhere.\n       */\n\n\n      function getSymbolScope(symbol) {\n        // If this is the symbol of a named function expression or named class expression,\n        // then named references are limited to its own scope.\n        var valueDeclaration = symbol.valueDeclaration;\n\n        if (valueDeclaration && (valueDeclaration.kind === 176\n        /* FunctionExpression */\n        || valueDeclaration.kind === 189\n        /* ClassExpression */\n        )) {\n          return valueDeclaration;\n        } // If this is private property or method, the scope is the containing class\n\n\n        if (symbol.flags & (4\n        /* Property */\n        | 8192\n        /* Method */\n        )) {\n          var privateDeclaration = ts.forEach(symbol.getDeclarations(), function (d) {\n            return d.flags & 16\n            /* Private */\n            ? d : undefined;\n          });\n\n          if (privateDeclaration) {\n            return ts.getAncestor(privateDeclaration, 217\n            /* ClassDeclaration */\n            );\n          }\n        } // If the symbol is an import we would like to find it if we are looking for what it imports.\n        // So consider it visibile outside its declaration scope.\n\n\n        if (symbol.flags & 8388608\n        /* Alias */\n        ) {\n            return undefined;\n          } // if this symbol is visible from its parent container, e.g. exported, then bail out\n        // if symbol correspond to the union property - bail out\n\n\n        if (symbol.parent || symbol.flags & 268435456\n        /* SyntheticProperty */\n        ) {\n          return undefined;\n        }\n\n        var scope;\n        var declarations = symbol.getDeclarations();\n\n        if (declarations) {\n          for (var _i = 0, declarations_8 = declarations; _i < declarations_8.length; _i++) {\n            var declaration = declarations_8[_i];\n            var container = getContainerNode(declaration);\n\n            if (!container) {\n              return undefined;\n            }\n\n            if (scope && scope !== container) {\n              // Different declarations have different containers, bail out\n              return undefined;\n            }\n\n            if (container.kind === 251\n            /* SourceFile */\n            && !ts.isExternalModule(container)) {\n              // This is a global variable and not an external module, any declaration defined\n              // within this scope is visible outside the file\n              return undefined;\n            } // The search scope is the container node\n\n\n            scope = container;\n          }\n        }\n\n        return scope;\n      }\n\n      function getPossibleSymbolReferencePositions(sourceFile, symbolName, start, end) {\n        var positions = []; /// TODO: Cache symbol existence for files to save text search\n        // Also, need to make this work for unicode escapes.\n        // Be resilient in the face of a symbol with no name or zero length name\n\n        if (!symbolName || !symbolName.length) {\n          return positions;\n        }\n\n        var text = sourceFile.text;\n        var sourceLength = text.length;\n        var symbolNameLength = symbolName.length;\n        var position = text.indexOf(symbolName, start);\n\n        while (position >= 0) {\n          cancellationToken.throwIfCancellationRequested(); // If we are past the end, stop looking\n\n          if (position > end) break; // We found a match.  Make sure it's not part of a larger word (i.e. the char\n          // before and after it have to be a non-identifier char).\n\n          var endPosition = position + symbolNameLength;\n\n          if ((position === 0 || !ts.isIdentifierPart(text.charCodeAt(position - 1), 2\n          /* Latest */\n          )) && (endPosition === sourceLength || !ts.isIdentifierPart(text.charCodeAt(endPosition), 2\n          /* Latest */\n          ))) {\n            // Found a real match.  Keep searching.\n            positions.push(position);\n          }\n\n          position = text.indexOf(symbolName, position + symbolNameLength + 1);\n        }\n\n        return positions;\n      }\n\n      function getLabelReferencesInNode(container, targetLabel) {\n        var references = [];\n        var sourceFile = container.getSourceFile();\n        var labelName = targetLabel.text;\n        var possiblePositions = getPossibleSymbolReferencePositions(sourceFile, labelName, container.getStart(), container.getEnd());\n        ts.forEach(possiblePositions, function (position) {\n          cancellationToken.throwIfCancellationRequested();\n          var node = ts.getTouchingWord(sourceFile, position);\n\n          if (!node || node.getWidth() !== labelName.length) {\n            return;\n          } // Only pick labels that are either the target label, or have a target that is the target label\n\n\n          if (node === targetLabel || isJumpStatementTarget(node) && getTargetLabel(node, labelName) === targetLabel) {\n            references.push(getReferenceEntryFromNode(node));\n          }\n        });\n        var definition = {\n          containerKind: \"\",\n          containerName: \"\",\n          fileName: targetLabel.getSourceFile().fileName,\n          kind: ScriptElementKind.label,\n          name: labelName,\n          textSpan: ts.createTextSpanFromBounds(targetLabel.getStart(), targetLabel.getEnd())\n        };\n        return [{\n          definition: definition,\n          references: references\n        }];\n      }\n\n      function isValidReferencePosition(node, searchSymbolName) {\n        if (node) {\n          // Compare the length so we filter out strict superstrings of the symbol we are looking for\n          switch (node.kind) {\n            case 69\n            /* Identifier */\n            :\n              return node.getWidth() === searchSymbolName.length;\n\n            case 9\n            /* StringLiteral */\n            :\n              if (isLiteralNameOfPropertyDeclarationOrIndexAccess(node) || isNameOfExternalModuleImportOrDeclaration(node)) {\n                // For string literals we have two additional chars for the quotes\n                return node.getWidth() === searchSymbolName.length + 2;\n              }\n\n              break;\n\n            case 8\n            /* NumericLiteral */\n            :\n              if (isLiteralNameOfPropertyDeclarationOrIndexAccess(node)) {\n                return node.getWidth() === searchSymbolName.length;\n              }\n\n              break;\n          }\n        }\n\n        return false;\n      }\n      /** Search within node \"container\" for references for a search value, where the search value is defined as a\n        * tuple of(searchSymbol, searchText, searchLocation, and searchMeaning).\n        * searchLocation: a node where the search value\n        */\n\n\n      function getReferencesInNode(container, searchSymbol, searchText, searchLocation, searchMeaning, findInStrings, findInComments, result, symbolToIndex) {\n        var sourceFile = container.getSourceFile();\n        var tripleSlashDirectivePrefixRegex = /^\\/\\/\\/\\s*</;\n        var possiblePositions = getPossibleSymbolReferencePositions(sourceFile, searchText, container.getStart(), container.getEnd());\n\n        if (possiblePositions.length) {\n          // Build the set of symbols to search for, initially it has only the current symbol\n          var searchSymbols_1 = populateSearchSymbolSet(searchSymbol, searchLocation);\n          ts.forEach(possiblePositions, function (position) {\n            cancellationToken.throwIfCancellationRequested();\n            var referenceLocation = ts.getTouchingPropertyName(sourceFile, position);\n\n            if (!isValidReferencePosition(referenceLocation, searchText)) {\n              // This wasn't the start of a token.  Check to see if it might be a\n              // match in a comment or string if that's what the caller is asking\n              // for.\n              if (findInStrings && ts.isInString(sourceFile, position) || findInComments && isInNonReferenceComment(sourceFile, position)) {\n                // In the case where we're looking inside comments/strings, we don't have\n                // an actual definition.  So just use 'undefined' here.  Features like\n                // 'Rename' won't care (as they ignore the definitions), and features like\n                // 'FindReferences' will just filter out these results.\n                result.push({\n                  definition: undefined,\n                  references: [{\n                    fileName: sourceFile.fileName,\n                    textSpan: ts.createTextSpan(position, searchText.length),\n                    isWriteAccess: false\n                  }]\n                });\n              }\n\n              return;\n            }\n\n            if (!(getMeaningFromLocation(referenceLocation) & searchMeaning)) {\n              return;\n            }\n\n            var referenceSymbol = typeChecker.getSymbolAtLocation(referenceLocation);\n\n            if (referenceSymbol) {\n              var referenceSymbolDeclaration = referenceSymbol.valueDeclaration;\n              var shorthandValueSymbol = typeChecker.getShorthandAssignmentValueSymbol(referenceSymbolDeclaration);\n              var relatedSymbol = getRelatedSymbol(searchSymbols_1, referenceSymbol, referenceLocation);\n\n              if (relatedSymbol) {\n                var referencedSymbol = getReferencedSymbol(relatedSymbol);\n                referencedSymbol.references.push(getReferenceEntryFromNode(referenceLocation));\n              } else if (!(referenceSymbol.flags & 67108864\n              /* Transient */\n              ) && searchSymbols_1.indexOf(shorthandValueSymbol) >= 0) {\n                var referencedSymbol = getReferencedSymbol(shorthandValueSymbol);\n                referencedSymbol.references.push(getReferenceEntryFromNode(referenceSymbolDeclaration.name));\n              }\n            }\n          });\n        }\n\n        return;\n\n        function getReferencedSymbol(symbol) {\n          var symbolId = ts.getSymbolId(symbol);\n          var index = symbolToIndex[symbolId];\n\n          if (index === undefined) {\n            index = result.length;\n            symbolToIndex[symbolId] = index;\n            result.push({\n              definition: getDefinition(symbol),\n              references: []\n            });\n          }\n\n          return result[index];\n        }\n\n        function isInNonReferenceComment(sourceFile, position) {\n          return ts.isInCommentHelper(sourceFile, position, isNonReferenceComment);\n\n          function isNonReferenceComment(c) {\n            var commentText = sourceFile.text.substring(c.pos, c.end);\n            return !tripleSlashDirectivePrefixRegex.test(commentText);\n          }\n        }\n      }\n\n      function getReferencesForSuperKeyword(superKeyword) {\n        var searchSpaceNode = ts.getSuperContainer(superKeyword,\n        /*stopOnFunctions*/\n        false);\n\n        if (!searchSpaceNode) {\n          return undefined;\n        } // Whether 'super' occurs in a static context within a class.\n\n\n        var staticFlag = 64\n        /* Static */\n        ;\n\n        switch (searchSpaceNode.kind) {\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            staticFlag &= searchSpaceNode.flags;\n            searchSpaceNode = searchSpaceNode.parent; // re-assign to be the owning class\n\n            break;\n\n          default:\n            return undefined;\n        }\n\n        var references = [];\n        var sourceFile = searchSpaceNode.getSourceFile();\n        var possiblePositions = getPossibleSymbolReferencePositions(sourceFile, \"super\", searchSpaceNode.getStart(), searchSpaceNode.getEnd());\n        ts.forEach(possiblePositions, function (position) {\n          cancellationToken.throwIfCancellationRequested();\n          var node = ts.getTouchingWord(sourceFile, position);\n\n          if (!node || node.kind !== 95\n          /* SuperKeyword */\n          ) {\n              return;\n            }\n\n          var container = ts.getSuperContainer(node,\n          /*stopOnFunctions*/\n          false); // If we have a 'super' container, we must have an enclosing class.\n          // Now make sure the owning class is the same as the search-space\n          // and has the same static qualifier as the original 'super's owner.\n\n          if (container && (64\n          /* Static */\n          & container.flags) === staticFlag && container.parent.symbol === searchSpaceNode.symbol) {\n            references.push(getReferenceEntryFromNode(node));\n          }\n        });\n        var definition = getDefinition(searchSpaceNode.symbol);\n        return [{\n          definition: definition,\n          references: references\n        }];\n      }\n\n      function getReferencesForThisKeyword(thisOrSuperKeyword, sourceFiles) {\n        var searchSpaceNode = ts.getThisContainer(thisOrSuperKeyword,\n        /* includeArrowFunctions */\n        false); // Whether 'this' occurs in a static context within a class.\n\n        var staticFlag = 64\n        /* Static */\n        ;\n\n        switch (searchSpaceNode.kind) {\n          case 144\n          /* MethodDeclaration */\n          :\n          case 143\n          /* MethodSignature */\n          :\n            if (ts.isObjectLiteralMethod(searchSpaceNode)) {\n              break;\n            }\n\n          // fall through\n\n          case 142\n          /* PropertyDeclaration */\n          :\n          case 141\n          /* PropertySignature */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 146\n          /* GetAccessor */\n          :\n          case 147\n          /* SetAccessor */\n          :\n            staticFlag &= searchSpaceNode.flags;\n            searchSpaceNode = searchSpaceNode.parent; // re-assign to be the owning class\n\n            break;\n\n          case 251\n          /* SourceFile */\n          :\n            if (ts.isExternalModule(searchSpaceNode)) {\n              return undefined;\n            }\n\n          // Fall through\n\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 176\n          /* FunctionExpression */\n          :\n            break;\n          // Computed properties in classes are not handled here because references to this are illegal,\n          // so there is no point finding references to them.\n\n          default:\n            return undefined;\n        }\n\n        var references = [];\n        var possiblePositions;\n\n        if (searchSpaceNode.kind === 251\n        /* SourceFile */\n        ) {\n            ts.forEach(sourceFiles, function (sourceFile) {\n              possiblePositions = getPossibleSymbolReferencePositions(sourceFile, \"this\", sourceFile.getStart(), sourceFile.getEnd());\n              getThisReferencesInFile(sourceFile, sourceFile, possiblePositions, references);\n            });\n          } else {\n          var sourceFile = searchSpaceNode.getSourceFile();\n          possiblePositions = getPossibleSymbolReferencePositions(sourceFile, \"this\", searchSpaceNode.getStart(), searchSpaceNode.getEnd());\n          getThisReferencesInFile(sourceFile, searchSpaceNode, possiblePositions, references);\n        }\n\n        return [{\n          definition: {\n            containerKind: \"\",\n            containerName: \"\",\n            fileName: node.getSourceFile().fileName,\n            kind: ScriptElementKind.variableElement,\n            name: \"this\",\n            textSpan: ts.createTextSpanFromBounds(node.getStart(), node.getEnd())\n          },\n          references: references\n        }];\n\n        function getThisReferencesInFile(sourceFile, searchSpaceNode, possiblePositions, result) {\n          ts.forEach(possiblePositions, function (position) {\n            cancellationToken.throwIfCancellationRequested();\n            var node = ts.getTouchingWord(sourceFile, position);\n\n            if (!node || node.kind !== 97\n            /* ThisKeyword */\n            && node.kind !== 162\n            /* ThisType */\n            ) {\n              return;\n            }\n\n            var container = ts.getThisContainer(node,\n            /* includeArrowFunctions */\n            false);\n\n            switch (searchSpaceNode.kind) {\n              case 176\n              /* FunctionExpression */\n              :\n              case 216\n              /* FunctionDeclaration */\n              :\n                if (searchSpaceNode.symbol === container.symbol) {\n                  result.push(getReferenceEntryFromNode(node));\n                }\n\n                break;\n\n              case 144\n              /* MethodDeclaration */\n              :\n              case 143\n              /* MethodSignature */\n              :\n                if (ts.isObjectLiteralMethod(searchSpaceNode) && searchSpaceNode.symbol === container.symbol) {\n                  result.push(getReferenceEntryFromNode(node));\n                }\n\n                break;\n\n              case 189\n              /* ClassExpression */\n              :\n              case 217\n              /* ClassDeclaration */\n              :\n                // Make sure the container belongs to the same class\n                // and has the appropriate static modifier from the original container.\n                if (container.parent && searchSpaceNode.symbol === container.parent.symbol && (container.flags & 64\n                /* Static */\n                ) === staticFlag) {\n                  result.push(getReferenceEntryFromNode(node));\n                }\n\n                break;\n\n              case 251\n              /* SourceFile */\n              :\n                if (container.kind === 251\n                /* SourceFile */\n                && !ts.isExternalModule(container)) {\n                  result.push(getReferenceEntryFromNode(node));\n                }\n\n                break;\n            }\n          });\n        }\n      }\n\n      function populateSearchSymbolSet(symbol, location) {\n        // The search set contains at least the current symbol\n        var result = [symbol]; // If the symbol is an alias, add what it alaises to the list\n\n        if (isImportSpecifierSymbol(symbol)) {\n          result.push(typeChecker.getAliasedSymbol(symbol));\n        } // For export specifiers, the exported name can be refering to a local symbol, e.g.:\n        //     import {a} from \"mod\";\n        //     export {a as somethingElse}\n        // We want the *local* declaration of 'a' as declared in the import,\n        // *not* as declared within \"mod\" (or farther)\n\n\n        if (location.parent.kind === 233\n        /* ExportSpecifier */\n        ) {\n            result.push(typeChecker.getExportSpecifierLocalTargetSymbol(location.parent));\n          } // If the location is in a context sensitive location (i.e. in an object literal) try\n        // to get a contextual type for it, and add the property symbol from the contextual\n        // type to the search set\n\n\n        if (isNameOfPropertyAssignment(location)) {\n          ts.forEach(getPropertySymbolsFromContextualType(location), function (contextualSymbol) {\n            ts.addRange(result, typeChecker.getRootSymbols(contextualSymbol));\n          });\n          /* Because in short-hand property assignment, location has two meaning : property name and as value of the property\n           * When we do findAllReference at the position of the short-hand property assignment, we would want to have references to position of\n           * property name and variable declaration of the identifier.\n           * Like in below example, when querying for all references for an identifier 'name', of the property assignment, the language service\n           * should show both 'name' in 'obj' and 'name' in variable declaration\n           *      const name = \"Foo\";\n           *      const obj = { name };\n           * In order to do that, we will populate the search set with the value symbol of the identifier as a value of the property assignment\n           * so that when matching with potential reference symbol, both symbols from property declaration and variable declaration\n           * will be included correctly.\n           */\n\n          var shorthandValueSymbol = typeChecker.getShorthandAssignmentValueSymbol(location.parent);\n\n          if (shorthandValueSymbol) {\n            result.push(shorthandValueSymbol);\n          }\n        } // If the symbol.valueDeclaration is a property parameter declaration,\n        // we should include both parameter declaration symbol and property declaration symbol\n        // Parameter Declaration symbol is only visible within function scope, so the symbol is stored in contructor.locals.\n        // Property Declaration symbol is a member of the class, so the symbol is stored in its class Declaration.symbol.members\n\n\n        if (symbol.valueDeclaration && symbol.valueDeclaration.kind === 139\n        /* Parameter */\n        && ts.isParameterPropertyDeclaration(symbol.valueDeclaration)) {\n          result = result.concat(typeChecker.getSymbolsOfParameterPropertyDeclaration(symbol.valueDeclaration, symbol.name));\n        } // If this is a union property, add all the symbols from all its source symbols in all unioned types.\n        // If the symbol is an instantiation from a another symbol (e.g. widened symbol) , add the root the list\n\n\n        ts.forEach(typeChecker.getRootSymbols(symbol), function (rootSymbol) {\n          if (rootSymbol !== symbol) {\n            result.push(rootSymbol);\n          } // Add symbol of properties/methods of the same name in base classes and implemented interfaces definitions\n\n\n          if (rootSymbol.parent && rootSymbol.parent.flags & (32\n          /* Class */\n          | 64\n          /* Interface */\n          )) {\n            getPropertySymbolsFromBaseTypes(rootSymbol.parent, rootSymbol.getName(), result,\n            /*previousIterationSymbolsCache*/\n            {});\n          }\n        });\n        return result;\n      }\n      /**\n       * Find symbol of the given property-name and add the symbol to the given result array\n       * @param symbol a symbol to start searching for the given propertyName\n       * @param propertyName a name of property to serach for\n       * @param result an array of symbol of found property symbols\n       * @param previousIterationSymbolsCache a cache of symbol from previous iterations of calling this function to prevent infinite revisitng of the same symbol.\n       *                                The value of previousIterationSymbol is undefined when the function is first called.\n       */\n\n\n      function getPropertySymbolsFromBaseTypes(symbol, propertyName, result, previousIterationSymbolsCache) {\n        if (!symbol) {\n          return;\n        } // If the current symbol is the same as the previous-iteration symbol, we can just return the symbol that has already been visited\n        // This is particularly important for the following cases, so that we do not infinitely visit the same symbol.\n        // For example:\n        //      interface C extends C {\n        //          /*findRef*/propName: string;\n        //      }\n        // The first time getPropertySymbolsFromBaseTypes is called when finding-all-references at propName,\n        // the symbol argument will be the symbol of an interface \"C\" and previousIterationSymbol is undefined,\n        // the function will add any found symbol of the property-name, then its sub-routine will call\n        // getPropertySymbolsFromBaseTypes again to walk up any base types to prevent revisiting already\n        // visited symbol, interface \"C\", the sub-routine will pass the current symbol as previousIterationSymbol.\n\n\n        if (ts.hasProperty(previousIterationSymbolsCache, symbol.name)) {\n          return;\n        }\n\n        if (symbol.flags & (32\n        /* Class */\n        | 64\n        /* Interface */\n        )) {\n          ts.forEach(symbol.getDeclarations(), function (declaration) {\n            if (declaration.kind === 217\n            /* ClassDeclaration */\n            ) {\n                getPropertySymbolFromTypeReference(ts.getClassExtendsHeritageClauseElement(declaration));\n                ts.forEach(ts.getClassImplementsHeritageClauseElements(declaration), getPropertySymbolFromTypeReference);\n              } else if (declaration.kind === 218\n            /* InterfaceDeclaration */\n            ) {\n                ts.forEach(ts.getInterfaceBaseTypeNodes(declaration), getPropertySymbolFromTypeReference);\n              }\n          });\n        }\n\n        return;\n\n        function getPropertySymbolFromTypeReference(typeReference) {\n          if (typeReference) {\n            var type = typeChecker.getTypeAtLocation(typeReference);\n\n            if (type) {\n              var propertySymbol = typeChecker.getPropertyOfType(type, propertyName);\n\n              if (propertySymbol) {\n                result.push(propertySymbol);\n              } // Visit the typeReference as well to see if it directly or indirectly use that property\n\n\n              previousIterationSymbolsCache[symbol.name] = symbol;\n              getPropertySymbolsFromBaseTypes(type.symbol, propertyName, result, previousIterationSymbolsCache);\n            }\n          }\n        }\n      }\n\n      function getRelatedSymbol(searchSymbols, referenceSymbol, referenceLocation) {\n        if (searchSymbols.indexOf(referenceSymbol) >= 0) {\n          return referenceSymbol;\n        } // If the reference symbol is an alias, check if what it is aliasing is one of the search\n        // symbols.\n\n\n        if (isImportSpecifierSymbol(referenceSymbol)) {\n          var aliasedSymbol = typeChecker.getAliasedSymbol(referenceSymbol);\n\n          if (searchSymbols.indexOf(aliasedSymbol) >= 0) {\n            return aliasedSymbol;\n          }\n        } // For export specifiers, it can be a local symbol, e.g. \n        //     import {a} from \"mod\";\n        //     export {a as somethingElse}\n        // We want the local target of the export (i.e. the import symbol) and not the final target (i.e. \"mod\".a)\n\n\n        if (referenceLocation.parent.kind === 233\n        /* ExportSpecifier */\n        ) {\n            var aliasedSymbol = typeChecker.getExportSpecifierLocalTargetSymbol(referenceLocation.parent);\n\n            if (searchSymbols.indexOf(aliasedSymbol) >= 0) {\n              return aliasedSymbol;\n            }\n          } // If the reference location is in an object literal, try to get the contextual type for the\n        // object literal, lookup the property symbol in the contextual type, and use this symbol to\n        // compare to our searchSymbol\n\n\n        if (isNameOfPropertyAssignment(referenceLocation)) {\n          return ts.forEach(getPropertySymbolsFromContextualType(referenceLocation), function (contextualSymbol) {\n            return ts.forEach(typeChecker.getRootSymbols(contextualSymbol), function (s) {\n              return searchSymbols.indexOf(s) >= 0 ? s : undefined;\n            });\n          });\n        } // Unwrap symbols to get to the root (e.g. transient symbols as a result of widening)\n        // Or a union property, use its underlying unioned symbols\n\n\n        return ts.forEach(typeChecker.getRootSymbols(referenceSymbol), function (rootSymbol) {\n          // if it is in the list, then we are done\n          if (searchSymbols.indexOf(rootSymbol) >= 0) {\n            return rootSymbol;\n          } // Finally, try all properties with the same name in any type the containing type extended or implemented, and\n          // see if any is in the list\n\n\n          if (rootSymbol.parent && rootSymbol.parent.flags & (32\n          /* Class */\n          | 64\n          /* Interface */\n          )) {\n            var result_5 = [];\n            getPropertySymbolsFromBaseTypes(rootSymbol.parent, rootSymbol.getName(), result_5,\n            /*previousIterationSymbolsCache*/\n            {});\n            return ts.forEach(result_5, function (s) {\n              return searchSymbols.indexOf(s) >= 0 ? s : undefined;\n            });\n          }\n\n          return undefined;\n        });\n      }\n\n      function getPropertySymbolsFromContextualType(node) {\n        if (isNameOfPropertyAssignment(node)) {\n          var objectLiteral = node.parent.parent;\n          var contextualType = typeChecker.getContextualType(objectLiteral);\n          var name_39 = node.text;\n\n          if (contextualType) {\n            if (contextualType.flags & 16384\n            /* Union */\n            ) {\n                // This is a union type, first see if the property we are looking for is a union property (i.e. exists in all types)\n                // if not, search the constituent types for the property\n                var unionProperty = contextualType.getProperty(name_39);\n\n                if (unionProperty) {\n                  return [unionProperty];\n                } else {\n                  var result_6 = [];\n                  ts.forEach(contextualType.types, function (t) {\n                    var symbol = t.getProperty(name_39);\n\n                    if (symbol) {\n                      result_6.push(symbol);\n                    }\n                  });\n                  return result_6;\n                }\n              } else {\n              var symbol_1 = contextualType.getProperty(name_39);\n\n              if (symbol_1) {\n                return [symbol_1];\n              }\n            }\n          }\n        }\n\n        return undefined;\n      }\n      /** Given an initial searchMeaning, extracted from a location, widen the search scope based on the declarations\n        * of the corresponding symbol. e.g. if we are searching for \"Foo\" in value position, but \"Foo\" references a class\n        * then we need to widen the search to include type positions as well.\n        * On the contrary, if we are searching for \"Bar\" in type position and we trace bar to an interface, and an uninstantiated\n        * module, we want to keep the search limited to only types, as the two declarations (interface and uninstantiated module)\n        * do not intersect in any of the three spaces.\n        */\n\n\n      function getIntersectingMeaningFromDeclarations(meaning, declarations) {\n        if (declarations) {\n          var lastIterationMeaning = void 0;\n\n          do {\n            // The result is order-sensitive, for instance if initialMeaning === Namespace, and declarations = [class, instantiated module]\n            // we need to consider both as they initialMeaning intersects with the module in the namespace space, and the module\n            // intersects with the class in the value space.\n            // To achieve that we will keep iterating until the result stabilizes.\n            // Remember the last meaning\n            lastIterationMeaning = meaning;\n\n            for (var _i = 0, declarations_9 = declarations; _i < declarations_9.length; _i++) {\n              var declaration = declarations_9[_i];\n              var declarationMeaning = getMeaningFromDeclaration(declaration);\n\n              if (declarationMeaning & meaning) {\n                meaning |= declarationMeaning;\n              }\n            }\n          } while (meaning !== lastIterationMeaning);\n        }\n\n        return meaning;\n      }\n    }\n\n    function getReferenceEntryFromNode(node) {\n      var start = node.getStart();\n      var end = node.getEnd();\n\n      if (node.kind === 9\n      /* StringLiteral */\n      ) {\n          start += 1;\n          end -= 1;\n        }\n\n      return {\n        fileName: node.getSourceFile().fileName,\n        textSpan: ts.createTextSpanFromBounds(start, end),\n        isWriteAccess: isWriteAccess(node)\n      };\n    }\n    /** A node is considered a writeAccess iff it is a name of a declaration or a target of an assignment */\n\n\n    function isWriteAccess(node) {\n      if (node.kind === 69\n      /* Identifier */\n      && ts.isDeclarationName(node)) {\n        return true;\n      }\n\n      var parent = node.parent;\n\n      if (parent) {\n        if (parent.kind === 183\n        /* PostfixUnaryExpression */\n        || parent.kind === 182\n        /* PrefixUnaryExpression */\n        ) {\n            return true;\n          } else if (parent.kind === 184\n        /* BinaryExpression */\n        && parent.left === node) {\n          var operator = parent.operatorToken.kind;\n          return 56\n          /* FirstAssignment */\n          <= operator && operator <= 68\n          /* LastAssignment */\n          ;\n        }\n      }\n\n      return false;\n    } /// NavigateTo\n\n\n    function getNavigateToItems(searchValue, maxResultCount) {\n      synchronizeHostData();\n      return ts.NavigateTo.getNavigateToItems(program, cancellationToken, searchValue, maxResultCount);\n    }\n\n    function getEmitOutput(fileName) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      var outputFiles = [];\n\n      function writeFile(fileName, data, writeByteOrderMark) {\n        outputFiles.push({\n          name: fileName,\n          writeByteOrderMark: writeByteOrderMark,\n          text: data\n        });\n      }\n\n      var emitOutput = program.emit(sourceFile, writeFile, cancellationToken);\n      return {\n        outputFiles: outputFiles,\n        emitSkipped: emitOutput.emitSkipped\n      };\n    }\n\n    function getMeaningFromDeclaration(node) {\n      switch (node.kind) {\n        case 139\n        /* Parameter */\n        :\n        case 214\n        /* VariableDeclaration */\n        :\n        case 166\n        /* BindingElement */\n        :\n        case 142\n        /* PropertyDeclaration */\n        :\n        case 141\n        /* PropertySignature */\n        :\n        case 248\n        /* PropertyAssignment */\n        :\n        case 249\n        /* ShorthandPropertyAssignment */\n        :\n        case 250\n        /* EnumMember */\n        :\n        case 144\n        /* MethodDeclaration */\n        :\n        case 143\n        /* MethodSignature */\n        :\n        case 145\n        /* Constructor */\n        :\n        case 146\n        /* GetAccessor */\n        :\n        case 147\n        /* SetAccessor */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n        case 247\n        /* CatchClause */\n        :\n          return 1\n          /* Value */\n          ;\n\n        case 138\n        /* TypeParameter */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 219\n        /* TypeAliasDeclaration */\n        :\n        case 156\n        /* TypeLiteral */\n        :\n          return 2\n          /* Type */\n          ;\n\n        case 217\n        /* ClassDeclaration */\n        :\n        case 220\n        /* EnumDeclaration */\n        :\n          return 1\n          /* Value */\n          | 2\n          /* Type */\n          ;\n\n        case 221\n        /* ModuleDeclaration */\n        :\n          if (ts.isAmbientModule(node)) {\n            return 4\n            /* Namespace */\n            | 1\n            /* Value */\n            ;\n          } else if (ts.getModuleInstanceState(node) === 1\n          /* Instantiated */\n          ) {\n              return 4\n              /* Namespace */\n              | 1\n              /* Value */\n              ;\n            } else {\n              return 4\n              /* Namespace */\n              ;\n            }\n\n        case 228\n        /* NamedImports */\n        :\n        case 229\n        /* ImportSpecifier */\n        :\n        case 224\n        /* ImportEqualsDeclaration */\n        :\n        case 225\n        /* ImportDeclaration */\n        :\n        case 230\n        /* ExportAssignment */\n        :\n        case 231\n        /* ExportDeclaration */\n        :\n          return 1\n          /* Value */\n          | 2\n          /* Type */\n          | 4\n          /* Namespace */\n          ;\n        // An external module can be a Value\n\n        case 251\n        /* SourceFile */\n        :\n          return 4\n          /* Namespace */\n          | 1\n          /* Value */\n          ;\n      }\n\n      return 1\n      /* Value */\n      | 2\n      /* Type */\n      | 4\n      /* Namespace */\n      ;\n    }\n\n    function isTypeReference(node) {\n      if (ts.isRightSideOfQualifiedNameOrPropertyAccess(node)) {\n        node = node.parent;\n      }\n\n      return node.parent.kind === 152\n      /* TypeReference */\n      || node.parent.kind === 191\n      /* ExpressionWithTypeArguments */\n      && !ts.isExpressionWithTypeArgumentsInClassExtendsClause(node.parent) || node.kind === 97\n      /* ThisKeyword */\n      && !ts.isExpression(node) || node.kind === 162\n      /* ThisType */\n      ;\n    }\n\n    function isNamespaceReference(node) {\n      return isQualifiedNameNamespaceReference(node) || isPropertyAccessNamespaceReference(node);\n    }\n\n    function isPropertyAccessNamespaceReference(node) {\n      var root = node;\n      var isLastClause = true;\n\n      if (root.parent.kind === 169\n      /* PropertyAccessExpression */\n      ) {\n          while (root.parent && root.parent.kind === 169\n          /* PropertyAccessExpression */\n          ) {\n            root = root.parent;\n          }\n\n          isLastClause = root.name === node;\n        }\n\n      if (!isLastClause && root.parent.kind === 191\n      /* ExpressionWithTypeArguments */\n      && root.parent.parent.kind === 246\n      /* HeritageClause */\n      ) {\n          var decl = root.parent.parent.parent;\n          return decl.kind === 217\n          /* ClassDeclaration */\n          && root.parent.parent.token === 106\n          /* ImplementsKeyword */\n          || decl.kind === 218\n          /* InterfaceDeclaration */\n          && root.parent.parent.token === 83\n          /* ExtendsKeyword */\n          ;\n        }\n\n      return false;\n    }\n\n    function isQualifiedNameNamespaceReference(node) {\n      var root = node;\n      var isLastClause = true;\n\n      if (root.parent.kind === 136\n      /* QualifiedName */\n      ) {\n          while (root.parent && root.parent.kind === 136\n          /* QualifiedName */\n          ) {\n            root = root.parent;\n          }\n\n          isLastClause = root.right === node;\n        }\n\n      return root.parent.kind === 152\n      /* TypeReference */\n      && !isLastClause;\n    }\n\n    function isInRightSideOfImport(node) {\n      while (node.parent.kind === 136\n      /* QualifiedName */\n      ) {\n        node = node.parent;\n      }\n\n      return ts.isInternalModuleImportEqualsDeclaration(node.parent) && node.parent.moduleReference === node;\n    }\n\n    function getMeaningFromRightHandSideOfImportEquals(node) {\n      ts.Debug.assert(node.kind === 69\n      /* Identifier */\n      ); //     import a = |b|; // Namespace\n      //     import a = |b.c|; // Value, type, namespace\n      //     import a = |b.c|.d; // Namespace\n\n      if (node.parent.kind === 136\n      /* QualifiedName */\n      && node.parent.right === node && node.parent.parent.kind === 224\n      /* ImportEqualsDeclaration */\n      ) {\n          return 1\n          /* Value */\n          | 2\n          /* Type */\n          | 4\n          /* Namespace */\n          ;\n        }\n\n      return 4\n      /* Namespace */\n      ;\n    }\n\n    function getMeaningFromLocation(node) {\n      if (node.parent.kind === 230\n      /* ExportAssignment */\n      ) {\n          return 1\n          /* Value */\n          | 2\n          /* Type */\n          | 4\n          /* Namespace */\n          ;\n        } else if (isInRightSideOfImport(node)) {\n        return getMeaningFromRightHandSideOfImportEquals(node);\n      } else if (ts.isDeclarationName(node)) {\n        return getMeaningFromDeclaration(node.parent);\n      } else if (isTypeReference(node)) {\n        return 2\n        /* Type */\n        ;\n      } else if (isNamespaceReference(node)) {\n        return 4\n        /* Namespace */\n        ;\n      } else {\n          return 1\n          /* Value */\n          ;\n        }\n    } // Signature help\n\n    /**\n     * This is a semantic operation.\n     */\n\n\n    function getSignatureHelpItems(fileName, position) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      return ts.SignatureHelp.getSignatureHelpItems(program, sourceFile, position, cancellationToken);\n    } /// Syntactic features\n\n\n    function getSourceFile(fileName) {\n      return syntaxTreeCache.getCurrentSourceFile(fileName);\n    }\n\n    function getNameOrDottedNameSpan(fileName, startPos, endPos) {\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName); // Get node at the location\n\n      var node = ts.getTouchingPropertyName(sourceFile, startPos);\n\n      if (!node) {\n        return;\n      }\n\n      switch (node.kind) {\n        case 169\n        /* PropertyAccessExpression */\n        :\n        case 136\n        /* QualifiedName */\n        :\n        case 9\n        /* StringLiteral */\n        :\n        case 163\n        /* StringLiteralType */\n        :\n        case 84\n        /* FalseKeyword */\n        :\n        case 99\n        /* TrueKeyword */\n        :\n        case 93\n        /* NullKeyword */\n        :\n        case 95\n        /* SuperKeyword */\n        :\n        case 97\n        /* ThisKeyword */\n        :\n        case 162\n        /* ThisType */\n        :\n        case 69\n        /* Identifier */\n        :\n          break;\n        // Cant create the text span\n\n        default:\n          return;\n      }\n\n      var nodeForStartPos = node;\n\n      while (true) {\n        if (isRightSideOfPropertyAccess(nodeForStartPos) || isRightSideOfQualifiedName(nodeForStartPos)) {\n          // If on the span is in right side of the the property or qualified name, return the span from the qualified name pos to end of this node\n          nodeForStartPos = nodeForStartPos.parent;\n        } else if (isNameOfModuleDeclaration(nodeForStartPos)) {\n          // If this is name of a module declarations, check if this is right side of dotted module name\n          // If parent of the module declaration which is parent of this node is module declaration and its body is the module declaration that this node is name of\n          // Then this name is name from dotted module\n          if (nodeForStartPos.parent.parent.kind === 221\n          /* ModuleDeclaration */\n          && nodeForStartPos.parent.parent.body === nodeForStartPos.parent) {\n            // Use parent module declarations name for start pos\n            nodeForStartPos = nodeForStartPos.parent.parent.name;\n          } else {\n            // We have to use this name for start pos\n            break;\n          }\n        } else {\n          // Is not a member expression so we have found the node for start pos\n          break;\n        }\n      }\n\n      return ts.createTextSpanFromBounds(nodeForStartPos.getStart(), node.getEnd());\n    }\n\n    function getBreakpointStatementAtPosition(fileName, position) {\n      // doesn't use compiler - no need to synchronize with host\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      return ts.BreakpointResolver.spanInSourceFileAtLocation(sourceFile, position);\n    }\n\n    function getNavigationBarItems(fileName) {\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      return ts.NavigationBar.getNavigationBarItems(sourceFile, host.getCompilationSettings());\n    }\n\n    function getSemanticClassifications(fileName, span) {\n      return convertClassifications(getEncodedSemanticClassifications(fileName, span));\n    }\n\n    function checkForClassificationCancellation(kind) {\n      // We don't want to actually call back into our host on every node to find out if we've\n      // been canceled.  That would be an enormous amount of chattyness, along with the all\n      // the overhead of marshalling the data to/from the host.  So instead we pick a few\n      // reasonable node kinds to bother checking on.  These node kinds represent high level\n      // constructs that we would expect to see commonly, but just at a far less frequent\n      // interval.\n      //\n      // For example, in checker.ts (around 750k) we only have around 600 of these constructs.\n      // That means we're calling back into the host around every 1.2k of the file we process.\n      // Lib.d.ts has similar numbers.\n      switch (kind) {\n        case 221\n        /* ModuleDeclaration */\n        :\n        case 217\n        /* ClassDeclaration */\n        :\n        case 218\n        /* InterfaceDeclaration */\n        :\n        case 216\n        /* FunctionDeclaration */\n        :\n          cancellationToken.throwIfCancellationRequested();\n      }\n    }\n\n    function getEncodedSemanticClassifications(fileName, span) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      var typeChecker = program.getTypeChecker();\n      var result = [];\n      var classifiableNames = program.getClassifiableNames();\n      processNode(sourceFile);\n      return {\n        spans: result,\n        endOfLineState: 0\n        /* None */\n\n      };\n\n      function pushClassification(start, length, type) {\n        result.push(start);\n        result.push(length);\n        result.push(type);\n      }\n\n      function classifySymbol(symbol, meaningAtPosition) {\n        var flags = symbol.getFlags();\n\n        if ((flags & 788448\n        /* Classifiable */\n        ) === 0\n        /* None */\n        ) {\n            return;\n          }\n\n        if (flags & 32\n        /* Class */\n        ) {\n            return 11\n            /* className */\n            ;\n          } else if (flags & 384\n        /* Enum */\n        ) {\n            return 12\n            /* enumName */\n            ;\n          } else if (flags & 524288\n        /* TypeAlias */\n        ) {\n            return 16\n            /* typeAliasName */\n            ;\n          } else if (meaningAtPosition & 2\n        /* Type */\n        ) {\n            if (flags & 64\n            /* Interface */\n            ) {\n                return 13\n                /* interfaceName */\n                ;\n              } else if (flags & 262144\n            /* TypeParameter */\n            ) {\n                return 15\n                /* typeParameterName */\n                ;\n              }\n          } else if (flags & 1536\n        /* Module */\n        ) {\n            // Only classify a module as such if\n            //  - It appears in a namespace context.\n            //  - There exists a module declaration which actually impacts the value side.\n            if (meaningAtPosition & 4\n            /* Namespace */\n            || meaningAtPosition & 1\n            /* Value */\n            && hasValueSideModule(symbol)) {\n              return 14\n              /* moduleName */\n              ;\n            }\n          }\n\n        return undefined;\n        /**\n         * Returns true if there exists a module that introduces entities on the value side.\n         */\n\n        function hasValueSideModule(symbol) {\n          return ts.forEach(symbol.declarations, function (declaration) {\n            return declaration.kind === 221\n            /* ModuleDeclaration */\n            && ts.getModuleInstanceState(declaration) === 1\n            /* Instantiated */\n            ;\n          });\n        }\n      }\n\n      function processNode(node) {\n        // Only walk into nodes that intersect the requested span.\n        if (node && ts.textSpanIntersectsWith(span, node.getFullStart(), node.getFullWidth())) {\n          var kind = node.kind;\n          checkForClassificationCancellation(kind);\n\n          if (kind === 69\n          /* Identifier */\n          && !ts.nodeIsMissing(node)) {\n            var identifier = node; // Only bother calling into the typechecker if this is an identifier that\n            // could possibly resolve to a type name.  This makes classification run\n            // in a third of the time it would normally take.\n\n            if (classifiableNames[identifier.text]) {\n              var symbol = typeChecker.getSymbolAtLocation(node);\n\n              if (symbol) {\n                var type = classifySymbol(symbol, getMeaningFromLocation(node));\n\n                if (type) {\n                  pushClassification(node.getStart(), node.getWidth(), type);\n                }\n              }\n            }\n          }\n\n          ts.forEachChild(node, processNode);\n        }\n      }\n    }\n\n    function getClassificationTypeName(type) {\n      switch (type) {\n        case 1\n        /* comment */\n        :\n          return ClassificationTypeNames.comment;\n\n        case 2\n        /* identifier */\n        :\n          return ClassificationTypeNames.identifier;\n\n        case 3\n        /* keyword */\n        :\n          return ClassificationTypeNames.keyword;\n\n        case 4\n        /* numericLiteral */\n        :\n          return ClassificationTypeNames.numericLiteral;\n\n        case 5\n        /* operator */\n        :\n          return ClassificationTypeNames.operator;\n\n        case 6\n        /* stringLiteral */\n        :\n          return ClassificationTypeNames.stringLiteral;\n\n        case 8\n        /* whiteSpace */\n        :\n          return ClassificationTypeNames.whiteSpace;\n\n        case 9\n        /* text */\n        :\n          return ClassificationTypeNames.text;\n\n        case 10\n        /* punctuation */\n        :\n          return ClassificationTypeNames.punctuation;\n\n        case 11\n        /* className */\n        :\n          return ClassificationTypeNames.className;\n\n        case 12\n        /* enumName */\n        :\n          return ClassificationTypeNames.enumName;\n\n        case 13\n        /* interfaceName */\n        :\n          return ClassificationTypeNames.interfaceName;\n\n        case 14\n        /* moduleName */\n        :\n          return ClassificationTypeNames.moduleName;\n\n        case 15\n        /* typeParameterName */\n        :\n          return ClassificationTypeNames.typeParameterName;\n\n        case 16\n        /* typeAliasName */\n        :\n          return ClassificationTypeNames.typeAliasName;\n\n        case 17\n        /* parameterName */\n        :\n          return ClassificationTypeNames.parameterName;\n\n        case 18\n        /* docCommentTagName */\n        :\n          return ClassificationTypeNames.docCommentTagName;\n\n        case 19\n        /* jsxOpenTagName */\n        :\n          return ClassificationTypeNames.jsxOpenTagName;\n\n        case 20\n        /* jsxCloseTagName */\n        :\n          return ClassificationTypeNames.jsxCloseTagName;\n\n        case 21\n        /* jsxSelfClosingTagName */\n        :\n          return ClassificationTypeNames.jsxSelfClosingTagName;\n\n        case 22\n        /* jsxAttribute */\n        :\n          return ClassificationTypeNames.jsxAttribute;\n\n        case 23\n        /* jsxText */\n        :\n          return ClassificationTypeNames.jsxText;\n\n        case 24\n        /* jsxAttributeStringLiteralValue */\n        :\n          return ClassificationTypeNames.jsxAttributeStringLiteralValue;\n      }\n    }\n\n    function convertClassifications(classifications) {\n      ts.Debug.assert(classifications.spans.length % 3 === 0);\n      var dense = classifications.spans;\n      var result = [];\n\n      for (var i = 0, n = dense.length; i < n; i += 3) {\n        result.push({\n          textSpan: ts.createTextSpan(dense[i], dense[i + 1]),\n          classificationType: getClassificationTypeName(dense[i + 2])\n        });\n      }\n\n      return result;\n    }\n\n    function getSyntacticClassifications(fileName, span) {\n      return convertClassifications(getEncodedSyntacticClassifications(fileName, span));\n    }\n\n    function getEncodedSyntacticClassifications(fileName, span) {\n      // doesn't use compiler - no need to synchronize with host\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      var spanStart = span.start;\n      var spanLength = span.length; // Make a scanner we can get trivia from.\n\n      var triviaScanner = ts.createScanner(2\n      /* Latest */\n      ,\n      /*skipTrivia*/\n      false, sourceFile.languageVariant, sourceFile.text);\n      var mergeConflictScanner = ts.createScanner(2\n      /* Latest */\n      ,\n      /*skipTrivia*/\n      false, sourceFile.languageVariant, sourceFile.text);\n      var result = [];\n      processElement(sourceFile);\n      return {\n        spans: result,\n        endOfLineState: 0\n        /* None */\n\n      };\n\n      function pushClassification(start, length, type) {\n        result.push(start);\n        result.push(length);\n        result.push(type);\n      }\n\n      function classifyLeadingTriviaAndGetTokenStart(token) {\n        triviaScanner.setTextPos(token.pos);\n\n        while (true) {\n          var start = triviaScanner.getTextPos(); // only bother scanning if we have something that could be trivia.\n\n          if (!ts.couldStartTrivia(sourceFile.text, start)) {\n            return start;\n          }\n\n          var kind = triviaScanner.scan();\n          var end = triviaScanner.getTextPos();\n          var width = end - start; // The moment we get something that isn't trivia, then stop processing.\n\n          if (!ts.isTrivia(kind)) {\n            return start;\n          } // Don't bother with newlines/whitespace.\n\n\n          if (kind === 4\n          /* NewLineTrivia */\n          || kind === 5\n          /* WhitespaceTrivia */\n          ) {\n              continue;\n            } // Only bother with the trivia if it at least intersects the span of interest.\n\n\n          if (ts.isComment(kind)) {\n            classifyComment(token, kind, start, width); // Classifying a comment might cause us to reuse the trivia scanner\n            // (because of jsdoc comments).  So after we classify the comment make\n            // sure we set the scanner position back to where it needs to be.\n\n            triviaScanner.setTextPos(end);\n            continue;\n          }\n\n          if (kind === 7\n          /* ConflictMarkerTrivia */\n          ) {\n              var text = sourceFile.text;\n              var ch = text.charCodeAt(start); // for the <<<<<<< and >>>>>>> markers, we just add them in as comments\n              // in the classification stream.\n\n              if (ch === 60\n              /* lessThan */\n              || ch === 62\n              /* greaterThan */\n              ) {\n                  pushClassification(start, width, 1\n                  /* comment */\n                  );\n                  continue;\n                } // for the ======== add a comment for the first line, and then lex all\n              // subsequent lines up until the end of the conflict marker.\n\n\n              ts.Debug.assert(ch === 61\n              /* equals */\n              );\n              classifyDisabledMergeCode(text, start, end);\n            }\n        }\n      }\n\n      function classifyComment(token, kind, start, width) {\n        if (kind === 3\n        /* MultiLineCommentTrivia */\n        ) {\n            // See if this is a doc comment.  If so, we'll classify certain portions of it\n            // specially.\n            var docCommentAndDiagnostics = ts.parseIsolatedJSDocComment(sourceFile.text, start, width);\n\n            if (docCommentAndDiagnostics && docCommentAndDiagnostics.jsDocComment) {\n              docCommentAndDiagnostics.jsDocComment.parent = token;\n              classifyJSDocComment(docCommentAndDiagnostics.jsDocComment);\n              return;\n            }\n          } // Simple comment.  Just add as is.\n\n\n        pushCommentRange(start, width);\n      }\n\n      function pushCommentRange(start, width) {\n        pushClassification(start, width, 1\n        /* comment */\n        );\n      }\n\n      function classifyJSDocComment(docComment) {\n        var pos = docComment.pos;\n\n        for (var _i = 0, _a = docComment.tags; _i < _a.length; _i++) {\n          var tag = _a[_i]; // As we walk through each tag, classify the portion of text from the end of\n          // the last tag (or the start of the entire doc comment) as 'comment'.\n\n          if (tag.pos !== pos) {\n            pushCommentRange(pos, tag.pos - pos);\n          }\n\n          pushClassification(tag.atToken.pos, tag.atToken.end - tag.atToken.pos, 10\n          /* punctuation */\n          );\n          pushClassification(tag.tagName.pos, tag.tagName.end - tag.tagName.pos, 18\n          /* docCommentTagName */\n          );\n          pos = tag.tagName.end;\n\n          switch (tag.kind) {\n            case 270\n            /* JSDocParameterTag */\n            :\n              processJSDocParameterTag(tag);\n              break;\n\n            case 273\n            /* JSDocTemplateTag */\n            :\n              processJSDocTemplateTag(tag);\n              break;\n\n            case 272\n            /* JSDocTypeTag */\n            :\n              processElement(tag.typeExpression);\n              break;\n\n            case 271\n            /* JSDocReturnTag */\n            :\n              processElement(tag.typeExpression);\n              break;\n          }\n\n          pos = tag.end;\n        }\n\n        if (pos !== docComment.end) {\n          pushCommentRange(pos, docComment.end - pos);\n        }\n\n        return;\n\n        function processJSDocParameterTag(tag) {\n          if (tag.preParameterName) {\n            pushCommentRange(pos, tag.preParameterName.pos - pos);\n            pushClassification(tag.preParameterName.pos, tag.preParameterName.end - tag.preParameterName.pos, 17\n            /* parameterName */\n            );\n            pos = tag.preParameterName.end;\n          }\n\n          if (tag.typeExpression) {\n            pushCommentRange(pos, tag.typeExpression.pos - pos);\n            processElement(tag.typeExpression);\n            pos = tag.typeExpression.end;\n          }\n\n          if (tag.postParameterName) {\n            pushCommentRange(pos, tag.postParameterName.pos - pos);\n            pushClassification(tag.postParameterName.pos, tag.postParameterName.end - tag.postParameterName.pos, 17\n            /* parameterName */\n            );\n            pos = tag.postParameterName.end;\n          }\n        }\n      }\n\n      function processJSDocTemplateTag(tag) {\n        for (var _i = 0, _a = tag.getChildren(); _i < _a.length; _i++) {\n          var child = _a[_i];\n          processElement(child);\n        }\n      }\n\n      function classifyDisabledMergeCode(text, start, end) {\n        // Classify the line that the ======= marker is on as a comment.  Then just lex\n        // all further tokens and add them to the result.\n        var i;\n\n        for (i = start; i < end; i++) {\n          if (ts.isLineBreak(text.charCodeAt(i))) {\n            break;\n          }\n        }\n\n        pushClassification(start, i - start, 1\n        /* comment */\n        );\n        mergeConflictScanner.setTextPos(i);\n\n        while (mergeConflictScanner.getTextPos() < end) {\n          classifyDisabledCodeToken();\n        }\n      }\n\n      function classifyDisabledCodeToken() {\n        var start = mergeConflictScanner.getTextPos();\n        var tokenKind = mergeConflictScanner.scan();\n        var end = mergeConflictScanner.getTextPos();\n        var type = classifyTokenType(tokenKind);\n\n        if (type) {\n          pushClassification(start, end - start, type);\n        }\n      }\n      /**\n       * Returns true if node should be treated as classified and no further processing is required.\n       * False will mean that node is not classified and traverse routine should recurse into node contents.\n       */\n\n\n      function tryClassifyNode(node) {\n        if (ts.nodeIsMissing(node)) {\n          return true;\n        }\n\n        var classifiedElementName = tryClassifyJsxElementName(node);\n\n        if (!ts.isToken(node) && node.kind !== 239\n        /* JsxText */\n        && classifiedElementName === undefined) {\n          return false;\n        }\n\n        var tokenStart = node.kind === 239\n        /* JsxText */\n        ? node.pos : classifyLeadingTriviaAndGetTokenStart(node);\n        var tokenWidth = node.end - tokenStart;\n        ts.Debug.assert(tokenWidth >= 0);\n\n        if (tokenWidth > 0) {\n          var type = classifiedElementName || classifyTokenType(node.kind, node);\n\n          if (type) {\n            pushClassification(tokenStart, tokenWidth, type);\n          }\n        }\n\n        return true;\n      }\n\n      function tryClassifyJsxElementName(token) {\n        switch (token.parent && token.parent.kind) {\n          case 238\n          /* JsxOpeningElement */\n          :\n            if (token.parent.tagName === token) {\n              return 19\n              /* jsxOpenTagName */\n              ;\n            }\n\n            break;\n\n          case 240\n          /* JsxClosingElement */\n          :\n            if (token.parent.tagName === token) {\n              return 20\n              /* jsxCloseTagName */\n              ;\n            }\n\n            break;\n\n          case 237\n          /* JsxSelfClosingElement */\n          :\n            if (token.parent.tagName === token) {\n              return 21\n              /* jsxSelfClosingTagName */\n              ;\n            }\n\n            break;\n\n          case 241\n          /* JsxAttribute */\n          :\n            if (token.parent.name === token) {\n              return 22\n              /* jsxAttribute */\n              ;\n            }\n\n            break;\n        }\n\n        return undefined;\n      } // for accurate classification, the actual token should be passed in.  however, for\n      // cases like 'disabled merge code' classification, we just get the token kind and\n      // classify based on that instead.\n\n\n      function classifyTokenType(tokenKind, token) {\n        if (ts.isKeyword(tokenKind)) {\n          return 3\n          /* keyword */\n          ;\n        } // Special case < and >  If they appear in a generic context they are punctuation,\n        // not operators.\n\n\n        if (tokenKind === 25\n        /* LessThanToken */\n        || tokenKind === 27\n        /* GreaterThanToken */\n        ) {\n            // If the node owning the token has a type argument list or type parameter list, then\n            // we can effectively assume that a '<' and '>' belong to those lists.\n            if (token && ts.getTypeArgumentOrTypeParameterList(token.parent)) {\n              return 10\n              /* punctuation */\n              ;\n            }\n          }\n\n        if (ts.isPunctuation(tokenKind)) {\n          if (token) {\n            if (tokenKind === 56\n            /* EqualsToken */\n            ) {\n                // the '=' in a variable declaration is special cased here.\n                if (token.parent.kind === 214\n                /* VariableDeclaration */\n                || token.parent.kind === 142\n                /* PropertyDeclaration */\n                || token.parent.kind === 139\n                /* Parameter */\n                || token.parent.kind === 241\n                /* JsxAttribute */\n                ) {\n                    return 5\n                    /* operator */\n                    ;\n                  }\n              }\n\n            if (token.parent.kind === 184\n            /* BinaryExpression */\n            || token.parent.kind === 182\n            /* PrefixUnaryExpression */\n            || token.parent.kind === 183\n            /* PostfixUnaryExpression */\n            || token.parent.kind === 185\n            /* ConditionalExpression */\n            ) {\n                return 5\n                /* operator */\n                ;\n              }\n          }\n\n          return 10\n          /* punctuation */\n          ;\n        } else if (tokenKind === 8\n        /* NumericLiteral */\n        ) {\n            return 4\n            /* numericLiteral */\n            ;\n          } else if (tokenKind === 9\n        /* StringLiteral */\n        || tokenKind === 163\n        /* StringLiteralType */\n        ) {\n            return token.parent.kind === 241\n            /* JsxAttribute */\n            ? 24\n            /* jsxAttributeStringLiteralValue */\n            : 6\n            /* stringLiteral */\n            ;\n          } else if (tokenKind === 10\n        /* RegularExpressionLiteral */\n        ) {\n            // TODO: we should get another classification type for these literals.\n            return 6\n            /* stringLiteral */\n            ;\n          } else if (ts.isTemplateLiteralKind(tokenKind)) {\n          // TODO (drosen): we should *also* get another classification type for these literals.\n          return 6\n          /* stringLiteral */\n          ;\n        } else if (tokenKind === 239\n        /* JsxText */\n        ) {\n            return 23\n            /* jsxText */\n            ;\n          } else if (tokenKind === 69\n        /* Identifier */\n        ) {\n            if (token) {\n              switch (token.parent.kind) {\n                case 217\n                /* ClassDeclaration */\n                :\n                  if (token.parent.name === token) {\n                    return 11\n                    /* className */\n                    ;\n                  }\n\n                  return;\n\n                case 138\n                /* TypeParameter */\n                :\n                  if (token.parent.name === token) {\n                    return 15\n                    /* typeParameterName */\n                    ;\n                  }\n\n                  return;\n\n                case 218\n                /* InterfaceDeclaration */\n                :\n                  if (token.parent.name === token) {\n                    return 13\n                    /* interfaceName */\n                    ;\n                  }\n\n                  return;\n\n                case 220\n                /* EnumDeclaration */\n                :\n                  if (token.parent.name === token) {\n                    return 12\n                    /* enumName */\n                    ;\n                  }\n\n                  return;\n\n                case 221\n                /* ModuleDeclaration */\n                :\n                  if (token.parent.name === token) {\n                    return 14\n                    /* moduleName */\n                    ;\n                  }\n\n                  return;\n\n                case 139\n                /* Parameter */\n                :\n                  if (token.parent.name === token) {\n                    return 17\n                    /* parameterName */\n                    ;\n                  }\n\n                  return;\n              }\n            }\n\n            return 2\n            /* identifier */\n            ;\n          }\n      }\n\n      function processElement(element) {\n        if (!element) {\n          return;\n        } // Ignore nodes that don't intersect the original span to classify.\n\n\n        if (ts.decodedTextSpanIntersectsWith(spanStart, spanLength, element.pos, element.getFullWidth())) {\n          checkForClassificationCancellation(element.kind);\n          var children = element.getChildren(sourceFile);\n\n          for (var i = 0, n = children.length; i < n; i++) {\n            var child = children[i];\n\n            if (!tryClassifyNode(child)) {\n              // Recurse into our child nodes.\n              processElement(child);\n            }\n          }\n        }\n      }\n    }\n\n    function getOutliningSpans(fileName) {\n      // doesn't use compiler - no need to synchronize with host\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      return ts.OutliningElementsCollector.collectElements(sourceFile);\n    }\n\n    function getBraceMatchingAtPosition(fileName, position) {\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      var result = [];\n      var token = ts.getTouchingToken(sourceFile, position);\n\n      if (token.getStart(sourceFile) === position) {\n        var matchKind = getMatchingTokenKind(token); // Ensure that there is a corresponding token to match ours.\n\n        if (matchKind) {\n          var parentElement = token.parent;\n          var childNodes = parentElement.getChildren(sourceFile);\n\n          for (var _i = 0, childNodes_1 = childNodes; _i < childNodes_1.length; _i++) {\n            var current = childNodes_1[_i];\n\n            if (current.kind === matchKind) {\n              var range1 = ts.createTextSpan(token.getStart(sourceFile), token.getWidth(sourceFile));\n              var range2 = ts.createTextSpan(current.getStart(sourceFile), current.getWidth(sourceFile)); // We want to order the braces when we return the result.\n\n              if (range1.start < range2.start) {\n                result.push(range1, range2);\n              } else {\n                result.push(range2, range1);\n              }\n\n              break;\n            }\n          }\n        }\n      }\n\n      return result;\n\n      function getMatchingTokenKind(token) {\n        switch (token.kind) {\n          case 15\n          /* OpenBraceToken */\n          :\n            return 16\n            /* CloseBraceToken */\n            ;\n\n          case 17\n          /* OpenParenToken */\n          :\n            return 18\n            /* CloseParenToken */\n            ;\n\n          case 19\n          /* OpenBracketToken */\n          :\n            return 20\n            /* CloseBracketToken */\n            ;\n\n          case 25\n          /* LessThanToken */\n          :\n            return 27\n            /* GreaterThanToken */\n            ;\n\n          case 16\n          /* CloseBraceToken */\n          :\n            return 15\n            /* OpenBraceToken */\n            ;\n\n          case 18\n          /* CloseParenToken */\n          :\n            return 17\n            /* OpenParenToken */\n            ;\n\n          case 20\n          /* CloseBracketToken */\n          :\n            return 19\n            /* OpenBracketToken */\n            ;\n\n          case 27\n          /* GreaterThanToken */\n          :\n            return 25\n            /* LessThanToken */\n            ;\n        }\n\n        return undefined;\n      }\n    }\n\n    function getIndentationAtPosition(fileName, position, editorOptions) {\n      var start = new Date().getTime();\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      log(\"getIndentationAtPosition: getCurrentSourceFile: \" + (new Date().getTime() - start));\n      start = new Date().getTime();\n      var result = ts.formatting.SmartIndenter.getIndentation(position, sourceFile, editorOptions);\n      log(\"getIndentationAtPosition: computeIndentation  : \" + (new Date().getTime() - start));\n      return result;\n    }\n\n    function getFormattingEditsForRange(fileName, start, end, options) {\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      return ts.formatting.formatSelection(start, end, sourceFile, getRuleProvider(options), options);\n    }\n\n    function getFormattingEditsForDocument(fileName, options) {\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n      return ts.formatting.formatDocument(sourceFile, getRuleProvider(options), options);\n    }\n\n    function getFormattingEditsAfterKeystroke(fileName, position, key, options) {\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName);\n\n      if (key === \"}\") {\n        return ts.formatting.formatOnClosingCurly(position, sourceFile, getRuleProvider(options), options);\n      } else if (key === \";\") {\n        return ts.formatting.formatOnSemicolon(position, sourceFile, getRuleProvider(options), options);\n      } else if (key === \"\\n\") {\n        return ts.formatting.formatOnEnter(position, sourceFile, getRuleProvider(options), options);\n      }\n\n      return [];\n    }\n    /**\n     * Checks if position points to a valid position to add JSDoc comments, and if so,\n     * returns the appropriate template. Otherwise returns an empty string.\n     * Valid positions are\n     *      - outside of comments, statements, and expressions, and\n     *      - preceding a:\n     *          - function/constructor/method declaration\n     *          - class declarations\n     *          - variable statements\n     *          - namespace declarations\n     *\n     * Hosts should ideally check that:\n     * - The line is all whitespace up to 'position' before performing the insertion.\n     * - If the keystroke sequence \"/\\*\\*\" induced the call, we also check that the next\n     * non-whitespace character is '*', which (approximately) indicates whether we added\n     * the second '*' to complete an existing (JSDoc) comment.\n     * @param fileName The file in which to perform the check.\n     * @param position The (character-indexed) position in the file where the check should\n     * be performed.\n     */\n\n\n    function getDocCommentTemplateAtPosition(fileName, position) {\n      var sourceFile = syntaxTreeCache.getCurrentSourceFile(fileName); // Check if in a context where we don't want to perform any insertion\n\n      if (ts.isInString(sourceFile, position) || ts.isInComment(sourceFile, position) || ts.hasDocComment(sourceFile, position)) {\n        return undefined;\n      }\n\n      var tokenAtPos = ts.getTokenAtPosition(sourceFile, position);\n      var tokenStart = tokenAtPos.getStart();\n\n      if (!tokenAtPos || tokenStart < position) {\n        return undefined;\n      } // TODO: add support for:\n      // - enums/enum members\n      // - interfaces\n      // - property declarations\n      // - potentially property assignments\n\n\n      var commentOwner;\n\n      findOwner: for (commentOwner = tokenAtPos; commentOwner; commentOwner = commentOwner.parent) {\n        switch (commentOwner.kind) {\n          case 216\n          /* FunctionDeclaration */\n          :\n          case 144\n          /* MethodDeclaration */\n          :\n          case 145\n          /* Constructor */\n          :\n          case 217\n          /* ClassDeclaration */\n          :\n          case 196\n          /* VariableStatement */\n          :\n            break findOwner;\n\n          case 251\n          /* SourceFile */\n          :\n            return undefined;\n\n          case 221\n          /* ModuleDeclaration */\n          :\n            // If in walking up the tree, we hit a a nested namespace declaration,\n            // then we must be somewhere within a dotted namespace name; however we don't\n            // want to give back a JSDoc template for the 'b' or 'c' in 'namespace a.b.c { }'.\n            if (commentOwner.parent.kind === 221\n            /* ModuleDeclaration */\n            ) {\n                return undefined;\n              }\n\n            break findOwner;\n        }\n      }\n\n      if (!commentOwner || commentOwner.getStart() < position) {\n        return undefined;\n      }\n\n      var parameters = getParametersForJsDocOwningNode(commentOwner);\n      var posLineAndChar = sourceFile.getLineAndCharacterOfPosition(position);\n      var lineStart = sourceFile.getLineStarts()[posLineAndChar.line];\n      var indentationStr = sourceFile.text.substr(lineStart, posLineAndChar.character);\n      var newLine = ts.getNewLineOrDefaultFromHost(host);\n      var docParams = \"\";\n\n      for (var i = 0, numParams = parameters.length; i < numParams; i++) {\n        var currentName = parameters[i].name;\n        var paramName = currentName.kind === 69\n        /* Identifier */\n        ? currentName.text : \"param\" + i;\n        docParams += indentationStr + \" * @param \" + paramName + newLine;\n      } // A doc comment consists of the following\n      // * The opening comment line\n      // * the first line (without a param) for the object's untagged info (this is also where the caret ends up)\n      // * the '@param'-tagged lines\n      // * TODO: other tags.\n      // * the closing comment line\n      // * if the caret was directly in front of the object, then we add an extra line and indentation.\n\n\n      var preamble = \"/**\" + newLine + indentationStr + \" * \";\n      var result = preamble + newLine + docParams + indentationStr + \" */\" + (tokenStart === position ? newLine + indentationStr : \"\");\n      return {\n        newText: result,\n        caretOffset: preamble.length\n      };\n    }\n\n    function getParametersForJsDocOwningNode(commentOwner) {\n      if (ts.isFunctionLike(commentOwner)) {\n        return commentOwner.parameters;\n      }\n\n      if (commentOwner.kind === 196\n      /* VariableStatement */\n      ) {\n          var varStatement = commentOwner;\n          var varDeclarations = varStatement.declarationList.declarations;\n\n          if (varDeclarations.length === 1 && varDeclarations[0].initializer) {\n            return getParametersFromRightHandSideOfAssignment(varDeclarations[0].initializer);\n          }\n        }\n\n      return emptyArray;\n    }\n    /**\n     * Digs into an an initializer or RHS operand of an assignment operation\n     * to get the parameters of an apt signature corresponding to a\n     * function expression or a class expression.\n     *\n     * @param rightHandSide the expression which may contain an appropriate set of parameters\n     * @returns the parameters of a signature found on the RHS if one exists; otherwise 'emptyArray'.\n     */\n\n\n    function getParametersFromRightHandSideOfAssignment(rightHandSide) {\n      while (rightHandSide.kind === 175\n      /* ParenthesizedExpression */\n      ) {\n        rightHandSide = rightHandSide.expression;\n      }\n\n      switch (rightHandSide.kind) {\n        case 176\n        /* FunctionExpression */\n        :\n        case 177\n        /* ArrowFunction */\n        :\n          return rightHandSide.parameters;\n\n        case 189\n        /* ClassExpression */\n        :\n          for (var _i = 0, _a = rightHandSide.members; _i < _a.length; _i++) {\n            var member = _a[_i];\n\n            if (member.kind === 145\n            /* Constructor */\n            ) {\n                return member.parameters;\n              }\n          }\n\n          break;\n      }\n\n      return emptyArray;\n    }\n\n    function getTodoComments(fileName, descriptors) {\n      // Note: while getting todo comments seems like a syntactic operation, we actually\n      // treat it as a semantic operation here.  This is because we expect our host to call\n      // this on every single file.  If we treat this syntactically, then that will cause\n      // us to populate and throw away the tree in our syntax tree cache for each file.  By\n      // treating this as a semantic operation, we can access any tree without throwing\n      // anything away.\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      cancellationToken.throwIfCancellationRequested();\n      var fileContents = sourceFile.text;\n      var result = [];\n\n      if (descriptors.length > 0) {\n        var regExp = getTodoCommentsRegExp();\n        var matchArray = void 0;\n\n        while (matchArray = regExp.exec(fileContents)) {\n          cancellationToken.throwIfCancellationRequested(); // If we got a match, here is what the match array will look like.  Say the source text is:\n          //\n          //      \"    // hack   1\"\n          //\n          // The result array with the regexp:    will be:\n          //\n          //      [\"// hack   1\", \"// \", \"hack   1\", undefined, \"hack\"]\n          //\n          // Here are the relevant capture groups:\n          //  0) The full match for the entire regexp.\n          //  1) The preamble to the message portion.\n          //  2) The message portion.\n          //  3...N) The descriptor that was matched - by index.  'undefined' for each\n          //         descriptor that didn't match.  an actual value if it did match.\n          //\n          //  i.e. 'undefined' in position 3 above means TODO(jason) didn't match.\n          //       \"hack\"      in position 4 means HACK did match.\n\n          var firstDescriptorCaptureIndex = 3;\n          ts.Debug.assert(matchArray.length === descriptors.length + firstDescriptorCaptureIndex);\n          var preamble = matchArray[1];\n          var matchPosition = matchArray.index + preamble.length; // OK, we have found a match in the file.  This is only an acceptable match if\n          // it is contained within a comment.\n\n          var token = ts.getTokenAtPosition(sourceFile, matchPosition);\n\n          if (!isInsideComment(sourceFile, token, matchPosition)) {\n            continue;\n          }\n\n          var descriptor = undefined;\n\n          for (var i = 0, n = descriptors.length; i < n; i++) {\n            if (matchArray[i + firstDescriptorCaptureIndex]) {\n              descriptor = descriptors[i];\n            }\n          }\n\n          ts.Debug.assert(descriptor !== undefined); // We don't want to match something like 'TODOBY', so we make sure a non\n          // letter/digit follows the match.\n\n          if (isLetterOrDigit(fileContents.charCodeAt(matchPosition + descriptor.text.length))) {\n            continue;\n          }\n\n          var message = matchArray[2];\n          result.push({\n            descriptor: descriptor,\n            message: message,\n            position: matchPosition\n          });\n        }\n      }\n\n      return result;\n\n      function escapeRegExp(str) {\n        return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n      }\n\n      function getTodoCommentsRegExp() {\n        // NOTE: ?:  means 'non-capture group'.  It allows us to have groups without having to\n        // filter them out later in the final result array.\n        // TODO comments can appear in one of the following forms:\n        //\n        //  1)      // TODO     or  /////////// TODO\n        //\n        //  2)      /* TODO     or  /********** TODO\n        //\n        //  3)      /*\n        //           *   TODO\n        //           */\n        //\n        // The following three regexps are used to match the start of the text up to the TODO\n        // comment portion.\n        var singleLineCommentStart = /(?:\\/\\/+\\s*)/.source;\n        var multiLineCommentStart = /(?:\\/\\*+\\s*)/.source;\n        var anyNumberOfSpacesAndAsterixesAtStartOfLine = /(?:^(?:\\s|\\*)*)/.source; // Match any of the above three TODO comment start regexps.\n        // Note that the outermost group *is* a capture group.  We want to capture the preamble\n        // so that we can determine the starting position of the TODO comment match.\n\n        var preamble = \"(\" + anyNumberOfSpacesAndAsterixesAtStartOfLine + \"|\" + singleLineCommentStart + \"|\" + multiLineCommentStart + \")\"; // Takes the descriptors and forms a regexp that matches them as if they were literals.\n        // For example, if the descriptors are \"TODO(jason)\" and \"HACK\", then this will be:\n        //\n        //      (?:(TODO\\(jason\\))|(HACK))\n        //\n        // Note that the outermost group is *not* a capture group, but the innermost groups\n        // *are* capture groups.  By capturing the inner literals we can determine after\n        // matching which descriptor we are dealing with.\n\n        var literals = \"(?:\" + ts.map(descriptors, function (d) {\n          return \"(\" + escapeRegExp(d.text) + \")\";\n        }).join(\"|\") + \")\"; // After matching a descriptor literal, the following regexp matches the rest of the\n        // text up to the end of the line (or */).\n\n        var endOfLineOrEndOfComment = /(?:$|\\*\\/)/.source;\n        var messageRemainder = /(?:.*?)/.source; // This is the portion of the match we'll return as part of the TODO comment result. We\n        // match the literal portion up to the end of the line or end of comment.\n\n        var messagePortion = \"(\" + literals + messageRemainder + \")\";\n        var regExpString = preamble + messagePortion + endOfLineOrEndOfComment; // The final regexp will look like this:\n        // /((?:\\/\\/+\\s*)|(?:\\/\\*+\\s*)|(?:^(?:\\s|\\*)*))((?:(TODO\\(jason\\))|(HACK))(?:.*?))(?:$|\\*\\/)/gim\n        // The flags of the regexp are important here.\n        //  'g' is so that we are doing a global search and can find matches several times\n        //  in the input.\n        //\n        //  'i' is for case insensitivity (We do this to match C# TODO comment code).\n        //\n        //  'm' is so we can find matches in a multi-line input.\n\n        return new RegExp(regExpString, \"gim\");\n      }\n\n      function isLetterOrDigit(char) {\n        return char >= 97\n        /* a */\n        && char <= 122\n        /* z */\n        || char >= 65\n        /* A */\n        && char <= 90\n        /* Z */\n        || char >= 48\n        /* _0 */\n        && char <= 57\n        /* _9 */\n        ;\n      }\n    }\n\n    function getRenameInfo(fileName, position) {\n      synchronizeHostData();\n      var sourceFile = getValidSourceFile(fileName);\n      var typeChecker = program.getTypeChecker();\n      var node = ts.getTouchingWord(sourceFile, position); // Can only rename an identifier.\n\n      if (node && node.kind === 69\n      /* Identifier */\n      ) {\n          var symbol = typeChecker.getSymbolAtLocation(node); // Only allow a symbol to be renamed if it actually has at least one declaration.\n\n          if (symbol) {\n            var declarations = symbol.getDeclarations();\n\n            if (declarations && declarations.length > 0) {\n              // Disallow rename for elements that are defined in the standard TypeScript library.\n              var defaultLibFileName = host.getDefaultLibFileName(host.getCompilationSettings());\n              var canonicalDefaultLibName = getCanonicalFileName(ts.normalizePath(defaultLibFileName));\n\n              if (defaultLibFileName) {\n                for (var _i = 0, declarations_10 = declarations; _i < declarations_10.length; _i++) {\n                  var current = declarations_10[_i];\n                  var sourceFile_3 = current.getSourceFile(); // TODO (drosen): When is there no source file?\n\n                  if (!sourceFile_3) {\n                    continue;\n                  }\n\n                  var canonicalName = getCanonicalFileName(ts.normalizePath(sourceFile_3.fileName));\n\n                  if (canonicalName === canonicalDefaultLibName) {\n                    return getRenameInfoError(ts.getLocaleSpecificMessage(ts.Diagnostics.You_cannot_rename_elements_that_are_defined_in_the_standard_TypeScript_library));\n                  }\n                }\n              }\n\n              var displayName = ts.stripQuotes(ts.getDeclaredName(typeChecker, symbol, node));\n              var kind = getSymbolKind(symbol, node);\n\n              if (kind) {\n                return {\n                  canRename: true,\n                  kind: kind,\n                  displayName: displayName,\n                  localizedErrorMessage: undefined,\n                  fullDisplayName: typeChecker.getFullyQualifiedName(symbol),\n                  kindModifiers: getSymbolModifiers(symbol),\n                  triggerSpan: ts.createTextSpan(node.getStart(), node.getWidth())\n                };\n              }\n            }\n          }\n        }\n\n      return getRenameInfoError(ts.getLocaleSpecificMessage(ts.Diagnostics.You_cannot_rename_this_element));\n\n      function getRenameInfoError(localizedErrorMessage) {\n        return {\n          canRename: false,\n          localizedErrorMessage: localizedErrorMessage,\n          displayName: undefined,\n          fullDisplayName: undefined,\n          kind: undefined,\n          kindModifiers: undefined,\n          triggerSpan: undefined\n        };\n      }\n    }\n\n    return {\n      dispose: dispose,\n      cleanupSemanticCache: cleanupSemanticCache,\n      getSyntacticDiagnostics: getSyntacticDiagnostics,\n      getSemanticDiagnostics: getSemanticDiagnostics,\n      getCompilerOptionsDiagnostics: getCompilerOptionsDiagnostics,\n      getSyntacticClassifications: getSyntacticClassifications,\n      getSemanticClassifications: getSemanticClassifications,\n      getEncodedSyntacticClassifications: getEncodedSyntacticClassifications,\n      getEncodedSemanticClassifications: getEncodedSemanticClassifications,\n      getCompletionsAtPosition: getCompletionsAtPosition,\n      getCompletionEntryDetails: getCompletionEntryDetails,\n      getSignatureHelpItems: getSignatureHelpItems,\n      getQuickInfoAtPosition: getQuickInfoAtPosition,\n      getDefinitionAtPosition: getDefinitionAtPosition,\n      getTypeDefinitionAtPosition: getTypeDefinitionAtPosition,\n      getReferencesAtPosition: getReferencesAtPosition,\n      findReferences: findReferences,\n      getOccurrencesAtPosition: getOccurrencesAtPosition,\n      getDocumentHighlights: getDocumentHighlights,\n      getNameOrDottedNameSpan: getNameOrDottedNameSpan,\n      getBreakpointStatementAtPosition: getBreakpointStatementAtPosition,\n      getNavigateToItems: getNavigateToItems,\n      getRenameInfo: getRenameInfo,\n      findRenameLocations: findRenameLocations,\n      getNavigationBarItems: getNavigationBarItems,\n      getOutliningSpans: getOutliningSpans,\n      getTodoComments: getTodoComments,\n      getBraceMatchingAtPosition: getBraceMatchingAtPosition,\n      getIndentationAtPosition: getIndentationAtPosition,\n      getFormattingEditsForRange: getFormattingEditsForRange,\n      getFormattingEditsForDocument: getFormattingEditsForDocument,\n      getFormattingEditsAfterKeystroke: getFormattingEditsAfterKeystroke,\n      getDocCommentTemplateAtPosition: getDocCommentTemplateAtPosition,\n      getEmitOutput: getEmitOutput,\n      getSourceFile: getSourceFile,\n      getProgram: getProgram\n    };\n  }\n\n  ts.createLanguageService = createLanguageService;\n  /* @internal */\n\n  function getNameTable(sourceFile) {\n    if (!sourceFile.nameTable) {\n      initializeNameTable(sourceFile);\n    }\n\n    return sourceFile.nameTable;\n  }\n\n  ts.getNameTable = getNameTable;\n\n  function initializeNameTable(sourceFile) {\n    var nameTable = {};\n    walk(sourceFile);\n    sourceFile.nameTable = nameTable;\n\n    function walk(node) {\n      switch (node.kind) {\n        case 69\n        /* Identifier */\n        :\n          nameTable[node.text] = nameTable[node.text] === undefined ? node.pos : -1;\n          break;\n\n        case 9\n        /* StringLiteral */\n        :\n        case 8\n        /* NumericLiteral */\n        :\n          // We want to store any numbers/strings if they were a name that could be\n          // related to a declaration.  So, if we have 'import x = require(\"something\")'\n          // then we want 'something' to be in the name table.  Similarly, if we have\n          // \"a['propname']\" then we want to store \"propname\" in the name table.\n          if (ts.isDeclarationName(node) || node.parent.kind === 235\n          /* ExternalModuleReference */\n          || isArgumentOfElementAccessExpression(node)) {\n            nameTable[node.text] = nameTable[node.text] === undefined ? node.pos : -1;\n          }\n\n          break;\n\n        default:\n          ts.forEachChild(node, walk);\n      }\n    }\n  }\n\n  function isArgumentOfElementAccessExpression(node) {\n    return node && node.parent && node.parent.kind === 170\n    /* ElementAccessExpression */\n    && node.parent.argumentExpression === node;\n  } /// Classifier\n\n\n  function createClassifier() {\n    var scanner = ts.createScanner(2\n    /* Latest */\n    ,\n    /*skipTrivia*/\n    false); /// We do not have a full parser support to know when we should parse a regex or not\n    /// If we consider every slash token to be a regex, we could be missing cases like \"1/2/3\", where\n    /// we have a series of divide operator. this list allows us to be more accurate by ruling out\n    /// locations where a regexp cannot exist.\n\n    var noRegexTable = [];\n    noRegexTable[69\n    /* Identifier */\n    ] = true;\n    noRegexTable[9\n    /* StringLiteral */\n    ] = true;\n    noRegexTable[8\n    /* NumericLiteral */\n    ] = true;\n    noRegexTable[10\n    /* RegularExpressionLiteral */\n    ] = true;\n    noRegexTable[97\n    /* ThisKeyword */\n    ] = true;\n    noRegexTable[41\n    /* PlusPlusToken */\n    ] = true;\n    noRegexTable[42\n    /* MinusMinusToken */\n    ] = true;\n    noRegexTable[18\n    /* CloseParenToken */\n    ] = true;\n    noRegexTable[20\n    /* CloseBracketToken */\n    ] = true;\n    noRegexTable[16\n    /* CloseBraceToken */\n    ] = true;\n    noRegexTable[99\n    /* TrueKeyword */\n    ] = true;\n    noRegexTable[84\n    /* FalseKeyword */\n    ] = true; // Just a stack of TemplateHeads and OpenCurlyBraces, used to perform rudimentary (inexact)\n    // classification on template strings. Because of the context free nature of templates,\n    // the only precise way to classify a template portion would be by propagating the stack across\n    // lines, just as we do with the end-of-line state. However, this is a burden for implementers,\n    // and the behavior is entirely subsumed by the syntactic classifier anyway, so we instead\n    // flatten any nesting when the template stack is non-empty and encode it in the end-of-line state.\n    // Situations in which this fails are\n    //  1) When template strings are nested across different lines:\n    //          `hello ${ `world\n    //          ` }`\n    //\n    //     Where on the second line, you will get the closing of a template,\n    //     a closing curly, and a new template.\n    //\n    //  2) When substitution expressions have curly braces and the curly brace falls on the next line:\n    //          `hello ${ () => {\n    //          return \"world\" } } `\n    //\n    //     Where on the second line, you will get the 'return' keyword,\n    //     a string literal, and a template end consisting of '} } `'.\n\n    var templateStack = [];\n    /** Returns true if 'keyword2' can legally follow 'keyword1' in any language construct. */\n\n    function canFollow(keyword1, keyword2) {\n      if (ts.isAccessibilityModifier(keyword1)) {\n        if (keyword2 === 123\n        /* GetKeyword */\n        || keyword2 === 129\n        /* SetKeyword */\n        || keyword2 === 121\n        /* ConstructorKeyword */\n        || keyword2 === 113\n        /* StaticKeyword */\n        ) {\n            // Allow things like \"public get\", \"public constructor\" and \"public static\".\n            // These are all legal.\n            return true;\n          } // Any other keyword following \"public\" is actually an identifier an not a real\n        // keyword.\n\n\n        return false;\n      } // Assume any other keyword combination is legal.  This can be refined in the future\n      // if there are more cases we want the classifier to be better at.\n\n\n      return true;\n    }\n\n    function convertClassifications(classifications, text) {\n      var entries = [];\n      var dense = classifications.spans;\n      var lastEnd = 0;\n\n      for (var i = 0, n = dense.length; i < n; i += 3) {\n        var start = dense[i];\n        var length_3 = dense[i + 1];\n        var type = dense[i + 2]; // Make a whitespace entry between the last item and this one.\n\n        if (lastEnd >= 0) {\n          var whitespaceLength_1 = start - lastEnd;\n\n          if (whitespaceLength_1 > 0) {\n            entries.push({\n              length: whitespaceLength_1,\n              classification: TokenClass.Whitespace\n            });\n          }\n        }\n\n        entries.push({\n          length: length_3,\n          classification: convertClassification(type)\n        });\n        lastEnd = start + length_3;\n      }\n\n      var whitespaceLength = text.length - lastEnd;\n\n      if (whitespaceLength > 0) {\n        entries.push({\n          length: whitespaceLength,\n          classification: TokenClass.Whitespace\n        });\n      }\n\n      return {\n        entries: entries,\n        finalLexState: classifications.endOfLineState\n      };\n    }\n\n    function convertClassification(type) {\n      switch (type) {\n        case 1\n        /* comment */\n        :\n          return TokenClass.Comment;\n\n        case 3\n        /* keyword */\n        :\n          return TokenClass.Keyword;\n\n        case 4\n        /* numericLiteral */\n        :\n          return TokenClass.NumberLiteral;\n\n        case 5\n        /* operator */\n        :\n          return TokenClass.Operator;\n\n        case 6\n        /* stringLiteral */\n        :\n          return TokenClass.StringLiteral;\n\n        case 8\n        /* whiteSpace */\n        :\n          return TokenClass.Whitespace;\n\n        case 10\n        /* punctuation */\n        :\n          return TokenClass.Punctuation;\n\n        case 2\n        /* identifier */\n        :\n        case 11\n        /* className */\n        :\n        case 12\n        /* enumName */\n        :\n        case 13\n        /* interfaceName */\n        :\n        case 14\n        /* moduleName */\n        :\n        case 15\n        /* typeParameterName */\n        :\n        case 16\n        /* typeAliasName */\n        :\n        case 9\n        /* text */\n        :\n        case 17\n        /* parameterName */\n        :\n        default:\n          return TokenClass.Identifier;\n      }\n    }\n\n    function getClassificationsForLine(text, lexState, syntacticClassifierAbsent) {\n      return convertClassifications(getEncodedLexicalClassifications(text, lexState, syntacticClassifierAbsent), text);\n    } // If there is a syntactic classifier ('syntacticClassifierAbsent' is false),\n    // we will be more conservative in order to avoid conflicting with the syntactic classifier.\n\n\n    function getEncodedLexicalClassifications(text, lexState, syntacticClassifierAbsent) {\n      var offset = 0;\n      var token = 0\n      /* Unknown */\n      ;\n      var lastNonTriviaToken = 0\n      /* Unknown */\n      ; // Empty out the template stack for reuse.\n\n      while (templateStack.length > 0) {\n        templateStack.pop();\n      } // If we're in a string literal, then prepend: \"\\\n      // (and a newline).  That way when we lex we'll think we're still in a string literal.\n      //\n      // If we're in a multiline comment, then prepend: /*\n      // (and a newline).  That way when we lex we'll think we're still in a multiline comment.\n\n\n      switch (lexState) {\n        case 3\n        /* InDoubleQuoteStringLiteral */\n        :\n          text = \"\\\"\\\\\\n\" + text;\n          offset = 3;\n          break;\n\n        case 2\n        /* InSingleQuoteStringLiteral */\n        :\n          text = \"'\\\\\\n\" + text;\n          offset = 3;\n          break;\n\n        case 1\n        /* InMultiLineCommentTrivia */\n        :\n          text = \"/*\\n\" + text;\n          offset = 3;\n          break;\n\n        case 4\n        /* InTemplateHeadOrNoSubstitutionTemplate */\n        :\n          text = \"`\\n\" + text;\n          offset = 2;\n          break;\n\n        case 5\n        /* InTemplateMiddleOrTail */\n        :\n          text = \"}\\n\" + text;\n          offset = 2;\n        // fallthrough\n\n        case 6\n        /* InTemplateSubstitutionPosition */\n        :\n          templateStack.push(12\n          /* TemplateHead */\n          );\n          break;\n      }\n\n      scanner.setText(text);\n      var result = {\n        endOfLineState: 0\n        /* None */\n        ,\n        spans: []\n      }; // We can run into an unfortunate interaction between the lexical and syntactic classifier\n      // when the user is typing something generic.  Consider the case where the user types:\n      //\n      //      Foo<number\n      //\n      // From the lexical classifier's perspective, 'number' is a keyword, and so the word will\n      // be classified as such.  However, from the syntactic classifier's tree-based perspective\n      // this is simply an expression with the identifier 'number' on the RHS of the less than\n      // token.  So the classification will go back to being an identifier.  The moment the user\n      // types again, number will become a keyword, then an identifier, etc. etc.\n      //\n      // To try to avoid this problem, we avoid classifying contextual keywords as keywords\n      // when the user is potentially typing something generic.  We just can't do a good enough\n      // job at the lexical level, and so well leave it up to the syntactic classifier to make\n      // the determination.\n      //\n      // In order to determine if the user is potentially typing something generic, we use a\n      // weak heuristic where we track < and > tokens.  It's a weak heuristic, but should\n      // work well enough in practice.\n\n      var angleBracketStack = 0;\n\n      do {\n        token = scanner.scan();\n\n        if (!ts.isTrivia(token)) {\n          if ((token === 39\n          /* SlashToken */\n          || token === 61\n          /* SlashEqualsToken */\n          ) && !noRegexTable[lastNonTriviaToken]) {\n            if (scanner.reScanSlashToken() === 10\n            /* RegularExpressionLiteral */\n            ) {\n                token = 10\n                /* RegularExpressionLiteral */\n                ;\n              }\n          } else if (lastNonTriviaToken === 21\n          /* DotToken */\n          && isKeyword(token)) {\n            token = 69\n            /* Identifier */\n            ;\n          } else if (isKeyword(lastNonTriviaToken) && isKeyword(token) && !canFollow(lastNonTriviaToken, token)) {\n            // We have two keywords in a row.  Only treat the second as a keyword if\n            // it's a sequence that could legally occur in the language.  Otherwise\n            // treat it as an identifier.  This way, if someone writes \"private var\"\n            // we recognize that 'var' is actually an identifier here.\n            token = 69\n            /* Identifier */\n            ;\n          } else if (lastNonTriviaToken === 69\n          /* Identifier */\n          && token === 25\n          /* LessThanToken */\n          ) {\n              // Could be the start of something generic.  Keep track of that by bumping\n              // up the current count of generic contexts we may be in.\n              angleBracketStack++;\n            } else if (token === 27\n          /* GreaterThanToken */\n          && angleBracketStack > 0) {\n            // If we think we're currently in something generic, then mark that that\n            // generic entity is complete.\n            angleBracketStack--;\n          } else if (token === 117\n          /* AnyKeyword */\n          || token === 130\n          /* StringKeyword */\n          || token === 128\n          /* NumberKeyword */\n          || token === 120\n          /* BooleanKeyword */\n          || token === 131\n          /* SymbolKeyword */\n          ) {\n              if (angleBracketStack > 0 && !syntacticClassifierAbsent) {\n                // If it looks like we're could be in something generic, don't classify this\n                // as a keyword.  We may just get overwritten by the syntactic classifier,\n                // causing a noisy experience for the user.\n                token = 69\n                /* Identifier */\n                ;\n              }\n            } else if (token === 12\n          /* TemplateHead */\n          ) {\n              templateStack.push(token);\n            } else if (token === 15\n          /* OpenBraceToken */\n          ) {\n              // If we don't have anything on the template stack,\n              // then we aren't trying to keep track of a previously scanned template head.\n              if (templateStack.length > 0) {\n                templateStack.push(token);\n              }\n            } else if (token === 16\n          /* CloseBraceToken */\n          ) {\n              // If we don't have anything on the template stack,\n              // then we aren't trying to keep track of a previously scanned template head.\n              if (templateStack.length > 0) {\n                var lastTemplateStackToken = ts.lastOrUndefined(templateStack);\n\n                if (lastTemplateStackToken === 12\n                /* TemplateHead */\n                ) {\n                    token = scanner.reScanTemplateToken(); // Only pop on a TemplateTail; a TemplateMiddle indicates there is more for us.\n\n                    if (token === 14\n                    /* TemplateTail */\n                    ) {\n                        templateStack.pop();\n                      } else {\n                      ts.Debug.assert(token === 13\n                      /* TemplateMiddle */\n                      , \"Should have been a template middle. Was \" + token);\n                    }\n                  } else {\n                  ts.Debug.assert(lastTemplateStackToken === 15\n                  /* OpenBraceToken */\n                  , \"Should have been an open brace. Was: \" + token);\n                  templateStack.pop();\n                }\n              }\n            }\n\n          lastNonTriviaToken = token;\n        }\n\n        processToken();\n      } while (token !== 1\n      /* EndOfFileToken */\n      );\n\n      return result;\n\n      function processToken() {\n        var start = scanner.getTokenPos();\n        var end = scanner.getTextPos();\n        addResult(start, end, classFromKind(token));\n\n        if (end >= text.length) {\n          if (token === 9\n          /* StringLiteral */\n          || token === 163\n          /* StringLiteralType */\n          ) {\n              // Check to see if we finished up on a multiline string literal.\n              var tokenText = scanner.getTokenText();\n\n              if (scanner.isUnterminated()) {\n                var lastCharIndex = tokenText.length - 1;\n                var numBackslashes = 0;\n\n                while (tokenText.charCodeAt(lastCharIndex - numBackslashes) === 92\n                /* backslash */\n                ) {\n                  numBackslashes++;\n                } // If we have an odd number of backslashes, then the multiline string is unclosed\n\n\n                if (numBackslashes & 1) {\n                  var quoteChar = tokenText.charCodeAt(0);\n                  result.endOfLineState = quoteChar === 34\n                  /* doubleQuote */\n                  ? 3\n                  /* InDoubleQuoteStringLiteral */\n                  : 2\n                  /* InSingleQuoteStringLiteral */\n                  ;\n                }\n              }\n            } else if (token === 3\n          /* MultiLineCommentTrivia */\n          ) {\n              // Check to see if the multiline comment was unclosed.\n              if (scanner.isUnterminated()) {\n                result.endOfLineState = 1\n                /* InMultiLineCommentTrivia */\n                ;\n              }\n            } else if (ts.isTemplateLiteralKind(token)) {\n            if (scanner.isUnterminated()) {\n              if (token === 14\n              /* TemplateTail */\n              ) {\n                  result.endOfLineState = 5\n                  /* InTemplateMiddleOrTail */\n                  ;\n                } else if (token === 11\n              /* NoSubstitutionTemplateLiteral */\n              ) {\n                  result.endOfLineState = 4\n                  /* InTemplateHeadOrNoSubstitutionTemplate */\n                  ;\n                } else {\n                ts.Debug.fail(\"Only 'NoSubstitutionTemplateLiteral's and 'TemplateTail's can be unterminated; got SyntaxKind #\" + token);\n              }\n            }\n          } else if (templateStack.length > 0 && ts.lastOrUndefined(templateStack) === 12\n          /* TemplateHead */\n          ) {\n              result.endOfLineState = 6\n              /* InTemplateSubstitutionPosition */\n              ;\n            }\n        }\n      }\n\n      function addResult(start, end, classification) {\n        if (classification === 8\n        /* whiteSpace */\n        ) {\n            // Don't bother with whitespace classifications.  They're not needed.\n            return;\n          }\n\n        if (start === 0 && offset > 0) {\n          // We're classifying the first token, and this was a case where we prepended\n          // text.  We should consider the start of this token to be at the start of\n          // the original text.\n          start += offset;\n        } // All our tokens are in relation to the augmented text.  Move them back to be\n        // relative to the original text.\n\n\n        start -= offset;\n        end -= offset;\n        var length = end - start;\n\n        if (length > 0) {\n          result.spans.push(start);\n          result.spans.push(length);\n          result.spans.push(classification);\n        }\n      }\n    }\n\n    function isBinaryExpressionOperatorToken(token) {\n      switch (token) {\n        case 37\n        /* AsteriskToken */\n        :\n        case 39\n        /* SlashToken */\n        :\n        case 40\n        /* PercentToken */\n        :\n        case 35\n        /* PlusToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n        case 43\n        /* LessThanLessThanToken */\n        :\n        case 44\n        /* GreaterThanGreaterThanToken */\n        :\n        case 45\n        /* GreaterThanGreaterThanGreaterThanToken */\n        :\n        case 25\n        /* LessThanToken */\n        :\n        case 27\n        /* GreaterThanToken */\n        :\n        case 28\n        /* LessThanEqualsToken */\n        :\n        case 29\n        /* GreaterThanEqualsToken */\n        :\n        case 91\n        /* InstanceOfKeyword */\n        :\n        case 90\n        /* InKeyword */\n        :\n        case 116\n        /* AsKeyword */\n        :\n        case 30\n        /* EqualsEqualsToken */\n        :\n        case 31\n        /* ExclamationEqualsToken */\n        :\n        case 32\n        /* EqualsEqualsEqualsToken */\n        :\n        case 33\n        /* ExclamationEqualsEqualsToken */\n        :\n        case 46\n        /* AmpersandToken */\n        :\n        case 48\n        /* CaretToken */\n        :\n        case 47\n        /* BarToken */\n        :\n        case 51\n        /* AmpersandAmpersandToken */\n        :\n        case 52\n        /* BarBarToken */\n        :\n        case 67\n        /* BarEqualsToken */\n        :\n        case 66\n        /* AmpersandEqualsToken */\n        :\n        case 68\n        /* CaretEqualsToken */\n        :\n        case 63\n        /* LessThanLessThanEqualsToken */\n        :\n        case 64\n        /* GreaterThanGreaterThanEqualsToken */\n        :\n        case 65\n        /* GreaterThanGreaterThanGreaterThanEqualsToken */\n        :\n        case 57\n        /* PlusEqualsToken */\n        :\n        case 58\n        /* MinusEqualsToken */\n        :\n        case 59\n        /* AsteriskEqualsToken */\n        :\n        case 61\n        /* SlashEqualsToken */\n        :\n        case 62\n        /* PercentEqualsToken */\n        :\n        case 56\n        /* EqualsToken */\n        :\n        case 24\n        /* CommaToken */\n        :\n          return true;\n\n        default:\n          return false;\n      }\n    }\n\n    function isPrefixUnaryExpressionOperatorToken(token) {\n      switch (token) {\n        case 35\n        /* PlusToken */\n        :\n        case 36\n        /* MinusToken */\n        :\n        case 50\n        /* TildeToken */\n        :\n        case 49\n        /* ExclamationToken */\n        :\n        case 41\n        /* PlusPlusToken */\n        :\n        case 42\n        /* MinusMinusToken */\n        :\n          return true;\n\n        default:\n          return false;\n      }\n    }\n\n    function isKeyword(token) {\n      return token >= 70\n      /* FirstKeyword */\n      && token <= 135\n      /* LastKeyword */\n      ;\n    }\n\n    function classFromKind(token) {\n      if (isKeyword(token)) {\n        return 3\n        /* keyword */\n        ;\n      } else if (isBinaryExpressionOperatorToken(token) || isPrefixUnaryExpressionOperatorToken(token)) {\n        return 5\n        /* operator */\n        ;\n      } else if (token >= 15\n      /* FirstPunctuation */\n      && token <= 68\n      /* LastPunctuation */\n      ) {\n          return 10\n          /* punctuation */\n          ;\n        }\n\n      switch (token) {\n        case 8\n        /* NumericLiteral */\n        :\n          return 4\n          /* numericLiteral */\n          ;\n\n        case 9\n        /* StringLiteral */\n        :\n        case 163\n        /* StringLiteralType */\n        :\n          return 6\n          /* stringLiteral */\n          ;\n\n        case 10\n        /* RegularExpressionLiteral */\n        :\n          return 7\n          /* regularExpressionLiteral */\n          ;\n\n        case 7\n        /* ConflictMarkerTrivia */\n        :\n        case 3\n        /* MultiLineCommentTrivia */\n        :\n        case 2\n        /* SingleLineCommentTrivia */\n        :\n          return 1\n          /* comment */\n          ;\n\n        case 5\n        /* WhitespaceTrivia */\n        :\n        case 4\n        /* NewLineTrivia */\n        :\n          return 8\n          /* whiteSpace */\n          ;\n\n        case 69\n        /* Identifier */\n        :\n        default:\n          if (ts.isTemplateLiteralKind(token)) {\n            return 6\n            /* stringLiteral */\n            ;\n          }\n\n          return 2\n          /* identifier */\n          ;\n      }\n    }\n\n    return {\n      getClassificationsForLine: getClassificationsForLine,\n      getEncodedLexicalClassifications: getEncodedLexicalClassifications\n    };\n  }\n\n  ts.createClassifier = createClassifier;\n  /**\n    * Get the path of the default library files (lib.d.ts) as distributed with the typescript\n    * node package.\n    * The functionality is not supported if the ts module is consumed outside of a node module.\n    */\n\n  function getDefaultLibFilePath(options) {\n    // Check __dirname is defined and that we are on a node.js system.\n    if (typeof __dirname !== \"undefined\") {\n      return __dirname + ts.directorySeparator + ts.getDefaultLibFileName(options);\n    }\n\n    throw new Error(\"getDefaultLibFilePath is only supported when consumed as a node module. \");\n  }\n\n  ts.getDefaultLibFilePath = getDefaultLibFilePath;\n\n  function initializeServices() {\n    ts.objectAllocator = {\n      getNodeConstructor: function getNodeConstructor() {\n        return NodeObject;\n      },\n      getSourceFileConstructor: function getSourceFileConstructor() {\n        return SourceFileObject;\n      },\n      getSymbolConstructor: function getSymbolConstructor() {\n        return SymbolObject;\n      },\n      getTypeConstructor: function getTypeConstructor() {\n        return TypeObject;\n      },\n      getSignatureConstructor: function getSignatureConstructor() {\n        return SignatureObject;\n      }\n    };\n  }\n\n  initializeServices();\n})(ts || (ts = {})); // Copyright (c) Microsoft. All rights reserved. Licensed under the Apache License, Version 2.0. \n// See LICENSE.txt in the project root for complete license information.\n/// <reference path='services.ts' />\n\n/* @internal */\n\n\nvar ts;\n\n(function (ts) {\n  var BreakpointResolver;\n\n  (function (BreakpointResolver) {\n    /**\n     * Get the breakpoint span in given sourceFile\n     */\n    function spanInSourceFileAtLocation(sourceFile, position) {\n      // Cannot set breakpoint in dts file\n      if (sourceFile.flags & 4096\n      /* DeclarationFile */\n      ) {\n          return undefined;\n        }\n\n      var tokenAtLocation = ts.getTokenAtPosition(sourceFile, position);\n      var lineOfPosition = sourceFile.getLineAndCharacterOfPosition(position).line;\n\n      if (sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getStart(sourceFile)).line > lineOfPosition) {\n        // Get previous token if the token is returned starts on new line\n        // eg: let x =10; |--- cursor is here\n        //     let y = 10; \n        // token at position will return let keyword on second line as the token but we would like to use \n        // token on same line if trailing trivia (comments or white spaces on same line) part of the last token on that line\n        tokenAtLocation = ts.findPrecedingToken(tokenAtLocation.pos, sourceFile); // Its a blank line\n\n        if (!tokenAtLocation || sourceFile.getLineAndCharacterOfPosition(tokenAtLocation.getEnd()).line !== lineOfPosition) {\n          return undefined;\n        }\n      } // Cannot set breakpoint in ambient declarations\n\n\n      if (ts.isInAmbientContext(tokenAtLocation)) {\n        return undefined;\n      } // Get the span in the node based on its syntax\n\n\n      return spanInNode(tokenAtLocation);\n\n      function textSpan(startNode, endNode) {\n        var start = startNode.decorators ? ts.skipTrivia(sourceFile.text, startNode.decorators.end) : startNode.getStart(sourceFile);\n        return ts.createTextSpanFromBounds(start, (endNode || startNode).getEnd());\n      }\n\n      function textSpanEndingAtNextToken(startNode, previousTokenToFindNextEndToken) {\n        return textSpan(startNode, ts.findNextToken(previousTokenToFindNextEndToken, previousTokenToFindNextEndToken.parent));\n      }\n\n      function spanInNodeIfStartsOnSameLine(node, otherwiseOnNode) {\n        if (node && lineOfPosition === sourceFile.getLineAndCharacterOfPosition(node.getStart(sourceFile)).line) {\n          return spanInNode(node);\n        }\n\n        return spanInNode(otherwiseOnNode);\n      }\n\n      function spanInNodeArray(nodeArray) {\n        return ts.createTextSpanFromBounds(ts.skipTrivia(sourceFile.text, nodeArray.pos), nodeArray.end);\n      }\n\n      function spanInPreviousNode(node) {\n        return spanInNode(ts.findPrecedingToken(node.pos, sourceFile));\n      }\n\n      function spanInNextNode(node) {\n        return spanInNode(ts.findNextToken(node, node.parent));\n      }\n\n      function spanInNode(node) {\n        if (node) {\n          switch (node.kind) {\n            case 196\n            /* VariableStatement */\n            :\n              // Span on first variable declaration\n              return spanInVariableDeclaration(node.declarationList.declarations[0]);\n\n            case 214\n            /* VariableDeclaration */\n            :\n            case 142\n            /* PropertyDeclaration */\n            :\n            case 141\n            /* PropertySignature */\n            :\n              return spanInVariableDeclaration(node);\n\n            case 139\n            /* Parameter */\n            :\n              return spanInParameterDeclaration(node);\n\n            case 216\n            /* FunctionDeclaration */\n            :\n            case 144\n            /* MethodDeclaration */\n            :\n            case 143\n            /* MethodSignature */\n            :\n            case 146\n            /* GetAccessor */\n            :\n            case 147\n            /* SetAccessor */\n            :\n            case 145\n            /* Constructor */\n            :\n            case 176\n            /* FunctionExpression */\n            :\n            case 177\n            /* ArrowFunction */\n            :\n              return spanInFunctionDeclaration(node);\n\n            case 195\n            /* Block */\n            :\n              if (ts.isFunctionBlock(node)) {\n                return spanInFunctionBlock(node);\n              }\n\n            // Fall through\n\n            case 222\n            /* ModuleBlock */\n            :\n              return spanInBlock(node);\n\n            case 247\n            /* CatchClause */\n            :\n              return spanInBlock(node.block);\n\n            case 198\n            /* ExpressionStatement */\n            :\n              // span on the expression\n              return textSpan(node.expression);\n\n            case 207\n            /* ReturnStatement */\n            :\n              // span on return keyword and expression if present\n              return textSpan(node.getChildAt(0), node.expression);\n\n            case 201\n            /* WhileStatement */\n            :\n              // Span on while(...)\n              return textSpanEndingAtNextToken(node, node.expression);\n\n            case 200\n            /* DoStatement */\n            :\n              // span in statement of the do statement\n              return spanInNode(node.statement);\n\n            case 213\n            /* DebuggerStatement */\n            :\n              // span on debugger keyword\n              return textSpan(node.getChildAt(0));\n\n            case 199\n            /* IfStatement */\n            :\n              // set on if(..) span\n              return textSpanEndingAtNextToken(node, node.expression);\n\n            case 210\n            /* LabeledStatement */\n            :\n              // span in statement\n              return spanInNode(node.statement);\n\n            case 206\n            /* BreakStatement */\n            :\n            case 205\n            /* ContinueStatement */\n            :\n              // On break or continue keyword and label if present\n              return textSpan(node.getChildAt(0), node.label);\n\n            case 202\n            /* ForStatement */\n            :\n              return spanInForStatement(node);\n\n            case 203\n            /* ForInStatement */\n            :\n              // span of for (a in ...)\n              return textSpanEndingAtNextToken(node, node.expression);\n\n            case 204\n            /* ForOfStatement */\n            :\n              // span in initializer\n              return spanInInitializerOfForLike(node);\n\n            case 209\n            /* SwitchStatement */\n            :\n              // span on switch(...)\n              return textSpanEndingAtNextToken(node, node.expression);\n\n            case 244\n            /* CaseClause */\n            :\n            case 245\n            /* DefaultClause */\n            :\n              // span in first statement of the clause\n              return spanInNode(node.statements[0]);\n\n            case 212\n            /* TryStatement */\n            :\n              // span in try block\n              return spanInBlock(node.tryBlock);\n\n            case 211\n            /* ThrowStatement */\n            :\n              // span in throw ...\n              return textSpan(node, node.expression);\n\n            case 230\n            /* ExportAssignment */\n            :\n              // span on export = id\n              return textSpan(node, node.expression);\n\n            case 224\n            /* ImportEqualsDeclaration */\n            :\n              // import statement without including semicolon\n              return textSpan(node, node.moduleReference);\n\n            case 225\n            /* ImportDeclaration */\n            :\n              // import statement without including semicolon\n              return textSpan(node, node.moduleSpecifier);\n\n            case 231\n            /* ExportDeclaration */\n            :\n              // import statement without including semicolon\n              return textSpan(node, node.moduleSpecifier);\n\n            case 221\n            /* ModuleDeclaration */\n            :\n              // span on complete module if it is instantiated\n              if (ts.getModuleInstanceState(node) !== 1\n              /* Instantiated */\n              ) {\n                  return undefined;\n                }\n\n            case 217\n            /* ClassDeclaration */\n            :\n            case 220\n            /* EnumDeclaration */\n            :\n            case 250\n            /* EnumMember */\n            :\n            case 166\n            /* BindingElement */\n            :\n              // span on complete node\n              return textSpan(node);\n\n            case 208\n            /* WithStatement */\n            :\n              // span in statement\n              return spanInNode(node.statement);\n\n            case 140\n            /* Decorator */\n            :\n              return spanInNodeArray(node.parent.decorators);\n\n            case 164\n            /* ObjectBindingPattern */\n            :\n            case 165\n            /* ArrayBindingPattern */\n            :\n              return spanInBindingPattern(node);\n            // No breakpoint in interface, type alias\n\n            case 218\n            /* InterfaceDeclaration */\n            :\n            case 219\n            /* TypeAliasDeclaration */\n            :\n              return undefined;\n            // Tokens:\n\n            case 23\n            /* SemicolonToken */\n            :\n            case 1\n            /* EndOfFileToken */\n            :\n              return spanInNodeIfStartsOnSameLine(ts.findPrecedingToken(node.pos, sourceFile));\n\n            case 24\n            /* CommaToken */\n            :\n              return spanInPreviousNode(node);\n\n            case 15\n            /* OpenBraceToken */\n            :\n              return spanInOpenBraceToken(node);\n\n            case 16\n            /* CloseBraceToken */\n            :\n              return spanInCloseBraceToken(node);\n\n            case 20\n            /* CloseBracketToken */\n            :\n              return spanInCloseBracketToken(node);\n\n            case 17\n            /* OpenParenToken */\n            :\n              return spanInOpenParenToken(node);\n\n            case 18\n            /* CloseParenToken */\n            :\n              return spanInCloseParenToken(node);\n\n            case 54\n            /* ColonToken */\n            :\n              return spanInColonToken(node);\n\n            case 27\n            /* GreaterThanToken */\n            :\n            case 25\n            /* LessThanToken */\n            :\n              return spanInGreaterThanOrLessThanToken(node);\n            // Keywords:\n\n            case 104\n            /* WhileKeyword */\n            :\n              return spanInWhileKeyword(node);\n\n            case 80\n            /* ElseKeyword */\n            :\n            case 72\n            /* CatchKeyword */\n            :\n            case 85\n            /* FinallyKeyword */\n            :\n              return spanInNextNode(node);\n\n            case 135\n            /* OfKeyword */\n            :\n              return spanInOfKeyword(node);\n\n            default:\n              // Destructuring pattern in destructuring assignment\n              // [a, b, c] of\n              // [a, b, c] = expression\n              if (ts.isArrayLiteralOrObjectLiteralDestructuringPattern(node)) {\n                return spanInArrayLiteralOrObjectLiteralDestructuringPattern(node);\n              } // Set breakpoint on identifier element of destructuring pattern\n              // a or ...c  or d: x from \n              // [a, b, ...c] or { a, b } or { d: x } from destructuring pattern\n\n\n              if ((node.kind === 69\n              /* Identifier */\n              || node.kind == 188\n              /* SpreadElementExpression */\n              || node.kind === 248\n              /* PropertyAssignment */\n              || node.kind === 249\n              /* ShorthandPropertyAssignment */\n              ) && ts.isArrayLiteralOrObjectLiteralDestructuringPattern(node.parent)) {\n                return textSpan(node);\n              }\n\n              if (node.kind === 184\n              /* BinaryExpression */\n              ) {\n                  var binaryExpression = node; // Set breakpoint in destructuring pattern if its destructuring assignment\n                  // [a, b, c] or {a, b, c} of\n                  // [a, b, c] = expression or \n                  // {a, b, c} = expression\n\n                  if (ts.isArrayLiteralOrObjectLiteralDestructuringPattern(binaryExpression.left)) {\n                    return spanInArrayLiteralOrObjectLiteralDestructuringPattern(binaryExpression.left);\n                  }\n\n                  if (binaryExpression.operatorToken.kind === 56\n                  /* EqualsToken */\n                  && ts.isArrayLiteralOrObjectLiteralDestructuringPattern(binaryExpression.parent)) {\n                    // Set breakpoint on assignment expression element of destructuring pattern\n                    // a = expression of \n                    // [a = expression, b, c] = someExpression or \n                    // { a = expression, b, c } = someExpression\n                    return textSpan(node);\n                  }\n\n                  if (binaryExpression.operatorToken.kind === 24\n                  /* CommaToken */\n                  ) {\n                      return spanInNode(binaryExpression.left);\n                    }\n                }\n\n              if (ts.isExpression(node)) {\n                switch (node.parent.kind) {\n                  case 200\n                  /* DoStatement */\n                  :\n                    // Set span as if on while keyword\n                    return spanInPreviousNode(node);\n\n                  case 140\n                  /* Decorator */\n                  :\n                    // Set breakpoint on the decorator emit\n                    return spanInNode(node.parent);\n\n                  case 202\n                  /* ForStatement */\n                  :\n                  case 204\n                  /* ForOfStatement */\n                  :\n                    return textSpan(node);\n\n                  case 184\n                  /* BinaryExpression */\n                  :\n                    if (node.parent.operatorToken.kind === 24\n                    /* CommaToken */\n                    ) {\n                        // if this is comma expression, the breakpoint is possible in this expression\n                        return textSpan(node);\n                      }\n\n                    break;\n\n                  case 177\n                  /* ArrowFunction */\n                  :\n                    if (node.parent.body === node) {\n                      // If this is body of arrow function, it is allowed to have the breakpoint\n                      return textSpan(node);\n                    }\n\n                    break;\n                }\n              } // If this is name of property assignment, set breakpoint in the initializer\n\n\n              if (node.parent.kind === 248\n              /* PropertyAssignment */\n              && node.parent.name === node && !ts.isArrayLiteralOrObjectLiteralDestructuringPattern(node.parent.parent)) {\n                return spanInNode(node.parent.initializer);\n              } // Breakpoint in type assertion goes to its operand\n\n\n              if (node.parent.kind === 174\n              /* TypeAssertionExpression */\n              && node.parent.type === node) {\n                return spanInNextNode(node.parent.type);\n              } // return type of function go to previous token\n\n\n              if (ts.isFunctionLike(node.parent) && node.parent.type === node) {\n                return spanInPreviousNode(node);\n              } // initializer of variable/parameter declaration go to previous node\n\n\n              if (node.parent.kind === 214\n              /* VariableDeclaration */\n              || node.parent.kind === 139\n              /* Parameter */\n              ) {\n                  var paramOrVarDecl = node.parent;\n\n                  if (paramOrVarDecl.initializer === node || paramOrVarDecl.type === node || ts.isAssignmentOperator(node.kind)) {\n                    return spanInPreviousNode(node);\n                  }\n                }\n\n              if (node.parent.kind === 184\n              /* BinaryExpression */\n              ) {\n                  var binaryExpression = node.parent;\n\n                  if (ts.isArrayLiteralOrObjectLiteralDestructuringPattern(binaryExpression.left) && (binaryExpression.right === node || binaryExpression.operatorToken === node)) {\n                    // If initializer of destructuring assignment move to previous token\n                    return spanInPreviousNode(node);\n                  }\n                } // Default go to parent to set the breakpoint\n\n\n              return spanInNode(node.parent);\n          }\n        }\n\n        function textSpanFromVariableDeclaration(variableDeclaration) {\n          var declarations = variableDeclaration.parent.declarations;\n\n          if (declarations && declarations[0] === variableDeclaration) {\n            // First declaration - include let keyword\n            return textSpan(ts.findPrecedingToken(variableDeclaration.pos, sourceFile, variableDeclaration.parent), variableDeclaration);\n          } else {\n            // Span only on this declaration\n            return textSpan(variableDeclaration);\n          }\n        }\n\n        function spanInVariableDeclaration(variableDeclaration) {\n          // If declaration of for in statement, just set the span in parent\n          if (variableDeclaration.parent.parent.kind === 203\n          /* ForInStatement */\n          ) {\n              return spanInNode(variableDeclaration.parent.parent);\n            } // If this is a destructuring pattern set breakpoint in binding pattern\n\n\n          if (ts.isBindingPattern(variableDeclaration.name)) {\n            return spanInBindingPattern(variableDeclaration.name);\n          } // Breakpoint is possible in variableDeclaration only if there is initialization\n          // or its declaration from 'for of'\n\n\n          if (variableDeclaration.initializer || variableDeclaration.flags & 2\n          /* Export */\n          || variableDeclaration.parent.parent.kind === 204\n          /* ForOfStatement */\n          ) {\n              return textSpanFromVariableDeclaration(variableDeclaration);\n            }\n\n          var declarations = variableDeclaration.parent.declarations;\n\n          if (declarations && declarations[0] !== variableDeclaration) {\n            // If we cant set breakpoint on this declaration, set it on previous one\n            // Because the variable declaration may be binding pattern and \n            // we would like to set breakpoint in last binding element if thats the case,\n            // use preceding token instead\n            return spanInNode(ts.findPrecedingToken(variableDeclaration.pos, sourceFile, variableDeclaration.parent));\n          }\n        }\n\n        function canHaveSpanInParameterDeclaration(parameter) {\n          // Breakpoint is possible on parameter only if it has initializer, is a rest parameter, or has public or private modifier\n          return !!parameter.initializer || parameter.dotDotDotToken !== undefined || !!(parameter.flags & 8\n          /* Public */\n          ) || !!(parameter.flags & 16\n          /* Private */\n          );\n        }\n\n        function spanInParameterDeclaration(parameter) {\n          if (ts.isBindingPattern(parameter.name)) {\n            // set breakpoint in binding pattern\n            return spanInBindingPattern(parameter.name);\n          } else if (canHaveSpanInParameterDeclaration(parameter)) {\n            return textSpan(parameter);\n          } else {\n            var functionDeclaration = parameter.parent;\n            var indexOfParameter = ts.indexOf(functionDeclaration.parameters, parameter);\n\n            if (indexOfParameter) {\n              // Not a first parameter, go to previous parameter\n              return spanInParameterDeclaration(functionDeclaration.parameters[indexOfParameter - 1]);\n            } else {\n              // Set breakpoint in the function declaration body\n              return spanInNode(functionDeclaration.body);\n            }\n          }\n        }\n\n        function canFunctionHaveSpanInWholeDeclaration(functionDeclaration) {\n          return !!(functionDeclaration.flags & 2\n          /* Export */\n          ) || functionDeclaration.parent.kind === 217\n          /* ClassDeclaration */\n          && functionDeclaration.kind !== 145\n          /* Constructor */\n          ;\n        }\n\n        function spanInFunctionDeclaration(functionDeclaration) {\n          // No breakpoints in the function signature\n          if (!functionDeclaration.body) {\n            return undefined;\n          }\n\n          if (canFunctionHaveSpanInWholeDeclaration(functionDeclaration)) {\n            // Set the span on whole function declaration\n            return textSpan(functionDeclaration);\n          } // Set span in function body\n\n\n          return spanInNode(functionDeclaration.body);\n        }\n\n        function spanInFunctionBlock(block) {\n          var nodeForSpanInBlock = block.statements.length ? block.statements[0] : block.getLastToken();\n\n          if (canFunctionHaveSpanInWholeDeclaration(block.parent)) {\n            return spanInNodeIfStartsOnSameLine(block.parent, nodeForSpanInBlock);\n          }\n\n          return spanInNode(nodeForSpanInBlock);\n        }\n\n        function spanInBlock(block) {\n          switch (block.parent.kind) {\n            case 221\n            /* ModuleDeclaration */\n            :\n              if (ts.getModuleInstanceState(block.parent) !== 1\n              /* Instantiated */\n              ) {\n                  return undefined;\n                }\n\n            // Set on parent if on same line otherwise on first statement\n\n            case 201\n            /* WhileStatement */\n            :\n            case 199\n            /* IfStatement */\n            :\n            case 203\n            /* ForInStatement */\n            :\n              return spanInNodeIfStartsOnSameLine(block.parent, block.statements[0]);\n            // Set span on previous token if it starts on same line otherwise on the first statement of the block\n\n            case 202\n            /* ForStatement */\n            :\n            case 204\n            /* ForOfStatement */\n            :\n              return spanInNodeIfStartsOnSameLine(ts.findPrecedingToken(block.pos, sourceFile, block.parent), block.statements[0]);\n          } // Default action is to set on first statement\n\n\n          return spanInNode(block.statements[0]);\n        }\n\n        function spanInInitializerOfForLike(forLikeStaement) {\n          if (forLikeStaement.initializer.kind === 215\n          /* VariableDeclarationList */\n          ) {\n              // declaration list, set breakpoint in first declaration\n              var variableDeclarationList = forLikeStaement.initializer;\n\n              if (variableDeclarationList.declarations.length > 0) {\n                return spanInNode(variableDeclarationList.declarations[0]);\n              }\n            } else {\n            // Expression - set breakpoint in it\n            return spanInNode(forLikeStaement.initializer);\n          }\n        }\n\n        function spanInForStatement(forStatement) {\n          if (forStatement.initializer) {\n            return spanInInitializerOfForLike(forStatement);\n          }\n\n          if (forStatement.condition) {\n            return textSpan(forStatement.condition);\n          }\n\n          if (forStatement.incrementor) {\n            return textSpan(forStatement.incrementor);\n          }\n        }\n\n        function spanInBindingPattern(bindingPattern) {\n          // Set breakpoint in first binding element\n          var firstBindingElement = ts.forEach(bindingPattern.elements, function (element) {\n            return element.kind !== 190\n            /* OmittedExpression */\n            ? element : undefined;\n          });\n\n          if (firstBindingElement) {\n            return spanInNode(firstBindingElement);\n          } // Empty binding pattern of binding element, set breakpoint on binding element\n\n\n          if (bindingPattern.parent.kind === 166\n          /* BindingElement */\n          ) {\n              return textSpan(bindingPattern.parent);\n            } // Variable declaration is used as the span\n\n\n          return textSpanFromVariableDeclaration(bindingPattern.parent);\n        }\n\n        function spanInArrayLiteralOrObjectLiteralDestructuringPattern(node) {\n          ts.Debug.assert(node.kind !== 165\n          /* ArrayBindingPattern */\n          && node.kind !== 164\n          /* ObjectBindingPattern */\n          );\n          var elements = node.kind === 167\n          /* ArrayLiteralExpression */\n          ? node.elements : node.properties;\n          var firstBindingElement = ts.forEach(elements, function (element) {\n            return element.kind !== 190\n            /* OmittedExpression */\n            ? element : undefined;\n          });\n\n          if (firstBindingElement) {\n            return spanInNode(firstBindingElement);\n          } // Could be ArrayLiteral from destructuring assignment or \n          // just nested element in another destructuring assignment\n          // set breakpoint on assignment when parent is destructuring assignment\n          // Otherwise set breakpoint for this element\n\n\n          return textSpan(node.parent.kind === 184\n          /* BinaryExpression */\n          ? node.parent : node);\n        } // Tokens:\n\n\n        function spanInOpenBraceToken(node) {\n          switch (node.parent.kind) {\n            case 220\n            /* EnumDeclaration */\n            :\n              var enumDeclaration = node.parent;\n              return spanInNodeIfStartsOnSameLine(ts.findPrecedingToken(node.pos, sourceFile, node.parent), enumDeclaration.members.length ? enumDeclaration.members[0] : enumDeclaration.getLastToken(sourceFile));\n\n            case 217\n            /* ClassDeclaration */\n            :\n              var classDeclaration = node.parent;\n              return spanInNodeIfStartsOnSameLine(ts.findPrecedingToken(node.pos, sourceFile, node.parent), classDeclaration.members.length ? classDeclaration.members[0] : classDeclaration.getLastToken(sourceFile));\n\n            case 223\n            /* CaseBlock */\n            :\n              return spanInNodeIfStartsOnSameLine(node.parent.parent, node.parent.clauses[0]);\n          } // Default to parent node\n\n\n          return spanInNode(node.parent);\n        }\n\n        function spanInCloseBraceToken(node) {\n          switch (node.parent.kind) {\n            case 222\n            /* ModuleBlock */\n            :\n              // If this is not instantiated module block no bp span\n              if (ts.getModuleInstanceState(node.parent.parent) !== 1\n              /* Instantiated */\n              ) {\n                  return undefined;\n                }\n\n            case 220\n            /* EnumDeclaration */\n            :\n            case 217\n            /* ClassDeclaration */\n            :\n              // Span on close brace token\n              return textSpan(node);\n\n            case 195\n            /* Block */\n            :\n              if (ts.isFunctionBlock(node.parent)) {\n                // Span on close brace token\n                return textSpan(node);\n              }\n\n            // fall through.\n\n            case 247\n            /* CatchClause */\n            :\n              return spanInNode(ts.lastOrUndefined(node.parent.statements));\n\n            case 223\n            /* CaseBlock */\n            :\n              // breakpoint in last statement of the last clause\n              var caseBlock = node.parent;\n              var lastClause = ts.lastOrUndefined(caseBlock.clauses);\n\n              if (lastClause) {\n                return spanInNode(ts.lastOrUndefined(lastClause.statements));\n              }\n\n              return undefined;\n\n            case 164\n            /* ObjectBindingPattern */\n            :\n              // Breakpoint in last binding element or binding pattern if it contains no elements\n              var bindingPattern = node.parent;\n              return spanInNode(ts.lastOrUndefined(bindingPattern.elements) || bindingPattern);\n            // Default to parent node\n\n            default:\n              if (ts.isArrayLiteralOrObjectLiteralDestructuringPattern(node.parent)) {\n                // Breakpoint in last binding element or binding pattern if it contains no elements\n                var objectLiteral = node.parent;\n                return textSpan(ts.lastOrUndefined(objectLiteral.properties) || objectLiteral);\n              }\n\n              return spanInNode(node.parent);\n          }\n        }\n\n        function spanInCloseBracketToken(node) {\n          switch (node.parent.kind) {\n            case 165\n            /* ArrayBindingPattern */\n            :\n              // Breakpoint in last binding element or binding pattern if it contains no elements\n              var bindingPattern = node.parent;\n              return textSpan(ts.lastOrUndefined(bindingPattern.elements) || bindingPattern);\n\n            default:\n              if (ts.isArrayLiteralOrObjectLiteralDestructuringPattern(node.parent)) {\n                // Breakpoint in last binding element or binding pattern if it contains no elements\n                var arrayLiteral = node.parent;\n                return textSpan(ts.lastOrUndefined(arrayLiteral.elements) || arrayLiteral);\n              } // Default to parent node\n\n\n              return spanInNode(node.parent);\n          }\n        }\n\n        function spanInOpenParenToken(node) {\n          if (node.parent.kind === 200\n          /* DoStatement */\n          || node.parent.kind === 171\n          /* CallExpression */\n          || node.parent.kind === 172\n          /* NewExpression */\n          ) {\n              return spanInPreviousNode(node);\n            }\n\n          if (node.parent.kind === 175\n          /* ParenthesizedExpression */\n          ) {\n              return spanInNextNode(node);\n            } // Default to parent node\n\n\n          return spanInNode(node.parent);\n        }\n\n        function spanInCloseParenToken(node) {\n          // Is this close paren token of parameter list, set span in previous token\n          switch (node.parent.kind) {\n            case 176\n            /* FunctionExpression */\n            :\n            case 216\n            /* FunctionDeclaration */\n            :\n            case 177\n            /* ArrowFunction */\n            :\n            case 144\n            /* MethodDeclaration */\n            :\n            case 143\n            /* MethodSignature */\n            :\n            case 146\n            /* GetAccessor */\n            :\n            case 147\n            /* SetAccessor */\n            :\n            case 145\n            /* Constructor */\n            :\n            case 201\n            /* WhileStatement */\n            :\n            case 200\n            /* DoStatement */\n            :\n            case 202\n            /* ForStatement */\n            :\n            case 204\n            /* ForOfStatement */\n            :\n            case 171\n            /* CallExpression */\n            :\n            case 172\n            /* NewExpression */\n            :\n            case 175\n            /* ParenthesizedExpression */\n            :\n              return spanInPreviousNode(node);\n            // Default to parent node\n\n            default:\n              return spanInNode(node.parent);\n          }\n        }\n\n        function spanInColonToken(node) {\n          // Is this : specifying return annotation of the function declaration\n          if (ts.isFunctionLike(node.parent) || node.parent.kind === 248\n          /* PropertyAssignment */\n          || node.parent.kind === 139\n          /* Parameter */\n          ) {\n              return spanInPreviousNode(node);\n            }\n\n          return spanInNode(node.parent);\n        }\n\n        function spanInGreaterThanOrLessThanToken(node) {\n          if (node.parent.kind === 174\n          /* TypeAssertionExpression */\n          ) {\n              return spanInNextNode(node);\n            }\n\n          return spanInNode(node.parent);\n        }\n\n        function spanInWhileKeyword(node) {\n          if (node.parent.kind === 200\n          /* DoStatement */\n          ) {\n              // Set span on while expression\n              return textSpanEndingAtNextToken(node, node.parent.expression);\n            } // Default to parent node\n\n\n          return spanInNode(node.parent);\n        }\n\n        function spanInOfKeyword(node) {\n          if (node.parent.kind === 204\n          /* ForOfStatement */\n          ) {\n              // set using next token\n              return spanInNextNode(node);\n            } // Default to parent node\n\n\n          return spanInNode(node.parent);\n        }\n      }\n    }\n\n    BreakpointResolver.spanInSourceFileAtLocation = spanInSourceFileAtLocation;\n  })(BreakpointResolver = ts.BreakpointResolver || (ts.BreakpointResolver = {}));\n})(ts || (ts = {})); //\n// Copyright (c) Microsoft Corporation.  All rights reserved.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n/// <reference path='services.ts' />\n\n/* @internal */\n\n\nvar debugObjectHost = this; // We need to use 'null' to interface with the managed side.\n\n/* tslint:disable:no-null */\n\n/* tslint:disable:no-in-operator */\n\n/* @internal */\n\nvar ts;\n\n(function (ts) {\n  function logInternalError(logger, err) {\n    if (logger) {\n      logger.log(\"*INTERNAL ERROR* - Exception in typescript services: \" + err.message);\n    }\n  }\n\n  var ScriptSnapshotShimAdapter = function () {\n    function ScriptSnapshotShimAdapter(scriptSnapshotShim) {\n      this.scriptSnapshotShim = scriptSnapshotShim;\n    }\n\n    ScriptSnapshotShimAdapter.prototype.getText = function (start, end) {\n      return this.scriptSnapshotShim.getText(start, end);\n    };\n\n    ScriptSnapshotShimAdapter.prototype.getLength = function () {\n      return this.scriptSnapshotShim.getLength();\n    };\n\n    ScriptSnapshotShimAdapter.prototype.getChangeRange = function (oldSnapshot) {\n      var oldSnapshotShim = oldSnapshot;\n      var encoded = this.scriptSnapshotShim.getChangeRange(oldSnapshotShim.scriptSnapshotShim); // TODO: should this be '==='?\n\n      if (encoded == null) {\n        return null;\n      }\n\n      var decoded = JSON.parse(encoded);\n      return ts.createTextChangeRange(ts.createTextSpan(decoded.span.start, decoded.span.length), decoded.newLength);\n    };\n\n    ScriptSnapshotShimAdapter.prototype.dispose = function () {\n      // if scriptSnapshotShim is a COM object then property check becomes method call with no arguments\n      // 'in' does not have this effect\n      if (\"dispose\" in this.scriptSnapshotShim) {\n        this.scriptSnapshotShim.dispose();\n      }\n    };\n\n    return ScriptSnapshotShimAdapter;\n  }();\n\n  var LanguageServiceShimHostAdapter = function () {\n    function LanguageServiceShimHostAdapter(shimHost) {\n      var _this = this;\n\n      this.shimHost = shimHost;\n      this.loggingEnabled = false;\n      this.tracingEnabled = false; // if shimHost is a COM object then property check will become method call with no arguments.\n      // 'in' does not have this effect. \n\n      if (\"getModuleResolutionsForFile\" in this.shimHost) {\n        this.resolveModuleNames = function (moduleNames, containingFile) {\n          var resolutionsInFile = JSON.parse(_this.shimHost.getModuleResolutionsForFile(containingFile));\n          return ts.map(moduleNames, function (name) {\n            var result = ts.lookUp(resolutionsInFile, name);\n            return result ? {\n              resolvedFileName: result\n            } : undefined;\n          });\n        };\n      }\n\n      if (\"directoryExists\" in this.shimHost) {\n        this.directoryExists = function (directoryName) {\n          return _this.shimHost.directoryExists(directoryName);\n        };\n      }\n    }\n\n    LanguageServiceShimHostAdapter.prototype.log = function (s) {\n      if (this.loggingEnabled) {\n        this.shimHost.log(s);\n      }\n    };\n\n    LanguageServiceShimHostAdapter.prototype.trace = function (s) {\n      if (this.tracingEnabled) {\n        this.shimHost.trace(s);\n      }\n    };\n\n    LanguageServiceShimHostAdapter.prototype.error = function (s) {\n      this.shimHost.error(s);\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getProjectVersion = function () {\n      if (!this.shimHost.getProjectVersion) {\n        // shimmed host does not support getProjectVersion\n        return undefined;\n      }\n\n      return this.shimHost.getProjectVersion();\n    };\n\n    LanguageServiceShimHostAdapter.prototype.useCaseSensitiveFileNames = function () {\n      return this.shimHost.useCaseSensitiveFileNames ? this.shimHost.useCaseSensitiveFileNames() : false;\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getCompilationSettings = function () {\n      var settingsJson = this.shimHost.getCompilationSettings(); // TODO: should this be '==='?\n\n      if (settingsJson == null || settingsJson == \"\") {\n        throw Error(\"LanguageServiceShimHostAdapter.getCompilationSettings: empty compilationSettings\");\n      }\n\n      return JSON.parse(settingsJson);\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getScriptFileNames = function () {\n      var encoded = this.shimHost.getScriptFileNames();\n      return this.files = JSON.parse(encoded);\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getScriptSnapshot = function (fileName) {\n      var scriptSnapshot = this.shimHost.getScriptSnapshot(fileName);\n      return scriptSnapshot && new ScriptSnapshotShimAdapter(scriptSnapshot);\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getScriptKind = function (fileName) {\n      if (\"getScriptKind\" in this.shimHost) {\n        return this.shimHost.getScriptKind(fileName);\n      } else {\n        return 0\n        /* Unknown */\n        ;\n      }\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getScriptVersion = function (fileName) {\n      return this.shimHost.getScriptVersion(fileName);\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getLocalizedDiagnosticMessages = function () {\n      var diagnosticMessagesJson = this.shimHost.getLocalizedDiagnosticMessages();\n\n      if (diagnosticMessagesJson == null || diagnosticMessagesJson == \"\") {\n        return null;\n      }\n\n      try {\n        return JSON.parse(diagnosticMessagesJson);\n      } catch (e) {\n        this.log(e.description || \"diagnosticMessages.generated.json has invalid JSON format\");\n        return null;\n      }\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getCancellationToken = function () {\n      var hostCancellationToken = this.shimHost.getCancellationToken();\n      return new ThrottledCancellationToken(hostCancellationToken);\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getCurrentDirectory = function () {\n      return this.shimHost.getCurrentDirectory();\n    };\n\n    LanguageServiceShimHostAdapter.prototype.getDefaultLibFileName = function (options) {\n      return this.shimHost.getDefaultLibFileName(JSON.stringify(options));\n    };\n\n    return LanguageServiceShimHostAdapter;\n  }();\n\n  ts.LanguageServiceShimHostAdapter = LanguageServiceShimHostAdapter;\n  /** A cancellation that throttles calls to the host */\n\n  var ThrottledCancellationToken = function () {\n    function ThrottledCancellationToken(hostCancellationToken) {\n      this.hostCancellationToken = hostCancellationToken; // Store when we last tried to cancel.  Checking cancellation can be expensive (as we have\n      // to marshall over to the host layer).  So we only bother actually checking once enough\n      // time has passed.\n\n      this.lastCancellationCheckTime = 0;\n    }\n\n    ThrottledCancellationToken.prototype.isCancellationRequested = function () {\n      var time = Date.now();\n      var duration = Math.abs(time - this.lastCancellationCheckTime);\n\n      if (duration > 10) {\n        // Check no more than once every 10 ms.\n        this.lastCancellationCheckTime = time;\n        return this.hostCancellationToken.isCancellationRequested();\n      }\n\n      return false;\n    };\n\n    return ThrottledCancellationToken;\n  }();\n\n  var CoreServicesShimHostAdapter = function () {\n    function CoreServicesShimHostAdapter(shimHost) {\n      var _this = this;\n\n      this.shimHost = shimHost;\n\n      if (\"directoryExists\" in this.shimHost) {\n        this.directoryExists = function (directoryName) {\n          return _this.shimHost.directoryExists(directoryName);\n        };\n      }\n    }\n\n    CoreServicesShimHostAdapter.prototype.readDirectory = function (rootDir, extension, exclude, depth) {\n      // Wrap the API changes for 2.0 release. This try/catch\n      // should be removed once TypeScript 2.0 has shipped.\n      var encoded;\n\n      try {\n        encoded = this.shimHost.readDirectory(rootDir, extension, JSON.stringify(exclude), depth);\n      } catch (e) {\n        encoded = this.shimHost.readDirectory(rootDir, extension, JSON.stringify(exclude));\n      }\n\n      return JSON.parse(encoded);\n    };\n\n    CoreServicesShimHostAdapter.prototype.fileExists = function (fileName) {\n      return this.shimHost.fileExists(fileName);\n    };\n\n    CoreServicesShimHostAdapter.prototype.readFile = function (fileName) {\n      return this.shimHost.readFile(fileName);\n    };\n\n    return CoreServicesShimHostAdapter;\n  }();\n\n  ts.CoreServicesShimHostAdapter = CoreServicesShimHostAdapter;\n\n  function simpleForwardCall(logger, actionDescription, action, logPerformance) {\n    var start;\n\n    if (logPerformance) {\n      logger.log(actionDescription);\n      start = Date.now();\n    }\n\n    var result = action();\n\n    if (logPerformance) {\n      var end = Date.now();\n      logger.log(actionDescription + \" completed in \" + (end - start) + \" msec\");\n\n      if (typeof result === \"string\") {\n        var str = result;\n\n        if (str.length > 128) {\n          str = str.substring(0, 128) + \"...\";\n        }\n\n        logger.log(\"  result.length=\" + str.length + \", result='\" + JSON.stringify(str) + \"'\");\n      }\n    }\n\n    return result;\n  }\n\n  function forwardJSONCall(logger, actionDescription, action, logPerformance) {\n    try {\n      var result = simpleForwardCall(logger, actionDescription, action, logPerformance);\n      return JSON.stringify({\n        result: result\n      });\n    } catch (err) {\n      if (err instanceof ts.OperationCanceledException) {\n        return JSON.stringify({\n          canceled: true\n        });\n      }\n\n      logInternalError(logger, err);\n      err.description = actionDescription;\n      return JSON.stringify({\n        error: err\n      });\n    }\n  }\n\n  var ShimBase = function () {\n    function ShimBase(factory) {\n      this.factory = factory;\n      factory.registerShim(this);\n    }\n\n    ShimBase.prototype.dispose = function (dummy) {\n      this.factory.unregisterShim(this);\n    };\n\n    return ShimBase;\n  }();\n\n  function realizeDiagnostics(diagnostics, newLine) {\n    return diagnostics.map(function (d) {\n      return realizeDiagnostic(d, newLine);\n    });\n  }\n\n  ts.realizeDiagnostics = realizeDiagnostics;\n\n  function realizeDiagnostic(diagnostic, newLine) {\n    return {\n      message: ts.flattenDiagnosticMessageText(diagnostic.messageText, newLine),\n      start: diagnostic.start,\n      length: diagnostic.length,\n      /// TODO: no need for the tolowerCase call\n      category: ts.DiagnosticCategory[diagnostic.category].toLowerCase(),\n      code: diagnostic.code\n    };\n  }\n\n  var LanguageServiceShimObject = function (_super) {\n    __extends(LanguageServiceShimObject, _super);\n\n    function LanguageServiceShimObject(factory, host, languageService) {\n      _super.call(this, factory);\n\n      this.host = host;\n      this.languageService = languageService;\n      this.logPerformance = false;\n      this.logger = this.host;\n    }\n\n    LanguageServiceShimObject.prototype.forwardJSONCall = function (actionDescription, action) {\n      return forwardJSONCall(this.logger, actionDescription, action, this.logPerformance);\n    }; /// DISPOSE\n\n    /**\n     * Ensure (almost) deterministic release of internal Javascript resources when\n     * some external native objects holds onto us (e.g. Com/Interop).\n     */\n\n\n    LanguageServiceShimObject.prototype.dispose = function (dummy) {\n      this.logger.log(\"dispose()\");\n      this.languageService.dispose();\n      this.languageService = null; // force a GC\n\n      if (debugObjectHost && debugObjectHost.CollectGarbage) {\n        debugObjectHost.CollectGarbage();\n        this.logger.log(\"CollectGarbage()\");\n      }\n\n      this.logger = null;\n\n      _super.prototype.dispose.call(this, dummy);\n    }; /// REFRESH\n\n    /**\n     * Update the list of scripts known to the compiler\n     */\n\n\n    LanguageServiceShimObject.prototype.refresh = function (throwOnError) {\n      this.forwardJSONCall(\"refresh(\" + throwOnError + \")\", function () {\n        return null;\n      });\n    };\n\n    LanguageServiceShimObject.prototype.cleanupSemanticCache = function () {\n      var _this = this;\n\n      this.forwardJSONCall(\"cleanupSemanticCache()\", function () {\n        _this.languageService.cleanupSemanticCache();\n\n        return null;\n      });\n    };\n\n    LanguageServiceShimObject.prototype.realizeDiagnostics = function (diagnostics) {\n      var newLine = ts.getNewLineOrDefaultFromHost(this.host);\n      return ts.realizeDiagnostics(diagnostics, newLine);\n    };\n\n    LanguageServiceShimObject.prototype.getSyntacticClassifications = function (fileName, start, length) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getSyntacticClassifications('\" + fileName + \"', \" + start + \", \" + length + \")\", function () {\n        return _this.languageService.getSyntacticClassifications(fileName, ts.createTextSpan(start, length));\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getSemanticClassifications = function (fileName, start, length) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getSemanticClassifications('\" + fileName + \"', \" + start + \", \" + length + \")\", function () {\n        return _this.languageService.getSemanticClassifications(fileName, ts.createTextSpan(start, length));\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getEncodedSyntacticClassifications = function (fileName, start, length) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getEncodedSyntacticClassifications('\" + fileName + \"', \" + start + \", \" + length + \")\", // directly serialize the spans out to a string.  This is much faster to decode\n      // on the managed side versus a full JSON array.\n      function () {\n        return convertClassifications(_this.languageService.getEncodedSyntacticClassifications(fileName, ts.createTextSpan(start, length)));\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getEncodedSemanticClassifications = function (fileName, start, length) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getEncodedSemanticClassifications('\" + fileName + \"', \" + start + \", \" + length + \")\", // directly serialize the spans out to a string.  This is much faster to decode\n      // on the managed side versus a full JSON array.\n      function () {\n        return convertClassifications(_this.languageService.getEncodedSemanticClassifications(fileName, ts.createTextSpan(start, length)));\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getSyntacticDiagnostics = function (fileName) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getSyntacticDiagnostics('\" + fileName + \"')\", function () {\n        var diagnostics = _this.languageService.getSyntacticDiagnostics(fileName);\n\n        return _this.realizeDiagnostics(diagnostics);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getSemanticDiagnostics = function (fileName) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getSemanticDiagnostics('\" + fileName + \"')\", function () {\n        var diagnostics = _this.languageService.getSemanticDiagnostics(fileName);\n\n        return _this.realizeDiagnostics(diagnostics);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getCompilerOptionsDiagnostics = function () {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getCompilerOptionsDiagnostics()\", function () {\n        var diagnostics = _this.languageService.getCompilerOptionsDiagnostics();\n\n        return _this.realizeDiagnostics(diagnostics);\n      });\n    }; /// QUICKINFO\n\n    /**\n     * Computes a string representation of the type at the requested position\n     * in the active file.\n     */\n\n\n    LanguageServiceShimObject.prototype.getQuickInfoAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getQuickInfoAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getQuickInfoAtPosition(fileName, position);\n      });\n    }; /// NAMEORDOTTEDNAMESPAN\n\n    /**\n     * Computes span information of the name or dotted name at the requested position\n     * in the active file.\n     */\n\n\n    LanguageServiceShimObject.prototype.getNameOrDottedNameSpan = function (fileName, startPos, endPos) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getNameOrDottedNameSpan('\" + fileName + \"', \" + startPos + \", \" + endPos + \")\", function () {\n        return _this.languageService.getNameOrDottedNameSpan(fileName, startPos, endPos);\n      });\n    };\n    /**\n     * STATEMENTSPAN\n     * Computes span information of statement at the requested position in the active file.\n     */\n\n\n    LanguageServiceShimObject.prototype.getBreakpointStatementAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getBreakpointStatementAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getBreakpointStatementAtPosition(fileName, position);\n      });\n    }; /// SIGNATUREHELP\n\n\n    LanguageServiceShimObject.prototype.getSignatureHelpItems = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getSignatureHelpItems('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getSignatureHelpItems(fileName, position);\n      });\n    }; /// GOTO DEFINITION\n\n    /**\n     * Computes the definition location and file for the symbol\n     * at the requested position.\n     */\n\n\n    LanguageServiceShimObject.prototype.getDefinitionAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getDefinitionAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getDefinitionAtPosition(fileName, position);\n      });\n    }; /// GOTO Type\n\n    /**\n     * Computes the definition location of the type of the symbol\n     * at the requested position.\n     */\n\n\n    LanguageServiceShimObject.prototype.getTypeDefinitionAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getTypeDefinitionAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getTypeDefinitionAtPosition(fileName, position);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getRenameInfo = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getRenameInfo('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getRenameInfo(fileName, position);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.findRenameLocations = function (fileName, position, findInStrings, findInComments) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"findRenameLocations('\" + fileName + \"', \" + position + \", \" + findInStrings + \", \" + findInComments + \")\", function () {\n        return _this.languageService.findRenameLocations(fileName, position, findInStrings, findInComments);\n      });\n    }; /// GET BRACE MATCHING\n\n\n    LanguageServiceShimObject.prototype.getBraceMatchingAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getBraceMatchingAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getBraceMatchingAtPosition(fileName, position);\n      });\n    }; /// GET SMART INDENT\n\n\n    LanguageServiceShimObject.prototype.getIndentationAtPosition = function (fileName, position, options\n    /*Services.EditorOptions*/\n    ) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getIndentationAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        var localOptions = JSON.parse(options);\n        return _this.languageService.getIndentationAtPosition(fileName, position, localOptions);\n      });\n    }; /// GET REFERENCES\n\n\n    LanguageServiceShimObject.prototype.getReferencesAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getReferencesAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getReferencesAtPosition(fileName, position);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.findReferences = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"findReferences('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.findReferences(fileName, position);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getOccurrencesAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getOccurrencesAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getOccurrencesAtPosition(fileName, position);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getDocumentHighlights = function (fileName, position, filesToSearch) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getDocumentHighlights('\" + fileName + \"', \" + position + \")\", function () {\n        var results = _this.languageService.getDocumentHighlights(fileName, position, JSON.parse(filesToSearch)); // workaround for VS document higlighting issue - keep only items from the initial file\n\n\n        var normalizedName = ts.normalizeSlashes(fileName).toLowerCase();\n        return ts.filter(results, function (r) {\n          return ts.normalizeSlashes(r.fileName).toLowerCase() === normalizedName;\n        });\n      });\n    }; /// COMPLETION LISTS\n\n    /**\n     * Get a string based representation of the completions\n     * to provide at the given source position and providing a member completion\n     * list if requested.\n     */\n\n\n    LanguageServiceShimObject.prototype.getCompletionsAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getCompletionsAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getCompletionsAtPosition(fileName, position);\n      });\n    };\n    /** Get a string based representation of a completion list entry details */\n\n\n    LanguageServiceShimObject.prototype.getCompletionEntryDetails = function (fileName, position, entryName) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getCompletionEntryDetails('\" + fileName + \"', \" + position + \", '\" + entryName + \"')\", function () {\n        return _this.languageService.getCompletionEntryDetails(fileName, position, entryName);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getFormattingEditsForRange = function (fileName, start, end, options\n    /*Services.FormatCodeOptions*/\n    ) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getFormattingEditsForRange('\" + fileName + \"', \" + start + \", \" + end + \")\", function () {\n        var localOptions = JSON.parse(options);\n        return _this.languageService.getFormattingEditsForRange(fileName, start, end, localOptions);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getFormattingEditsForDocument = function (fileName, options\n    /*Services.FormatCodeOptions*/\n    ) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getFormattingEditsForDocument('\" + fileName + \"')\", function () {\n        var localOptions = JSON.parse(options);\n        return _this.languageService.getFormattingEditsForDocument(fileName, localOptions);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getFormattingEditsAfterKeystroke = function (fileName, position, key, options\n    /*Services.FormatCodeOptions*/\n    ) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getFormattingEditsAfterKeystroke('\" + fileName + \"', \" + position + \", '\" + key + \"')\", function () {\n        var localOptions = JSON.parse(options);\n        return _this.languageService.getFormattingEditsAfterKeystroke(fileName, position, key, localOptions);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getDocCommentTemplateAtPosition = function (fileName, position) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getDocCommentTemplateAtPosition('\" + fileName + \"', \" + position + \")\", function () {\n        return _this.languageService.getDocCommentTemplateAtPosition(fileName, position);\n      });\n    }; /// NAVIGATE TO\n\n    /** Return a list of symbols that are interesting to navigate to */\n\n\n    LanguageServiceShimObject.prototype.getNavigateToItems = function (searchValue, maxResultCount) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getNavigateToItems('\" + searchValue + \"', \" + maxResultCount + \")\", function () {\n        return _this.languageService.getNavigateToItems(searchValue, maxResultCount);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getNavigationBarItems = function (fileName) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getNavigationBarItems('\" + fileName + \"')\", function () {\n        return _this.languageService.getNavigationBarItems(fileName);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getOutliningSpans = function (fileName) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getOutliningSpans('\" + fileName + \"')\", function () {\n        return _this.languageService.getOutliningSpans(fileName);\n      });\n    };\n\n    LanguageServiceShimObject.prototype.getTodoComments = function (fileName, descriptors) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getTodoComments('\" + fileName + \"')\", function () {\n        return _this.languageService.getTodoComments(fileName, JSON.parse(descriptors));\n      });\n    }; /// Emit\n\n\n    LanguageServiceShimObject.prototype.getEmitOutput = function (fileName) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getEmitOutput('\" + fileName + \"')\", function () {\n        return _this.languageService.getEmitOutput(fileName);\n      });\n    };\n\n    return LanguageServiceShimObject;\n  }(ShimBase);\n\n  function convertClassifications(classifications) {\n    return {\n      spans: classifications.spans.join(\",\"),\n      endOfLineState: classifications.endOfLineState\n    };\n  }\n\n  var ClassifierShimObject = function (_super) {\n    __extends(ClassifierShimObject, _super);\n\n    function ClassifierShimObject(factory, logger) {\n      _super.call(this, factory);\n\n      this.logger = logger;\n      this.logPerformance = false;\n      this.classifier = ts.createClassifier();\n    }\n\n    ClassifierShimObject.prototype.getEncodedLexicalClassifications = function (text, lexState, syntacticClassifierAbsent) {\n      var _this = this;\n\n      return forwardJSONCall(this.logger, \"getEncodedLexicalClassifications\", function () {\n        return convertClassifications(_this.classifier.getEncodedLexicalClassifications(text, lexState, syntacticClassifierAbsent));\n      }, this.logPerformance);\n    }; /// COLORIZATION\n\n\n    ClassifierShimObject.prototype.getClassificationsForLine = function (text, lexState, classifyKeywordsInGenerics) {\n      var classification = this.classifier.getClassificationsForLine(text, lexState, classifyKeywordsInGenerics);\n      var result = \"\";\n\n      for (var _i = 0, _a = classification.entries; _i < _a.length; _i++) {\n        var item = _a[_i];\n        result += item.length + \"\\n\";\n        result += item.classification + \"\\n\";\n      }\n\n      result += classification.finalLexState;\n      return result;\n    };\n\n    return ClassifierShimObject;\n  }(ShimBase);\n\n  var CoreServicesShimObject = function (_super) {\n    __extends(CoreServicesShimObject, _super);\n\n    function CoreServicesShimObject(factory, logger, host) {\n      _super.call(this, factory);\n\n      this.logger = logger;\n      this.host = host;\n      this.logPerformance = false;\n    }\n\n    CoreServicesShimObject.prototype.forwardJSONCall = function (actionDescription, action) {\n      return forwardJSONCall(this.logger, actionDescription, action, this.logPerformance);\n    };\n\n    CoreServicesShimObject.prototype.resolveModuleName = function (fileName, moduleName, compilerOptionsJson) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"resolveModuleName('\" + fileName + \"')\", function () {\n        var compilerOptions = JSON.parse(compilerOptionsJson);\n        var result = ts.resolveModuleName(moduleName, ts.normalizeSlashes(fileName), compilerOptions, _this.host);\n        return {\n          resolvedFileName: result.resolvedModule ? result.resolvedModule.resolvedFileName : undefined,\n          failedLookupLocations: result.failedLookupLocations\n        };\n      });\n    };\n\n    CoreServicesShimObject.prototype.getPreProcessedFileInfo = function (fileName, sourceTextSnapshot) {\n      return this.forwardJSONCall(\"getPreProcessedFileInfo('\" + fileName + \"')\", function () {\n        // for now treat files as JavaScript \n        var result = ts.preProcessFile(sourceTextSnapshot.getText(0, sourceTextSnapshot.getLength()),\n        /* readImportFiles */\n        true,\n        /* detectJavaScriptImports */\n        true);\n        var convertResult = {\n          referencedFiles: [],\n          importedFiles: [],\n          ambientExternalModules: result.ambientExternalModules,\n          isLibFile: result.isLibFile\n        };\n        ts.forEach(result.referencedFiles, function (refFile) {\n          convertResult.referencedFiles.push({\n            path: ts.normalizePath(refFile.fileName),\n            position: refFile.pos,\n            length: refFile.end - refFile.pos\n          });\n        });\n        ts.forEach(result.importedFiles, function (importedFile) {\n          convertResult.importedFiles.push({\n            path: ts.normalizeSlashes(importedFile.fileName),\n            position: importedFile.pos,\n            length: importedFile.end - importedFile.pos\n          });\n        });\n        return convertResult;\n      });\n    };\n\n    CoreServicesShimObject.prototype.getTSConfigFileInfo = function (fileName, sourceTextSnapshot) {\n      var _this = this;\n\n      return this.forwardJSONCall(\"getTSConfigFileInfo('\" + fileName + \"')\", function () {\n        var text = sourceTextSnapshot.getText(0, sourceTextSnapshot.getLength());\n        var result = ts.parseConfigFileTextToJson(fileName, text);\n\n        if (result.error) {\n          return {\n            options: {},\n            typingOptions: {},\n            files: [],\n            errors: [realizeDiagnostic(result.error, \"\\r\\n\")]\n          };\n        }\n\n        var normalizedFileName = ts.normalizeSlashes(fileName);\n        var configFile = ts.parseJsonConfigFileContent(result.config, _this.host, ts.getDirectoryPath(normalizedFileName),\n        /*existingOptions*/\n        {}, normalizedFileName);\n        return {\n          options: configFile.options,\n          typingOptions: configFile.typingOptions,\n          files: configFile.fileNames,\n          errors: realizeDiagnostics(configFile.errors, \"\\r\\n\")\n        };\n      });\n    };\n\n    CoreServicesShimObject.prototype.getDefaultCompilationSettings = function () {\n      return this.forwardJSONCall(\"getDefaultCompilationSettings()\", function () {\n        return ts.getDefaultCompilerOptions();\n      });\n    };\n\n    CoreServicesShimObject.prototype.discoverTypings = function (discoverTypingsJson) {\n      var _this = this;\n\n      var getCanonicalFileName = ts.createGetCanonicalFileName(\n      /*useCaseSensitivefileNames:*/\n      false);\n      return this.forwardJSONCall(\"discoverTypings()\", function () {\n        var info = JSON.parse(discoverTypingsJson);\n        return ts.JsTyping.discoverTypings(_this.host, info.fileNames, ts.toPath(info.projectRootPath, info.projectRootPath, getCanonicalFileName), ts.toPath(info.safeListPath, info.safeListPath, getCanonicalFileName), info.packageNameToTypingLocation, info.typingOptions, info.compilerOptions);\n      });\n    };\n\n    return CoreServicesShimObject;\n  }(ShimBase);\n\n  var TypeScriptServicesFactory = function () {\n    function TypeScriptServicesFactory() {\n      this._shims = [];\n    }\n    /*\n     * Returns script API version.\n     */\n\n\n    TypeScriptServicesFactory.prototype.getServicesVersion = function () {\n      return ts.servicesVersion;\n    };\n\n    TypeScriptServicesFactory.prototype.createLanguageServiceShim = function (host) {\n      try {\n        if (this.documentRegistry === undefined) {\n          this.documentRegistry = ts.createDocumentRegistry(host.useCaseSensitiveFileNames && host.useCaseSensitiveFileNames(), host.getCurrentDirectory());\n        }\n\n        var hostAdapter = new LanguageServiceShimHostAdapter(host);\n        var languageService = ts.createLanguageService(hostAdapter, this.documentRegistry);\n        return new LanguageServiceShimObject(this, host, languageService);\n      } catch (err) {\n        logInternalError(host, err);\n        throw err;\n      }\n    };\n\n    TypeScriptServicesFactory.prototype.createClassifierShim = function (logger) {\n      try {\n        return new ClassifierShimObject(this, logger);\n      } catch (err) {\n        logInternalError(logger, err);\n        throw err;\n      }\n    };\n\n    TypeScriptServicesFactory.prototype.createCoreServicesShim = function (host) {\n      try {\n        var adapter = new CoreServicesShimHostAdapter(host);\n        return new CoreServicesShimObject(this, host, adapter);\n      } catch (err) {\n        logInternalError(host, err);\n        throw err;\n      }\n    };\n\n    TypeScriptServicesFactory.prototype.close = function () {\n      // Forget all the registered shims\n      this._shims = [];\n      this.documentRegistry = undefined;\n    };\n\n    TypeScriptServicesFactory.prototype.registerShim = function (shim) {\n      this._shims.push(shim);\n    };\n\n    TypeScriptServicesFactory.prototype.unregisterShim = function (shim) {\n      for (var i = 0, n = this._shims.length; i < n; i++) {\n        if (this._shims[i] === shim) {\n          delete this._shims[i];\n          return;\n        }\n      }\n\n      throw new Error(\"Invalid operation\");\n    };\n\n    return TypeScriptServicesFactory;\n  }();\n\n  ts.TypeScriptServicesFactory = TypeScriptServicesFactory;\n\n  if (typeof module !== \"undefined\" && module.exports) {\n    module.exports = ts;\n  }\n})(ts || (ts = {}));\n/* tslint:enable:no-in-operator */\n\n/* tslint:enable:no-null */\n/// TODO: this is used by VS, clean this up on both sides of the interface\n\n/* @internal */\n\n\nvar TypeScript;\n\n(function (TypeScript) {\n  var Services;\n\n  (function (Services) {\n    Services.TypeScriptServicesFactory = ts.TypeScriptServicesFactory;\n  })(Services = TypeScript.Services || (TypeScript.Services = {}));\n})(TypeScript || (TypeScript = {}));\n/* tslint:disable:no-unused-variable */\n// 'toolsVersion' gets consumed by the managed side, so it's not unused.\n// TODO: it should be moved into a namespace though.\n\n/* @internal */\n\n\nvar toolsVersion = \"1.8\";\n/* tslint:enable:no-unused-variable */","map":null,"metadata":{},"sourceType":"script"}