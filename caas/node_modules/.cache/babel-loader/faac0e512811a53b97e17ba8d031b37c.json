{"ast":null,"code":"module.exports = Function;\n/**\n    A utility to reduce unnecessary allocations of <code>function () {}</code>\n    in its many colorful variations.  It does nothing and returns\n    <code>undefined</code> thus makes a suitable default in some circumstances.\n\n    @function external:Function.noop\n*/\n\nFunction.noop = function () {};\n/**\n    A utility to reduce unnecessary allocations of <code>function (x) {return\n    x}</code> in its many colorful but ultimately wasteful parameter name\n    variations.\n\n    @function external:Function.identity\n    @param {Any} any value\n    @returns {Any} that value\n*/\n\n\nFunction.identity = function (value) {\n  return value;\n};\n/**\n    A utility for creating a comparator function for a particular aspect of a\n    figurative class of objects.\n\n    @function external:Function.by\n    @param {Function} relation A function that accepts a value and returns a\n    corresponding value to use as a representative when sorting that object.\n    @param {Function} compare an alternate comparator for comparing the\n    represented values.  The default is <code>Object.compare</code>, which\n    does a deep, type-sensitive, polymorphic comparison.\n    @returns {Function} a comparator that has been annotated with\n    <code>by</code> and <code>compare</code> properties so\n    <code>sorted</code> can perform a transform that reduces the need to call\n    <code>by</code> on each sorted object to just once.\n */\n\n\nFunction.by = function (by, compare) {\n  compare = compare || Object.compare;\n  by = by || Function.identity;\n\n  var compareBy = function compareBy(a, b) {\n    return compare(by(a), by(b));\n  };\n\n  compareBy.compare = compare;\n  compareBy.by = by;\n  return compareBy;\n}; // TODO document\n\n\nFunction.get = function (key) {\n  return function (object) {\n    return Object.get(object, key);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}