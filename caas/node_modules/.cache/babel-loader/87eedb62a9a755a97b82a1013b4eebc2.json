{"ast":null,"code":"var Object = require(\"./shim-object\");\n\nmodule.exports = GenericOrder;\n\nfunction GenericOrder() {\n  throw new Error(\"Can't construct. GenericOrder is a mixin.\");\n}\n\nGenericOrder.prototype.equals = function (that, equals) {\n  equals = equals || this.contentEquals || Object.equals;\n\n  if (this === that) {\n    return true;\n  }\n\n  if (!that) {\n    return false;\n  }\n\n  var self = this;\n  return this.length === that.length && this.zip(that).every(function (pair) {\n    return equals(pair[0], pair[1]);\n  });\n};\n\nGenericOrder.prototype.compare = function (that, compare) {\n  compare = compare || this.contentCompare || Object.compare;\n\n  if (this === that) {\n    return 0;\n  }\n\n  if (!that) {\n    return 1;\n  }\n\n  var length = Math.min(this.length, that.length);\n  var comparison = this.zip(that).reduce(function (comparison, pair, index) {\n    if (comparison === 0) {\n      if (index >= length) {\n        return comparison;\n      } else {\n        return compare(pair[0], pair[1]);\n      }\n    } else {\n      return comparison;\n    }\n  }, 0);\n\n  if (comparison === 0) {\n    return this.length - that.length;\n  }\n\n  return comparison;\n};\n\nGenericOrder.prototype.toJSON = function () {\n  return this.toArray();\n};","map":null,"metadata":{},"sourceType":"script"}