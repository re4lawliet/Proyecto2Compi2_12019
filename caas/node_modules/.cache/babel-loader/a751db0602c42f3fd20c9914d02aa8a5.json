{"ast":null,"code":"/* parser generated by jison 0.4.18 */\n\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar Lexico = function () {\n  var o = function o(k, v, _o, l) {\n    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {\n      ;\n    }\n\n    return _o;\n  },\n      $V0 = [1, 7],\n      $V1 = [2, 13],\n      $V2 = [1, 9],\n      $V3 = [1, 10],\n      $V4 = [1, 11],\n      $V5 = [10, 16, 20, 21, 22],\n      $V6 = [5, 16, 20, 21, 22];\n\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"S\": 3,\n      \"INICIO\": 4,\n      \"EOF\": 5,\n      \"LISTA_IMPORTAR\": 6,\n      \"LISTA_CLASES\": 7,\n      \"CLASE\": 8,\n      \"IMPORTAR\": 9,\n      \"importar\": 10,\n      \"apar\": 11,\n      \"Tstring\": 12,\n      \"cpar\": 13,\n      \"fin\": 14,\n      \"VISIBILIDAD\": 15,\n      \"clase\": 16,\n      \"identi\": 17,\n      \"alla\": 18,\n      \"clla\": 19,\n      \"publico\": 20,\n      \"privado\": 21,\n      \"protegido\": 22,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      5: \"EOF\",\n      10: \"importar\",\n      11: \"apar\",\n      12: \"Tstring\",\n      13: \"cpar\",\n      14: \"fin\",\n      16: \"clase\",\n      17: \"identi\",\n      18: \"alla\",\n      19: \"clla\",\n      20: \"publico\",\n      21: \"privado\",\n      22: \"protegido\"\n    },\n    productions_: [0, [3, 2], [4, 2], [4, 1], [7, 2], [7, 1], [6, 2], [6, 1], [9, 5], [8, 5], [15, 1], [15, 1], [15, 1], [15, 0]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n    /* action[1] */\n    , $$\n    /* vstack */\n    , _$\n    /* lstack */\n    ) {\n      /* this == yyval */\n      var $0 = $$.length - 1;\n\n      switch (yystate) {\n        case 1:\n          console.log(\"entro al Inicio\");\n          raizArbol = $$[$0 - 1];\n          return raizArbol;\n          break;\n\n        case 2:\n          var tmp = new Nodo(\"INICIO\", \"noterminal\", yylineno, 0, countNodo);\n          tmp.addHijo($$[$0 - 1]);\n          tmp.addHijo($$[$0]);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 3:\n          var tmp = new Nodo(\"INICIO\", \"noterminal\", yylineno, 0, countNodo);\n          tmp.addHijo($$[$0]);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 4:\n        case 6:\n          var tmp = $$[$0 - 1];\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 5:\n          var tmp = new Nodo(\"LISTA_CLASES\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 7:\n          var tmp = new Nodo(\"LISTA_IMPORTAR\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0]);\n          this.$ = tmp;\n          break;\n\n        case 8:\n          var tmp = new Nodo(\"ARCHIVO\", yytext.replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 9:\n          var tmp = new Nodo(\"CLASE\", \"noterminal\", yylineno, 0, countNodo);\n          countNodo++;\n          var tmp2 = new Nodo(\"identi\", $$[$0 - 2].replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          tmp.addHijo($$[$0 - 4]);\n          tmp.addHijo(tmp2);\n          this.$ = tmp;\n          break;\n\n        case 10:\n          console.log(\"entro al Inicio\");\n          var tmp = new Nodo(\"publico\", yytext.replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 11:\n          var tmp = new Nodo(\"privado\", yytext.replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 12:\n          var tmp = new Nodo(\"protegido\", yytext.replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n\n        case 13:\n          var tmp = new Nodo(\"publico\", yytext.replace(\"\\\"\", \"\").replace(\"\\\"\", \"\"), yylineno, 0, countNodo);\n          countNodo++;\n          this.$ = tmp;\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: 2,\n      6: 3,\n      7: 4,\n      8: 6,\n      9: 5,\n      10: $V0,\n      15: 8,\n      16: $V1,\n      20: $V2,\n      21: $V3,\n      22: $V4\n    }, {\n      1: [3]\n    }, {\n      5: [1, 12]\n    }, {\n      7: 13,\n      8: 6,\n      9: 14,\n      10: $V0,\n      15: 8,\n      16: $V1,\n      20: $V2,\n      21: $V3,\n      22: $V4\n    }, {\n      5: [2, 3],\n      8: 15,\n      15: 8,\n      16: $V1,\n      20: $V2,\n      21: $V3,\n      22: $V4\n    }, o($V5, [2, 7]), o($V6, [2, 5]), {\n      11: [1, 16]\n    }, {\n      16: [1, 17]\n    }, {\n      16: [2, 10]\n    }, {\n      16: [2, 11]\n    }, {\n      16: [2, 12]\n    }, {\n      1: [2, 1]\n    }, {\n      5: [2, 2],\n      8: 15,\n      15: 8,\n      16: $V1,\n      20: $V2,\n      21: $V3,\n      22: $V4\n    }, o($V5, [2, 6]), o($V6, [2, 4]), {\n      12: [1, 18]\n    }, {\n      17: [1, 19]\n    }, {\n      13: [1, 20]\n    }, {\n      18: [1, 21]\n    }, {\n      14: [1, 22]\n    }, {\n      19: [1, 23]\n    }, o($V5, [2, 8]), o($V6, [2, 9])],\n    defaultActions: {\n      9: [2, 10],\n      10: [2, 11],\n      11: [2, 12],\n      12: [2, 1]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n          stack = [0],\n          tstack = [],\n          vstack = [null],\n          lstack = [],\n          table = this.table,\n          yytext = '',\n          yylineno = 0,\n          yyleng = 0,\n          recovering = 0,\n          TERROR = 2,\n          EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n\n      lexer.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer;\n      sharedState.yy.parser = this;\n\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n      }\n\n      var yyloc = lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer.options && lexer.options.ranges;\n\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      _token_stack: var lex = function lex() {\n        var token;\n        token = lexer.lex() || EOF;\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token;\n      };\n\n      var symbol,\n          preErrorSymbol,\n          state,\n          action,\n          a,\n          r,\n          yyval = {},\n          p,\n          len,\n          newState,\n          expected;\n\n      while (true) {\n        state = stack[stack.length - 1];\n\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex();\n          }\n\n          action = table[state] && table[state][symbol];\n        }\n\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = '';\n          expected = [];\n\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push('\\'' + this.terminals_[p] + '\\'');\n            }\n          }\n\n          if (lexer.showPosition) {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n          } else {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n          }\n\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          });\n        }\n\n        if (action[0] instanceof Array && action.length > 1) {\n          throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng;\n              yytext = lexer.yytext;\n              yylineno = lexer.yylineno;\n              yyloc = lexer.yylloc;\n\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n\n            break;\n\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n            if (typeof r !== 'undefined') {\n              return r;\n            }\n\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3:\n            return true;\n        }\n      }\n\n      return true;\n    }\n  };\n  var countNodo = 0;\n  var raizArbol;\n  exports.__esModule = true;\n\n  require(\"collections/shim-array\");\n\n  require(\"collections/listen/array-changes\");\n\n  var Nodo =\n  /** @class */\n  function () {\n    function Nodo(etq, lex, linea, columna, ide) {\n      this.etiqueta = etq;\n      this.lexema = lex;\n      this.linea = linea;\n      this.columna = columna;\n      this.id = ide;\n      this.hijos = new Array();\n    }\n\n    Nodo.prototype.addHijo = function (nuevo) {\n      this.hijos.push(nuevo);\n    };\n\n    Nodo.prototype.NodoC = function (etq, id, linea, columna) {\n      this.etiqueta = etq;\n      this.lexema = id;\n      this.linea = linea;\n      this.columna = columna;\n      this.hijos = new Array();\n    };\n\n    return Nodo;\n  }();\n\n  exports.Nodo = Nodo;\n  /* generated by jison-lex 0.3.4 */\n\n  var lexer = function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function setInput(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function input() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function unput(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function more() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function reject() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n\n        return this;\n      },\n      // retain first n characters of the match\n      less: function less(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function pastInput() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function upcomingInput() {\n        var next = this.match;\n\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function showPosition() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function test_match(match, indexed_rule) {\n        var token, lines, backup;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n\n        return false;\n      },\n      // return next match in input\n      next: function next() {\n        if (this.done) {\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.yytext = '';\n          this.match = '';\n        }\n\n        var rules = this._currentRules();\n\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue; // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rules[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {},\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            /* skip whitespace */\n            break;\n\n          case 1:\n            return 'Rasbstract';\n            break;\n\n          case 2:\n            return 'Rboolean';\n            break;\n\n          case 3:\n            return 'Rbreak';\n            break;\n\n          case 4:\n            return 'R_case';\n            break;\n\n          case 5:\n            return 'R_catch';\n            break;\n\n          case 6:\n            return 'R_char';\n            break;\n\n          case 7:\n            return 16;\n            break;\n\n          case 8:\n            return 'R_continue';\n            break;\n\n          case 9:\n            return 'R_default';\n            break;\n\n          case 10:\n            return 'R_double';\n            break;\n\n          case 11:\n            return 'R_do';\n            break;\n\n          case 12:\n            return 'R_else';\n            break;\n\n          case 13:\n            return 'R_extends';\n            break;\n\n          case 14:\n            return 'R_for';\n            break;\n\n          case 15:\n            return 'R_final';\n            break;\n\n          case 16:\n            return 'R_graph_dot';\n            break;\n\n          case 17:\n            return 'R_if';\n            break;\n\n          case 18:\n            return 10;\n            break;\n\n          case 19:\n            return 'R_instanceof';\n            break;\n\n          case 20:\n            return 'R_int';\n            break;\n\n          case 21:\n            return 'R_message';\n            break;\n\n          case 22:\n            return 'R_new';\n            break;\n\n          case 23:\n            return 'R_object';\n            break;\n\n          case 24:\n            return 'R_pow';\n            break;\n\n          case 25:\n            return 'R_println';\n            break;\n\n          case 26:\n            return 21;\n            break;\n\n          case 27:\n            return 22;\n            break;\n\n          case 28:\n            return 20;\n            break;\n\n          case 29:\n            return 'R_return';\n            break;\n\n          case 30:\n            return 'R_read_console';\n            break;\n\n          case 31:\n            return 'R_read_file';\n            break;\n\n          case 32:\n            return 'R_static';\n            break;\n\n          case 33:\n            return 'R_str';\n            break;\n\n          case 34:\n            return 'R_String';\n            break;\n\n          case 35:\n            return 'R_super';\n            break;\n\n          case 36:\n            return 'R_switch';\n            break;\n\n          case 37:\n            return 'R_this';\n            break;\n\n          case 38:\n            return 'R_toChar';\n            break;\n\n          case 39:\n            return 'R_toDouble';\n            break;\n\n          case 40:\n            return 'R_toString';\n            break;\n\n          case 41:\n            return 'R_toInt';\n            break;\n\n          case 42:\n            return 'R_try';\n            break;\n\n          case 43:\n            return 'R_while';\n            break;\n\n          case 44:\n            return 'R_write_file';\n            break;\n\n          case 45:\n            return 'R_incremento';\n            break;\n\n          case 46:\n            return 'R_decremento';\n            break;\n\n          case 47:\n            return 'R_igual';\n            break;\n\n          case 48:\n            return 'R_NotEqual';\n            break;\n\n          case 49:\n            return 'R_Equal';\n            break;\n\n          case 50:\n            return 'R_MayorIgual';\n            break;\n\n          case 51:\n            return 'R_Mayor';\n            break;\n\n          case 52:\n            return 'R_MenorIgual';\n            break;\n\n          case 53:\n            return 'R_Menor';\n            break;\n\n          case 54:\n            return 'R_Interrogacion';\n            break;\n\n          case 55:\n            return 'R_DosPuntos';\n            break;\n\n          case 56:\n            return 14;\n            break;\n\n          case 57:\n            return 'R_And';\n            break;\n\n          case 58:\n            return 'R_Or';\n            break;\n\n          case 59:\n            return '*';\n            break;\n\n          case 60:\n            return '/';\n            break;\n\n          case 61:\n            return '-';\n            break;\n\n          case 62:\n            return '+';\n            break;\n\n          case 63:\n            return '^';\n            break;\n\n          case 64:\n            return '!';\n            break;\n\n          case 65:\n            return '%';\n            break;\n\n          case 66:\n            return 18;\n            break;\n\n          case 67:\n            return 19;\n            break;\n\n          case 68:\n            return 11;\n            break;\n\n          case 69:\n            return 13;\n            break;\n\n          case 70:\n            return 'PI';\n            break;\n\n          case 71:\n            return 'E';\n            break;\n\n          case 72:\n            return 'numero';\n            break;\n\n          case 73:\n            return 17;\n            break;\n\n          case 74:\n            return 12;\n            break;\n\n          case 75:\n            return 'Tchar';\n            break;\n\n          case 76:\n            return 5;\n            break;\n\n          case 77:\n            return 'INVALID';\n            break;\n        }\n      },\n      rules: [/^(?:\\s+)/, /^(?:abstract\\b)/, /^(?:boolean\\b)/, /^(?:break\\b)/, /^(?:case\\b)/, /^(?:catch\\b)/, /^(?:char\\b)/, /^(?:class\\b)/, /^(?:continue\\b)/, /^(?:default\\b)/, /^(?:double\\b)/, /^(?:do\\b)/, /^(?:else\\b)/, /^(?:extends\\b)/, /^(?:for\\b)/, /^(?:final\\b)/, /^(?:graph_dot\\b)/, /^(?:if\\b)/, /^(?:import\\b)/, /^(?:instanceof\\b)/, /^(?:int\\b)/, /^(?:message\\b)/, /^(?:new\\b)/, /^(?:Object\\b)/, /^(?:pow\\b)/, /^(?:println\\b)/, /^(?:private\\b)/, /^(?:protected\\b)/, /^(?:public\\b)/, /^(?:return\\b)/, /^(?:read_console\\b)/, /^(?:read_file\\b)/, /^(?:static\\b)/, /^(?:str\\b)/, /^(?:String\\b)/, /^(?:super\\b)/, /^(?:switch\\b)/, /^(?:this\\b)/, /^(?:toChar\\b)/, /^(?:toDouble\\b)/, /^(?:toString\\b)/, /^(?:toInt\\b)/, /^(?:try\\b)/, /^(?:while\\b)/, /^(?:write_file\\b)/, /^(?:\\+\\+)/, /^(?:--)/, /^(?:=)/, /^(?:!=)/, /^(?:==)/, /^(?:>=)/, /^(?:>)/, /^(?:<=)/, /^(?:<)/, /^(?:\\?)/, /^(?::)/, /^(?:;)/, /^(?:&&)/, /^(?:\\|\\|)/, /^(?:\\*)/, /^(?:\\/)/, /^(?:-)/, /^(?:\\+)/, /^(?:\\^)/, /^(?:!)/, /^(?:%)/, /^(?:\\{)/, /^(?:\\})/, /^(?:\\()/, /^(?:\\))/, /^(?:PI\\b)/, /^(?:E\\b)/, /^(?:-?[0-9]+(\\.[0-9]+)?\\b)/, /^(?:[a-zA-Z]([0-9A-Za-z]|_)*)/, /^(?:(\"[^\\\"]+\"))/, /^(?:( \\[a-zñA-ZÑ\\] \\| \\[0-9\\] ))/, /^(?:$)/, /^(?:.)/],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = Lexico;\n  exports.Parser = Lexico.Parser;\n\n  exports.parse = function () {\n    return Lexico.parse.apply(Lexico, arguments);\n  };\n\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE');\n      process.exit(1);\n    }\n\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n\n    return exports.parser.parse(source);\n  };\n\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1));\n  }\n}","map":{"version":3,"sources":["/Users/carlosmonterroso/Desktop/Proyecto2Compi2_12019/caas/src/Analizadores/Lexico.js"],"names":["Lexico","o","k","v","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","parser","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","console","log","raizArbol","tmp","Nodo","countNodo","addHijo","$","replace","tmp2","table","defaultActions","parseError","str","hash","recoverable","error","Error","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","getPrototypeOf","popStack","n","_token_stack","lex","token","symbol","preErrorSymbol","state","action","a","r","yyval","p","len","newState","expected","errStr","showPosition","join","text","match","line","loc","Array","first_line","last_line","first_column","last_column","range","apply","concat","exports","__esModule","require","etq","linea","columna","ide","etiqueta","lexema","id","hijos","nuevo","NodoC","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","upcomingInput","next","pre","c","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","Math","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","Parser","main","commonjsMain","process","exit","source","readFileSync","normalize","module","argv"],"mappings":"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","sourcesContent":["/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar Lexico = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,13],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[10,16,20,21,22],$V6=[5,16,20,21,22];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"S\":3,\"INICIO\":4,\"EOF\":5,\"LISTA_IMPORTAR\":6,\"LISTA_CLASES\":7,\"CLASE\":8,\"IMPORTAR\":9,\"importar\":10,\"apar\":11,\"Tstring\":12,\"cpar\":13,\"fin\":14,\"VISIBILIDAD\":15,\"clase\":16,\"identi\":17,\"alla\":18,\"clla\":19,\"publico\":20,\"privado\":21,\"protegido\":22,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",10:\"importar\",11:\"apar\",12:\"Tstring\",13:\"cpar\",14:\"fin\",16:\"clase\",17:\"identi\",18:\"alla\",19:\"clla\",20:\"publico\",21:\"privado\",22:\"protegido\"},\nproductions_: [0,[3,2],[4,2],[4,1],[7,2],[7,1],[6,2],[6,1],[9,5],[8,5],[15,1],[15,1],[15,1],[15,0]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n \r\n            console.log(\"entro al Inicio\");\r\n            raizArbol=$$[$0-1];\r\n            return raizArbol;\r\n        \nbreak;\ncase 2:\n\r\n    var tmp = new Nodo(\"INICIO\",\"noterminal\",yylineno,0,countNodo);\r\n    tmp.addHijo($$[$0-1]);\r\n    tmp.addHijo($$[$0]);\r\n    countNodo++;\r\n    this.$ = tmp;\r\n\nbreak;\ncase 3:\n\r\n    var tmp = new Nodo(\"INICIO\",\"noterminal\",yylineno,0,countNodo);\r\n    tmp.addHijo($$[$0]);\r\n    countNodo++;\r\n    this.$ = tmp;\r\n\nbreak;\ncase 4: case 6:\n\r\n    var tmp = $$[$0-1];\r\n    tmp.addHijo($$[$0]);\r\n    this.$ = tmp;\r\n\nbreak;\ncase 5:\n\r\n    var tmp = new Nodo(\"LISTA_CLASES\",\"noterminal\",yylineno,0,countNodo);\r\n    countNodo++;\r\n    tmp.addHijo($$[$0]);\r\n    this.$ = tmp;\r\n\nbreak;\ncase 7:\n\r\n    var tmp = new Nodo(\"LISTA_IMPORTAR\",\"noterminal\",yylineno,0,countNodo);\r\n    countNodo++;\r\n    tmp.addHijo($$[$0]);\r\n    this.$ = tmp;\r\n\nbreak;\ncase 8:\n\r\n    var tmp = new Nodo(\"ARCHIVO\",yytext.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\r\n    countNodo++;\r\n    this.$ = tmp;\r\n\nbreak;\ncase 9:\n\r\n    var tmp = new Nodo(\"CLASE\",\"noterminal\",yylineno,0,countNodo);\r\n    countNodo++;\r\n\r\n    var tmp2 = new Nodo(\"identi\",$$[$0-2].replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\r\n    countNodo++;\r\n\r\n    tmp.addHijo($$[$0-4]);\r\n    tmp.addHijo(tmp2);\r\n\r\n    this.$ = tmp;\r\n\r\n\nbreak;\ncase 10:\n\r\n    console.log(\"entro al Inicio\");\r\n    var tmp = new Nodo(\"publico\",yytext.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\r\n    countNodo++;\r\n    this.$ = tmp;\r\n\nbreak;\ncase 11:\n\r\n    var tmp = new Nodo(\"privado\",yytext.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\r\n    countNodo++;\r\n    this.$ = tmp;\r\n\nbreak;\ncase 12:\n\r\n    var tmp = new Nodo(\"protegido\",yytext.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\r\n    countNodo++;\r\n    this.$ = tmp;\r\n\nbreak;\ncase 13:\n\r\n    var tmp = new Nodo(\"publico\",yytext.replace(\"\\\"\",\"\").replace(\"\\\"\",\"\"),yylineno,0,countNodo);\r\n    countNodo++;\r\n    this.$ = tmp;\r\n\nbreak;\n}\n},\ntable: [{3:1,4:2,6:3,7:4,8:6,9:5,10:$V0,15:8,16:$V1,20:$V2,21:$V3,22:$V4},{1:[3]},{5:[1,12]},{7:13,8:6,9:14,10:$V0,15:8,16:$V1,20:$V2,21:$V3,22:$V4},{5:[2,3],8:15,15:8,16:$V1,20:$V2,21:$V3,22:$V4},o($V5,[2,7]),o($V6,[2,5]),{11:[1,16]},{16:[1,17]},{16:[2,10]},{16:[2,11]},{16:[2,12]},{1:[2,1]},{5:[2,2],8:15,15:8,16:$V1,20:$V2,21:$V3,22:$V4},o($V5,[2,6]),o($V6,[2,4]),{12:[1,18]},{17:[1,19]},{13:[1,20]},{18:[1,21]},{14:[1,22]},{19:[1,23]},o($V5,[2,8]),o($V6,[2,9])],\ndefaultActions: {9:[2,10],10:[2,11],11:[2,12],12:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n\r\n    var countNodo=0;\r\n    var raizArbol;\r\n  \r\n\r\nexports.__esModule = true;\r\nrequire(\"collections/shim-array\");\r\nrequire(\"collections/listen/array-changes\");\r\nvar Nodo = /** @class */ (function () {\r\n    function Nodo(etq, lex, linea, columna, ide) {\r\n        this.etiqueta = etq;\r\n        this.lexema = lex;\r\n        this.linea = linea;\r\n        this.columna = columna;\r\n        this.id = ide;\r\n        this.hijos = new Array();\r\n    }\r\n    Nodo.prototype.addHijo = function (nuevo) {\r\n        this.hijos.push(nuevo);\r\n    };\r\n    Nodo.prototype.NodoC = function (etq, id, linea, columna) {\r\n        this.etiqueta = etq;\r\n        this.lexema = id;\r\n        this.linea = linea;\r\n        this.columna = columna;\r\n        this.hijos = new Array();\r\n    };\r\n    return Nodo;\r\n}());\r\nexports.Nodo = Nodo;\r\n\r\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 'Rasbstract'\nbreak;\ncase 2:return 'Rboolean'\nbreak;\ncase 3:return 'Rbreak'\nbreak;\ncase 4:return 'R_case'\nbreak;\ncase 5:return 'R_catch'\nbreak;\ncase 6:return 'R_char'\nbreak;\ncase 7:return 16\nbreak;\ncase 8:return 'R_continue'\nbreak;\ncase 9:return 'R_default'\nbreak;\ncase 10:return 'R_double'\nbreak;\ncase 11:return 'R_do'\nbreak;\ncase 12:return 'R_else'\nbreak;\ncase 13:return 'R_extends'\nbreak;\ncase 14:return 'R_for'\nbreak;\ncase 15:return 'R_final'\nbreak;\ncase 16:return 'R_graph_dot'\nbreak;\ncase 17:return 'R_if'\nbreak;\ncase 18:return 10\nbreak;\ncase 19:return 'R_instanceof'\nbreak;\ncase 20:return 'R_int'\nbreak;\ncase 21:return 'R_message'\nbreak;\ncase 22:return 'R_new'\nbreak;\ncase 23:return 'R_object'\nbreak;\ncase 24:return 'R_pow'\nbreak;\ncase 25:return 'R_println'\nbreak;\ncase 26:return 21\nbreak;\ncase 27:return 22\nbreak;\ncase 28:return 20\nbreak;\ncase 29:return 'R_return'\nbreak;\ncase 30:return 'R_read_console'\nbreak;\ncase 31:return 'R_read_file'\nbreak;\ncase 32:return 'R_static'\nbreak;\ncase 33:return 'R_str'\nbreak;\ncase 34:return 'R_String'\nbreak;\ncase 35:return 'R_super'\nbreak;\ncase 36:return 'R_switch'\nbreak;\ncase 37:return 'R_this'\nbreak;\ncase 38:return 'R_toChar'\nbreak;\ncase 39:return 'R_toDouble'\nbreak;\ncase 40:return 'R_toString'\nbreak;\ncase 41:return 'R_toInt'\nbreak;\ncase 42:return 'R_try'\nbreak;\ncase 43:return 'R_while'\nbreak;\ncase 44:return 'R_write_file'\nbreak;\ncase 45:return 'R_incremento'\nbreak;\ncase 46:return 'R_decremento'\nbreak;\ncase 47:return 'R_igual'\nbreak;\ncase 48:return 'R_NotEqual'\nbreak;\ncase 49:return 'R_Equal'\nbreak;\ncase 50:return 'R_MayorIgual'\nbreak;\ncase 51:return 'R_Mayor'\nbreak;\ncase 52:return 'R_MenorIgual'\nbreak;\ncase 53:return 'R_Menor'\nbreak;\ncase 54:return 'R_Interrogacion'\nbreak;\ncase 55:return 'R_DosPuntos'\nbreak;\ncase 56:return 14\nbreak;\ncase 57:return 'R_And'\nbreak;\ncase 58:return 'R_Or'\nbreak;\ncase 59:return '*'\nbreak;\ncase 60:return '/'\nbreak;\ncase 61:return '-'\nbreak;\ncase 62:return '+'\nbreak;\ncase 63:return '^'\nbreak;\ncase 64:return '!'\nbreak;\ncase 65:return '%'\nbreak;\ncase 66:return 18\nbreak;\ncase 67:return 19\nbreak;\ncase 68:return 11\nbreak;\ncase 69:return 13\nbreak;\ncase 70:return 'PI'\nbreak;\ncase 71:return 'E'\nbreak;\ncase 72:return 'numero'\nbreak;\ncase 73:return 17\nbreak;\ncase 74:return 12\nbreak;\ncase 75:return 'Tchar'\nbreak;\ncase 76:return 5\nbreak;\ncase 77:return 'INVALID'\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:abstract\\b)/,/^(?:boolean\\b)/,/^(?:break\\b)/,/^(?:case\\b)/,/^(?:catch\\b)/,/^(?:char\\b)/,/^(?:class\\b)/,/^(?:continue\\b)/,/^(?:default\\b)/,/^(?:double\\b)/,/^(?:do\\b)/,/^(?:else\\b)/,/^(?:extends\\b)/,/^(?:for\\b)/,/^(?:final\\b)/,/^(?:graph_dot\\b)/,/^(?:if\\b)/,/^(?:import\\b)/,/^(?:instanceof\\b)/,/^(?:int\\b)/,/^(?:message\\b)/,/^(?:new\\b)/,/^(?:Object\\b)/,/^(?:pow\\b)/,/^(?:println\\b)/,/^(?:private\\b)/,/^(?:protected\\b)/,/^(?:public\\b)/,/^(?:return\\b)/,/^(?:read_console\\b)/,/^(?:read_file\\b)/,/^(?:static\\b)/,/^(?:str\\b)/,/^(?:String\\b)/,/^(?:super\\b)/,/^(?:switch\\b)/,/^(?:this\\b)/,/^(?:toChar\\b)/,/^(?:toDouble\\b)/,/^(?:toString\\b)/,/^(?:toInt\\b)/,/^(?:try\\b)/,/^(?:while\\b)/,/^(?:write_file\\b)/,/^(?:\\+\\+)/,/^(?:--)/,/^(?:=)/,/^(?:!=)/,/^(?:==)/,/^(?:>=)/,/^(?:>)/,/^(?:<=)/,/^(?:<)/,/^(?:\\?)/,/^(?::)/,/^(?:;)/,/^(?:&&)/,/^(?:\\|\\|)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:-)/,/^(?:\\+)/,/^(?:\\^)/,/^(?:!)/,/^(?:%)/,/^(?:\\{)/,/^(?:\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:PI\\b)/,/^(?:E\\b)/,/^(?:-?[0-9]+(\\.[0-9]+)?\\b)/,/^(?:[a-zA-Z]([0-9A-Za-z]|_)*)/,/^(?:(\"[^\\\"]+\"))/,/^(?:( \\[a-zñA-ZÑ\\] \\| \\[0-9\\] ))/,/^(?:$)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = Lexico;\nexports.Parser = Lexico.Parser;\nexports.parse = function () { return Lexico.parse.apply(Lexico, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}"]},"metadata":{},"sourceType":"module"}