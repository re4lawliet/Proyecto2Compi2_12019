{"ast":null,"code":"module.exports = GenericSet;\n\nfunction GenericSet() {\n  throw new Error(\"Can't construct. GenericSet is a mixin.\");\n}\n\nGenericSet.prototype.isSet = true;\n\nGenericSet.prototype.union = function (that) {\n  var union = this.constructClone(this);\n  union.addEach(that);\n  return union;\n};\n\nGenericSet.prototype.intersection = function (that) {\n  return this.constructClone(this.filter(function (value) {\n    return that.has(value);\n  }));\n};\n\nGenericSet.prototype.difference = function (that) {\n  var union = this.constructClone(this);\n  union.deleteEach(that);\n  return union;\n};\n\nGenericSet.prototype.symmetricDifference = function (that) {\n  var union = this.union(that);\n  var intersection = this.intersection(that);\n  return union.difference(intersection);\n};\n\nGenericSet.prototype.deleteAll = function (value) {\n  // deleteAll is equivalent to delete for sets since they guarantee that\n  // only one value exists for an equivalence class, but deleteAll returns\n  // the count of deleted values instead of whether a value was deleted.\n  return +this[\"delete\"](value);\n};\n\nGenericSet.prototype.equals = function (that, equals) {\n  var self = this;\n  return that && typeof that.reduce === \"function\" && this.length === that.length && that.reduce(function (equal, value) {\n    return equal && self.has(value, equals);\n  }, true);\n};\n\nGenericSet.prototype.forEach = function (callback\n/*, thisp*/\n) {\n  var thisp = arguments[1];\n  return this.reduce(function (undefined, value, key, object, depth) {\n    //ECMASCRIPT Sets send value twice in callback to forEach\n    callback.call(thisp, value, value, object, depth);\n  }, undefined);\n};\n\nGenericSet.prototype.toJSON = function () {\n  return this.toArray();\n}; // W3C DOMTokenList API overlap (does not handle variadic arguments)\n\n\nGenericSet.prototype.contains = function (value) {\n  return this.has(value);\n};\n\nGenericSet.prototype.remove = function (value) {\n  return this[\"delete\"](value);\n};\n\nGenericSet.prototype.toggle = function (value) {\n  if (this.has(value)) {\n    this[\"delete\"](value);\n  } else {\n    this.add(value);\n  }\n};\n\nvar _valuesArrayFunction = function _valuesArrayFunction(value, key) {\n  return value;\n};\n\nGenericSet.prototype.valuesArray = function () {\n  return this.map(_valuesArrayFunction);\n};\n\nvar _entriesArrayFunction = function _entriesArrayFunction(value, key) {\n  return [key, value];\n};\n\nGenericSet.prototype.entriesArray = function () {\n  return this.map(_entriesArrayFunction);\n};","map":null,"metadata":{},"sourceType":"script"}