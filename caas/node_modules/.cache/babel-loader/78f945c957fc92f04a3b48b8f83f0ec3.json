{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar Graficador =\n/** @class */\nfunction () {\n  function Graficador() {\n    this.CadenaDot = \"\";\n  }\n  /**\n   *\n   * @param raiz\n   */\n\n\n  Graficador.prototype.GraficarAST = function (raiz) {\n    //Creo una carpeta en /home/usuario/SalidasDot, en donde va estar todo\n    var dir = \"/Users/carlosmonterroso/Desktop\"; //Rutas para el .dot y la imagen .png\n\n    var ruta_dot = \"/Users/carlosmonterroso/Desktop/ast.dot\";\n    var ruta_png = \"/Users/carlosmonterroso/Desktop/ast.png\"; //Arma el contenido del .dot\n\n    this.armar_Cuerpo_dot(raiz, ruta_dot); //Genera el archivo .dot y su imagen .png\n    //this.crearGrafo(ruta_dot, ruta_png);\n    //Abre la imagen resultante .png\n    //this.autoAbrir(ruta_png);\n  }; //Este metodo se puede usar para graficar cualquier grafo\n  //debido a q solo necesita al ruta del dot y la ruta de la salida->imagen\n\n\n  Graficador.prototype.crearGrafo = function (ruta_dot, ruta_png) {\n    var texto = \"\";\n    var tParam = \"-Tpng\";\n    var tOParam = \"-o\";\n    var cmd = \"dot \" + tParam + \" \" + ruta_dot + \" \" + tOParam + \" \" + ruta_png; // On Windows Only ...\n    //const { spawn } = require('child_process');\n    //const bat = spawn('cmd.exe', ['/c', cmd]);\n  }; //Este metodo es generico\n  //Porque solo necesita un nodo para crear el .dot\n\n\n  Graficador.prototype.armar_Cuerpo_dot = function (raiz, ruta_dot) {\n    var contador = 0;\n    var buffer = \"\";\n    this.CadenaDot += \"\\ndigraph G {\\r\\nnode [shape=circle, style=filled, color=yellow, fontcolor=black];\\n\";\n    /*buffer.appendFile(ruta_dot, \"\\ndigraph G {\\r\\nnode [shape=circle, style=filled, color=yellow, fontcolor=black];\\n\", (error: any) => {\n        if (error) {\n            throw error;\n        }\n    });*/\n\n    this.CadenaDot += this.listarNodos(raiz, ruta_dot, buffer, contador, \"\");\n  }; //Este metodo es generico\n  //Porque solo necesita un nodo para lista y generar una porcion\n  //de lo que sera el fichero .dot\n\n\n  Graficador.prototype.listarNodos = function (praiz, ruta_dot, buffer, contador, acum) {\n    //graphviz+=\"node\"+contador+\"[label=\\\"\"+praiz.valor+\"\\\"];\\n\";\n    var cont = contador;\n\n    if (praiz.lexema != \"noterminal\") {\n      acum += \"node\" + praiz.id + \"[label=\\\"\" + praiz.lexema + \"\\\"];\\n\";\n      /*buffer.appendFile(ruta_dot, \"node\" + praiz.id + \"[label=\\\"\" + praiz.lexema + \"\\\"];\\n\", (error: any) => {\n          if (error) {\n              throw error;\n          }\n           });*/\n    } else {\n      acum += \"node\" + praiz.id + \"[label=\\\"\" + praiz.etiqueta + \"\\\"];\\n\";\n      /*buffer.appendFile(ruta_dot, \"node\" + praiz.id + \"[label=\\\"\" + praiz.etiqueta + \"\\\"];\\n\", (error: any) => {\n          if (error) {\n              throw error;\n          }\n           });*/\n    }\n\n    praiz.hijos.forEach(function (value) {\n      cont++;\n      acum += \"\\\"node\" + praiz.id + \"\\\"->\";\n      acum += \"\\\"node\" + value.id + \"\\\";\\n\";\n      acum += Graficador.prototype.listarNodos(value, ruta_dot, buffer, cont, \"\");\n      cont++;\n    });\n    return acum;\n  }; //Este metodo es generico\n  //Porque solo necesita un nodo para lista y generar una porcion\n  //de lo que sera el fichero .dot\n\n\n  Graficador.prototype.enlazarNodos = function (pRaiz, ruta_dot, buffer) {\n    var relacion = \"\";\n    pRaiz.hijos.forEach(function (value) {\n      relacion += \"\\\"node\" + pRaiz.id + \"\\\"->\";\n      relacion += \"\\\"node\" + value.id + \"\\\";\\n\";\n      buffer.appendFile(ruta_dot, relacion, function (error) {\n        if (error) {\n          throw error;\n        }\n      });\n      Graficador.prototype.enlazarNodos(value, ruta_dot, buffer);\n    }); //this.CadenaDot+= relacion;\n  }; //Este metodo es generico\n  //Por que abre un fichero, archivo, etc. en base a la ruta\n  //Lo abre con el programa predeterminado por el sistema\n\n\n  Graficador.prototype.autoAbrir = function (ruta) {\n    // On Windows Only ...\n    //const { spawn } = require('child_process');\n    //const bat = spawn('cmd.exe', ['/c', ruta]);\n    return true;\n  }; //Este metodo es generico\n  //Porque crea un archivo plano en base a la ruta y el contenido que se le pase\n\n  /**\n   *\n   * @param Ruta\n   * @param Contenido\n   */\n\n\n  return Graficador;\n}();\n\nexports.Graficador = Graficador;","map":{"version":3,"sources":["/Users/carlosmonterroso/Desktop/Proyecto2Compi2_12019/caas/src/Analizadores/Graficador.js"],"names":["exports","__esModule","Graficador","CadenaDot","prototype","GraficarAST","raiz","dir","ruta_dot","ruta_png","armar_Cuerpo_dot","crearGrafo","texto","tParam","tOParam","cmd","contador","buffer","listarNodos","praiz","acum","cont","lexema","id","etiqueta","hijos","forEach","value","enlazarNodos","pRaiz","relacion","appendFile","error","autoAbrir","ruta"],"mappings":"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","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nvar Graficador = /** @class */ (function () {\n    function Graficador() {\n        this.CadenaDot = \"\";\n    }\n    /**\n     *\n     * @param raiz\n     */\n    Graficador.prototype.GraficarAST = function (raiz) {\n        //Creo una carpeta en /home/usuario/SalidasDot, en donde va estar todo\n        var dir = \"/Users/carlosmonterroso/Desktop\";\n        //Rutas para el .dot y la imagen .png\n        var ruta_dot = \"/Users/carlosmonterroso/Desktop/ast.dot\";\n        var ruta_png = \"/Users/carlosmonterroso/Desktop/ast.png\";\n        //Arma el contenido del .dot\n        this.armar_Cuerpo_dot(raiz, ruta_dot);\n  \n        //Genera el archivo .dot y su imagen .png\n        //this.crearGrafo(ruta_dot, ruta_png);\n        //Abre la imagen resultante .png\n        //this.autoAbrir(ruta_png);\n    };\n    //Este metodo se puede usar para graficar cualquier grafo\n    //debido a q solo necesita al ruta del dot y la ruta de la salida->imagen\n    Graficador.prototype.crearGrafo = function (ruta_dot, ruta_png) {\n\n        var texto = \"\";\n        var tParam = \"-Tpng\";\n        var tOParam = \"-o\";\n        var cmd = \"dot \" + tParam + \" \" + ruta_dot + \" \" + tOParam + \" \" + ruta_png;\n        // On Windows Only ...\n        //const { spawn } = require('child_process');\n        //const bat = spawn('cmd.exe', ['/c', cmd]);\n    };\n    //Este metodo es generico\n    //Porque solo necesita un nodo para crear el .dot\n    Graficador.prototype.armar_Cuerpo_dot = function (raiz, ruta_dot) {\n        var contador = 0;\n        var buffer = \"\";\n        this.CadenaDot += \"\\ndigraph G {\\r\\nnode [shape=circle, style=filled, color=yellow, fontcolor=black];\\n\";\n        /*buffer.appendFile(ruta_dot, \"\\ndigraph G {\\r\\nnode [shape=circle, style=filled, color=yellow, fontcolor=black];\\n\", (error: any) => {\n            if (error) {\n                throw error;\n            }\n        });*/\n        this.CadenaDot += this.listarNodos(raiz, ruta_dot, buffer, contador, \"\");\n    };\n    //Este metodo es generico\n    //Porque solo necesita un nodo para lista y generar una porcion\n    //de lo que sera el fichero .dot\n    Graficador.prototype.listarNodos = function (praiz, ruta_dot, buffer, contador, acum) {\n        //graphviz+=\"node\"+contador+\"[label=\\\"\"+praiz.valor+\"\\\"];\\n\";\n        var cont = contador;\n        if (praiz.lexema != \"noterminal\") {\n            acum += \"node\" + praiz.id + \"[label=\\\"\" + praiz.lexema + \"\\\"];\\n\";\n            /*buffer.appendFile(ruta_dot, \"node\" + praiz.id + \"[label=\\\"\" + praiz.lexema + \"\\\"];\\n\", (error: any) => {\n                if (error) {\n                    throw error;\n                }\n    \n            });*/\n        }\n        else {\n            acum += \"node\" + praiz.id + \"[label=\\\"\" + praiz.etiqueta + \"\\\"];\\n\";\n            /*buffer.appendFile(ruta_dot, \"node\" + praiz.id + \"[label=\\\"\" + praiz.etiqueta + \"\\\"];\\n\", (error: any) => {\n                if (error) {\n                    throw error;\n                }\n    \n            });*/\n        }\n        praiz.hijos.forEach(function (value) {\n            cont++;\n            acum += \"\\\"node\" + praiz.id + \"\\\"->\";\n            acum += \"\\\"node\" + value.id + \"\\\";\\n\";\n            acum += Graficador.prototype.listarNodos(value, ruta_dot, buffer, cont, \"\");\n            cont++;\n        });\n        return acum;\n    };\n    //Este metodo es generico\n    //Porque solo necesita un nodo para lista y generar una porcion\n    //de lo que sera el fichero .dot\n    Graficador.prototype.enlazarNodos = function (pRaiz, ruta_dot, buffer) {\n        var relacion = \"\";\n        pRaiz.hijos.forEach(function (value) {\n            relacion += \"\\\"node\" + pRaiz.id + \"\\\"->\";\n            relacion += \"\\\"node\" + value.id + \"\\\";\\n\";\n            buffer.appendFile(ruta_dot, relacion, function (error) {\n                if (error) {\n                    throw error;\n                }\n            });\n            Graficador.prototype.enlazarNodos(value, ruta_dot, buffer);\n        });\n        //this.CadenaDot+= relacion;\n    };\n    //Este metodo es generico\n    //Por que abre un fichero, archivo, etc. en base a la ruta\n    //Lo abre con el programa predeterminado por el sistema\n    Graficador.prototype.autoAbrir = function (ruta) {\n        // On Windows Only ...\n        //const { spawn } = require('child_process');\n        //const bat = spawn('cmd.exe', ['/c', ruta]);\n        return true;\n    };\n    //Este metodo es generico\n    //Porque crea un archivo plano en base a la ruta y el contenido que se le pase\n    /**\n     *\n     * @param Ruta\n     * @param Contenido\n     */\n    return Graficador;\n}());\nexports.Graficador = Graficador;\n"]},"metadata":{},"sourceType":"module"}