{"ast":null,"code":"\"use strict\";\n\nvar Shim = require(\"./shim\");\n\nvar GenericCollection = require(\"./generic-collection\");\n\nvar GenericMap = require(\"./generic-map\"); // Burgled from https://github.com/domenic/dict\n\n\nmodule.exports = Dict;\n\nfunction Dict(values, getDefault) {\n  if (!(this instanceof Dict)) {\n    return new Dict(values, getDefault);\n  }\n\n  getDefault = getDefault || Function.noop;\n  this.getDefault = getDefault;\n  this.store = Object.create(null);\n  this.length = 0;\n  this.addEach(values);\n}\n\nDict.Dict = Dict; // hack so require(\"dict\").Dict will work in MontageJS.\n\nObject.addEach(Dict.prototype, GenericCollection.prototype);\nObject.addEach(Dict.prototype, GenericMap.prototype);\nDict.from = GenericCollection.from;\n\nDict.prototype.constructClone = function (values) {\n  return new this.constructor(values, this.getDefault);\n};\n\nDict.prototype.assertString = function (key) {\n  if (typeof key !== \"string\") {\n    throw new TypeError(\"key must be a string but Got \" + key);\n  }\n};\n\nObject.defineProperty(Dict.prototype, \"$__proto__\", {\n  writable: true\n});\nObject.defineProperty(Dict.prototype, \"_hasProto\", {\n  get: function get() {\n    return this.hasOwnProperty(\"$__proto__\") && typeof this._protoValue !== \"undefined\";\n  }\n});\nObject.defineProperty(Dict.prototype, \"_protoValue\", {\n  get: function get() {\n    return this[\"$__proto__\"];\n  },\n  set: function set(value) {\n    this[\"$__proto__\"] = value;\n  }\n});\nObject.defineProperty(Dict.prototype, \"size\", GenericCollection._sizePropertyDescriptor);\n\nDict.prototype.get = function (key, defaultValue) {\n  this.assertString(key);\n\n  if (key === \"__proto__\") {\n    if (this._hasProto) {\n      return this._protoValue;\n    } else if (arguments.length > 1) {\n      return defaultValue;\n    } else {\n      return this.getDefault(key);\n    }\n  } else {\n    if (key in this.store) {\n      return this.store[key];\n    } else if (arguments.length > 1) {\n      return defaultValue;\n    } else {\n      return this.getDefault(key);\n    }\n  }\n};\n\nDict.prototype.set = function (key, value) {\n  this.assertString(key);\n  var isProtoKey = key === \"__proto__\";\n\n  if (isProtoKey ? this._hasProto : key in this.store) {\n    // update\n    if (this.dispatchesMapChanges) {\n      this.dispatchBeforeMapChange(key, isProtoKey ? this._protoValue : this.store[key]);\n    }\n\n    isProtoKey ? this._protoValue = value : this.store[key] = value;\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchMapChange(key, value);\n    }\n\n    return false;\n  } else {\n    // create\n    if (this.dispatchesMapChanges) {\n      this.dispatchBeforeMapChange(key, undefined);\n    }\n\n    this.length++;\n    isProtoKey ? this._protoValue = value : this.store[key] = value;\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchMapChange(key, value);\n    }\n\n    return true;\n  }\n};\n\nDict.prototype.has = function (key) {\n  this.assertString(key);\n  return key === \"__proto__\" ? this._hasProto : key in this.store;\n};\n\nDict.prototype[\"delete\"] = function (key) {\n  this.assertString(key);\n\n  if (key === \"__proto__\") {\n    if (this._hasProto) {\n      if (this.dispatchesMapChanges) {\n        this.dispatchBeforeMapChange(key, this._protoValue);\n      }\n\n      this._protoValue = undefined;\n      this.length--;\n\n      if (this.dispatchesMapChanges) {\n        this.dispatchMapChange(key, undefined);\n      }\n\n      return true;\n    }\n\n    return false;\n  } else {\n    if (key in this.store) {\n      if (this.dispatchesMapChanges) {\n        this.dispatchBeforeMapChange(key, this.store[key]);\n      }\n\n      delete this.store[key];\n      this.length--;\n\n      if (this.dispatchesMapChanges) {\n        this.dispatchMapChange(key, undefined);\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n};\n\nDict.prototype.clear = function () {\n  var key;\n\n  if (this._hasProto) {\n    if (this.dispatchesMapChanges) {\n      this.dispatchBeforeMapChange(\"__proto__\", this._protoValue);\n    }\n\n    this._protoValue = undefined;\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchMapChange(\"__proto__\", undefined);\n    }\n  }\n\n  for (key in this.store) {\n    if (this.dispatchesMapChanges) {\n      this.dispatchBeforeMapChange(key, this.store[key]);\n    }\n\n    delete this.store[key];\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchMapChange(key, undefined);\n    }\n  }\n\n  this.length = 0;\n};\n\nDict.prototype.reduce = function (callback, basis, thisp) {\n  if (this._hasProto) {\n    basis = callback.call(thisp, basis, \"$__proto__\", \"__proto__\", this);\n  }\n\n  var store = this.store;\n\n  for (var key in this.store) {\n    basis = callback.call(thisp, basis, store[key], key, this);\n  }\n\n  return basis;\n};\n\nDict.prototype.reduceRight = function (callback, basis, thisp) {\n  var self = this;\n  var store = this.store;\n  basis = Object.keys(this.store).reduceRight(function (basis, key) {\n    return callback.call(thisp, basis, store[key], key, self);\n  }, basis);\n\n  if (this._hasProto) {\n    return callback.call(thisp, basis, this._protoValue, \"__proto__\", self);\n  }\n\n  return basis;\n};\n\nDict.prototype.one = function () {\n  var key;\n\n  for (key in this.store) {\n    return this.store[key];\n  }\n\n  return this._protoValue;\n};\n\nDict.prototype.toJSON = function () {\n  return this.toObject();\n};","map":null,"metadata":{},"sourceType":"script"}