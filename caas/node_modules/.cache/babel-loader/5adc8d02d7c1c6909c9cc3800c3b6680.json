{"ast":null,"code":"\"use strict\";\n\nvar Object = require(\"./shim-object\");\n\nvar Iterator = require(\"./iterator\");\n\nmodule.exports = GenericMap;\n\nfunction GenericMap() {\n  throw new Error(\"Can't construct. GenericMap is a mixin.\");\n} // all of these methods depend on the constructor providing a `store` set\n\n\nGenericMap.prototype.isMap = true;\n\nGenericMap.prototype.addEach = function (values) {\n  var i;\n\n  if (values && Object(values) === values) {\n    if (typeof values.forEach === \"function\") {\n      // copy map-alikes\n      if (values.isMap === true) {\n        values.forEach(function (value, key) {\n          this.set(key, value);\n        }, this); // iterate key value pairs of other iterables\n      } else {\n        values.forEach(function (pair) {\n          this.set(pair[0], pair[1]);\n        }, this);\n      }\n    } else if (typeof values.length === \"number\") {\n      // Array-like objects that do not implement forEach, ergo,\n      // Arguments\n      for (i = 0; i < values.length; i++) {\n        this.add(values[i], i);\n      }\n    } else {\n      // copy other objects as map-alikes\n      Object.keys(values).forEach(function (key) {\n        this.set(key, values[key]);\n      }, this);\n    }\n  } else if (values && typeof values.length === \"number\") {\n    // String\n    for (i = 0; i < values.length; i++) {\n      this.add(values[i], i);\n    }\n  }\n\n  return this;\n};\n\nGenericMap.prototype.get = function (key, defaultValue) {\n  var item = this.store.get(new this.Item(key));\n\n  if (item) {\n    return item.value;\n  } else if (arguments.length > 1) {\n    console.log(\"Use of a second argument as default value is deprecated to match standards\");\n    return defaultValue;\n  } else {\n    return this.getDefault(key);\n  }\n};\n\nGenericMap.prototype.set = function (key, value) {\n  var item = new this.Item(key, value);\n  var found = this.store.get(item);\n  var grew = false;\n\n  if (found) {\n    // update\n    if (this.dispatchesMapChanges) {\n      this.dispatchBeforeMapChange(key, found.value);\n    }\n\n    found.value = value;\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchMapChange(key, value);\n    }\n  } else {\n    // create\n    if (this.dispatchesMapChanges) {\n      this.dispatchBeforeMapChange(key, undefined);\n    }\n\n    if (this.store.add(item)) {\n      this.length++;\n      grew = true;\n    }\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchMapChange(key, value);\n    }\n  }\n\n  return this;\n};\n\nGenericMap.prototype.add = function (value, key) {\n  return this.set(key, value);\n};\n\nGenericMap.prototype.has = function (key) {\n  return this.store.has(new this.Item(key));\n};\n\nGenericMap.prototype['delete'] = function (key) {\n  var item = new this.Item(key);\n\n  if (this.store.has(item)) {\n    var from = this.store.get(item).value;\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchBeforeMapChange(key, from);\n    }\n\n    this.store[\"delete\"](item);\n    this.length--;\n\n    if (this.dispatchesMapChanges) {\n      this.dispatchMapChange(key, undefined);\n    }\n\n    return true;\n  }\n\n  return false;\n};\n\nGenericMap.prototype.clear = function () {\n  var keys, key;\n\n  if (this.dispatchesMapChanges) {\n    this.forEach(function (value, key) {\n      this.dispatchBeforeMapChange(key, value);\n    }, this);\n    keys = this.keysArray();\n  }\n\n  this.store.clear();\n  this.length = 0;\n\n  if (this.dispatchesMapChanges) {\n    for (var i = 0; key = keys[i]; i++) {\n      this.dispatchMapChange(key);\n    } // keys.forEach(function (key) {\n    //     this.dispatchMapChange(key);\n    // }, this);\n\n  }\n};\n\nGenericMap.prototype.reduce = function (callback, basis, thisp) {\n  return this.store.reduce(function (basis, item) {\n    return callback.call(thisp, basis, item.value, item.key, this);\n  }, basis, this);\n};\n\nGenericMap.prototype.reduceRight = function (callback, basis, thisp) {\n  return this.store.reduceRight(function (basis, item) {\n    return callback.call(thisp, basis, item.value, item.key, this);\n  }, basis, this);\n};\n\nGenericMap.prototype.keysArray = function () {\n  return this.map(function (value, key) {\n    return key;\n  });\n};\n\nGenericMap.prototype.keys = function () {\n  return new Iterator(this.keysArray());\n};\n\nGenericMap.prototype.valuesArray = function () {\n  return this.map(Function.identity);\n};\n\nGenericMap.prototype.values = function () {\n  return new Iterator(this.valuesArray());\n};\n\nGenericMap.prototype.entriesArray = function () {\n  return this.map(function (value, key) {\n    return [key, value];\n  });\n};\n\nGenericMap.prototype.entries = function () {\n  return new Iterator(this.entriesArray());\n}; // XXX deprecated\n\n\nGenericMap.prototype.items = function () {\n  return this.entriesArray();\n};\n\nGenericMap.prototype.equals = function (that, equals) {\n  equals = equals || Object.equals;\n\n  if (this === that) {\n    return true;\n  } else if (that && typeof that.every === \"function\") {\n    return that.length === this.length && that.every(function (value, key) {\n      return equals(this.get(key), value);\n    }, this);\n  } else {\n    var keys = Object.keys(that);\n    return keys.length === this.length && Object.keys(that).every(function (key) {\n      return equals(this.get(key), that[key]);\n    }, this);\n  }\n};\n\nGenericMap.prototype.toJSON = function () {\n  return this.entriesArray();\n};\n\nGenericMap.prototype.Item = Item;\n\nfunction Item(key, value) {\n  this.key = key;\n  this.value = value;\n}\n\nItem.prototype.equals = function (that) {\n  return Object.equals(this.key, that.key) && Object.equals(this.value, that.value);\n};\n\nItem.prototype.compare = function (that) {\n  return Object.compare(this.key, that.key);\n};","map":null,"metadata":{},"sourceType":"script"}