{"ast":null,"code":"\"use strict\";\n\nmodule.exports = Iterator;\n\nvar Object = require(\"./shim-object\");\n\nvar GenericCollection = require(\"./generic-collection\"); // upgrades an iterable to a Iterator\n\n\nfunction Iterator(iterable) {\n  var values = iterable && iterable.values && iterable.values();\n\n  if (values && typeof values.next === \"function\") {\n    return values;\n  }\n\n  if (!(this instanceof Iterator)) {\n    return new Iterator(iterable);\n  }\n\n  if (Array.isArray(iterable) || typeof iterable === \"string\") return Iterator.iterate(iterable);\n  iterable = Object(iterable);\n\n  if (iterable instanceof Iterator) {\n    return iterable;\n  } else if (iterable.next) {\n    this.next = function () {\n      return iterable.next();\n    };\n  } else if (iterable.iterate) {\n    var iterator = iterable.iterate();\n\n    this.next = function () {\n      return iterator.next();\n    };\n  } else if (Object.prototype.toString.call(iterable) === \"[object Function]\") {\n    this.next = iterable;\n  } else {\n    throw new TypeError(\"Can't iterate \" + iterable);\n  }\n}\n\nIterator.prototype.forEach = GenericCollection.prototype.forEach;\nIterator.prototype.map = GenericCollection.prototype.map;\nIterator.prototype.filter = GenericCollection.prototype.filter;\nIterator.prototype.every = GenericCollection.prototype.every;\nIterator.prototype.some = GenericCollection.prototype.some;\nIterator.prototype.any = GenericCollection.prototype.any;\nIterator.prototype.all = GenericCollection.prototype.all;\nIterator.prototype.min = GenericCollection.prototype.min;\nIterator.prototype.max = GenericCollection.prototype.max;\nIterator.prototype.sum = GenericCollection.prototype.sum;\nIterator.prototype.average = GenericCollection.prototype.average;\nIterator.prototype.flatten = GenericCollection.prototype.flatten;\nIterator.prototype.zip = GenericCollection.prototype.zip;\nIterator.prototype.enumerate = GenericCollection.prototype.enumerate;\nIterator.prototype.sorted = GenericCollection.prototype.sorted;\nIterator.prototype.group = GenericCollection.prototype.group;\nIterator.prototype.reversed = GenericCollection.prototype.reversed;\nIterator.prototype.toArray = GenericCollection.prototype.toArray;\nIterator.prototype.toObject = GenericCollection.prototype.toObject;\nIterator.prototype.iterator = GenericCollection.prototype.iterator;\nIterator.prototype.__iterationObject = null;\nObject.defineProperty(Iterator.prototype, \"_iterationObject\", {\n  get: function get() {\n    return this.__iterationObject || (this.__iterationObject = {\n      done: false,\n      value: void 0\n    });\n  }\n}); // this is a bit of a cheat so flatten and such work with the generic\n// reducible\n\nIterator.prototype.constructClone = function (values) {\n  var clone = [];\n  clone.addEach(values);\n  return clone;\n};\n\nIterator.prototype.mapIterator = function (callback\n/*, thisp*/\n) {\n  var self = Iterator(this),\n      thisp = arguments[1],\n      i = 0;\n  if (Object.prototype.toString.call(callback) != \"[object Function]\") throw new TypeError();\n  return new self.constructor(function () {\n    if (self._iterationObject.done !== true) {\n      var callbackValue = callback.call(thisp, self.next().value, i++, self);\n      self._iterationObject.value = callbackValue;\n    }\n\n    return self._iterationObject;\n  });\n};\n\nIterator.prototype.filterIterator = function (callback\n/*, thisp*/\n) {\n  var self = Iterator(this),\n      thisp = arguments[1],\n      i = 0;\n  if (Object.prototype.toString.call(callback) != \"[object Function]\") throw new TypeError();\n  return new self.constructor(function () {\n    var nextEntry;\n\n    while (true) {\n      nextEntry = self.next();\n\n      if (nextEntry.done !== true) {\n        if (callback.call(thisp, nextEntry.value, i++, self)) return nextEntry;\n      } else {\n        //done true and value undefined at this point\n        return nextEntry;\n      }\n    }\n  });\n};\n\nIterator.prototype.reduce = function (callback\n/*, initial, thisp*/\n) {\n  var self = Iterator(this),\n      result = arguments[1],\n      thisp = arguments[2],\n      i = 0,\n      nextEntry;\n  if (Object.prototype.toString.call(callback) != \"[object Function]\") throw new TypeError(); // first iteration unrolled\n\n  nextEntry = self.next();\n\n  if (nextEntry.done === true) {\n    if (arguments.length > 1) {\n      return arguments[1]; // initial\n    } else {\n      throw TypeError(\"cannot reduce a value from an empty iterator with no initial value\");\n    }\n  }\n\n  if (arguments.length > 1) {\n    result = callback.call(thisp, result, nextEntry.value, i, self);\n  } else {\n    result = nextEntry.value;\n  }\n\n  i++; // remaining entries\n\n  while (true) {\n    nextEntry = self.next();\n\n    if (nextEntry.done === true) {\n      return result;\n    }\n\n    result = callback.call(thisp, result, nextEntry.value, i, self);\n    i++;\n  }\n};\n\nIterator.prototype.concat = function () {\n  return Iterator.concat(Array.prototype.concat.apply(this, arguments));\n};\n\nIterator.prototype.dropWhile = function (callback\n/*, thisp */\n) {\n  var self = Iterator(this),\n      thisp = arguments[1],\n      stopped = false,\n      stopValue,\n      nextEntry,\n      i = 0;\n  if (Object.prototype.toString.call(callback) != \"[object Function]\") throw new TypeError();\n\n  while (true) {\n    nextEntry = self.next();\n\n    if (nextEntry.done === true) {\n      break;\n    }\n\n    if (!callback.call(thisp, nextEntry.value, i, self)) {\n      stopped = true;\n      stopValue = nextEntry.value;\n      break;\n    }\n\n    i++;\n  }\n\n  if (stopped) {\n    return self.constructor([stopValue]).concat(self);\n  } else {\n    return self.constructor([]);\n  }\n};\n\nIterator.prototype.takeWhile = function (callback\n/*, thisp*/\n) {\n  var self = Iterator(this),\n      thisp = arguments[1],\n      nextEntry,\n      i = 0;\n  if (Object.prototype.toString.call(callback) != \"[object Function]\") throw new TypeError();\n  return new self.constructor(function () {\n    if (self._iterationObject.done !== true) {\n      var value = self.next().value;\n\n      if (callback.call(thisp, value, i++, self)) {\n        self._iterationObject.value = value;\n      } else {\n        self._iterationObject.done = true;\n        self._iterationObject.value = void 0;\n      }\n    }\n\n    return self._iterationObject;\n  });\n};\n\nIterator.prototype.zipIterator = function () {\n  return Iterator.unzip(Array.prototype.concat.apply(this, arguments));\n};\n\nIterator.prototype.enumerateIterator = function (start) {\n  return Iterator.count(start).zipIterator(this);\n}; // creates an iterator for Array and String\n\n\nIterator.iterate = function (iterable) {\n  var start;\n  start = 0;\n  return new Iterator(function () {\n    // advance to next owned entry\n    if (typeof iterable === \"object\") {\n      while (!(start in iterable)) {\n        // deliberately late bound\n        if (start >= iterable.length) {\n          this._iterationObject.done = true;\n          this._iterationObject.value = void 0;\n          break;\n        } else start += 1;\n      }\n    } else if (start >= iterable.length) {\n      this._iterationObject.done = true;\n      this._iterationObject.value = void 0;\n    }\n\n    if (!this._iterationObject.done) {\n      this._iterationObject.value = iterable[start];\n      start += 1;\n    }\n\n    return this._iterationObject;\n  });\n};\n\nIterator.cycle = function (cycle, times) {\n  var next;\n  if (arguments.length < 2) times = Infinity; //cycle = Iterator(cycle).toArray();\n\n  return new Iterator(function () {\n    var iteration, nextEntry;\n\n    if (next) {\n      nextEntry = next();\n    }\n\n    if (!next || nextEntry.done === true) {\n      if (times > 0) {\n        times--;\n        iteration = Iterator.iterate(cycle);\n        nextEntry = (next = iteration.next.bind(iteration))();\n      } else {\n        this._iterationObject.done = true;\n        nextEntry = this._iterationObject;\n      }\n    }\n\n    return nextEntry;\n  });\n};\n\nIterator.concat = function (iterators) {\n  iterators = Iterator(iterators);\n  var next;\n  return new Iterator(function () {\n    var iteration, nextEntry;\n    if (next) nextEntry = next();\n\n    if (!nextEntry || nextEntry.done === true) {\n      nextEntry = iterators.next();\n\n      if (nextEntry.done === false) {\n        iteration = Iterator(nextEntry.value);\n        next = iteration.next.bind(iteration);\n        return next();\n      } else {\n        return nextEntry;\n      }\n    } else return nextEntry;\n  });\n};\n\nIterator.unzip = function (iterators) {\n  iterators = Iterator(iterators).map(Iterator);\n  if (iterators.length === 0) return new Iterator([]);\n  return new Iterator(function () {\n    var stopped, nextEntry;\n    var result = iterators.map(function (iterator) {\n      nextEntry = iterator.next();\n\n      if (nextEntry.done === true) {\n        stopped = true;\n      }\n\n      return nextEntry.value;\n    });\n\n    if (stopped) {\n      this._iterationObject.done = true;\n      this._iterationObject.value = void 0;\n    } else {\n      this._iterationObject.value = result;\n    }\n\n    return this._iterationObject;\n  });\n};\n\nIterator.zip = function () {\n  return Iterator.unzip(Array.prototype.slice.call(arguments));\n};\n\nIterator.chain = function () {\n  return Iterator.concat(Array.prototype.slice.call(arguments));\n};\n\nIterator.range = function (start, stop, step) {\n  if (arguments.length < 3) {\n    step = 1;\n  }\n\n  if (arguments.length < 2) {\n    stop = start;\n    start = 0;\n  }\n\n  start = start || 0;\n  step = step || 1;\n  return new Iterator(function () {\n    if (start >= stop) {\n      this._iterationObject.done = true;\n      this._iterationObject.value = void 0;\n    }\n\n    var result = start;\n    start += step;\n    this._iterationObject.value = result;\n    return this._iterationObject;\n  });\n};\n\nIterator.count = function (start, step) {\n  return Iterator.range(start, Infinity, step);\n};\n\nIterator.repeat = function (value, times) {\n  return new Iterator.range(times).mapIterator(function () {\n    return value;\n  });\n};","map":null,"metadata":{},"sourceType":"script"}