{"ast":null,"code":"/* parser generated by jison 0.4.18 */\n\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar Analizador1 = function () {\n  var o = function o(k, v, _o, l) {\n    for (_o = _o || {}, l = k.length; l--; _o[k[l]] = v) {\n      ;\n    }\n\n    return _o;\n  },\n      $V0 = [1, 3],\n      $V1 = [1, 4],\n      $V2 = [1, 5],\n      $V3 = [1, 6],\n      $V4 = [1, 7],\n      $V5 = [1, 9],\n      $V6 = [1, 10],\n      $V7 = [1, 11],\n      $V8 = [1, 12],\n      $V9 = [1, 13],\n      $Va = [5, 6, 7, 8, 9, 10, 12],\n      $Vb = [5, 6, 7, 12],\n      $Vc = [5, 6, 7, 8, 9, 12];\n\n  var parser = {\n    trace: function trace() {},\n    yy: {},\n    symbols_: {\n      \"error\": 2,\n      \"expressions\": 3,\n      \"e\": 4,\n      \"EOF\": 5,\n      \"+\": 6,\n      \"-\": 7,\n      \"*\": 8,\n      \"/\": 9,\n      \"^\": 10,\n      \"(\": 11,\n      \")\": 12,\n      \"NUMBER\": 13,\n      \"E\": 14,\n      \"PI\": 15,\n      \"$accept\": 0,\n      \"$end\": 1\n    },\n    terminals_: {\n      2: \"error\",\n      5: \"EOF\",\n      6: \"+\",\n      7: \"-\",\n      8: \"*\",\n      9: \"/\",\n      10: \"^\",\n      11: \"(\",\n      12: \")\",\n      13: \"NUMBER\",\n      14: \"E\",\n      15: \"PI\"\n    },\n    productions_: [0, [3, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 2], [4, 3], [4, 1], [4, 1], [4, 1]],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate\n    /* action[1] */\n    , $$\n    /* vstack */\n    , _$\n    /* lstack */\n    ) {\n      /* this == yyval */\n      var $0 = $$.length - 1;\n\n      switch (yystate) {\n        case 1:\n          return $$[$0 - 1];\n          break;\n\n        case 2:\n          this.$ = $$[$0 - 2] + $$[$0];\n          break;\n\n        case 3:\n          this.$ = $$[$0 - 2] - $$[$0];\n          break;\n\n        case 4:\n          this.$ = $$[$0 - 2] * $$[$0];\n          break;\n\n        case 5:\n          this.$ = $$[$0 - 2] / $$[$0];\n          break;\n\n        case 6:\n          this.$ = Math.pow($$[$0 - 2], $$[$0]);\n          break;\n\n        case 7:\n          this.$ = -$$[$0];\n          break;\n\n        case 8:\n          this.$ = $$[$0 - 1];\n          break;\n\n        case 9:\n          this.$ = Number(yytext);\n          break;\n\n        case 10:\n          this.$ = Math.E;\n          break;\n\n        case 11:\n          this.$ = Math.PI;\n          break;\n      }\n    },\n    table: [{\n      3: 1,\n      4: 2,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, {\n      1: [3]\n    }, {\n      5: [1, 8],\n      6: $V5,\n      7: $V6,\n      8: $V7,\n      9: $V8,\n      10: $V9\n    }, {\n      4: 14,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, {\n      4: 15,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, o($Va, [2, 9]), o($Va, [2, 10]), o($Va, [2, 11]), {\n      1: [2, 1]\n    }, {\n      4: 16,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, {\n      4: 17,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, {\n      4: 18,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, {\n      4: 19,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, {\n      4: 20,\n      7: $V0,\n      11: $V1,\n      13: $V2,\n      14: $V3,\n      15: $V4\n    }, o($Va, [2, 7]), {\n      6: $V5,\n      7: $V6,\n      8: $V7,\n      9: $V8,\n      10: $V9,\n      12: [1, 21]\n    }, o($Vb, [2, 2], {\n      8: $V7,\n      9: $V8,\n      10: $V9\n    }), o($Vb, [2, 3], {\n      8: $V7,\n      9: $V8,\n      10: $V9\n    }), o($Vc, [2, 4], {\n      10: $V9\n    }), o($Vc, [2, 5], {\n      10: $V9\n    }), o($Va, [2, 6]), o($Va, [2, 8])],\n    defaultActions: {\n      8: [2, 1]\n    },\n    parseError: function parseError(str, hash) {\n      if (hash.recoverable) {\n        this.trace(str);\n      } else {\n        alert(\"Error Lexico\" + str.yytext);\n      }\n    },\n    parse: function parse(input) {\n      var self = this,\n          stack = [0],\n          tstack = [],\n          vstack = [null],\n          lstack = [],\n          table = this.table,\n          yytext = '',\n          yylineno = 0,\n          yyleng = 0,\n          recovering = 0,\n          TERROR = 2,\n          EOF = 1;\n      var args = lstack.slice.call(arguments, 1);\n      var lexer = Object.create(this.lexer);\n      var sharedState = {\n        yy: {}\n      };\n\n      for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n          sharedState.yy[k] = this.yy[k];\n        }\n      }\n\n      lexer.setInput(input, sharedState.yy);\n      sharedState.yy.lexer = lexer;\n      sharedState.yy.parser = this;\n\n      if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n      }\n\n      var yyloc = lexer.yylloc;\n      lstack.push(yyloc);\n      var ranges = lexer.options && lexer.options.ranges;\n\n      if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n      } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n      }\n\n      function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n      }\n\n      _token_stack: var lex = function lex() {\n        var token;\n        token = lexer.lex() || EOF;\n\n        if (typeof token !== 'number') {\n          token = self.symbols_[token] || token;\n        }\n\n        return token;\n      };\n\n      var symbol,\n          preErrorSymbol,\n          state,\n          action,\n          a,\n          r,\n          yyval = {},\n          p,\n          len,\n          newState,\n          expected;\n\n      while (true) {\n        state = stack[stack.length - 1];\n\n        if (this.defaultActions[state]) {\n          action = this.defaultActions[state];\n        } else {\n          if (symbol === null || typeof symbol == 'undefined') {\n            symbol = lex();\n          }\n\n          action = table[state] && table[state][symbol];\n        }\n\n        if (typeof action === 'undefined' || !action.length || !action[0]) {\n          var errStr = '';\n          expected = [];\n\n          for (p in table[state]) {\n            if (this.terminals_[p] && p > TERROR) {\n              expected.push('\\'' + this.terminals_[p] + '\\'');\n            }\n          }\n\n          if (lexer.showPosition) {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n          } else {\n            errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n          }\n\n          this.parseError(errStr, {\n            text: lexer.match,\n            token: this.terminals_[symbol] || symbol,\n            line: lexer.yylineno,\n            loc: yyloc,\n            expected: expected\n          });\n        }\n\n        switch (action[0]) {\n          case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n\n            if (!preErrorSymbol) {\n              yyleng = lexer.yyleng;\n              yytext = lexer.yytext;\n              yylineno = lexer.yylineno;\n              yyloc = lexer.yylloc;\n\n              if (recovering > 0) {\n                recovering--;\n              }\n            } else {\n              symbol = preErrorSymbol;\n              preErrorSymbol = null;\n            }\n\n            break;\n\n          case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n              first_line: lstack[lstack.length - (len || 1)].first_line,\n              last_line: lstack[lstack.length - 1].last_line,\n              first_column: lstack[lstack.length - (len || 1)].first_column,\n              last_column: lstack[lstack.length - 1].last_column\n            };\n\n            if (ranges) {\n              yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n\n            r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));\n\n            if (typeof r !== 'undefined') {\n              return r;\n            }\n\n            if (len) {\n              stack = stack.slice(0, -1 * len * 2);\n              vstack = vstack.slice(0, -1 * len);\n              lstack = lstack.slice(0, -1 * len);\n            }\n\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n\n          case 3:\n            return true;\n        }\n      }\n\n      return true;\n    }\n  };\n  /* generated by jison-lex 0.3.4 */\n\n  var lexer = function () {\n    var lexer = {\n      EOF: 1,\n      parseError: function parseError(str, hash) {\n        if (this.yy.parser) {\n          this.yy.parser.parseError(str, hash);\n        } else {\n          throw new Error(str);\n        }\n      },\n      // resets the lexer, sets new input\n      setInput: function setInput(input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n          first_line: 1,\n          first_column: 0,\n          last_line: 1,\n          last_column: 0\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [0, 0];\n        }\n\n        this.offset = 0;\n        return this;\n      },\n      // consumes and returns one char from the input\n      input: function input() {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno++;\n          this.yylloc.last_line++;\n        } else {\n          this.yylloc.last_column++;\n        }\n\n        if (this.options.ranges) {\n          this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n      },\n      // unshifts one char (or a string) into the input\n      unput: function unput(ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len); //this.yyleng -= len;\n\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n          this.yylineno -= lines.length - 1;\n        }\n\n        var r = this.yylloc.range;\n        this.yylloc = {\n          first_line: this.yylloc.first_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ? (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length : this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n          this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n\n        this.yyleng = this.yytext.length;\n        return this;\n      },\n      // When called from action, caches matched text and appends it on next action\n      more: function more() {\n        this._more = true;\n        return this;\n      },\n      // When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\n      reject: function reject() {\n        if (this.options.backtrack_lexer) {\n          this._backtrack = true;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n\n        return this;\n      },\n      // retain first n characters of the match\n      less: function less(n) {\n        this.unput(this.match.slice(n));\n      },\n      // displays already matched input, i.e. for error messages\n      pastInput: function pastInput() {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...' : '') + past.substr(-20).replace(/\\n/g, \"\");\n      },\n      // displays upcoming input, i.e. for error messages\n      upcomingInput: function upcomingInput() {\n        var next = this.match;\n\n        if (next.length < 20) {\n          next += this._input.substr(0, 20 - next.length);\n        }\n\n        return (next.substr(0, 20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n      },\n      // displays the character position where the lexing error occurred, i.e. for error messages\n      showPosition: function showPosition() {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n      },\n      // test the lexed token: return FALSE when not a match, otherwise return token\n      test_match: function test_match(match, indexed_rule) {\n        var token, lines, backup;\n\n        if (this.options.backtrack_lexer) {\n          // save context\n          backup = {\n            yylineno: this.yylineno,\n            yylloc: {\n              first_line: this.yylloc.first_line,\n              last_line: this.last_line,\n              first_column: this.yylloc.first_column,\n              last_column: this.yylloc.last_column\n            },\n            yytext: this.yytext,\n            match: this.match,\n            matches: this.matches,\n            matched: this.matched,\n            yyleng: this.yyleng,\n            offset: this.offset,\n            _more: this._more,\n            _input: this._input,\n            yy: this.yy,\n            conditionStack: this.conditionStack.slice(0),\n            done: this.done\n          };\n\n          if (this.options.ranges) {\n            backup.yylloc.range = this.yylloc.range.slice(0);\n          }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n\n        if (lines) {\n          this.yylineno += lines.length;\n        }\n\n        this.yylloc = {\n          first_line: this.yylloc.last_line,\n          last_line: this.yylineno + 1,\n          first_column: this.yylloc.last_column,\n          last_column: lines ? lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n\n        if (this.options.ranges) {\n          this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n\n        if (this.done && this._input) {\n          this.done = false;\n        }\n\n        if (token) {\n          return token;\n        } else if (this._backtrack) {\n          // recover context\n          for (var k in backup) {\n            this[k] = backup[k];\n          }\n\n          return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n\n        return false;\n      },\n      // return next match in input\n      next: function next() {\n        if (this.done) {\n          return this.EOF;\n        }\n\n        if (!this._input) {\n          this.done = true;\n        }\n\n        var token, match, tempMatch, index;\n\n        if (!this._more) {\n          this.yytext = '';\n          this.match = '';\n        }\n\n        var rules = this._currentRules();\n\n        for (var i = 0; i < rules.length; i++) {\n          tempMatch = this._input.match(this.rules[rules[i]]);\n\n          if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n            match = tempMatch;\n            index = i;\n\n            if (this.options.backtrack_lexer) {\n              token = this.test_match(tempMatch, rules[i]);\n\n              if (token !== false) {\n                return token;\n              } else if (this._backtrack) {\n                match = false;\n                continue; // rule action called reject() implying a rule MISmatch.\n              } else {\n                // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                return false;\n              }\n            } else if (!this.options.flex) {\n              break;\n            }\n          }\n        }\n\n        if (match) {\n          token = this.test_match(match, rules[index]);\n\n          if (token !== false) {\n            return token;\n          } // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n\n\n          return false;\n        }\n\n        if (this._input === \"\") {\n          return this.EOF;\n        } else {\n          return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n            text: \"\",\n            token: null,\n            line: this.yylineno\n          });\n        }\n      },\n      // return next match that has a token\n      lex: function lex() {\n        var r = this.next();\n\n        if (r) {\n          return r;\n        } else {\n          return this.lex();\n        }\n      },\n      // activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\n      begin: function begin(condition) {\n        this.conditionStack.push(condition);\n      },\n      // pop the previously active lexer condition state off the condition stack\n      popState: function popState() {\n        var n = this.conditionStack.length - 1;\n\n        if (n > 0) {\n          return this.conditionStack.pop();\n        } else {\n          return this.conditionStack[0];\n        }\n      },\n      // produce the lexer rule set which is active for the currently active lexer condition state\n      _currentRules: function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n          return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n          return this.conditions[\"INITIAL\"].rules;\n        }\n      },\n      // return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\n      topState: function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n\n        if (n >= 0) {\n          return this.conditionStack[n];\n        } else {\n          return \"INITIAL\";\n        }\n      },\n      // alias for begin(condition)\n      pushState: function pushState(condition) {\n        this.begin(condition);\n      },\n      // return the number of states currently on the stack\n      stateStackSize: function stateStackSize() {\n        return this.conditionStack.length;\n      },\n      options: {},\n      performAction: function anonymous(yy, yy_, $avoiding_name_collisions, YY_START) {\n        var YYSTATE = YY_START;\n\n        switch ($avoiding_name_collisions) {\n          case 0:\n            /* skip whitespace */\n            break;\n\n          case 1:\n            return 13;\n            break;\n\n          case 2:\n            return 8;\n            break;\n\n          case 3:\n            return 9;\n            break;\n\n          case 4:\n            return 7;\n            break;\n\n          case 5:\n            return 6;\n            break;\n\n          case 6:\n            return 10;\n            break;\n\n          case 7:\n            return 11;\n            break;\n\n          case 8:\n            return 12;\n            break;\n\n          case 9:\n            return 15;\n            break;\n\n          case 10:\n            return 14;\n            break;\n\n          case 11:\n            return 5;\n            break;\n\n          case 12:\n            //Error Lexico:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n            //QMessageBox::information(NULL,\"Error\",\"Error Lexico\");\n            //QString f= QString::fromUtf8(yy_.yytext); salidalex->append(\"(*) ERROR [Lexico]: \\\"\"+f+\"\\\"\"+\" Fila[\"+QString::number(yy_.yylineno)+\"]Columna[\"+QString::number(0)+\"]\\n\");\n            alert(\"Error Lexico\");\n            break;\n        }\n      },\n      rules: [/^(?:\\s+)/, /^(?:[0-9]+(\\.[0-9]+)?\\b)/, /^(?:\\*)/, /^(?:\\/)/, /^(?:-)/, /^(?:\\+)/, /^(?:\\^)/, /^(?:\\()/, /^(?:\\))/, /^(?:PI\\b)/, /^(?:E\\b)/, /^(?:$)/, /^(?:.)/],\n      conditions: {\n        \"INITIAL\": {\n          \"rules\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],\n          \"inclusive\": true\n        }\n      }\n    };\n    return lexer;\n  }();\n\n  parser.lexer = lexer;\n\n  function Parser() {\n    this.yy = {};\n  }\n\n  Parser.prototype = parser;\n  parser.Parser = Parser;\n  return new Parser();\n}();\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\n  exports.parser = Analizador1;\n  exports.Parser = Analizador1.Parser;\n\n  exports.parse = function () {\n    return Analizador1.parse.apply(Analizador1, arguments);\n  };\n\n  exports.main = function commonjsMain(args) {\n    if (!args[1]) {\n      console.log('Usage: ' + args[0] + ' FILE');\n      process.exit(1);\n    }\n\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n\n    return exports.parser.parse(source);\n  };\n\n  if (typeof module !== 'undefined' && require.main === module) {\n    exports.main(process.argv.slice(1));\n  }\n}","map":{"version":3,"sources":["/Users/carlosmonterroso/Desktop/Proyecto2Compi2_12019/caas/src/Analizadores/Analizador1.js"],"names":["Analizador1","o","k","v","l","length","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","parser","trace","yy","symbols_","terminals_","productions_","performAction","anonymous","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","Math","pow","Number","E","PI","table","defaultActions","parseError","str","hash","recoverable","alert","parse","input","self","stack","tstack","vstack","lstack","recovering","TERROR","EOF","args","slice","call","arguments","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","push","ranges","options","getPrototypeOf","popStack","n","_token_stack","lex","token","symbol","preErrorSymbol","state","action","a","r","yyval","p","len","newState","expected","errStr","showPosition","join","text","match","line","loc","first_line","last_line","first_column","last_column","range","apply","concat","Error","_input","_more","_backtrack","done","matched","conditionStack","offset","ch","lines","unput","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","c","Array","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","i","flex","begin","condition","popState","pop","conditions","topState","abs","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","YYSTATE","Parser","require","exports","main","commonjsMain","console","log","process","exit","source","readFileSync","normalize","module","argv"],"mappings":"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","sourcesContent":["/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar Analizador1 = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,3],$V1=[1,4],$V2=[1,5],$V3=[1,6],$V4=[1,7],$V5=[1,9],$V6=[1,10],$V7=[1,11],$V8=[1,12],$V9=[1,13],$Va=[5,6,7,8,9,10,12],$Vb=[5,6,7,12],$Vc=[5,6,7,8,9,12];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"expressions\":3,\"e\":4,\"EOF\":5,\"+\":6,\"-\":7,\"*\":8,\"/\":9,\"^\":10,\"(\":11,\")\":12,\"NUMBER\":13,\"E\":14,\"PI\":15,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",6:\"+\",7:\"-\",8:\"*\",9:\"/\",10:\"^\",11:\"(\",12:\")\",13:\"NUMBER\",14:\"E\",15:\"PI\"},\nproductions_: [0,[3,2],[4,3],[4,3],[4,3],[4,3],[4,3],[4,2],[4,3],[4,1],[4,1],[4,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\n return $$[$0-1];\nbreak;\ncase 2:\nthis.$ = $$[$0-2]+$$[$0];\nbreak;\ncase 3:\nthis.$ = $$[$0-2]-$$[$0];\nbreak;\ncase 4:\nthis.$ = $$[$0-2]*$$[$0];\nbreak;\ncase 5:\nthis.$ = $$[$0-2]/$$[$0];\nbreak;\ncase 6:\nthis.$ = Math.pow($$[$0-2], $$[$0]);\nbreak;\ncase 7:\nthis.$ = -$$[$0];\nbreak;\ncase 8:\nthis.$ = $$[$0-1];\nbreak;\ncase 9:\nthis.$ = Number(yytext);\nbreak;\ncase 10:\nthis.$ = Math.E;\nbreak;\ncase 11:\nthis.$ = Math.PI;\nbreak;\n}\n},\ntable: [{3:1,4:2,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},{1:[3]},{5:[1,8],6:$V5,7:$V6,8:$V7,9:$V8,10:$V9},{4:14,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},{4:15,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},o($Va,[2,9]),o($Va,[2,10]),o($Va,[2,11]),{1:[2,1]},{4:16,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},{4:17,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},{4:18,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},{4:19,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},{4:20,7:$V0,11:$V1,13:$V2,14:$V3,15:$V4},o($Va,[2,7]),{6:$V5,7:$V6,8:$V7,9:$V8,10:$V9,12:[1,21]},o($Vb,[2,2],{8:$V7,9:$V8,10:$V9}),o($Vb,[2,3],{8:$V7,9:$V8,10:$V9}),o($Vc,[2,4],{10:$V9}),o($Vc,[2,5],{10:$V9}),o($Va,[2,6]),o($Va,[2,8])],\ndefaultActions: {8:[2,1]},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        alert(\"Error Lexico\"+str.yytext);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 13;\nbreak;\ncase 2:return 8;\nbreak;\ncase 3:return 9;\nbreak;\ncase 4:return 7;\nbreak;\ncase 5:return 6;\nbreak;\ncase 6:return 10;\nbreak;\ncase 7:return 11;\nbreak;\ncase 8:return 12;\nbreak;\ncase 9:return 15;\nbreak;\ncase 10:return 14;\nbreak;\ncase 11:return 5;\nbreak;\ncase 12: //Error Lexico:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::\n                    //QMessageBox::information(NULL,\"Error\",\"Error Lexico\");\n                    //QString f= QString::fromUtf8(yy_.yytext); salidalex->append(\"(*) ERROR [Lexico]: \\\"\"+f+\"\\\"\"+\" Fila[\"+QString::number(yy_.yylineno)+\"]Columna[\"+QString::number(0)+\"]\\n\");\n                    alert(\"Error Lexico\");\n                \nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:[0-9]+(\\.[0-9]+)?\\b)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:-)/,/^(?:\\+)/,/^(?:\\^)/,/^(?:\\()/,/^(?:\\))/,/^(?:PI\\b)/,/^(?:E\\b)/,/^(?:$)/,/^(?:.)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = Analizador1;\nexports.Parser = Analizador1.Parser;\nexports.parse = function () { return Analizador1.parse.apply(Analizador1, arguments); };\nexports.main = function commonjsMain (args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}"]},"metadata":{},"sourceType":"module"}