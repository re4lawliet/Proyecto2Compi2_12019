/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var Lexico = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[2,46],$V2=[1,9],$V3=[1,10],$V4=[1,11],$V5=[5,10,16,44,45,46],$V6=[16,17,26,38,39,40,41,42,43],$V7=[17,26,38,39,40,41,42,43],$V8=[1,27],$V9=[2,17,20,26,38,39,40,41,42,43,44,45,46],$Va=[1,38],$Vb=[1,39],$Vc=[1,40],$Vd=[1,41],$Ve=[1,42],$Vf=[1,43],$Vg=[1,46],$Vh=[2,41],$Vi=[17,32,35],$Vj=[1,56],$Vk=[1,84],$Vl=[1,80],$Vm=[1,91],$Vn=[1,69],$Vo=[1,76],$Vp=[1,78],$Vq=[1,79],$Vr=[1,81],$Vs=[1,82],$Vt=[1,83],$Vu=[1,88],$Vv=[1,90],$Vw=[13,14,28,32,36],$Vx=[1,100],$Vy=[13,36],$Vz=[1,106],$VA=[13,14,36,47],$VB=[1,107],$VC=[13,14,36,47,49],$VD=[1,108],$VE=[13,14,36,47,49,51],$VF=[1,116],$VG=[1,117],$VH=[13,14,36,47,49,51,56,57,58,59,60,61,62,64],$VI=[1,118],$VJ=[1,119],$VK=[13,14,36,47,49,51,56,57,58,59,60,61,62,64,65,67],$VL=[1,120],$VM=[1,121],$VN=[13,14,36,47,49,51,56,57,58,59,60,61,62,64,65,67,68,70],$VO=[13,14,36,47,49,51,56,57,58,59,60,61,62,64,65,67,68,70,72,73],$VP=[13,14,36,47,49,51,56,57,58,59,60,61,62,64,65,67,68,70,72,73,89],$VQ=[1,131],$VR=[1,133],$VS=[13,14,32,36,47,49,51,56,57,58,59,60,61,62,64,65,67,68,70,72,73,89];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"INICIO":4,"EOF":5,"LISTA_CLASES":6,"DEFCLASE":7,"IMPORTAR":8,"CLASE":9,"Rimport":10,"apar":11,"Tstring":12,"cpar":13,"fin":14,"VISIBILIDAD":15,"Rclass":16,"identi":17,"alla":18,"FUNCIONES":19,"clla":20,"Rextends":21,"FUNCION":22,"DEF_ATRIBUTO":23,"DEF_ARRAY":24,"DEF_FUNCTION":25,"Rstatic":26,"DEF_TIPO":27,"Rigual":28,"OR":29,"LISTDIM":30,"DIM":31,"acor":32,"ccor":33,"LISTA_PARAM":34,"Rmain":35,"coma":36,"PARAMETRO":37,"Rint":38,"Rdouble":39,"Rchar":40,"Rboolean":41,"RString":42,"Rvoid":43,"Rpublic":44,"Rprivate":45,"Rprotected":46,"ROr":47,"XOR":48,"RXor":49,"AND":50,"RAnd":51,"NOT":52,"neg":53,"EXP":54,"E":55,"RMayor":56,"RMenor":57,"RMayorIgual":58,"RMenorIgual":59,"RDiferente":60,"RIgualigual":61,"Rmas":62,"T":63,"Rmenos":64,"Rpor":65,"F":66,"Rdiv":67,"Rpot":68,"G":69,"Rmod":70,"U":71,"Rincremento":72,"Rdecremento":73,"UU":74,"numero":75,"Tchar":76,"Rtrue":77,"Rfalse":78,"Rnull":79,"INSTANCIA":80,"INSTANCIA_ARRAY":81,"LISTATTRIB":82,"Rnew":83,"LLAMADA_METODO":84,"LISTA_EXP":85,"INICIO_DIMEN":86,"DIMEN":87,"ARRAY":88,"punto":89,"ATRIBUTO":90,"ATRIB":91,"Rthis":92,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"Rimport",11:"apar",12:"Tstring",13:"cpar",14:"fin",16:"Rclass",17:"identi",18:"alla",20:"clla",21:"Rextends",26:"Rstatic",28:"Rigual",32:"acor",33:"ccor",35:"Rmain",36:"coma",38:"Rint",39:"Rdouble",40:"Rchar",41:"Rboolean",42:"RString",43:"Rvoid",44:"Rpublic",45:"Rprivate",46:"Rprotected",47:"ROr",49:"RXor",51:"RAnd",53:"neg",56:"RMayor",57:"RMenor",58:"RMayorIgual",59:"RMenorIgual",60:"RDiferente",61:"RIgualigual",62:"Rmas",64:"Rmenos",65:"Rpor",67:"Rdiv",68:"Rpot",70:"Rmod",72:"Rincremento",73:"Rdecremento",75:"numero",76:"Tchar",77:"Rtrue",78:"Rfalse",79:"Rnull",83:"Rnew",89:"punto",92:"Rthis"},
productions_: [0,[3,2],[4,1],[6,2],[6,1],[7,1],[7,1],[8,5],[9,6],[9,8],[19,2],[19,1],[22,2],[22,2],[22,1],[22,2],[23,6],[23,5],[23,4],[23,3],[24,4],[24,5],[24,6],[24,7],[30,2],[30,1],[31,2],[25,8],[25,7],[25,8],[25,7],[25,6],[34,3],[34,1],[37,3],[37,2],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[27,1],[15,1],[15,1],[15,1],[15,0],[29,3],[29,1],[48,3],[48,1],[50,3],[50,1],[52,2],[52,1],[54,3],[54,3],[54,3],[54,3],[54,3],[54,3],[54,1],[55,3],[55,3],[55,1],[63,3],[63,3],[63,1],[66,3],[66,3],[66,1],[69,2],[69,2],[69,1],[71,2],[71,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,1],[74,3],[74,1],[74,1],[74,1],[80,2],[84,4],[84,3],[85,3],[85,1],[81,3],[86,2],[86,1],[87,3],[88,2],[82,3],[82,1],[90,1],[90,1],[90,1],[91,1],[91,1],[91,1],[91,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 
            raizArbol=$$[$0-1];
            var salida={
                raiz:raizArbol,
                Errores: ListaErrores
            };
            ListaErrores = [];
            return salida;
        
break;
case 2:

    var tmp = new Nodo("INICIO","noterminal",yylineno,0,countNodo);
    tmp.addHijo($$[$0]);
    countNodo++;
    this.$ = tmp;

break;
case 3: case 10: case 24: case 92:

    var tmp = $$[$0-1];
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 4:

    var tmp = new Nodo("LISTA_CLASES","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 5: case 6:

    var tmp = new Nodo("DEFCLASE","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 7:

    var tmp = new Nodo("IMPORTAR",$$[$0-2].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 8:

    var tmp = new Nodo("CLASE","noterminal",yylineno,0,countNodo);
    countNodo++;

    var tmp2 = new Nodo("identi",$$[$0-3].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-5]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-1]);

    this.$ = tmp;


break;
case 9:

    var tmp = new Nodo("CLASE","noterminal",yylineno,0,countNodo);
    countNodo++;

    var tmp2 = new Nodo("identi",$$[$0-5].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    var tmp3 = new Nodo("identi",$$[$0-3].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-7]);
    tmp.addHijo(tmp2);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0-1]);

    this.$ = tmp;

break;
case 11:

    var tmp = new Nodo("FUNCIONES","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 12:

    this.$ = $$[$0-1];

break;
case 13:

   this.$ = $$[$0-1];

break;
case 14:

    this.$ = $$[$0];

break;
case 15:

    var error= new Error(yytext, yylineno, 0, "Sintactico", "Error Sintactico en: "+yytext);
    ListaErrores.push(error);
break;
case 16:

    var tmp = new Nodo("DEF_ATRIBUTO","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("STATIC","static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-2].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-5]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-3]);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 17:

    var tmp = new Nodo("DEF_ATRIBUTO","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-2].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-4]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-3]);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0]);

    this.$ = tmp;


break;
case 18:

    var tmp = new Nodo("DEF_ATRIBUTO","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("STATIC","static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-3]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-1]);
    tmp.addHijo(tmp3);

    this.$ = tmp;

break;
case 19:

    var tmp = new Nodo("DEF_ATRIBUTO","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-2]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-1]);
    tmp.addHijo(tmp3);

    this.$ = tmp;


break;
case 20:

    var tmp = new Nodo("DEF_ARRAY","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-1].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-3]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-2]);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 21:

    var tmp = new Nodo("DEF_ARRAY","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("STATIC","static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-1].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-4]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-2]);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 22:

    var tmp = new Nodo("DEF_ARRAY","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-3].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-5]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-4]);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 23:

    var tmp = new Nodo("DEF_ARRAY","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("STATIC","static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-3].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-6]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-4]);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 25:

    var tmp = new Nodo("LISTA_DIMENSIONES","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 26:

    var tmp = new Nodo("DIMENSION","noterminal",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 27:

    var tmp = new Nodo("DEF_FUNCTION","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-5].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-7]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-6]);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0-3]);

    this.$ = tmp;

break;
case 28:

    var tmp = new Nodo("DEF_FUNCTION","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-4].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    var tmp4 = new Nodo("LISTA_PARAM","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-6]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-5]);
    tmp.addHijo(tmp3);
    tmp.addHijo(tmp4);

    this.$ = tmp;

break;
case 29:

    var tmp = new Nodo("DEF_FUNCTION_MAIN","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("STATIC","static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("main","main",yylineno,0,countNodo);
    countNodo++;
    var tmp4 = new Nodo("LISTA_PARAM","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-7]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-5]);
    tmp.addHijo(tmp3);
    tmp.addHijo(tmp4);

    this.$ = tmp;

break;
case 30:

    var tmp = new Nodo("DEF_FUNCTION_CONSTRUCT","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-5].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-6]);
    tmp.addHijo(tmp2);
    tmp.addHijo(tmp3);
    tmp.addHijo($$[$0-3]);

    this.$ = tmp;


break;
case 31:

    var tmp = new Nodo("DEF_FUNCTION_CONSTRUCT","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("NO_STATIC","no_static",yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("identi",$$[$0-4].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    var tmp4 = new Nodo("LISTA_PARAM","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-5]);
    tmp.addHijo(tmp2);
    tmp.addHijo(tmp3);
    tmp.addHijo(tmp4);

    this.$ = tmp;



break;
case 32: case 89:

    var tmp = $$[$0-2];
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 33:

    var tmp = new Nodo("LISTA_PARAM","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 34:

    var tmp = new Nodo("PARAM_ARRAY","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("identi",$$[$0-1].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-2]);
    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 35:

    var tmp = new Nodo("PARAM","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("identi",$$[$0].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-1]);
    tmp.addHijo(tmp2);

    this.$ = tmp;

break;
case 36:

    var tmp = new Nodo("DEF_TIPO","int",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 37:

    var tmp = new Nodo("DEF_TIPO","double",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 38:

    var tmp = new Nodo("DEF_TIPO","char",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 39:
   
    var tmp = new Nodo("DEF_TIPO","boolean",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 40:

    var tmp = new Nodo("DEF_TIPO","string",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 41:

    var tmp = new Nodo("DEF_TIPO",$$[$0].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 42:

    var tmp = new Nodo("DEF_TIPO","void",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 43:

    console.log("entro al Inicio");
    var tmp = new Nodo("publico",yytext.replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 44:

    var tmp = new Nodo("privado",yytext.replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 45:

    var tmp = new Nodo("protegido",yytext.replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 46:

    var tmp = new Nodo("publico","publico",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 47:

    var tmp = new Nodo("OR","or",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 48:

    var tmp = new Nodo("OR","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 49:

    var tmp = new Nodo("XOR","xor",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 50:

    var tmp = new Nodo("XOR","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 51:

    var tmp = new Nodo("AND","and",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 52:

    var tmp = new Nodo("AND","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 53:

    var tmp = new Nodo("NOT","not",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 54:

    var tmp = new Nodo("NOT","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 55:

    var tmp = new Nodo("EXP",">",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 56:

    var tmp = new Nodo("EXP","<",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 57:

    var tmp = new Nodo("EXP",">=",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 58:

    var tmp = new Nodo("EXP","<=",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 59:

    var tmp = new Nodo("EXP","!=",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 60:

    var tmp = new Nodo("EXP","==",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 61:

    var tmp = new Nodo("EXP","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 62:

    var tmp = new Nodo("E","+",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 63:

    var tmp = new Nodo("E","-",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 64: case 75:

    var tmp = new Nodo("E","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 65:

    var tmp = new Nodo("T","*",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 66:

    var tmp = new Nodo("T","/",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 67:

    var tmp = new Nodo("T","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 68:

    var tmp = new Nodo("F","^",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 69:

    var tmp = new Nodo("F","%",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 70:

    var tmp = new Nodo("F","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 71:

    var tmp = new Nodo("G","++",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-1]);
    this.$ = tmp;

break;
case 72:

    var tmp = new Nodo("G","--",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0-1]);
    this.$ = tmp;

break;
case 73:

    var tmp = new Nodo("G","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 74:

    var tmp = new Nodo("E","-",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 76: case 77: case 79: case 80:

    var tmp = new Nodo("U",$$[$0].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 78:

    var tmp = new Nodo("U",$$[$0].replace("\"","").replace("\"","").replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 81:

    var tmp = new Nodo("U","-1",yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 82:

    var tmp = new Nodo("U","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-1]);

    this.$ = tmp;

break;
case 83: case 84:

    var tmp = new Nodo("U","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 85:

    var tmp = new Nodo("U","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 86:

    var tmp = new Nodo("INSTANCIA","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 87:

    var tmp = new Nodo("LLAMADA_METODO","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("identi",$$[$0-3].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0-1]);

    this.$ = tmp;

break;
case 88:

    var tmp = new Nodo("LLAMADA_METODO","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("identi",$$[$0-2].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    var tmp3 = new Nodo("LISTA_EXP","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo(tmp2);
    tmp.addHijo(tmp3);
    
    this.$ = tmp;

break;
case 90:

    var tmp = new Nodo("LISTA_EXP","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 91:

    var tmp = new Nodo("INSTANCIA_ARRAY","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-1]);
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 93:

    var tmp = new Nodo("INICIO_DIMEN","noterminal",yylineno,0,countNodo);
    countNodo++;
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 94:

    var tmp = new Nodo("DIMEN",$$[$0-1].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;
    this.$ = tmp;

break;
case 95:

    var tmp = new Nodo("ARRAY","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("identi",$$[$0-1].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo(tmp2);
    tmp.addHijo($$[$0]);

    this.$ = tmp;

break;
case 96:

    var tmp = new Nodo("LISTATTRIB_0","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0-2]);
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 97:

    var tmp = new Nodo("LISTATTRIB_1","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0]);
    this.$ = tmp;


break;
case 98:

    var tmp = new Nodo("ATRIBUTO","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("identi",$$[$0].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo(tmp2);
    this.$ = tmp;

break;
case 99:

    var tmp = new Nodo("ATRIBUTO","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 100:

    var tmp = new Nodo("ATRIBUTO","noterminal",yylineno,0,countNodo);
    countNodo++;
    
    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
case 101:

    var tmp = new Nodo("ATRIB","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("ATRIB","this",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo(tmp2);
    this.$ = tmp;

break;
case 102:

    var tmp = new Nodo("ATRIB","noterminal",yylineno,0,countNodo);
    countNodo++;
    var tmp2 = new Nodo("identi",$$[$0].replace("\"","").replace("\"",""),yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo(tmp2);
    this.$ = tmp;

break;
case 103: case 104:

    var tmp = new Nodo("ATRIB","noterminal",yylineno,0,countNodo);
    countNodo++;

    tmp.addHijo($$[$0]);
    this.$ = tmp;

break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:$V0,15:8,16:$V1,44:$V2,45:$V3,46:$V4},{1:[3]},{5:[1,12]},{5:[2,2],7:13,8:5,9:6,10:$V0,15:8,16:$V1,44:$V2,45:$V3,46:$V4},o($V5,[2,4]),o($V5,[2,5]),o($V5,[2,6]),{11:[1,14]},{16:[1,15]},o($V6,[2,43]),o($V6,[2,44]),o($V6,[2,45]),{1:[2,1]},o($V5,[2,3]),{12:[1,16]},{17:[1,17]},{13:[1,18]},{18:[1,19],21:[1,20]},{14:[1,21]},o($V7,$V1,{19:22,22:23,23:24,24:25,25:26,15:28,2:$V8,44:$V2,45:$V3,46:$V4}),{17:[1,29]},o($V5,[2,7]),o($V7,$V1,{23:24,24:25,25:26,15:28,22:31,2:$V8,20:[1,30],44:$V2,45:$V3,46:$V4}),o($V9,[2,11]),{14:[1,32]},{14:[1,33]},o($V9,[2,14]),{14:[1,34]},{17:[1,37],26:[1,35],27:36,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf},{18:[1,44]},o($V5,[2,8]),o($V9,[2,10]),o($V9,[2,12]),o($V9,[2,13]),o($V9,[2,15]),{17:$Vg,27:45,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf},{17:[1,47]},{11:[1,48],17:$Vh},o($Vi,[2,36]),o($Vi,[2,37]),o($Vi,[2,38]),o($Vi,[2,39]),o($Vi,[2,40]),o($Vi,[2,42]),o($V7,$V1,{22:23,23:24,24:25,25:26,15:28,19:49,2:$V8,44:$V2,45:$V3,46:$V4}),{17:[1,50],35:[1,51]},o([17,35],$Vh),{11:[1,54],14:[2,19],28:[1,52],30:53,31:55,32:$Vj},{13:[1,58],17:$Vg,27:60,34:57,37:59,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf},o($V7,$V1,{23:24,24:25,25:26,15:28,22:31,2:$V8,20:[1,61],44:$V2,45:$V3,46:$V4}),{14:[2,18],28:[1,62],30:63,31:55,32:$Vj},{11:[1,64]},{11:$Vk,12:$Vl,17:$Vm,29:65,48:66,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{14:[2,20],28:[1,94],31:95,32:$Vj},{13:[1,97],17:$Vg,27:60,34:96,37:59,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf},o($Vw,[2,25]),{33:[1,98]},{13:[1,99],36:$Vx},{18:[1,101]},o($Vy,[2,33]),{17:[1,102]},o($V5,[2,9]),{11:$Vk,12:$Vl,17:$Vm,29:103,48:66,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{14:[2,21],28:[1,104],31:95,32:$Vj},{13:[1,105]},{14:[2,17],47:$Vz},o($VA,[2,48],{49:$VB}),o($VC,[2,50],{51:$VD}),o($VE,[2,52]),{11:$Vk,12:$Vl,17:$Vm,54:109,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},o($VE,[2,54]),o($VE,[2,61],{56:[1,110],57:[1,111],58:[1,112],59:[1,113],60:[1,114],61:[1,115],62:$VF,64:$VG}),o($VH,[2,64],{65:$VI,67:$VJ}),o($VK,[2,67],{68:$VL,70:$VM}),o($VN,[2,70]),o($VN,[2,73],{72:[1,122],73:[1,123]}),{11:$Vk,12:$Vl,17:$Vm,74:124,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},o($VO,[2,75]),o($VO,[2,76]),o($VO,[2,77]),o($VO,[2,78]),o($VO,[2,79]),o($VO,[2,80]),o($VO,[2,81]),{11:$Vk,12:$Vl,17:$Vm,29:125,48:66,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},o($VO,[2,83]),o($VO,[2,84]),o($VO,[2,85],{89:[1,126]}),{17:[1,129],27:128,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf,84:127},o($VP,[2,97]),o($VP,[2,101]),o($VP,[2,102],{86:130,87:132,11:$VQ,32:$VR}),o($VP,[2,103]),o($VP,[2,104]),{11:$Vk,12:$Vl,17:$Vm,29:134,48:66,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},o($Vw,[2,24]),{13:[1,135],36:$Vx},{18:[1,136]},o($Vw,[2,26]),{18:[1,137]},{17:$Vg,27:60,37:138,38:$Va,39:$Vb,40:$Vc,41:$Vd,42:$Ve,43:$Vf},{20:[1,139]},o($Vy,[2,35],{31:55,30:140,32:$Vj}),{14:[2,16],47:$Vz},{11:$Vk,12:$Vl,17:$Vm,29:141,48:66,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{18:[1,142]},{11:$Vk,12:$Vl,17:$Vm,48:143,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,50:144,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,52:145,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},o($VE,[2,53]),{11:$Vk,12:$Vl,17:$Vm,55:146,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,55:147,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,55:148,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,55:149,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,55:150,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,55:151,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,63:152,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,63:153,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,64:$Vo,66:154,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,64:$Vo,66:155,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,64:$Vo,69:156,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},{11:$Vk,12:$Vl,17:$Vm,64:$Vo,69:157,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},o($VN,[2,71]),o($VN,[2,72]),o($VO,[2,74]),{13:[1,158],47:$Vz},{17:[1,160],84:162,88:161,90:159},o($VO,[2,86]),{32:$VR,86:163,87:132},{11:$VQ,32:$Vh},o($VP,[2,95],{87:164,32:$VR}),{11:$Vk,12:$Vl,13:[1,166],17:$Vm,29:167,48:66,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,85:165,88:92,91:89,92:$Vv},o($VS,[2,93]),{75:[1,168]},{14:[2,22],47:$Vz},{18:[1,169]},{20:[1,170]},{20:[1,171]},o($Vy,[2,32]),o($V9,[2,31]),o($Vy,[2,34],{31:95,32:$Vj}),{14:[2,23],47:$Vz},{20:[1,172]},o($VA,[2,47],{49:$VB}),o($VC,[2,49],{51:$VD}),o($VE,[2,51]),o($VE,[2,55],{62:$VF,64:$VG}),o($VE,[2,56],{62:$VF,64:$VG}),o($VE,[2,57],{62:$VF,64:$VG}),o($VE,[2,58],{62:$VF,64:$VG}),o($VE,[2,59],{62:$VF,64:$VG}),o($VE,[2,60],{62:$VF,64:$VG}),o($VH,[2,62],{65:$VI,67:$VJ}),o($VH,[2,63],{65:$VI,67:$VJ}),o($VK,[2,65],{68:$VL,70:$VM}),o($VK,[2,66],{68:$VL,70:$VM}),o($VN,[2,68]),o($VN,[2,69]),o($VO,[2,82]),o($VP,[2,96]),o($VP,[2,98],{86:130,87:132,11:$VQ,32:$VR}),o($VP,[2,99]),o($VP,[2,100]),o($VO,[2,91],{87:164,32:$VR}),o($VS,[2,92]),{13:[1,173],36:[1,174]},o($VP,[2,88]),o($Vy,[2,90],{47:$Vz}),{33:[1,175]},{20:[1,176]},o($V9,[2,28]),o($V9,[2,30]),o($V9,[2,29]),o($VP,[2,87]),{11:$Vk,12:$Vl,17:$Vm,29:177,48:66,50:67,52:68,53:$Vn,54:70,55:71,63:72,64:$Vo,66:73,69:74,71:75,74:77,75:$Vp,76:$Vq,77:$Vr,78:$Vs,79:$Vt,80:85,81:86,82:87,83:$Vu,84:93,88:92,91:89,92:$Vv},o($VS,[2,94]),o($V9,[2,27]),o($Vy,[2,89],{47:$Vz})],
defaultActions: {12:[2,1]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

    var countNodo=0;
    var raizArbol;

    var Error = /** @class */ (function () {
    function Error(ptoken, plinea, pcolumna, ptipo, desc) {
    this.lexema = ptoken;
    this.linea = plinea + 1;
    this.columna = pcolumna + 1;
    this.tipo = ptipo;
    this.descripcion = desc;
}
    return Error;
}());

var ListaErrores=new Array();

  

exports.__esModule = true;
require("collections/shim-array");
require("collections/listen/array-changes");
var Nodo = /** @class */ (function () {
    function Nodo(etq, lex, linea, columna, ide) {
        this.etiqueta = etq;
        this.lexema = lex;
        this.linea = linea;
        this.columna = columna;
        this.id = ide;
        this.hijos = new Array();
        this.Value = "";
        this.tipoDato = "";
    }
    Nodo.prototype.addHijo = function (nuevo) {
        this.hijos.push(nuevo);
    };
    Nodo.prototype.NodoC1 = function (etq, lex, linea, columna, ide, val) {
        this.etiqueta = etq;
        this.lexema = lex;
        this.linea = linea;
        this.columna = columna;
        this.id = ide;
        this.Value = val;
        this.hijos = new Array();
    };
    return Nodo;
}());
exports.Nodo = Nodo;

/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 58
break;
case 1:return 59
break;
case 2:return 60
break;
case 3:return 16
break;
case 4:return 10
break;
case 5:return 45
break;
case 6:return 46
break;
case 7:return 44
break;
case 8:return 38
break;
case 9:return 39
break;
case 10:return 40
break;
case 11:return 41
break;
case 12:return 42
break;
case 13:return 35
break;
case 14:return 43
break;
case 15:return 21
break;
case 16:return 92
break;
case 17:return 'Rasbstract'
break;
case 18:return 'Rbreak'
break;
case 19:return 'R_case'
break;
case 20:return 'R_catch'
break;
case 21:return 'R_continue'
break;
case 22:return 'R_default'
break;
case 23:return 'R_do'
break;
case 24:return 'R_else'
break;
case 25:return 'R_for'
break;
case 26:return 'R_final'
break;
case 27:return 'R_graph_dot'
break;
case 28:return 'R_if'
break;
case 29:return 'R_instanceof'
break;
case 30:return 'R_message'
break;
case 31:return 83
break;
case 32:return 'R_object'
break;
case 33:return 'R_println'
break;
case 34:return 'R_return'
break;
case 35:return 'R_read_console'
break;
case 36:return 'R_read_file'
break;
case 37:return 26
break;
case 38:return 'R_str'
break;
case 39:return 'R_super'
break;
case 40:return 'R_switch'
break;
case 41:return 'R_toChar'
break;
case 42:return 'R_toDouble'
break;
case 43:return 'R_toString'
break;
case 44:return 'R_toInt'
break;
case 45:return 'R_try'
break;
case 46:return 'R_while'
break;
case 47:return 'R_write_file'
break;
case 48:return 47
break;
case 49:return 49
break;
case 50:return 51
break;
case 51:return 53
break;
case 52:return 56
break;
case 53:return 57
break;
case 54:return 61
break;
case 55:return 62
break;
case 56:return 64
break;
case 57:return 65
break;
case 58:return 67
break;
case 59:return 68
break;
case 60:return 70
break;
case 61:return 72
break;
case 62:return 73
break;
case 63:return 'RInterrogacion'
break;
case 64:return 'RDosPuntos'
break;
case 65:return 14
break;
case 66:return 36
break;
case 67:return 89
break;
case 68:return 77
break;
case 69:return 78
break;
case 70:return 79
break;
case 71:return 18
break;
case 72:return 20
break;
case 73:return 32
break;
case 74:return 33
break;
case 75:return 11
break;
case 76:return 13
break;
case 77:return 28
break;
case 78:return 75
break;
case 79:return 17
break;
case 80:return 12
break;
case 81:return 76
break;
case 82:/* skip whitespace */
break;
case 83:return 5
break;
case 84:
    var error= new Error(yy_.yytext, yy_.yylineno, 0, "Lexico", "Error Lexico en: "+yy_.yytext);
    ListaErrores.push(error);
break;
}
},
rules: [/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:class\b)/,/^(?:import\b)/,/^(?:private\b)/,/^(?:protected\b)/,/^(?:public\b)/,/^(?:int\b)/,/^(?:double\b)/,/^(?:char\b)/,/^(?:boolean\b)/,/^(?:String\b)/,/^(?:main\b)/,/^(?:void\b)/,/^(?:extends\b)/,/^(?:this\b)/,/^(?:abstract\b)/,/^(?:break\b)/,/^(?:case\b)/,/^(?:catch\b)/,/^(?:continue\b)/,/^(?:default\b)/,/^(?:do\b)/,/^(?:else\b)/,/^(?:for\b)/,/^(?:final\b)/,/^(?:graph_dot\b)/,/^(?:if\b)/,/^(?:instanceof\b)/,/^(?:message\b)/,/^(?:new\b)/,/^(?:Object\b)/,/^(?:println\b)/,/^(?:return\b)/,/^(?:read_console\b)/,/^(?:read_file\b)/,/^(?:static\b)/,/^(?:str\b)/,/^(?:super\b)/,/^(?:switch\b)/,/^(?:toChar\b)/,/^(?:toDouble\b)/,/^(?:toString\b)/,/^(?:toInt\b)/,/^(?:try\b)/,/^(?:while\b)/,/^(?:write_file\b)/,/^(?:\|\|)/,/^(?:\|\^)/,/^(?:&&)/,/^(?:!)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:\^)/,/^(?:%)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\?)/,/^(?::)/,/^(?:;)/,/^(?:,)/,/^(?:\.)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:null\b)/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:\()/,/^(?:\))/,/^(?:=)/,/^(?:-?[0-9]+(\.[0-9]+)?\b)/,/^(?:[a-zA-Z]([0-9A-Za-z]|_)*)/,/^(?:("[^\"]+"))/,/^(?:( \[a-zñA-ZÑ\] \| \[0-9\] ))/,/^(?:\s+)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = Lexico;
exports.Parser = Lexico.Parser;
exports.parse = function () { return Lexico.parse.apply(Lexico, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}